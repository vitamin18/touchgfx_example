
STM32F746Z_FSMC_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004204  0801f454  0801f454  0002f454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003d2  08023658  08023658  00033658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08023a2c  08023a2c  00033a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00001e00  08023a44  08023a44  00033a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000020  08025844  08025844  00035844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08025864  08025864  000400f8  2**0
                  CONTENTS
  8 .ARM          00000008  08025864  08025864  00035864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802586c  0802586c  000400f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0802586c  0802586c  0003586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08025880  08025880  00035880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f8  20000000  08025888  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00009fa4  200000f8  08025980  000400f8  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2000a09c  08025980  0004a09c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0009040d  00000000  00000000  00040128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00010ff4  00000000  00000000  000d0535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ea8  00000000  00000000  000e1530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002a50  00000000  00000000  000e43d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e821  00000000  00000000  000e6e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00035781  00000000  00000000  000f5649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011221c  00000000  00000000  0012adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0023cfe6  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000cbcc  00000000  00000000  0023d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f43c 	.word	0x0801f43c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	0801f43c 	.word	0x0801f43c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <MX_CRC_Init+0x40>)
 80005b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005d2:	f000 fef3 	bl	80013bc <HAL_CRC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005dc:	f000 fbca 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20009e90 	.word	0x20009e90
 80005e8:	40023000 	.word	0x40023000

080005ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_CRC_MspInit+0x38>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10b      	bne.n	8000616 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023000 	.word	0x40023000
 8000628:	40023800 	.word	0x40023800

0800062c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_DMA_Init+0x9c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <MX_DMA_Init+0x9c>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_DMA_Init+0x9c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_DMA_Init+0xa0>)
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <MX_DMA_Init+0xa4>)
 800064e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_DMA_Init+0xa0>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_DMA_Init+0xa0>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_DMA_Init+0xa0>)
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_DMA_Init+0xa0>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_DMA_Init+0xa0>)
 800066c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000670:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_DMA_Init+0xa0>)
 8000674:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000678:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_DMA_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_DMA_Init+0xa0>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_DMA_Init+0xa0>)
 8000688:	2204      	movs	r2, #4
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_DMA_Init+0xa0>)
 800068e:	2203      	movs	r2, #3
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_DMA_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DMA_Init+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_DMA_Init+0xa0>)
 80006a0:	f000 ff76 	bl	8001590 <HAL_DMA_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_DMA_Init+0x82>
  {
    Error_Handler();
 80006aa:	f000 fb63 	bl	8000d74 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2105      	movs	r1, #5
 80006b2:	2038      	movs	r0, #56	; 0x38
 80006b4:	f000 fe58 	bl	8001368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006b8:	2038      	movs	r0, #56	; 0x38
 80006ba:	f000 fe71 	bl	80013a0 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	20009eb4 	.word	0x20009eb4
 80006d0:	40026410 	.word	0x40026410

080006d4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_DMA2D_Init+0x60>)
 80006dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_DMA2D_Init+0x5c>)
 800070a:	f001 fa7f 	bl	8001c0c <HAL_DMA2D_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000714:	f000 fb2e 	bl	8000d74 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000718:	2101      	movs	r1, #1
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_DMA2D_Init+0x5c>)
 800071c:	f001 fbd0 	bl	8001ec0 <HAL_DMA2D_ConfigLayer>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000726:	f000 fb25 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20009f14 	.word	0x20009f14
 8000734:	4002b000 	.word	0x4002b000

08000738 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <HAL_DMA2D_MspInit+0x44>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d113      	bne.n	8000772 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_DMA2D_MspInit+0x48>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <HAL_DMA2D_MspInit+0x48>)
 8000750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_DMA2D_MspInit+0x48>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	205a      	movs	r0, #90	; 0x5a
 8000768:	f000 fdfe 	bl	8001368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800076c:	205a      	movs	r0, #90	; 0x5a
 800076e:	f000 fe17 	bl	80013a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	4002b000 	.word	0x4002b000
 8000780:	40023800 	.word	0x40023800

08000784 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_FMC_Init+0xf0>)
 80007b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_FMC_Init+0xf0>)
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <MX_FMC_Init+0xf4>)
 80007bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_FMC_Init+0xf0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_FMC_Init+0xf0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_FMC_Init+0xf0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_FMC_Init+0xf0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_FMC_Init+0xf0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_FMC_Init+0xf0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_FMC_Init+0xf0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_FMC_Init+0xf0>)
 80007ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_FMC_Init+0xf0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_FMC_Init+0xf0>)
 80007f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_FMC_Init+0xf0>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_FMC_Init+0xf0>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_FMC_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_FMC_Init+0xf0>)
 8000812:	2200      	movs	r2, #0
 8000814:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_FMC_Init+0xf0>)
 8000818:	2200      	movs	r2, #0
 800081a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800081c:	230f      	movs	r3, #15
 800081e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000820:	230f      	movs	r3, #15
 8000822:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 3;
 8000824:	2303      	movs	r3, #3
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 3;
 8000828:	2303      	movs	r3, #3
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800082c:	2310      	movs	r3, #16
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000830:	2311      	movs	r3, #17
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8000838:	230f      	movs	r3, #15
 800083a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800084c:	2311      	movs	r3, #17
 800084e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000854:	463a      	mov	r2, r7
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_FMC_Init+0xf0>)
 800085e:	f002 fa1f 	bl	8002ca0 <HAL_SRAM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_FMC_Init+0xe8>
  {
    Error_Handler( );
 8000868:	f000 fa84 	bl	8000d74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800086c:	bf00      	nop
 800086e:	3738      	adds	r7, #56	; 0x38
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20009f54 	.word	0x20009f54
 8000878:	a0000104 	.word	0xa0000104

0800087c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_FMC_MspInit+0x84>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d12f      	bne.n	80008f8 <HAL_FMC_MspInit+0x7c>
    return;
  }
  FMC_Initialized = 1;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_FMC_MspInit+0x84>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_FMC_MspInit+0x88>)
 80008a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_FMC_MspInit+0x88>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6393      	str	r3, [r2, #56]	; 0x38
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_FMC_MspInit+0x88>)
 80008ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008b6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80008ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c8:	230c      	movs	r3, #12
 80008ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <HAL_FMC_MspInit+0x8c>)
 80008d2:	f001 fb87 	bl	8001fe4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80008d6:	f64c 03b3 	movw	r3, #51379	; 0xc8b3
 80008da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <HAL_FMC_MspInit+0x90>)
 80008f2:	f001 fb77 	bl	8001fe4 <HAL_GPIO_Init>
 80008f6:	e000      	b.n	80008fa <HAL_FMC_MspInit+0x7e>
    return;
 80008f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000114 	.word	0x20000114
 8000904:	40023800 	.word	0x40023800
 8000908:	40021000 	.word	0x40021000
 800090c:	40020c00 	.word	0x40020c00

08000910 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000918:	f7ff ffb0 	bl	800087c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000118 	.word	0x20000118
 8000954:	2000016c 	.word	0x2000016c

08000958 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <vApplicationGetTimerTaskMemory+0x2c>)
 8000968:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <vApplicationGetTimerTaskMemory+0x30>)
 800096e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000976:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	2000036c 	.word	0x2000036c
 8000988:	200003c0 	.word	0x200003c0

0800098c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b092      	sub	sp, #72	; 0x48
 8000990:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of screen_frame_buffer_sem */
  osSemaphoreDef(screen_frame_buffer_sem);
 8000992:	2300      	movs	r3, #0
 8000994:	643b      	str	r3, [r7, #64]	; 0x40
 8000996:	2300      	movs	r3, #0
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
  screen_frame_buffer_semHandle = osSemaphoreCreate(osSemaphore(screen_frame_buffer_sem), 1);
 800099a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 ff33 	bl	800380c <osSemaphoreCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_FREERTOS_Init+0x8c>)
 80009aa:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of signalVsync */
  osTimerDef(signalVsync, signalVsyncCallback);
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_FREERTOS_Init+0x90>)
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  signalVsyncHandle = osTimerCreate(osTimer(signalVsync), osTimerPeriodic, NULL);
 80009b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fead 	bl	800371c <osTimerCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_FREERTOS_Init+0x94>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_FREERTOS_Init+0x98>)
 80009ca:	f107 041c 	add.w	r4, r7, #28
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fe39 	bl	800365a <osThreadCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <MX_FREERTOS_Init+0x9c>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonTask */
  osThreadDef(ButtonTask, StartButtonTask, osPriorityIdle, 0, 256);
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_FREERTOS_Init+0xa0>)
 80009f0:	463c      	mov	r4, r7
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 8000a00:	463b      	mov	r3, r7
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fe28 	bl	800365a <osThreadCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <MX_FREERTOS_Init+0xa4>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a10:	bf00      	nop
 8000a12:	3748      	adds	r7, #72	; 0x48
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	20009fa0 	.word	0x20009fa0
 8000a1c:	08000a87 	.word	0x08000a87
 8000a20:	20009fa8 	.word	0x20009fa8
 8000a24:	0801f46c 	.word	0x0801f46c
 8000a28:	20009fa4 	.word	0x20009fa4
 8000a2c:	0801f488 	.word	0x0801f488
 8000a30:	20009fac 	.word	0x20009fac

08000a34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <StartDefaultTask+0x38>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <StartDefaultTask+0x3c>)
 8000a42:	f000 ffdd 	bl	8001a00 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <StartDefaultTask+0x40>)
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <StartDefaultTask+0x3c>)
 8000a4c:	f000 ffd8 	bl	8001a00 <HAL_DMA_RegisterCallback>
	HAL_EnableFMCMemorySwapping();
 8000a50:	f000 fbc2 	bl	80011d8 <HAL_EnableFMCMemorySwapping>
	OLED_Init_160128RGB();
 8000a54:	f00a fd36 	bl	800b4c4 <OLED_Init_160128RGB>
	osTimerStart(signalVsyncHandle, 10);
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <StartDefaultTask+0x44>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fe90 	bl	8003784 <osTimerStart>
	MX_TouchGFX_Process();
 8000a64:	f006 f838 	bl	8006ad8 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
 8000a68:	e7fe      	b.n	8000a68 <StartDefaultTask+0x34>
 8000a6a:	bf00      	nop
 8000a6c:	08000a9d 	.word	0x08000a9d
 8000a70:	20009eb4 	.word	0x20009eb4
 8000a74:	08000abd 	.word	0x08000abd
 8000a78:	20009fa8 	.word	0x20009fa8

08000a7c <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
//	bool state = false;
  /* Infinite loop */
  for(;;)
 8000a84:	e7fe      	b.n	8000a84 <StartButtonTask+0x8>

08000a86 <signalVsyncCallback>:
  /* USER CODE END StartButtonTask */
}

/* signalVsyncCallback function */
void signalVsyncCallback(void const * argument)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN signalVsyncCallback */
	touchgfx_signalVSyncTimer();
 8000a8e:	f009 f925 	bl	8009cdc <touchgfx_signalVSyncTimer>
  /* USER CODE END signalVsyncCallback */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <TransferComplete>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TransferComplete(DMA_HandleTypeDef *_hdma)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(screen_frame_buffer_semHandle);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <TransferComplete+0x1c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 ff2f 	bl	800390c <osSemaphoreRelease>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20009fa0 	.word	0x20009fa0

08000abc <TransferError>:

void TransferError(DMA_HandleTypeDef *_hdma)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_GPIO_Init+0xe4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2120      	movs	r1, #32
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0xe8>)
 8000b4c:	f001 fbf6 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_SHDN_GPIO_Port, OLED_SHDN_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2104      	movs	r1, #4
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xec>)
 8000b56:	f001 fbf1 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0xe8>)
 8000b72:	f001 fa37 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0xf0>)
 8000b8c:	f001 fa2a 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_SHDN_Pin;
 8000b90:	2304      	movs	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_GPIO_Init+0xec>)
 8000ba8:	f001 fa1c 	bl	8001fe4 <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40021400 	.word	0x40021400
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bd0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000be0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000be4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00b      	beq.n	8000c04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bec:	e000      	b.n	8000bf0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f9      	beq.n	8000bee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bfa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c04:	687b      	ldr	r3, [r7, #4]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write ( int file, char *ptr, int len )
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
  int i = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < len; i++ )
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e009      	b.n	8000c3c <_write+0x2a>
    ITM_SendChar ( *ptr++ );
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ffc7 	bl	8000bc4 <ITM_SendChar>
  for ( i = 0; i < len; i++ )
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf1      	blt.n	8000c28 <_write+0x16>
  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c52:	f000 fa94 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f813 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5a:	f7ff ff39 	bl	8000ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5e:	f7ff fce5 	bl	800062c <MX_DMA_Init>
  MX_FMC_Init();
 8000c62:	f7ff fd8f 	bl	8000784 <MX_FMC_Init>
  MX_TIM6_Init();
 8000c66:	f000 fa05 	bl	8001074 <MX_TIM6_Init>
  MX_CRC_Init();
 8000c6a:	f7ff fc9d 	bl	80005a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000c6e:	f7ff fd31 	bl	80006d4 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 8000c72:	f005 ff2b 	bl	8006acc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c76:	f7ff fe89 	bl	800098c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c7a:	f002 fce7 	bl	800364c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <main+0x30>

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f01d fbe6 	bl	801e460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <SystemClock_Config+0xc8>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <SystemClock_Config+0xc8>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemClock_Config+0xc8>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cec:	2308      	movs	r3, #8
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fb35 	bl	8002370 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d0c:	f000 f832 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fdc2 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d3a:	f000 f81b 	bl	8000d74 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d62:	f000 fa19 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM6) {
//  	touchgfx_signalVSyncTimer();
  }
  /* USER CODE END Callback 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40001400 	.word	0x40001400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f000 fad3 	bl	8001368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2037      	movs	r0, #55	; 0x37
 8000de6:	f000 fabf 	bl	8001368 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dea:	2037      	movs	r0, #55	; 0x37
 8000dec:	f000 fad8 	bl	80013a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_InitTick+0xa0>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_InitTick+0xa0>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_InitTick+0xa0>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 ff12 	bl	8002c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e18:	f001 fefc 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <HAL_InitTick+0xac>)
 8000e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e42:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e52:	f001 ff69 	bl	8002d28 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e5e:	f001 ffbb 	bl	8002dd8 <HAL_TIM_Base_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	20009fb0 	.word	0x20009fb0
 8000e7c:	40001400 	.word	0x40001400

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM6_DAC_IRQHandler+0x10>)
 8000eb2:	f002 f809 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20009ffc 	.word	0x20009ffc

08000ec0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <TIM7_IRQHandler+0x10>)
 8000ec6:	f001 ffff 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20009fb0 	.word	0x20009fb0

08000ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eda:	f000 fc07 	bl	80016ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20009eb4 	.word	0x20009eb4

08000ee8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA2D_IRQHandler+0x10>)
 8000eee:	f000 fed7 	bl	8001ca0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20009f14 	.word	0x20009f14

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_kill>:

int _kill(int pid, int sig)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f16:	f01d fa49 	bl	801e3ac <__errno>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2216      	movs	r2, #22
 8000f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_exit>:

void _exit (int status)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ffe7 	bl	8000f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f3e:	e7fe      	b.n	8000f3e <_exit+0x12>

08000f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e00a      	b.n	8000f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f52:	f3af 8000 	nop.w
 8000f56:	4601      	mov	r1, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf0      	blt.n	8000f52 <_read+0x12>
	}

return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f01d f9ca 	bl	801e3ac <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20050000 	.word	0x20050000
 8001044:	00000400 	.word	0x00000400
 8001048:	200007c0 	.word	0x200007c0
 800104c:	2000a0a0 	.word	0x2000a0a0

08001050 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_TIM6_Init+0x64>)
 8001086:	4a15      	ldr	r2, [pc, #84]	; (80010dc <MX_TIM6_Init+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6399;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_TIM6_Init+0x64>)
 800108c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001090:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_TIM6_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_TIM6_Init+0x64>)
 800109a:	220a      	movs	r2, #10
 800109c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_TIM6_Init+0x64>)
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM6_Init+0x64>)
 80010a6:	f001 fe3f 	bl	8002d28 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010b0:	f7ff fe60 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM6_Init+0x64>)
 80010c2:	f002 f8e9 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f7ff fe52 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20009ffc 	.word	0x20009ffc
 80010dc:	40001000 	.word	0x40001000

080010e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d113      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	2036      	movs	r0, #54	; 0x36
 8001110:	f000 f92a 	bl	8001368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001114:	2036      	movs	r0, #54	; 0x36
 8001116:	f000 f943 	bl	80013a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40001000 	.word	0x40001000
 8001128:	40023800 	.word	0x40023800

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001156:	f7ff ff7b 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f01d f93f 	bl	801e3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fd76 	bl	8000c4e <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001170:	08025888 	.word	0x08025888
  ldr r2, =_sbss
 8001174:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001178:	2000a09c 	.word	0x2000a09c

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>

0800117e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f8e5 	bl	8001352 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fe21 	bl	8000dd0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f7ff fdf7 	bl	8000d80 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	2000a048 	.word	0x2000a048

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000a048 	.word	0x2000a048

080011d8 <HAL_EnableFMCMemorySwapping>:
  *         and NOR/RAM is accessible at 0xC0000000   
  *
  * @retval None
  */
void HAL_EnableFMCMemorySwapping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_EnableFMCMemorySwapping+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_EnableFMCMemorySwapping+0x1c>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40013800 	.word	0x40013800

080011f8 <__NVIC_SetPriorityGrouping>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	4313      	orrs	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0000 	.word	0x05fa0000

08001240 <__NVIC_GetPriorityGrouping>:
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff4c 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137a:	f7ff ff61 	bl	8001240 <__NVIC_GetPriorityGrouping>
 800137e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff ffb1 	bl	80012ec <NVIC_EncodePriority>
 800138a:	4602      	mov	r2, r0
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff80 	bl	8001298 <__NVIC_SetPriority>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff54 	bl	800125c <__NVIC_EnableIRQ>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e054      	b.n	8001478 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7f5b      	ldrb	r3, [r3, #29]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f904 	bl	80005ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_CRC_Init+0xc4>)
 80013f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0218 	bic.w	r2, r2, #24
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e00c      	b.n	8001426 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	461a      	mov	r2, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f834 	bl	8001484 <HAL_CRCEx_Polynomial_Set>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e028      	b.n	8001478 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	795b      	ldrb	r3, [r3, #5]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f04f 32ff 	mov.w	r2, #4294967295
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	e004      	b.n	8001444 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6912      	ldr	r2, [r2, #16]
 8001442:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	04c11db7 	.word	0x04c11db7

08001484 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001494:	231f      	movs	r3, #31
 8001496:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001498:	bf00      	nop
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	613a      	str	r2, [r7, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_CRCEx_Polynomial_Set+0x16>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d846      	bhi.n	800154c <HAL_CRCEx_Polynomial_Set+0xc8>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	08001553 	.word	0x08001553
 80014c8:	0800154d 	.word	0x0800154d
 80014cc:	0800154d 	.word	0x0800154d
 80014d0:	0800154d 	.word	0x0800154d
 80014d4:	0800154d 	.word	0x0800154d
 80014d8:	0800154d 	.word	0x0800154d
 80014dc:	0800154d 	.word	0x0800154d
 80014e0:	0800154d 	.word	0x0800154d
 80014e4:	08001541 	.word	0x08001541
 80014e8:	0800154d 	.word	0x0800154d
 80014ec:	0800154d 	.word	0x0800154d
 80014f0:	0800154d 	.word	0x0800154d
 80014f4:	0800154d 	.word	0x0800154d
 80014f8:	0800154d 	.word	0x0800154d
 80014fc:	0800154d 	.word	0x0800154d
 8001500:	0800154d 	.word	0x0800154d
 8001504:	08001535 	.word	0x08001535
 8001508:	0800154d 	.word	0x0800154d
 800150c:	0800154d 	.word	0x0800154d
 8001510:	0800154d 	.word	0x0800154d
 8001514:	0800154d 	.word	0x0800154d
 8001518:	0800154d 	.word	0x0800154d
 800151c:	0800154d 	.word	0x0800154d
 8001520:	0800154d 	.word	0x0800154d
 8001524:	08001529 	.word	0x08001529
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d913      	bls.n	8001556 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001532:	e010      	b.n	8001556 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d90f      	bls.n	800155a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800153e:	e00c      	b.n	800155a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d90b      	bls.n	800155e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800154a:	e008      	b.n	800155e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	75fb      	strb	r3, [r7, #23]
      break;
 8001550:	e006      	b.n	8001560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001552:	bf00      	nop
 8001554:	e004      	b.n	8001560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001556:	bf00      	nop
 8001558:	e002      	b.n	8001560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800155a:	bf00      	nop
 800155c:	e000      	b.n	8001560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800155e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 0118 	bic.w	r1, r3, #24
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fe10 	bl	80011c0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e099      	b.n	80016e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015cc:	e00f      	b.n	80015ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ce:	f7ff fdf7 	bl	80011c0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d908      	bls.n	80015ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2220      	movs	r2, #32
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e078      	b.n	80016e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e8      	bne.n	80015ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_DMA_Init+0x158>)
 8001608:	4013      	ands	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	2b04      	cmp	r3, #4
 8001646:	d107      	bne.n	8001658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4313      	orrs	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2b04      	cmp	r3, #4
 8001680:	d117      	bne.n	80016b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00e      	beq.n	80016b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 fa3d 	bl	8001b14 <DMA_CheckFifoParam>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ae:	2301      	movs	r3, #1
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f9f4 	bl	8001aa8 <DMA_CalcBaseAndBitshift>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	f010803f 	.word	0xf010803f

080016ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_DMA_IRQHandler+0x258>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a92      	ldr	r2, [pc, #584]	; (8001948 <HAL_DMA_IRQHandler+0x25c>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0a9b      	lsrs	r3, r3, #10
 8001704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2208      	movs	r2, #8
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01a      	beq.n	8001758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0204 	bic.w	r2, r2, #4
 800173e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2208      	movs	r2, #8
 8001746:	409a      	lsls	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	2201      	movs	r2, #1
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d012      	beq.n	800178e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2201      	movs	r2, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	f043 0202 	orr.w	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	2204      	movs	r2, #4
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2204      	movs	r2, #4
 80017b2:	409a      	lsls	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	2210      	movs	r2, #16
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d043      	beq.n	800185c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d03c      	beq.n	800185c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2210      	movs	r2, #16
 80017e8:	409a      	lsls	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d018      	beq.n	800182e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d108      	bne.n	800181c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d024      	beq.n	800185c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
 800181a:	e01f      	b.n	800185c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01b      	beq.n	800185c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
 800182c:	e016      	b.n	800185c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0208 	bic.w	r2, r2, #8
 800184a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2220      	movs	r2, #32
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 808e 	beq.w	800198a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8086 	beq.w	800198a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2220      	movs	r2, #32
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b05      	cmp	r3, #5
 8001894:	d136      	bne.n	8001904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0216 	bic.w	r2, r2, #22
 80018a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <HAL_DMA_IRQHandler+0x1da>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	223f      	movs	r2, #63	; 0x3f
 80018dc:	409a      	lsls	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d07d      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
        }
        return;
 8001902:	e078      	b.n	80019f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01c      	beq.n	800194c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	2b00      	cmp	r3, #0
 8001926:	d030      	beq.n	800198a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e02b      	b.n	800198a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d027      	beq.n	800198a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
 8001942:	e022      	b.n	800198a <HAL_DMA_IRQHandler+0x29e>
 8001944:	20000004 	.word	0x20000004
 8001948:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	2b00      	cmp	r3, #0
 8001990:	d032      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d022      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d307      	bcc.n	80019d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f2      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x2ca>
 80019d0:	e000      	b.n	80019d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
 80019f4:	e000      	b.n	80019f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019f6:	bf00      	nop
    }
  }
}
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_DMA_RegisterCallback+0x20>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e03c      	b.n	8001a9a <HAL_DMA_RegisterCallback+0x9a>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d129      	bne.n	8001a88 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001a34:	7afb      	ldrb	r3, [r7, #11]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d829      	bhi.n	8001a8e <HAL_DMA_RegisterCallback+0x8e>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_DMA_RegisterCallback+0x40>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a61 	.word	0x08001a61
 8001a48:	08001a69 	.word	0x08001a69
 8001a4c:	08001a71 	.word	0x08001a71
 8001a50:	08001a79 	.word	0x08001a79
 8001a54:	08001a81 	.word	0x08001a81
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001a5e:	e017      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001a66:	e013      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001a6e:	e00f      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001a76:	e00b      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001a7e:	e007      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001a86:	e003      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]
 8001a8c:	e000      	b.n	8001a90 <HAL_DMA_RegisterCallback+0x90>
      break;
 8001a8e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3b10      	subs	r3, #16
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <DMA_CalcBaseAndBitshift+0x60>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <DMA_CalcBaseAndBitshift+0x64>)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d908      	bls.n	8001ae8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <DMA_CalcBaseAndBitshift+0x68>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	1d1a      	adds	r2, r3, #4
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae6:	e006      	b.n	8001af6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	aaaaaaab 	.word	0xaaaaaaab
 8001b0c:	08020210 	.word	0x08020210
 8001b10:	fffffc00 	.word	0xfffffc00

08001b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11f      	bne.n	8001b6e <DMA_CheckFifoParam+0x5a>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d856      	bhi.n	8001be2 <DMA_CheckFifoParam+0xce>
 8001b34:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <DMA_CheckFifoParam+0x28>)
 8001b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001b4d 	.word	0x08001b4d
 8001b40:	08001b5f 	.word	0x08001b5f
 8001b44:	08001b4d 	.word	0x08001b4d
 8001b48:	08001be3 	.word	0x08001be3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d046      	beq.n	8001be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b5c:	e043      	b.n	8001be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b66:	d140      	bne.n	8001bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6c:	e03d      	b.n	8001bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b76:	d121      	bne.n	8001bbc <DMA_CheckFifoParam+0xa8>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d837      	bhi.n	8001bee <DMA_CheckFifoParam+0xda>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <DMA_CheckFifoParam+0x70>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001b9b 	.word	0x08001b9b
 8001b8c:	08001b95 	.word	0x08001b95
 8001b90:	08001bad 	.word	0x08001bad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      break;
 8001b98:	e030      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d025      	beq.n	8001bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001baa:	e022      	b.n	8001bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb4:	d11f      	bne.n	8001bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bba:	e01c      	b.n	8001bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d903      	bls.n	8001bca <DMA_CheckFifoParam+0xb6>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d003      	beq.n	8001bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bc8:	e018      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001bce:	e015      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
      break;
 8001be0:	e00b      	b.n	8001bfa <DMA_CheckFifoParam+0xe6>
      break;
 8001be2:	bf00      	nop
 8001be4:	e00a      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
 8001be8:	e008      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;
 8001bea:	bf00      	nop
 8001bec:	e006      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e004      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e002      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8001bf6:	bf00      	nop
 8001bf8:	e000      	b.n	8001bfc <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e039      	b.n	8001c92 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fd80 	bl	8000738 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	f023 0107 	bic.w	r1, r3, #7
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_DMA2D_Init+0x90>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68d1      	ldr	r1, [r2, #12]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	ffffc000 	.word	0xffffc000

08001ca0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d026      	beq.n	8001d10 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d026      	beq.n	8001d68 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d021      	beq.n	8001d68 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d32:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	f043 0202 	orr.w	r2, r3, #2
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d026      	beq.n	8001dc0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	f043 0204 	orr.w	r2, r3, #4
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2204      	movs	r2, #4
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2204      	movs	r2, #4
 8001dea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f853 	bl	8001e98 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d024      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01f      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e14:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01f      	beq.n	8001e90 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f80e 	bl	8001eac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_DMA2D_ConfigLayer+0x20>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e079      	b.n	8001fd4 <HAL_DMA2D_ConfigLayer+0x114>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001f0c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	d003      	beq.n	8001f1e <HAL_DMA2D_ConfigLayer+0x5e>
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	d107      	bne.n	8001f2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	061b      	lsls	r3, r3, #24
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d120      	bne.n	8001f82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	ea02 0103 	and.w	r1, r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b0a      	cmp	r3, #10
 8001f68:	d003      	beq.n	8001f72 <HAL_DMA2D_ConfigLayer+0xb2>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	d127      	bne.n	8001fc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f80:	e01f      	b.n	8001fc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	ea02 0103 	and.w	r1, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b0a      	cmp	r3, #10
 8001faa:	d003      	beq.n	8001fb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d106      	bne.n	8001fc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001fc0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	ff03000f 	.word	0xff03000f

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e175      	b.n	80022f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8164 	bne.w	80022ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d00b      	beq.n	8002042 <HAL_GPIO_Init+0x5e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002036:	2b11      	cmp	r3, #17
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b12      	cmp	r3, #18
 8002040:	d130      	bne.n	80020a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0201 	and.w	r2, r3, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x100>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80be 	beq.w	80022ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a65      	ldr	r2, [pc, #404]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_GPIO_Init+0x324>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002186:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_GPIO_Init+0x328>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_GPIO_Init+0x32c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d037      	beq.n	8002222 <HAL_GPIO_Init+0x23e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_GPIO_Init+0x330>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d031      	beq.n	800221e <HAL_GPIO_Init+0x23a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a56      	ldr	r2, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x334>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <HAL_GPIO_Init+0x236>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_GPIO_Init+0x338>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x232>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_GPIO_Init+0x33c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x22e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <HAL_GPIO_Init+0x340>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x22a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_GPIO_Init+0x344>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x226>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_GPIO_Init+0x348>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x222>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a50      	ldr	r2, [pc, #320]	; (8002330 <HAL_GPIO_Init+0x34c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x21e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4f      	ldr	r2, [pc, #316]	; (8002334 <HAL_GPIO_Init+0x350>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x21a>
 80021fa:	2309      	movs	r3, #9
 80021fc:	e012      	b.n	8002224 <HAL_GPIO_Init+0x240>
 80021fe:	230a      	movs	r3, #10
 8002200:	e010      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002202:	2308      	movs	r3, #8
 8002204:	e00e      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002206:	2307      	movs	r3, #7
 8002208:	e00c      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800220a:	2306      	movs	r3, #6
 800220c:	e00a      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800220e:	2305      	movs	r3, #5
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x328>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_GPIO_Init+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f ae86 	bls.w	8002004 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40021400 	.word	0x40021400
 8002328:	40021800 	.word	0x40021800
 800232c:	40021c00 	.word	0x40021c00
 8002330:	40022000 	.word	0x40022000
 8002334:	40022400 	.word	0x40022400
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e291      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b96      	ldr	r3, [pc, #600]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d112      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
 80023ac:	4b90      	ldr	r3, [pc, #576]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	4b8d      	ldr	r3, [pc, #564]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x130>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e26b      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x7a>
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e02e      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x9c>
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7b      	ldr	r2, [pc, #492]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xc0>
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe feb6 	bl	80011c0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe feb2 	bl	80011c0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e21f      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fea2 	bl	80011c0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fe9e 	bl	80011c0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e20b      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x110>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d069      	beq.n	8002582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1df      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	493d      	ldr	r1, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e040      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fe54 	bl	80011c0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fe50 	bl	80011c0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1bd      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4929      	ldr	r1, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e018      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fe30 	bl	80011c0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fe2c 	bl	80011c0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e199      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d038      	beq.n	8002600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fe0d 	bl	80011c0 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe fe09 	bl	80011c0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e176      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x23a>
 80025c8:	e01a      	b.n	8002600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fdf3 	bl	80011c0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fdef 	bl	80011c0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d903      	bls.n	80025f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e15c      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
 80025f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b91      	ldr	r3, [pc, #580]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a4 	beq.w	8002756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a87      	ldr	r2, [pc, #540]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002642:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7e      	ldr	r2, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fe fdb7 	bl	80011c0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7fe fdb3 	bl	80011c0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	; 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e120      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31a>
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e02d      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x33c>
 8002692:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a66      	ldr	r2, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e01c      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_OscConfig+0x35e>
 80026b4:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a60      	ldr	r2, [pc, #384]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e00b      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ce:	4b5b      	ldr	r3, [pc, #364]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5a      	ldr	r2, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fd67 	bl	80011c0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe fd63 	bl	80011c0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0ce      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ee      	beq.n	80026f6 <HAL_RCC_OscConfig+0x386>
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fd51 	bl	80011c0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fd4d 	bl	80011c0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	4b40      	ldr	r3, [pc, #256]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ee      	bne.n	8002722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b3c      	ldr	r3, [pc, #240]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a4 	beq.w	80028a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d06b      	beq.n	8002844 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d149      	bne.n	8002808 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800277a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fd1e 	bl	80011c0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fd1a 	bl	80011c0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e087      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fcee 	bl	80011c0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fcea 	bl	80011c0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e057      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x478>
 8002806:	e04f      	b.n	80028a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fcd4 	bl	80011c0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fcd0 	bl	80011c0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03d      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x4ac>
 800283a:	e035      	b.n	80028a8 <HAL_RCC_OscConfig+0x538>
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x544>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d028      	beq.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d121      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d11a      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fc08 	bl	80011c0 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fc04 	bl	80011c0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1cc>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1d0>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f9b0 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	080201f8 	.word	0x080201f8
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	20000008 	.word	0x20000008

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a96:	2100      	movs	r1, #0
 8002a98:	6079      	str	r1, [r7, #4]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	60f9      	str	r1, [r7, #12]
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa6:	4952      	ldr	r1, [pc, #328]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa8:	6889      	ldr	r1, [r1, #8]
 8002aaa:	f001 010c 	and.w	r1, r1, #12
 8002aae:	2908      	cmp	r1, #8
 8002ab0:	d00d      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x3e>
 8002ab2:	2908      	cmp	r1, #8
 8002ab4:	f200 8094 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x150>
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x32>
 8002abc:	2904      	cmp	r1, #4
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ac0:	e08e      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ac4:	60bb      	str	r3, [r7, #8]
      break;
 8002ac6:	e08e      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002aca:	60bb      	str	r3, [r7, #8]
      break;
 8002acc:	e08b      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ace:	4948      	ldr	r1, [pc, #288]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad0:	6849      	ldr	r1, [r1, #4]
 8002ad2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ad6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ad8:	4945      	ldr	r1, [pc, #276]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ada:	6849      	ldr	r1, [r1, #4]
 8002adc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d024      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae4:	4942      	ldr	r1, [pc, #264]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ae6:	6849      	ldr	r1, [r1, #4]
 8002ae8:	0989      	lsrs	r1, r1, #6
 8002aea:	4608      	mov	r0, r1
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002af4:	f04f 0500 	mov.w	r5, #0
 8002af8:	ea00 0204 	and.w	r2, r0, r4
 8002afc:	ea01 0305 	and.w	r3, r1, r5
 8002b00:	493d      	ldr	r1, [pc, #244]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b02:	fb01 f003 	mul.w	r0, r1, r3
 8002b06:	2100      	movs	r1, #0
 8002b08:	fb01 f102 	mul.w	r1, r1, r2
 8002b0c:	1844      	adds	r4, r0, r1
 8002b0e:	493a      	ldr	r1, [pc, #232]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b10:	fba2 0101 	umull	r0, r1, r2, r1
 8002b14:	1863      	adds	r3, r4, r1
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	f7fd fbc6 	bl	80002b0 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e04a      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	461a      	mov	r2, r3
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	ea02 0400 	and.w	r4, r2, r0
 8002b46:	ea03 0501 	and.w	r5, r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	014b      	lsls	r3, r1, #5
 8002b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b5c:	0142      	lsls	r2, r0, #5
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	1b00      	subs	r0, r0, r4
 8002b64:	eb61 0105 	sbc.w	r1, r1, r5
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	018b      	lsls	r3, r1, #6
 8002b72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b76:	0182      	lsls	r2, r0, #6
 8002b78:	1a12      	subs	r2, r2, r0
 8002b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	00d9      	lsls	r1, r3, #3
 8002b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b8c:	00d0      	lsls	r0, r2, #3
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	1912      	adds	r2, r2, r4
 8002b94:	eb45 0303 	adc.w	r3, r5, r3
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	0299      	lsls	r1, r3, #10
 8002ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ba6:	0290      	lsls	r0, r2, #10
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f7fd fb7a 	bl	80002b0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	60bb      	str	r3, [r7, #8]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002be2:	60bb      	str	r3, [r7, #8]
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	68bb      	ldr	r3, [r7, #8]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	017d7840 	.word	0x017d7840

08002bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000004 	.word	0x20000004

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a9b      	lsrs	r3, r3, #10
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08020208 	.word	0x08020208

08002c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	220f      	movs	r2, #15
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_RCC_GetClockConfig+0x60>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e034      	b.n	8002d20 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7fd fe20 	bl	8000910 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 fb88 	bl	80033f0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	f000 fbf0 	bl	80034d0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6858      	ldr	r0, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	f000 fc3b 	bl	8003578 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	f041 0101 	orr.w	r1, r1, #1
 8002d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e049      	b.n	8002dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe f9c6 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f000 f9f6 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d001      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e054      	b.n	8002e9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d01d      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_TIM_Base_Start_IT+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_TIM_Base_Start_IT+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d115      	bne.n	8002e84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xec>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d015      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0xbe>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d011      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e82:	e008      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e000      	b.n	8002e98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40010400 	.word	0x40010400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40001800 	.word	0x40001800
 8002ec4:	00010007 	.word	0x00010007

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f905 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8f7 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f908 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8db 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8cd 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8de 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8b1 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8a3 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8b4 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f887 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f879 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f88a 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fe82 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9a8 	bl	80033c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003086:	d10e      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d107      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800309e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f99b 	bl	80033dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d10e      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d107      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f838 	bl	8003142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d10e      	bne.n	80030fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d107      	bne.n	80030fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f06f 0220 	mvn.w	r2, #32
 80030f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f95b 	bl	80033b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a40      	ldr	r2, [pc, #256]	; (800326c <TIM_Base_SetConfig+0x114>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <TIM_Base_SetConfig+0x118>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <TIM_Base_SetConfig+0x11c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <TIM_Base_SetConfig+0x120>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3a      	ldr	r2, [pc, #232]	; (800327c <TIM_Base_SetConfig+0x124>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <TIM_Base_SetConfig+0x114>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d027      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <TIM_Base_SetConfig+0x118>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d023      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <TIM_Base_SetConfig+0x11c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <TIM_Base_SetConfig+0x120>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <TIM_Base_SetConfig+0x124>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d017      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <TIM_Base_SetConfig+0x128>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <TIM_Base_SetConfig+0x12c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0x130>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0x134>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <TIM_Base_SetConfig+0x138>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <TIM_Base_SetConfig+0x13c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <TIM_Base_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <TIM_Base_SetConfig+0x124>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	615a      	str	r2, [r3, #20]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40010400 	.word	0x40010400
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	40001800 	.word	0x40001800
 8003290:	40001c00 	.word	0x40001c00
 8003294:	40002000 	.word	0x40002000

08003298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e06d      	b.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a30      	ldr	r2, [pc, #192]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2f      	ldr	r2, [pc, #188]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a20      	ldr	r2, [pc, #128]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003322:	d01d      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40010000 	.word	0x40010000
 800339c:	40010400 	.word	0x40010400
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40001800 	.word	0x40001800

080033b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock)); 
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003408:	60fb      	str	r3, [r7, #12]
  
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <FMC_NORSRAM_Init+0xdc>)
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WAITPOL   | FMC_BCR1_CPSIZE    | FMC_BCR1_WAITCFG  | \
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN | FMC_BCR1_WFDIS));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800341a:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8003420:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8003426:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 800342c:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 8003432:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	69db      	ldr	r3, [r3, #28]
                    Init->WaitSignalActive     |\
 8003438:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6a1b      	ldr	r3, [r3, #32]
                    Init->WriteOperation       |\
 800343e:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WaitSignal           |\
 8003444:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->ExtendedMode         |\
 800344a:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->AsynchronousWait     |\
 8003450:	431a      	orrs	r2, r3
                    Init->ContinuousClock      |\
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->WriteBurst           |\
 8003456:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    Init->ContinuousClock      |\
 800345c:	431a      	orrs	r2, r3
                    Init->WriteFifo);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->PageSize             |\
 8003462:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d103      	bne.n	800347a <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003478:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348e:	d10a      	bne.n	80034a6 <FMC_NORSRAM_Init+0xb6>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
  }
  if(Init->NSBank != FMC_NORSRAM_BANK1)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <FMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
  }
  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	ffc00480 	.word	0xffc00480

080034d0 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80034f2:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	681a      	ldr	r2, [r3, #0]
                   ((Timing->AddressHoldTime) << 4)          |\
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80034fe:	431a      	orrs	r2, r3
                   ((Timing->DataSetupTime) << 8)            |\
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	021b      	lsls	r3, r3, #8
                   ((Timing->AddressHoldTime) << 4)          |\
 8003506:	431a      	orrs	r2, r3
                   ((Timing->BusTurnAroundDuration) << 16)   |\
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	041b      	lsls	r3, r3, #16
                   ((Timing->DataSetupTime) << 8)            |\
 800350e:	431a      	orrs	r2, r3
                   (((Timing->CLKDivision)-1) << 20)         |\
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	3b01      	subs	r3, #1
 8003516:	051b      	lsls	r3, r3, #20
                   ((Timing->BusTurnAroundDuration) << 16)   |\
 8003518:	431a      	orrs	r2, r3
                   (((Timing->DataLatency)-2) << 24)         |\
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	3b02      	subs	r3, #2
 8003520:	061b      	lsls	r3, r3, #24
                   (((Timing->CLKDivision)-1) << 20)         |\
 8003522:	431a      	orrs	r2, r3
                    (Timing->AccessMode)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
                    );
  
  Device->BTCR[Bank + 1] = tmpr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6979      	ldr	r1, [r7, #20]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003548:	d10e      	bne.n	8003568 <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << 20)); 
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003552:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1) << 20);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	3b01      	subs	r3, #1
 800355a:	051b      	lsls	r3, r3, #20
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1] = tmpr;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d122      	bne.n	80035d8 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359a:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4)          |\
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80035ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8)            |\
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4)          |\
 80035b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16)   |\
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8)            |\
 80035be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16)   |\
 80035c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6979      	ldr	r1, [r7, #20]
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035d6:	e005      	b.n	80035e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	cff00000 	.word	0xcff00000

080035f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	2b84      	cmp	r3, #132	; 0x84
 800360c:	d005      	beq.n	800361a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800360e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	3303      	adds	r3, #3
 8003618:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800362e:	f3ef 8305 	mrs	r3, IPSR
 8003632:	607b      	str	r3, [r7, #4]
  return(result);
 8003634:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003650:	f001 fba8 	bl	8004da4 <vTaskStartScheduler>
  
  return osOK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	bd80      	pop	{r7, pc}

0800365a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800365a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365c:	b089      	sub	sp, #36	; 0x24
 800365e:	af04      	add	r7, sp, #16
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <osThreadCreate+0x54>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01c      	beq.n	80036ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685c      	ldr	r4, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681d      	ldr	r5, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691e      	ldr	r6, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ffb6 	bl	80035f8 <makeFreeRtosPriority>
 800368c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003696:	9202      	str	r2, [sp, #8]
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	9100      	str	r1, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4632      	mov	r2, r6
 80036a0:	4629      	mov	r1, r5
 80036a2:	4620      	mov	r0, r4
 80036a4:	f001 f9ac 	bl	8004a00 <xTaskCreateStatic>
 80036a8:	4603      	mov	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e01c      	b.n	80036e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685c      	ldr	r4, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ba:	b29e      	uxth	r6, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff98 	bl	80035f8 <makeFreeRtosPriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f107 030c 	add.w	r3, r7, #12
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	9200      	str	r2, [sp, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	4632      	mov	r2, r6
 80036d6:	4629      	mov	r1, r5
 80036d8:	4620      	mov	r0, r4
 80036da:	f001 f9f4 	bl	8004ac6 <xTaskCreate>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036e8:	68fb      	ldr	r3, [r7, #12]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <osDelay+0x16>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	e000      	b.n	800370a <osDelay+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fb14 	bl	8004d38 <vTaskDelay>
  
  return osOK;
 8003710:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	460b      	mov	r3, r1
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d013      	beq.n	800375a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <osTimerCreate+0x20>
 8003738:	2101      	movs	r1, #1
 800373a:	e000      	b.n	800373e <osTimerCreate+0x22>
 800373c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003746:	9201      	str	r2, [sp, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	460a      	mov	r2, r1
 800374e:	2101      	movs	r1, #1
 8003750:	480b      	ldr	r0, [pc, #44]	; (8003780 <osTimerCreate+0x64>)
 8003752:	f002 fa28 	bl	8005ba6 <xTimerCreateStatic>
 8003756:	4603      	mov	r3, r0
 8003758:	e00e      	b.n	8003778 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <osTimerCreate+0x48>
 8003760:	2201      	movs	r2, #1
 8003762:	e000      	b.n	8003766 <osTimerCreate+0x4a>
 8003764:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2101      	movs	r1, #1
 8003770:	4803      	ldr	r0, [pc, #12]	; (8003780 <osTimerCreate+0x64>)
 8003772:	f002 f9f7 	bl	8005b64 <xTimerCreate>
 8003776:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	0801f4a4 	.word	0x0801f4a4

08003784 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <osTimerStart+0x20>
    ticks = 1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80037a4:	f7ff ff40 	bl	8003628 <inHandlerMode>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01a      	beq.n	80037e4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	2200      	movs	r2, #0
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	2109      	movs	r1, #9
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f002 fa72 	bl	8005ca4 <xTimerGenericCommand>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <osTimerStart+0x48>
    {
      result = osErrorOS;
 80037c6:	23ff      	movs	r3, #255	; 0xff
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e018      	b.n	80037fe <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <osTimerStart+0x7a>
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <osTimerStart+0x84>)
 80037d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	e00c      	b.n	80037fe <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80037e4:	2300      	movs	r3, #0
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	2104      	movs	r1, #4
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f002 fa58 	bl	8005ca4 <xTimerGenericCommand>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <osTimerStart+0x7a>
      result = osErrorOS;
 80037fa:	23ff      	movs	r3, #255	; 0xff
 80037fc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80037fe:	697b      	ldr	r3, [r7, #20]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10a      	bne.n	800383a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2203      	movs	r2, #3
 800382a:	9200      	str	r2, [sp, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	2100      	movs	r1, #0
 8003830:	2001      	movs	r0, #1
 8003832:	f000 f9bf 	bl	8003bb4 <xQueueGenericCreateStatic>
 8003836:	4603      	mov	r3, r0
 8003838:	e016      	b.n	8003868 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	e014      	b.n	8003868 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d110      	bne.n	8003866 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003844:	2203      	movs	r2, #3
 8003846:	2100      	movs	r1, #0
 8003848:	2001      	movs	r0, #1
 800384a:	f000 fa35 	bl	8003cb8 <xQueueGenericCreate>
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <osSemaphoreCreate+0x56>
 8003856:	2300      	movs	r3, #0
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa8d 	bl	8003d7c <xQueueGenericSend>
      return sema;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	e000      	b.n	8003868 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003866:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	e03a      	b.n	80038fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d103      	bne.n	800389c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e009      	b.n	80038b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80038ac:	2301      	movs	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80038b0:	f7ff feba 	bl	8003628 <inHandlerMode>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d017      	beq.n	80038ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	461a      	mov	r2, r3
 80038c0:	2100      	movs	r1, #0
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fe90 	bl	80045e8 <xQueueReceiveFromISR>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80038ce:	23ff      	movs	r3, #255	; 0xff
 80038d0:	e015      	b.n	80038fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <osSemaphoreWait+0x8c>
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <osSemaphoreWait+0x98>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	e008      	b.n	80038fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fd67 	bl	80043c0 <xQueueSemaphoreTake>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80038f8:	23ff      	movs	r3, #255	; 0xff
 80038fa:	e000      	b.n	80038fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800391c:	f7ff fe84 	bl	8003628 <inHandlerMode>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fbcb 	bl	80040c8 <xQueueGiveFromISR>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003938:	23ff      	movs	r3, #255	; 0xff
 800393a:	e017      	b.n	800396c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d013      	beq.n	800396a <osSemaphoreRelease+0x5e>
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <osSemaphoreRelease+0x68>)
 8003944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	e00a      	b.n	800396a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003954:	2300      	movs	r3, #0
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa0e 	bl	8003d7c <xQueueGenericSend>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d001      	beq.n	800396a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003966:	23ff      	movs	r3, #255	; 0xff
 8003968:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f103 0208 	add.w	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 0208 	add.w	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0208 	add.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d103      	bne.n	8003a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e00c      	b.n	8003a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <vListInsert+0x2e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d2f6      	bcs.n	8003a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d103      	bne.n	8003ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10c      	bne.n	8003b0e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	b672      	cpsid	i
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	b662      	cpsie	i
 8003b08:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003b0e:	f002 fccd 	bl	80064ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	22ff      	movs	r2, #255	; 0xff
 8003b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d114      	bne.n	8003b8e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01a      	beq.n	8003ba2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3310      	adds	r3, #16
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fba9 	bl	80052c8 <xTaskRemoveFromEventList>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d012      	beq.n	8003ba2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <xQueueGenericReset+0xd0>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	e009      	b.n	8003ba2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3310      	adds	r3, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fef0 	bl	8003978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3324      	adds	r3, #36	; 0x24
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff feeb 	bl	8003978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ba2:	f002 fcb7 	bl	8006514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ba6:	2301      	movs	r3, #1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	; 0x38
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10c      	bne.n	8003be2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	b672      	cpsid	i
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	b662      	cpsie	i
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10c      	bne.n	8003c02 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	b672      	cpsid	i
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	b662      	cpsie	i
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <xQueueGenericCreateStatic+0x5a>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <xQueueGenericCreateStatic+0x5e>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericCreateStatic+0x60>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10c      	bne.n	8003c32 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	b672      	cpsid	i
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	b662      	cpsie	i
 8003c2c:	623b      	str	r3, [r7, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <xQueueGenericCreateStatic+0x8a>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueGenericCreateStatic+0x8e>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueGenericCreateStatic+0x90>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	b672      	cpsid	i
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	b662      	cpsie	i
 8003c5c:	61fb      	str	r3, [r7, #28]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c62:	2348      	movs	r3, #72	; 0x48
 8003c64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b48      	cmp	r3, #72	; 0x48
 8003c6a:	d00c      	beq.n	8003c86 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	b672      	cpsid	i
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	b662      	cpsie	i
 8003c80:	61bb      	str	r3, [r7, #24]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f847 	bl	8003d3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	; 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	b672      	cpsid	i
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	b662      	cpsie	i
 8003ce0:	613b      	str	r3, [r7, #16]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e004      	b.n	8003cfc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3348      	adds	r3, #72	; 0x48
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fcff 	bl	8006704 <pvPortMalloc>
 8003d06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d011      	beq.n	8003d32 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3348      	adds	r3, #72	; 0x48
 8003d16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d20:	79fa      	ldrb	r2, [r7, #7]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f805 	bl	8003d3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d32:	69bb      	ldr	r3, [r7, #24]
	}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e002      	b.n	8003d5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	69b8      	ldr	r0, [r7, #24]
 8003d6e:	f7ff feb7 	bl	8003ae0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <xQueueGenericSend+0x36>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	b672      	cpsid	i
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	b662      	cpsie	i
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <xQueueGenericSend+0x44>
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <xQueueGenericSend+0x48>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <xQueueGenericSend+0x4a>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <xQueueGenericSend+0x68>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	b672      	cpsid	i
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	b662      	cpsie	i
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d103      	bne.n	8003df2 <xQueueGenericSend+0x76>
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <xQueueGenericSend+0x7a>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericSend+0x7c>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <xQueueGenericSend+0x9a>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	b672      	cpsid	i
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	b662      	cpsie	i
 8003e10:	623b      	str	r3, [r7, #32]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e16:	f001 fc1b 	bl	8005650 <xTaskGetSchedulerState>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <xQueueGenericSend+0xaa>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <xQueueGenericSend+0xae>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <xQueueGenericSend+0xb0>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10c      	bne.n	8003e4a <xQueueGenericSend+0xce>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	b672      	cpsid	i
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	b662      	cpsie	i
 8003e44:	61fb      	str	r3, [r7, #28]
}
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e4a:	f002 fb2f 	bl	80064ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <xQueueGenericSend+0xe4>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d129      	bne.n	8003eb4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e66:	f000 fc5d 	bl	8004724 <prvCopyDataToQueue>
 8003e6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	3324      	adds	r3, #36	; 0x24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fa25 	bl	80052c8 <xTaskRemoveFromEventList>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <xQueueGenericSend+0x208>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	e00a      	b.n	8003eac <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e9c:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <xQueueGenericSend+0x208>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eac:	f002 fb32 	bl	8006514 <vPortExitCritical>
				return pdPASS;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e063      	b.n	8003f7c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eba:	f002 fb2b 	bl	8006514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e05c      	b.n	8003f7c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fa5f 	bl	8005390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ed6:	f002 fb1d 	bl	8006514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eda:	f000 ffcd 	bl	8004e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ede:	f002 fae5 	bl	80064ac <vPortEnterCritical>
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d103      	bne.n	8003ef8 <xQueueGenericSend+0x17c>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efe:	b25b      	sxtb	r3, r3
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSend+0x192>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f0e:	f002 fb01 	bl	8006514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f12:	1d3a      	adds	r2, r7, #4
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fa4e 	bl	80053bc <xTaskCheckForTimeOut>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d124      	bne.n	8003f70 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f28:	f000 fcf4 	bl	8004914 <prvIsQueueFull>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	3310      	adds	r3, #16
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f970 	bl	8005220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f42:	f000 fc7f 	bl	8004844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f46:	f000 ffa5 	bl	8004e94 <xTaskResumeAll>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f af7c 	bne.w	8003e4a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <xQueueGenericSend+0x208>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	e772      	b.n	8003e4a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f66:	f000 fc6d 	bl	8004844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f6a:	f000 ff93 	bl	8004e94 <xTaskResumeAll>
 8003f6e:	e76c      	b.n	8003e4a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f72:	f000 fc67 	bl	8004844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f76:	f000 ff8d 	bl	8004e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3738      	adds	r7, #56	; 0x38
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10c      	bne.n	8003fba <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	b672      	cpsid	i
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	b662      	cpsie	i
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <xQueueGenericSendFromISR+0x40>
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <xQueueGenericSendFromISR+0x44>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <xQueueGenericSendFromISR+0x46>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	b672      	cpsid	i
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	b662      	cpsie	i
 8003fe6:	623b      	str	r3, [r7, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d103      	bne.n	8003ffa <xQueueGenericSendFromISR+0x72>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <xQueueGenericSendFromISR+0x76>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <xQueueGenericSendFromISR+0x78>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10c      	bne.n	800401e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	b672      	cpsid	i
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	b662      	cpsie	i
 8004018:	61fb      	str	r3, [r7, #28]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800401e:	f002 fb2d 	bl	800667c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004022:	f3ef 8211 	mrs	r2, BASEPRI
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	b672      	cpsid	i
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	b662      	cpsie	i
 800403a:	61ba      	str	r2, [r7, #24]
 800403c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800403e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <xQueueGenericSendFromISR+0xcc>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d12c      	bne.n	80040ae <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004064:	f000 fb5e 	bl	8004724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004068:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d112      	bne.n	8004098 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f922 	bl	80052c8 <xTaskRemoveFromEventList>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e007      	b.n	80040a8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800409c:	3301      	adds	r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	b25a      	sxtb	r2, r3
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040a8:	2301      	movs	r3, #1
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040ac:	e001      	b.n	80040b2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3738      	adds	r7, #56	; 0x38
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10c      	bne.n	80040f6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	b672      	cpsid	i
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	b662      	cpsie	i
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <xQueueGiveFromISR+0x50>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	b672      	cpsid	i
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	b662      	cpsie	i
 8004112:	61fb      	str	r3, [r7, #28]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <xQueueGiveFromISR+0x60>
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <xQueueGiveFromISR+0x64>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <xQueueGiveFromISR+0x66>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <xQueueGiveFromISR+0x84>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	b672      	cpsid	i
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	b662      	cpsie	i
 8004146:	61bb      	str	r3, [r7, #24]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800414c:	f002 fa96 	bl	800667c <vPortValidateInterruptPriority>
	__asm volatile
 8004150:	f3ef 8211 	mrs	r2, BASEPRI
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	b672      	cpsid	i
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	b662      	cpsie	i
 8004168:	617a      	str	r2, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800416c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417c:	429a      	cmp	r2, r3
 800417e:	d22b      	bcs.n	80041d8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d112      	bne.n	80041c2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f88d 	bl	80052c8 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	b25a      	sxtb	r2, r3
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
 80041d6:	e001      	b.n	80041dc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f383 8811 	msr	BASEPRI, r3
}
 80041e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3738      	adds	r7, #56	; 0x38
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <xQueueReceive+0x34>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	b672      	cpsid	i
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	b662      	cpsie	i
 8004222:	623b      	str	r3, [r7, #32]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueReceive+0x42>
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <xQueueReceive+0x46>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueReceive+0x48>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <xQueueReceive+0x66>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	b672      	cpsid	i
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	b662      	cpsie	i
 8004254:	61fb      	str	r3, [r7, #28]
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800425a:	f001 f9f9 	bl	8005650 <xTaskGetSchedulerState>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <xQueueReceive+0x76>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <xQueueReceive+0x7a>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <xQueueReceive+0x7c>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10c      	bne.n	800428e <xQueueReceive+0x9a>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	b672      	cpsid	i
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	b662      	cpsie	i
 8004288:	61bb      	str	r3, [r7, #24]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800428e:	f002 f90d 	bl	80064ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01f      	beq.n	80042de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a2:	f000 faa9 	bl	80047f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00f      	beq.n	80042d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	3310      	adds	r3, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f804 	bl	80052c8 <xTaskRemoveFromEventList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <xQueueReceive+0x1c8>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042d6:	f002 f91d 	bl	8006514 <vPortExitCritical>
				return pdPASS;
 80042da:	2301      	movs	r3, #1
 80042dc:	e069      	b.n	80043b2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042e4:	f002 f916 	bl	8006514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e062      	b.n	80043b2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f2:	f107 0310 	add.w	r3, r7, #16
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f84a 	bl	8005390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004300:	f002 f908 	bl	8006514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004304:	f000 fdb8 	bl	8004e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004308:	f002 f8d0 	bl	80064ac <vPortEnterCritical>
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004312:	b25b      	sxtb	r3, r3
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d103      	bne.n	8004322 <xQueueReceive+0x12e>
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004328:	b25b      	sxtb	r3, r3
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d103      	bne.n	8004338 <xQueueReceive+0x144>
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004338:	f002 f8ec 	bl	8006514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800433c:	1d3a      	adds	r2, r7, #4
 800433e:	f107 0310 	add.w	r3, r7, #16
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f839 	bl	80053bc <xTaskCheckForTimeOut>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d123      	bne.n	8004398 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004352:	f000 fac9 	bl	80048e8 <prvIsQueueEmpty>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	3324      	adds	r3, #36	; 0x24
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ff5b 	bl	8005220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800436a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436c:	f000 fa6a 	bl	8004844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004370:	f000 fd90 	bl	8004e94 <xTaskResumeAll>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d189      	bne.n	800428e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xQueueReceive+0x1c8>)
 800437c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	e780      	b.n	800428e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800438c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438e:	f000 fa59 	bl	8004844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004392:	f000 fd7f 	bl	8004e94 <xTaskResumeAll>
 8004396:	e77a      	b.n	800428e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	f000 fa53 	bl	8004844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800439e:	f000 fd79 	bl	8004e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a4:	f000 faa0 	bl	80048e8 <prvIsQueueEmpty>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f43f af6f 	beq.w	800428e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3730      	adds	r7, #48	; 0x30
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10c      	bne.n	80043f6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	b672      	cpsid	i
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	b662      	cpsie	i
 80043f0:	623b      	str	r3, [r7, #32]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	b672      	cpsid	i
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	b662      	cpsie	i
 8004412:	61fb      	str	r3, [r7, #28]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004418:	f001 f91a 	bl	8005650 <xTaskGetSchedulerState>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <xQueueSemaphoreTake+0x68>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xQueueSemaphoreTake+0x6c>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xQueueSemaphoreTake+0x6e>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	61bb      	str	r3, [r7, #24]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800444c:	f002 f82e 	bl	80064ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d024      	beq.n	80044a6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	1e5a      	subs	r2, r3, #1
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800446c:	f001 fab6 	bl	80059dc <pvTaskIncrementMutexHeldCount>
 8004470:	4602      	mov	r2, r0
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00f      	beq.n	800449e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	3310      	adds	r3, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f000 ff20 	bl	80052c8 <xTaskRemoveFromEventList>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800448e:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <xQueueSemaphoreTake+0x224>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800449e:	f002 f839 	bl	8006514 <vPortExitCritical>
				return pdPASS;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e099      	b.n	80045da <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	b672      	cpsid	i
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	b662      	cpsie	i
 80044c6:	617b      	str	r3, [r7, #20]
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80044cc:	f002 f822 	bl	8006514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e082      	b.n	80045da <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ff56 	bl	8005390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044e8:	f002 f814 	bl	8006514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ec:	f000 fcc4 	bl	8004e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044f0:	f001 ffdc 	bl	80064ac <vPortEnterCritical>
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d103      	bne.n	800450a <xQueueSemaphoreTake+0x14a>
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004510:	b25b      	sxtb	r3, r3
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d103      	bne.n	8004520 <xQueueSemaphoreTake+0x160>
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004520:	f001 fff8 	bl	8006514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004524:	463a      	mov	r2, r7
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 ff45 	bl	80053bc <xTaskCheckForTimeOut>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d132      	bne.n	800459e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800453a:	f000 f9d5 	bl	80048e8 <prvIsQueueEmpty>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d026      	beq.n	8004592 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800454c:	f001 ffae 	bl	80064ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f899 	bl	800568c <xTaskPriorityInherit>
 800455a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800455c:	f001 ffda 	bl	8006514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fe59 	bl	8005220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800456e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004570:	f000 f968 	bl	8004844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004574:	f000 fc8e 	bl	8004e94 <xTaskResumeAll>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f47f af66 	bne.w	800444c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <xQueueSemaphoreTake+0x224>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	e75c      	b.n	800444c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004594:	f000 f956 	bl	8004844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004598:	f000 fc7c 	bl	8004e94 <xTaskResumeAll>
 800459c:	e756      	b.n	800444c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800459e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045a0:	f000 f950 	bl	8004844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045a4:	f000 fc76 	bl	8004e94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045aa:	f000 f99d 	bl	80048e8 <prvIsQueueEmpty>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f43f af4b 	beq.w	800444c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80045bc:	f001 ff76 	bl	80064ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045c2:	f000 f897 	bl	80046f4 <prvGetDisinheritPriorityAfterTimeout>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f966 	bl	80058a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80045d4:	f001 ff9e 	bl	8006514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3738      	adds	r7, #56	; 0x38
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08e      	sub	sp, #56	; 0x38
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	b672      	cpsid	i
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	b662      	cpsie	i
 8004612:	623b      	str	r3, [r7, #32]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueReceiveFromISR+0x3e>
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueReceiveFromISR+0x42>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueReceiveFromISR+0x44>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10c      	bne.n	800464a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	b672      	cpsid	i
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	b662      	cpsie	i
 8004644:	61fb      	str	r3, [r7, #28]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800464a:	f002 f817 	bl	800667c <vPortValidateInterruptPriority>
	__asm volatile
 800464e:	f3ef 8211 	mrs	r2, BASEPRI
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	b672      	cpsid	i
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	b662      	cpsie	i
 8004666:	61ba      	str	r2, [r7, #24]
 8004668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800466a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02f      	beq.n	80046da <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004688:	f000 f8b6 	bl	80047f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d112      	bne.n	80046c4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	3310      	adds	r3, #16
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fe0c 	bl	80052c8 <xTaskRemoveFromEventList>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e007      	b.n	80046d4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c8:	3301      	adds	r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
 80046d8:	e001      	b.n	80046de <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80046da:	2300      	movs	r3, #0
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f383 8811 	msr	BASEPRI, r3
}
 80046e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3738      	adds	r7, #56	; 0x38
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d006      	beq.n	8004712 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e001      	b.n	8004716 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004716:	68fb      	ldr	r3, [r7, #12]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d14d      	bne.n	80047e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f81c 	bl	800578c <xTaskPriorityDisinherit>
 8004754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	e043      	b.n	80047e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d119      	bne.n	8004798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6858      	ldr	r0, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	461a      	mov	r2, r3
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	f019 fe68 	bl	801e444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	441a      	add	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d32b      	bcc.n	80047e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e026      	b.n	80047e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68d8      	ldr	r0, [r3, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	461a      	mov	r2, r3
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	f019 fe4e 	bl	801e444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	425b      	negs	r3, r3
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d207      	bcs.n	80047d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	425b      	negs	r3, r3
 80047ce:	441a      	add	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d105      	bne.n	80047e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047ee:	697b      	ldr	r3, [r7, #20]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d018      	beq.n	800483c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	441a      	add	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	d303      	bcc.n	800482c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68d9      	ldr	r1, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	461a      	mov	r2, r3
 8004836:	6838      	ldr	r0, [r7, #0]
 8004838:	f019 fe04 	bl	801e444 <memcpy>
	}
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800484c:	f001 fe2e 	bl	80064ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004858:	e011      	b.n	800487e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3324      	adds	r3, #36	; 0x24
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fd2e 	bl	80052c8 <xTaskRemoveFromEventList>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004872:	f000 fe09 	bl	8005488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	3b01      	subs	r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800487e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	dce9      	bgt.n	800485a <prvUnlockQueue+0x16>
 8004886:	e000      	b.n	800488a <prvUnlockQueue+0x46>
					break;
 8004888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004892:	f001 fe3f 	bl	8006514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004896:	f001 fe09 	bl	80064ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048a2:	e011      	b.n	80048c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3310      	adds	r3, #16
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fd09 	bl	80052c8 <xTaskRemoveFromEventList>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048bc:	f000 fde4 	bl	8005488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048c0:	7bbb      	ldrb	r3, [r7, #14]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dce9      	bgt.n	80048a4 <prvUnlockQueue+0x60>
 80048d0:	e000      	b.n	80048d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	22ff      	movs	r2, #255	; 0xff
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048dc:	f001 fe1a 	bl	8006514 <vPortExitCritical>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048f0:	f001 fddc 	bl	80064ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e001      	b.n	8004906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004906:	f001 fe05 	bl	8006514 <vPortExitCritical>

	return xReturn;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800491c:	f001 fdc6 	bl	80064ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	429a      	cmp	r2, r3
 800492a:	d102      	bne.n	8004932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e001      	b.n	8004936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 fded 	bl	8006514 <vPortExitCritical>

	return xReturn;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e014      	b.n	800497e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <vQueueAddToRegistry+0x50>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <vQueueAddToRegistry+0x50>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <vQueueAddToRegistry+0x50>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004976:	e006      	b.n	8004986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b07      	cmp	r3, #7
 8004982:	d9e7      	bls.n	8004954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000a04c 	.word	0x2000a04c

08004998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049a8:	f001 fd80 	bl	80064ac <vPortEnterCritical>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <vQueueWaitForMessageRestricted+0x2a>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d103      	bne.n	80049d8 <vQueueWaitForMessageRestricted+0x40>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	f001 fd9c 	bl	8006514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fc3d 	bl	800526c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff ff26 	bl	8004844 <prvUnlockQueue>
	}
 80049f8:	bf00      	nop
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af04      	add	r7, sp, #16
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	b672      	cpsid	i
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	b662      	cpsie	i
 8004a28:	623b      	str	r3, [r7, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10c      	bne.n	8004a4e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	b672      	cpsid	i
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	b662      	cpsie	i
 8004a48:	61fb      	str	r3, [r7, #28]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a4e:	2354      	movs	r3, #84	; 0x54
 8004a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b54      	cmp	r3, #84	; 0x54
 8004a56:	d00c      	beq.n	8004a72 <xTaskCreateStatic+0x72>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	b672      	cpsid	i
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	b662      	cpsie	i
 8004a6c:	61bb      	str	r3, [r7, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01e      	beq.n	8004ab8 <xTaskCreateStatic+0xb8>
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a92:	2300      	movs	r3, #0
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	9302      	str	r3, [sp, #8]
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f850 	bl	8004b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab2:	f000 f8d7 	bl	8004c64 <prvAddNewTaskToReadyList>
 8004ab6:	e001      	b.n	8004abc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004abc:	697b      	ldr	r3, [r7, #20]
	}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08c      	sub	sp, #48	; 0x30
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fe12 	bl	8006704 <pvPortMalloc>
 8004ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ae8:	2054      	movs	r0, #84	; 0x54
 8004aea:	f001 fe0b 	bl	8006704 <pvPortMalloc>
 8004aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
 8004afc:	e005      	b.n	8004b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004afe:	6978      	ldr	r0, [r7, #20]
 8004b00:	f001 feca 	bl	8006898 <vPortFree>
 8004b04:	e001      	b.n	8004b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9303      	str	r3, [sp, #12]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f80e 	bl	8004b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b34:	69f8      	ldr	r0, [r7, #28]
 8004b36:	f000 f895 	bl	8004c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e002      	b.n	8004b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b46:	69bb      	ldr	r3, [r7, #24]
	}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b68:	440b      	add	r3, r1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	b672      	cpsid	i
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	b662      	cpsie	i
 8004b96:	617b      	str	r3, [r7, #20]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01f      	beq.n	8004be2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e012      	b.n	8004bce <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	7819      	ldrb	r1, [r3, #0]
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3334      	adds	r3, #52	; 0x34
 8004bb8:	460a      	mov	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d9e9      	bls.n	8004ba8 <prvInitialiseNewTask+0x58>
 8004bd4:	e000      	b.n	8004bd8 <prvInitialiseNewTask+0x88>
			{
				break;
 8004bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be0:	e003      	b.n	8004bea <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d901      	bls.n	8004bf4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bf0:	2306      	movs	r3, #6
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fed4 	bl	80039b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3318      	adds	r3, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fecf 	bl	80039b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f1c3 0207 	rsb	r2, r3, #7
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	f001 fb22 	bl	800628c <pxPortInitialiseStack>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c5a:	bf00      	nop
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c6c:	f001 fc1e 	bl	80064ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c70:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <prvAddNewTaskToReadyList+0xb8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <prvAddNewTaskToReadyList+0xb8>)
 8004c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c7a:	4b29      	ldr	r3, [pc, #164]	; (8004d20 <prvAddNewTaskToReadyList+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c82:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <prvAddNewTaskToReadyList+0xbc>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <prvAddNewTaskToReadyList+0xb8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d110      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c90:	f000 fc1e 	bl	80054d0 <prvInitialiseTaskLists>
 8004c94:	e00d      	b.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c96:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <prvAddNewTaskToReadyList+0xc0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <prvAddNewTaskToReadyList+0xbc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d802      	bhi.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <prvAddNewTaskToReadyList+0xbc>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <prvAddNewTaskToReadyList+0xc4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <prvAddNewTaskToReadyList+0xc4>)
 8004cba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <prvAddNewTaskToReadyList+0xcc>)
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f7fe fe74 	bl	80039d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cea:	f001 fc13 	bl	8006514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <prvAddNewTaskToReadyList+0xc0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvAddNewTaskToReadyList+0xbc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d207      	bcs.n	8004d14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <prvAddNewTaskToReadyList+0xd0>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200008c4 	.word	0x200008c4
 8004d20:	200007c4 	.word	0x200007c4
 8004d24:	200008d0 	.word	0x200008d0
 8004d28:	200008e0 	.word	0x200008e0
 8004d2c:	200008cc 	.word	0x200008cc
 8004d30:	200007c8 	.word	0x200007c8
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <vTaskDelay+0x64>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <vTaskDelay+0x34>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	b672      	cpsid	i
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	b662      	cpsie	i
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004d6c:	f000 f884 	bl	8004e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d70:	2100      	movs	r1, #0
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fe46 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d78:	f000 f88c 	bl	8004e94 <xTaskResumeAll>
 8004d7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <vTaskDelay+0x68>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200008ec 	.word	0x200008ec
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004db2:	463a      	mov	r2, r7
 8004db4:	1d39      	adds	r1, r7, #4
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fdb2 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	9202      	str	r2, [sp, #8]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	4923      	ldr	r1, [pc, #140]	; (8004e60 <vTaskStartScheduler+0xbc>)
 8004dd4:	4823      	ldr	r0, [pc, #140]	; (8004e64 <vTaskStartScheduler+0xc0>)
 8004dd6:	f7ff fe13 	bl	8004a00 <xTaskCreateStatic>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <vTaskStartScheduler+0xc4>)
 8004dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <vTaskStartScheduler+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e001      	b.n	8004df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d102      	bne.n	8004dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004df8:	f000 fe6a 	bl	8005ad0 <xTimerCreateTimerTask>
 8004dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d118      	bne.n	8004e36 <vTaskStartScheduler+0x92>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	b672      	cpsid	i
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	b662      	cpsie	i
 8004e18:	613b      	str	r3, [r7, #16]
}
 8004e1a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <vTaskStartScheduler+0xc8>)
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <vTaskStartScheduler+0xcc>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <vTaskStartScheduler+0xd0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e30:	f001 fabe 	bl	80063b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e34:	e010      	b.n	8004e58 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d10c      	bne.n	8004e58 <vTaskStartScheduler+0xb4>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	b672      	cpsid	i
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	b662      	cpsie	i
 8004e52:	60fb      	str	r3, [r7, #12]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vTaskStartScheduler+0xb2>
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0801f4a8 	.word	0x0801f4a8
 8004e64:	080054a1 	.word	0x080054a1
 8004e68:	200008e8 	.word	0x200008e8
 8004e6c:	200008e4 	.word	0x200008e4
 8004e70:	200008d0 	.word	0x200008d0
 8004e74:	200008c8 	.word	0x200008c8

08004e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <vTaskSuspendAll+0x18>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a03      	ldr	r2, [pc, #12]	; (8004e90 <vTaskSuspendAll+0x18>)
 8004e84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	200008ec 	.word	0x200008ec

08004e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <xTaskResumeAll+0x118>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10c      	bne.n	8004ec4 <xTaskResumeAll+0x30>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	b672      	cpsid	i
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	b662      	cpsie	i
 8004ebe:	603b      	str	r3, [r7, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ec4:	f001 faf2 	bl	80064ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ec8:	4b38      	ldr	r3, [pc, #224]	; (8004fac <xTaskResumeAll+0x118>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	4a37      	ldr	r2, [pc, #220]	; (8004fac <xTaskResumeAll+0x118>)
 8004ed0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <xTaskResumeAll+0x118>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d161      	bne.n	8004f9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eda:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <xTaskResumeAll+0x11c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d05d      	beq.n	8004f9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee2:	e02e      	b.n	8004f42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <xTaskResumeAll+0x120>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3318      	adds	r3, #24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fdcb 	bl	8003a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fdc6 	bl	8003a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <xTaskResumeAll+0x124>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <xTaskResumeAll+0x124>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <xTaskResumeAll+0x128>)
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe fd52 	bl	80039d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <xTaskResumeAll+0x12c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xTaskResumeAll+0x120>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1cc      	bne.n	8004ee4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f50:	f000 fb5e 	bl	8005610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <xTaskResumeAll+0x134>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d010      	beq.n	8004f82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f60:	f000 f846 	bl	8004ff0 <xTaskIncrementTick>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f6a:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f1      	bne.n	8004f60 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <xTaskResumeAll+0x134>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <xTaskResumeAll+0x138>)
 8004f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f9e:	f001 fab9 	bl	8006514 <vPortExitCritical>

	return xAlreadyYielded;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200008ec 	.word	0x200008ec
 8004fb0:	200008c4 	.word	0x200008c4
 8004fb4:	20000884 	.word	0x20000884
 8004fb8:	200008cc 	.word	0x200008cc
 8004fbc:	200007c8 	.word	0x200007c8
 8004fc0:	200007c4 	.word	0x200007c4
 8004fc4:	200008d8 	.word	0x200008d8
 8004fc8:	200008d4 	.word	0x200008d4
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <xTaskGetTickCount+0x1c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fdc:	687b      	ldr	r3, [r7, #4]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200008c8 	.word	0x200008c8

08004ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b4f      	ldr	r3, [pc, #316]	; (8005138 <xTaskIncrementTick+0x148>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 808a 	bne.w	8005118 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005004:	4b4d      	ldr	r3, [pc, #308]	; (800513c <xTaskIncrementTick+0x14c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800500c:	4a4b      	ldr	r2, [pc, #300]	; (800513c <xTaskIncrementTick+0x14c>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d122      	bne.n	800505e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005018:	4b49      	ldr	r3, [pc, #292]	; (8005140 <xTaskIncrementTick+0x150>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	b672      	cpsid	i
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	b662      	cpsie	i
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskIncrementTick+0x4a>
 800503c:	4b40      	ldr	r3, [pc, #256]	; (8005140 <xTaskIncrementTick+0x150>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <xTaskIncrementTick+0x154>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3e      	ldr	r2, [pc, #248]	; (8005140 <xTaskIncrementTick+0x150>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <xTaskIncrementTick+0x154>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <xTaskIncrementTick+0x158>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <xTaskIncrementTick+0x158>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	f000 fad9 	bl	8005610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <xTaskIncrementTick+0x15c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d348      	bcc.n	80050fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005068:	4b35      	ldr	r3, [pc, #212]	; (8005140 <xTaskIncrementTick+0x150>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <xTaskIncrementTick+0x15c>)
 8005074:	f04f 32ff 	mov.w	r2, #4294967295
 8005078:	601a      	str	r2, [r3, #0]
					break;
 800507a:	e03e      	b.n	80050fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <xTaskIncrementTick+0x150>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d203      	bcs.n	800509c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005094:	4a2d      	ldr	r2, [pc, #180]	; (800514c <xTaskIncrementTick+0x15c>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800509a:	e02e      	b.n	80050fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3304      	adds	r3, #4
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe fcf3 	bl	8003a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3318      	adds	r3, #24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fcea 	bl	8003a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	2201      	movs	r2, #1
 80050be:	409a      	lsls	r2, r3
 80050c0:	4b23      	ldr	r3, [pc, #140]	; (8005150 <xTaskIncrementTick+0x160>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	4a22      	ldr	r2, [pc, #136]	; (8005150 <xTaskIncrementTick+0x160>)
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <xTaskIncrementTick+0x164>)
 80050d8:	441a      	add	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fe fc76 	bl	80039d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <xTaskIncrementTick+0x168>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3b9      	bcc.n	8005068 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f8:	e7b6      	b.n	8005068 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <xTaskIncrementTick+0x168>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4914      	ldr	r1, [pc, #80]	; (8005154 <xTaskIncrementTick+0x164>)
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d907      	bls.n	8005122 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e004      	b.n	8005122 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <xTaskIncrementTick+0x16c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	4a0f      	ldr	r2, [pc, #60]	; (800515c <xTaskIncrementTick+0x16c>)
 8005120:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <xTaskIncrementTick+0x170>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800512e:	697b      	ldr	r3, [r7, #20]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200008ec 	.word	0x200008ec
 800513c:	200008c8 	.word	0x200008c8
 8005140:	2000087c 	.word	0x2000087c
 8005144:	20000880 	.word	0x20000880
 8005148:	200008dc 	.word	0x200008dc
 800514c:	200008e4 	.word	0x200008e4
 8005150:	200008cc 	.word	0x200008cc
 8005154:	200007c8 	.word	0x200007c8
 8005158:	200007c4 	.word	0x200007c4
 800515c:	200008d4 	.word	0x200008d4
 8005160:	200008d8 	.word	0x200008d8

08005164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800516a:	4b28      	ldr	r3, [pc, #160]	; (800520c <vTaskSwitchContext+0xa8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005172:	4b27      	ldr	r3, [pc, #156]	; (8005210 <vTaskSwitchContext+0xac>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005178:	e041      	b.n	80051fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800517a:	4b25      	ldr	r3, [pc, #148]	; (8005210 <vTaskSwitchContext+0xac>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <vTaskSwitchContext+0xb0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800518e:	7afb      	ldrb	r3, [r7, #11]
 8005190:	f1c3 031f 	rsb	r3, r3, #31
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	4920      	ldr	r1, [pc, #128]	; (8005218 <vTaskSwitchContext+0xb4>)
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10c      	bne.n	80051c4 <vTaskSwitchContext+0x60>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	b672      	cpsid	i
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	b662      	cpsie	i
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vTaskSwitchContext+0x5e>
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <vTaskSwitchContext+0xb4>)
 80051d0:	4413      	add	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3308      	adds	r3, #8
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d104      	bne.n	80051f4 <vTaskSwitchContext+0x90>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <vTaskSwitchContext+0xb8>)
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	200008ec 	.word	0x200008ec
 8005210:	200008d8 	.word	0x200008d8
 8005214:	200008cc 	.word	0x200008cc
 8005218:	200007c8 	.word	0x200007c8
 800521c:	200007c4 	.word	0x200007c4

08005220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10c      	bne.n	800524a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	b672      	cpsid	i
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	b662      	cpsie	i
 8005244:	60fb      	str	r3, [r7, #12]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <vTaskPlaceOnEventList+0x48>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3318      	adds	r3, #24
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe fbe1 	bl	8003a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005258:	2101      	movs	r1, #1
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f000 fbd2 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200007c4 	.word	0x200007c4

0800526c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	b672      	cpsid	i
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	b662      	cpsie	i
 8005292:	617b      	str	r3, [r7, #20]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3318      	adds	r3, #24
 800529e:	4619      	mov	r1, r3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7fe fb96 	bl	80039d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	f000 fba5 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
	}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200007c4 	.word	0x200007c4

080052c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	b672      	cpsid	i
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	b662      	cpsie	i
 80052f2:	60fb      	str	r3, [r7, #12]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3318      	adds	r3, #24
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fbc5 	bl	8003a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005302:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <xTaskRemoveFromEventList+0xb0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d11c      	bne.n	8005344 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fbbc 	bl	8003a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <xTaskRemoveFromEventList+0xb4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <xTaskRemoveFromEventList+0xb4>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <xTaskRemoveFromEventList+0xb8>)
 8005334:	441a      	add	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7fe fb48 	bl	80039d2 <vListInsertEnd>
 8005342:	e005      	b.n	8005350 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3318      	adds	r3, #24
 8005348:	4619      	mov	r1, r3
 800534a:	480e      	ldr	r0, [pc, #56]	; (8005384 <xTaskRemoveFromEventList+0xbc>)
 800534c:	f7fe fb41 	bl	80039d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <xTaskRemoveFromEventList+0xc0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	429a      	cmp	r2, r3
 800535c:	d905      	bls.n	800536a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <xTaskRemoveFromEventList+0xc4>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e001      	b.n	800536e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200008ec 	.word	0x200008ec
 800537c:	200008cc 	.word	0x200008cc
 8005380:	200007c8 	.word	0x200007c8
 8005384:	20000884 	.word	0x20000884
 8005388:	200007c4 	.word	0x200007c4
 800538c:	200008d8 	.word	0x200008d8

08005390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <vTaskInternalSetTimeOutState+0x24>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <vTaskInternalSetTimeOutState+0x28>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	200008dc 	.word	0x200008dc
 80053b8:	200008c8 	.word	0x200008c8

080053bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	b672      	cpsid	i
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	b662      	cpsie	i
 80053e0:	613b      	str	r3, [r7, #16]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	b672      	cpsid	i
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	b662      	cpsie	i
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005406:	f001 f851 	bl	80064ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <xTaskCheckForTimeOut+0xc4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d102      	bne.n	800542a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	e023      	b.n	8005472 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <xTaskCheckForTimeOut+0xc8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d007      	beq.n	8005446 <xTaskCheckForTimeOut+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e015      	b.n	8005472 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	429a      	cmp	r2, r3
 800544e:	d20b      	bcs.n	8005468 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff97 	bl	8005390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e004      	b.n	8005472 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005472:	f001 f84f 	bl	8006514 <vPortExitCritical>

	return xReturn;
 8005476:	69fb      	ldr	r3, [r7, #28]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200008c8 	.word	0x200008c8
 8005484:	200008dc 	.word	0x200008dc

08005488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800548c:	4b03      	ldr	r3, [pc, #12]	; (800549c <vTaskMissedYield+0x14>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	200008d8 	.word	0x200008d8

080054a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054a8:	f000 f852 	bl	8005550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <prvIdleTask+0x28>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d9f9      	bls.n	80054a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <prvIdleTask+0x2c>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c4:	e7f0      	b.n	80054a8 <prvIdleTask+0x8>
 80054c6:	bf00      	nop
 80054c8:	200007c8 	.word	0x200007c8
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d6:	2300      	movs	r3, #0
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	e00c      	b.n	80054f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a12      	ldr	r2, [pc, #72]	; (8005530 <prvInitialiseTaskLists+0x60>)
 80054e8:	4413      	add	r3, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fa44 	bl	8003978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3301      	adds	r3, #1
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d9ef      	bls.n	80054dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <prvInitialiseTaskLists+0x64>)
 80054fe:	f7fe fa3b 	bl	8003978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005502:	480d      	ldr	r0, [pc, #52]	; (8005538 <prvInitialiseTaskLists+0x68>)
 8005504:	f7fe fa38 	bl	8003978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005508:	480c      	ldr	r0, [pc, #48]	; (800553c <prvInitialiseTaskLists+0x6c>)
 800550a:	f7fe fa35 	bl	8003978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800550e:	480c      	ldr	r0, [pc, #48]	; (8005540 <prvInitialiseTaskLists+0x70>)
 8005510:	f7fe fa32 	bl	8003978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005514:	480b      	ldr	r0, [pc, #44]	; (8005544 <prvInitialiseTaskLists+0x74>)
 8005516:	f7fe fa2f 	bl	8003978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvInitialiseTaskLists+0x78>)
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <prvInitialiseTaskLists+0x64>)
 800551e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvInitialiseTaskLists+0x7c>)
 8005522:	4a05      	ldr	r2, [pc, #20]	; (8005538 <prvInitialiseTaskLists+0x68>)
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200007c8 	.word	0x200007c8
 8005534:	20000854 	.word	0x20000854
 8005538:	20000868 	.word	0x20000868
 800553c:	20000884 	.word	0x20000884
 8005540:	20000898 	.word	0x20000898
 8005544:	200008b0 	.word	0x200008b0
 8005548:	2000087c 	.word	0x2000087c
 800554c:	20000880 	.word	0x20000880

08005550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005556:	e019      	b.n	800558c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005558:	f000 ffa8 	bl	80064ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <prvCheckTasksWaitingTermination+0x50>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fa8f 	bl	8003a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 8005580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005582:	f000 ffc7 	bl	8006514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f810 	bl	80055ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e1      	bne.n	8005558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000898 	.word	0x20000898
 80055a4:	200008c4 	.word	0x200008c4
 80055a8:	200008ac 	.word	0x200008ac

080055ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 f968 	bl	8006898 <vPortFree>
				vPortFree( pxTCB );
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 f965 	bl	8006898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055ce:	e01a      	b.n	8005606 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d103      	bne.n	80055e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f95c 	bl	8006898 <vPortFree>
	}
 80055e0:	e011      	b.n	8005606 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d00c      	beq.n	8005606 <prvDeleteTCB+0x5a>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <prvDeleteTCB+0x58>
	}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvResetNextTaskUnblockTime+0x38>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvResetNextTaskUnblockTime+0x3c>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295
 8005626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005628:	e008      	b.n	800563c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <prvResetNextTaskUnblockTime+0x38>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <prvResetNextTaskUnblockTime+0x3c>)
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	2000087c 	.word	0x2000087c
 800564c:	200008e4 	.word	0x200008e4

08005650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <xTaskGetSchedulerState+0x34>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800565e:	2301      	movs	r3, #1
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e008      	b.n	8005676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <xTaskGetSchedulerState+0x38>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800566c:	2302      	movs	r3, #2
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e001      	b.n	8005676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005676:	687b      	ldr	r3, [r7, #4]
	}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	200008d0 	.word	0x200008d0
 8005688:	200008ec 	.word	0x200008ec

0800568c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d069      	beq.n	8005776 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <xTaskPriorityInherit+0xf4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d259      	bcs.n	8005764 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db06      	blt.n	80056c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <xTaskPriorityInherit+0xf4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	f1c3 0207 	rsb	r2, r3, #7
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <xTaskPriorityInherit+0xf8>)
 80056d8:	4413      	add	r3, r2
 80056da:	4299      	cmp	r1, r3
 80056dc:	d13a      	bne.n	8005754 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe f9d2 	bl	8003a8c <uxListRemove>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d115      	bne.n	800571a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	4924      	ldr	r1, [pc, #144]	; (8005784 <xTaskPriorityInherit+0xf8>)
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xTaskPriorityInherit+0x8e>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <xTaskPriorityInherit+0xfc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4013      	ands	r3, r2
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <xTaskPriorityInherit+0xfc>)
 8005718:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800571a:	4b19      	ldr	r3, [pc, #100]	; (8005780 <xTaskPriorityInherit+0xf4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	4b16      	ldr	r3, [pc, #88]	; (8005788 <xTaskPriorityInherit+0xfc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <xTaskPriorityInherit+0xfc>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a10      	ldr	r2, [pc, #64]	; (8005784 <xTaskPriorityInherit+0xf8>)
 8005744:	441a      	add	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7fe f940 	bl	80039d2 <vListInsertEnd>
 8005752:	e004      	b.n	800575e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <xTaskPriorityInherit+0xf4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e008      	b.n	8005776 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <xTaskPriorityInherit+0xf4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	429a      	cmp	r2, r3
 8005770:	d201      	bcs.n	8005776 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005776:	68fb      	ldr	r3, [r7, #12]
	}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200007c4 	.word	0x200007c4
 8005784:	200007c8 	.word	0x200007c8
 8005788:	200008cc 	.word	0x200008cc

0800578c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d072      	beq.n	8005888 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057a2:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <xTaskPriorityDisinherit+0x108>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d00c      	beq.n	80057c6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	b672      	cpsid	i
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	b662      	cpsie	i
 80057e2:	60bb      	str	r3, [r7, #8]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d044      	beq.n	8005888 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d140      	bne.n	8005888 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3304      	adds	r3, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe f93e 	bl	8003a8c <uxListRemove>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d115      	bne.n	8005842 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	491f      	ldr	r1, [pc, #124]	; (8005898 <xTaskPriorityDisinherit+0x10c>)
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xTaskPriorityDisinherit+0xb6>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	2201      	movs	r2, #1
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43da      	mvns	r2, r3
 8005838:	4b18      	ldr	r3, [pc, #96]	; (800589c <xTaskPriorityDisinherit+0x110>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4013      	ands	r3, r2
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <xTaskPriorityDisinherit+0x110>)
 8005840:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	f1c3 0207 	rsb	r2, r3, #7
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <xTaskPriorityDisinherit+0x110>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4313      	orrs	r3, r2
 8005864:	4a0d      	ldr	r2, [pc, #52]	; (800589c <xTaskPriorityDisinherit+0x110>)
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <xTaskPriorityDisinherit+0x10c>)
 8005876:	441a      	add	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f7fe f8a7 	bl	80039d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005888:	697b      	ldr	r3, [r7, #20]
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200007c4 	.word	0x200007c4
 8005898:	200007c8 	.word	0x200007c8
 800589c:	200008cc 	.word	0x200008cc

080058a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8087 	beq.w	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10c      	bne.n	80058dc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	b672      	cpsid	i
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	b662      	cpsie	i
 80058d6:	60fb      	str	r3, [r7, #12]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d902      	bls.n	80058ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e002      	b.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d065      	beq.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	429a      	cmp	r2, r3
 8005904:	d160      	bne.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005906:	4b32      	ldr	r3, [pc, #200]	; (80059d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	429a      	cmp	r2, r3
 800590e:	d10c      	bne.n	800592a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	b672      	cpsid	i
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	b662      	cpsie	i
 8005924:	60bb      	str	r3, [r7, #8]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	db04      	blt.n	8005948 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f1c3 0207 	rsb	r2, r3, #7
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005958:	4413      	add	r3, r2
 800595a:	4299      	cmp	r1, r3
 800595c:	d134      	bne.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3304      	adds	r3, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe f892 	bl	8003a8c <uxListRemove>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d115      	bne.n	800599a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4918      	ldr	r1, [pc, #96]	; (80059d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43da      	mvns	r2, r3
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4013      	ands	r3, r2
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005998:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	4a0b      	ldr	r2, [pc, #44]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80059ba:	441a      	add	r2, r3
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7fe f805 	bl	80039d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059c8:	bf00      	nop
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200007c4 	.word	0x200007c4
 80059d4:	200007c8 	.word	0x200007c8
 80059d8:	200008cc 	.word	0x200008cc

080059dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ee:	3201      	adds	r2, #1
 80059f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80059f2:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059f4:	681b      	ldr	r3, [r3, #0]
	}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	200007c4 	.word	0x200007c4

08005a04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a14:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe f836 	bl	8003a8c <uxListRemove>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d10a      	bne.n	8005a5c <prvAddCurrentTaskToDelayedList+0x58>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	481a      	ldr	r0, [pc, #104]	; (8005ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a56:	f7fd ffbc 	bl	80039d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a5a:	e026      	b.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d209      	bcs.n	8005a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fd ffca 	bl	8003a1a <vListInsert>
}
 8005a86:	e010      	b.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fd ffc0 	bl	8003a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d202      	bcs.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200008c8 	.word	0x200008c8
 8005ab8:	200007c4 	.word	0x200007c4
 8005abc:	200008cc 	.word	0x200008cc
 8005ac0:	200008b0 	.word	0x200008b0
 8005ac4:	20000880 	.word	0x20000880
 8005ac8:	2000087c 	.word	0x2000087c
 8005acc:	200008e4 	.word	0x200008e4

08005ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ada:	f000 fb97 	bl	800620c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <xTimerCreateTimerTask+0x84>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d021      	beq.n	8005b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aee:	1d3a      	adds	r2, r7, #4
 8005af0:	f107 0108 	add.w	r1, r7, #8
 8005af4:	f107 030c 	add.w	r3, r7, #12
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa ff2d 	bl	8000958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	9202      	str	r2, [sp, #8]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	2302      	movs	r3, #2
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	460a      	mov	r2, r1
 8005b10:	4911      	ldr	r1, [pc, #68]	; (8005b58 <xTimerCreateTimerTask+0x88>)
 8005b12:	4812      	ldr	r0, [pc, #72]	; (8005b5c <xTimerCreateTimerTask+0x8c>)
 8005b14:	f7fe ff74 	bl	8004a00 <xTaskCreateStatic>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4a11      	ldr	r2, [pc, #68]	; (8005b60 <xTimerCreateTimerTask+0x90>)
 8005b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <xTimerCreateTimerTask+0x90>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b26:	2301      	movs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10c      	bne.n	8005b4a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	b672      	cpsid	i
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	b662      	cpsie	i
 8005b44:	613b      	str	r3, [r7, #16]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005b4a:	697b      	ldr	r3, [r7, #20]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000920 	.word	0x20000920
 8005b58:	0801f4b0 	.word	0x0801f4b0
 8005b5c:	08005de1 	.word	0x08005de1
 8005b60:	20000924 	.word	0x20000924

08005b64 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b72:	2028      	movs	r0, #40	; 0x28
 8005b74:	f000 fdc6 	bl	8006704 <pvPortMalloc>
 8005b78:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00d      	beq.n	8005b9c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f847 	bl	8005c2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005b9c:	697b      	ldr	r3, [r7, #20]
	}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b08a      	sub	sp, #40	; 0x28
 8005baa:	af02      	add	r7, sp, #8
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005bb4:	2328      	movs	r3, #40	; 0x28
 8005bb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b28      	cmp	r3, #40	; 0x28
 8005bbc:	d00c      	beq.n	8005bd8 <xTimerCreateStatic+0x32>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	b672      	cpsid	i
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	b662      	cpsie	i
 8005bd2:	61bb      	str	r3, [r7, #24]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10c      	bne.n	8005bfa <xTimerCreateStatic+0x54>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	b672      	cpsid	i
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	b662      	cpsie	i
 8005bf4:	617b      	str	r3, [r7, #20]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f805 	bl	8005c2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c20:	69fb      	ldr	r3, [r7, #28]
	}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	b672      	cpsid	i
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	b662      	cpsie	i
 8005c52:	617b      	str	r3, [r7, #20]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01e      	beq.n	8005c9c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005c5e:	f000 fad5 	bl	800620c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fd fe9a 	bl	80039b8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c90:	f043 0304 	orr.w	r3, r3, #4
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005c9c:	bf00      	nop
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <xTimerGenericCommand+0x32>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	b672      	cpsid	i
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	b662      	cpsie	i
 8005cd0:	623b      	str	r3, [r7, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <xTimerGenericCommand+0x9c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	dc18      	bgt.n	8005d22 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cf0:	f7ff fcae 	bl	8005650 <xTaskGetSchedulerState>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d109      	bne.n	8005d0e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <xTimerGenericCommand+0x9c>)
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	f107 0114 	add.w	r1, r7, #20
 8005d02:	2300      	movs	r3, #0
 8005d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d06:	f7fe f839 	bl	8003d7c <xQueueGenericSend>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d0c:	e012      	b.n	8005d34 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <xTimerGenericCommand+0x9c>)
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f107 0114 	add.w	r1, r7, #20
 8005d16:	2300      	movs	r3, #0
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f7fe f82f 	bl	8003d7c <xQueueGenericSend>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d20:	e008      	b.n	8005d34 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <xTimerGenericCommand+0x9c>)
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f107 0114 	add.w	r1, r7, #20
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	f7fe f92b 	bl	8003f88 <xQueueGenericSendFromISR>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000920 	.word	0x20000920

08005d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <prvProcessExpiredTimer+0x98>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd fe95 	bl	8003a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d024      	beq.n	8005dba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	18d1      	adds	r1, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	6978      	ldr	r0, [r7, #20]
 8005d7e:	f000 f8d3 	bl	8005f28 <prvInsertTimerInActiveList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d021      	beq.n	8005dcc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	2100      	movs	r1, #0
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff ff86 	bl	8005ca4 <xTimerGenericCommand>
 8005d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d115      	bne.n	8005dcc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	b672      	cpsid	i
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	b662      	cpsie	i
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	6978      	ldr	r0, [r7, #20]
 8005dd2:	4798      	blx	r3
}
 8005dd4:	bf00      	nop
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000918 	.word	0x20000918

08005de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005de8:	f107 0308 	add.w	r3, r7, #8
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f857 	bl	8005ea0 <prvGetNextExpireTime>
 8005df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4619      	mov	r1, r3
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f803 	bl	8005e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dfe:	f000 f8d5 	bl	8005fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e02:	e7f1      	b.n	8005de8 <prvTimerTask+0x8>

08005e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e0e:	f7ff f833 	bl	8004e78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f866 	bl	8005ee8 <prvSampleTimeNow>
 8005e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d130      	bne.n	8005e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <prvProcessTimerOrBlockTask+0x3c>
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d806      	bhi.n	8005e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e32:	f7ff f82f 	bl	8004e94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ff83 	bl	8005d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e3e:	e024      	b.n	8005e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e46:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <prvProcessTimerOrBlockTask+0x90>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <prvProcessTimerOrBlockTask+0x50>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <prvProcessTimerOrBlockTask+0x52>
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <prvProcessTimerOrBlockTask+0x94>)
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fe fd97 	bl	8004998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e6a:	f7ff f813 	bl	8004e94 <xTaskResumeAll>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <prvProcessTimerOrBlockTask+0x98>)
 8005e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	f3bf 8f6f 	isb	sy
}
 8005e84:	e001      	b.n	8005e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e86:	f7ff f805 	bl	8004e94 <xTaskResumeAll>
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2000091c 	.word	0x2000091c
 8005e98:	20000920 	.word	0x20000920
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <prvGetNextExpireTime+0x44>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <prvGetNextExpireTime+0x16>
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	e000      	b.n	8005eb8 <prvGetNextExpireTime+0x18>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <prvGetNextExpireTime+0x44>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e001      	b.n	8005ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000918 	.word	0x20000918

08005ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ef0:	f7ff f86e 	bl	8004fd0 <xTaskGetTickCount>
 8005ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <prvSampleTimeNow+0x3c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d205      	bcs.n	8005f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f00:	f000 f91e 	bl	8006140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f12:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <prvSampleTimeNow+0x3c>)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f18:	68fb      	ldr	r3, [r7, #12]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000928 	.word	0x20000928

08005f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d812      	bhi.n	8005f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	1ad2      	subs	r2, r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e01b      	b.n	8005f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <prvInsertTimerInActiveList+0x7c>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fd fd54 	bl	8003a1a <vListInsert>
 8005f72:	e012      	b.n	8005f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d206      	bcs.n	8005f8a <prvInsertTimerInActiveList+0x62>
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d302      	bcc.n	8005f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e007      	b.n	8005f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <prvInsertTimerInActiveList+0x80>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7fd fd40 	bl	8003a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	2000091c 	.word	0x2000091c
 8005fa8:	20000918 	.word	0x20000918

08005fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fb2:	e0b2      	b.n	800611a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f2c0 80ae 	blt.w	8006118 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fd fd5d 	bl	8003a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff87 	bl	8005ee8 <prvSampleTimeNow>
 8005fda:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	f200 809b 	bhi.w	800611a <prvProcessReceivedCommands+0x16e>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <prvProcessReceivedCommands+0x40>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	0800608d 	.word	0x0800608d
 8005ffc:	080060a1 	.word	0x080060a1
 8006000:	080060ef 	.word	0x080060ef
 8006004:	08006015 	.word	0x08006015
 8006008:	08006015 	.word	0x08006015
 800600c:	0800608d 	.word	0x0800608d
 8006010:	080060a1 	.word	0x080060a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	18d1      	adds	r1, r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006034:	f7ff ff78 	bl	8005f28 <prvInsertTimerInActiveList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d06d      	beq.n	800611a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d062      	beq.n	800611a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	441a      	add	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	2100      	movs	r1, #0
 8006064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006066:	f7ff fe1d 	bl	8005ca4 <xTimerGenericCommand>
 800606a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d153      	bne.n	800611a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	b672      	cpsid	i
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	b662      	cpsie	i
 8006086:	61bb      	str	r3, [r7, #24]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800609e:	e03c      	b.n	800611a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <prvProcessReceivedCommands+0x12e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	617b      	str	r3, [r7, #20]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	18d1      	adds	r1, r2, r3
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060e8:	f7ff ff1e 	bl	8005f28 <prvInsertTimerInActiveList>
					break;
 80060ec:	e015      	b.n	800611a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80060fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060fe:	f000 fbcb 	bl	8006898 <vPortFree>
 8006102:	e00a      	b.n	800611a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	b2da      	uxtb	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006116:	e000      	b.n	800611a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800611a:	4b08      	ldr	r3, [pc, #32]	; (800613c <prvProcessReceivedCommands+0x190>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f107 0108 	add.w	r1, r7, #8
 8006122:	2200      	movs	r2, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe f865 	bl	80041f4 <xQueueReceive>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af41 	bne.w	8005fb4 <prvProcessReceivedCommands+0x8>
	}
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000920 	.word	0x20000920

08006140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006146:	e04a      	b.n	80061de <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006148:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <prvSwitchTimerLists+0xc4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006152:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <prvSwitchTimerLists+0xc4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fd fc93 	bl	8003a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d030      	beq.n	80061de <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d90e      	bls.n	80061ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800619a:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <prvSwitchTimerLists+0xc4>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fd fc38 	bl	8003a1a <vListInsert>
 80061aa:	e018      	b.n	80061de <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061ac:	2300      	movs	r3, #0
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	2100      	movs	r1, #0
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fd74 	bl	8005ca4 <xTimerGenericCommand>
 80061bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10c      	bne.n	80061de <prvSwitchTimerLists+0x9e>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	b672      	cpsid	i
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	b662      	cpsie	i
 80061d8:	603b      	str	r3, [r7, #0]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <prvSwitchTimerLists+0xc4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1af      	bne.n	8006148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <prvSwitchTimerLists+0xc4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <prvSwitchTimerLists+0xc8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a04      	ldr	r2, [pc, #16]	; (8006204 <prvSwitchTimerLists+0xc4>)
 80061f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <prvSwitchTimerLists+0xc8>)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6013      	str	r3, [r2, #0]
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000918 	.word	0x20000918
 8006208:	2000091c 	.word	0x2000091c

0800620c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006212:	f000 f94b 	bl	80064ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d120      	bne.n	8006260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800621e:	4814      	ldr	r0, [pc, #80]	; (8006270 <prvCheckForValidListAndQueue+0x64>)
 8006220:	f7fd fbaa 	bl	8003978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006224:	4813      	ldr	r0, [pc, #76]	; (8006274 <prvCheckForValidListAndQueue+0x68>)
 8006226:	f7fd fba7 	bl	8003978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <prvCheckForValidListAndQueue+0x6c>)
 800622c:	4a10      	ldr	r2, [pc, #64]	; (8006270 <prvCheckForValidListAndQueue+0x64>)
 800622e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <prvCheckForValidListAndQueue+0x70>)
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <prvCheckForValidListAndQueue+0x68>)
 8006234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006236:	2300      	movs	r3, #0
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <prvCheckForValidListAndQueue+0x74>)
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <prvCheckForValidListAndQueue+0x78>)
 800623e:	210c      	movs	r1, #12
 8006240:	200a      	movs	r0, #10
 8006242:	f7fd fcb7 	bl	8003bb4 <xQueueGenericCreateStatic>
 8006246:	4603      	mov	r3, r0
 8006248:	4a08      	ldr	r2, [pc, #32]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 800624a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	490b      	ldr	r1, [pc, #44]	; (8006288 <prvCheckForValidListAndQueue+0x7c>)
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fb72 	bl	8004944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006260:	f000 f958 	bl	8006514 <vPortExitCritical>
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000920 	.word	0x20000920
 8006270:	200008f0 	.word	0x200008f0
 8006274:	20000904 	.word	0x20000904
 8006278:	20000918 	.word	0x20000918
 800627c:	2000091c 	.word	0x2000091c
 8006280:	200009a4 	.word	0x200009a4
 8006284:	2000092c 	.word	0x2000092c
 8006288:	0801f4b8 	.word	0x0801f4b8

0800628c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3b04      	subs	r3, #4
 800629c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062bc:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <pxPortInitialiseStack+0x64>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b14      	subs	r3, #20
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f06f 0202 	mvn.w	r2, #2
 80062da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b20      	subs	r3, #32
 80062e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	080062f5 	.word	0x080062f5

080062f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <prvTaskExitError+0x5c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d00c      	beq.n	8006322 <prvTaskExitError+0x2e>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	b672      	cpsid	i
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	b662      	cpsie	i
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <prvTaskExitError+0x2c>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	b672      	cpsid	i
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	b662      	cpsie	i
 8006336:	60bb      	str	r3, [r7, #8]
}
 8006338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800633a:	bf00      	nop
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0fc      	beq.n	800633c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000010 	.word	0x20000010
	...

08006360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <pxCurrentTCBConst2>)
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	f380 8809 	msr	PSP, r0
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	4770      	bx	lr
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst2>:
 8006380:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006388:	4808      	ldr	r0, [pc, #32]	; (80063ac <prvPortStartFirstTask+0x24>)
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f380 8808 	msr	MSP, r0
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8814 	msr	CONTROL, r0
 800639a:	b662      	cpsie	i
 800639c:	b661      	cpsie	f
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	df00      	svc	0
 80063a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063aa:	bf00      	nop
 80063ac:	e000ed08 	.word	0xe000ed08

080063b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063b6:	4b37      	ldr	r3, [pc, #220]	; (8006494 <xPortStartScheduler+0xe4>)
 80063b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ff      	movs	r2, #255	; 0xff
 80063c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <xPortStartScheduler+0xe8>)
 80063dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063de:	4b2f      	ldr	r3, [pc, #188]	; (800649c <xPortStartScheduler+0xec>)
 80063e0:	2207      	movs	r2, #7
 80063e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063e4:	e009      	b.n	80063fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80063e6:	4b2d      	ldr	r3, [pc, #180]	; (800649c <xPortStartScheduler+0xec>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	4a2b      	ldr	r2, [pc, #172]	; (800649c <xPortStartScheduler+0xec>)
 80063ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d0ef      	beq.n	80063e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006406:	4b25      	ldr	r3, [pc, #148]	; (800649c <xPortStartScheduler+0xec>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1c3 0307 	rsb	r3, r3, #7
 800640e:	2b04      	cmp	r3, #4
 8006410:	d00c      	beq.n	800642c <xPortStartScheduler+0x7c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
 8006426:	60bb      	str	r3, [r7, #8]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <xPortStartScheduler+0xec>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	4a1a      	ldr	r2, [pc, #104]	; (800649c <xPortStartScheduler+0xec>)
 8006434:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006436:	4b19      	ldr	r3, [pc, #100]	; (800649c <xPortStartScheduler+0xec>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800643e:	4a17      	ldr	r2, [pc, #92]	; (800649c <xPortStartScheduler+0xec>)
 8006440:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800644a:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <xPortStartScheduler+0xf0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <xPortStartScheduler+0xf0>)
 8006450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006454:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <xPortStartScheduler+0xf0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <xPortStartScheduler+0xf0>)
 800645c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006460:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006462:	f000 f8dd 	bl	8006620 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <xPortStartScheduler+0xf4>)
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800646c:	f000 f8fc 	bl	8006668 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <xPortStartScheduler+0xf8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <xPortStartScheduler+0xf8>)
 8006476:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800647a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800647c:	f7ff ff84 	bl	8006388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006480:	f7fe fe70 	bl	8005164 <vTaskSwitchContext>
	prvTaskExitError();
 8006484:	f7ff ff36 	bl	80062f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	e000e400 	.word	0xe000e400
 8006498:	200009ec 	.word	0x200009ec
 800649c:	200009f0 	.word	0x200009f0
 80064a0:	e000ed20 	.word	0xe000ed20
 80064a4:	20000010 	.word	0x20000010
 80064a8:	e000ef34 	.word	0xe000ef34

080064ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	607b      	str	r3, [r7, #4]
}
 80064c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <vPortEnterCritical+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <vPortEnterCritical+0x60>)
 80064d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <vPortEnterCritical+0x60>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d111      	bne.n	8006500 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <vPortEnterCritical+0x64>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <vPortEnterCritical+0x54>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	b672      	cpsid	i
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	b662      	cpsie	i
 80064fa:	603b      	str	r3, [r7, #0]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <vPortEnterCritical+0x52>
	}
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000010 	.word	0x20000010
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <vPortExitCritical+0x54>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <vPortExitCritical+0x28>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	b672      	cpsid	i
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	b662      	cpsie	i
 8006536:	607b      	str	r3, [r7, #4]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <vPortExitCritical+0x54>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <vPortExitCritical+0x54>)
 8006544:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <vPortExitCritical+0x54>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d105      	bne.n	800655a <vPortExitCritical+0x46>
 800654e:	2300      	movs	r3, #0
 8006550:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f383 8811 	msr	BASEPRI, r3
}
 8006558:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000010 	.word	0x20000010
 800656c:	00000000 	.word	0x00000000

08006570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006570:	f3ef 8009 	mrs	r0, PSP
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <pxCurrentTCBConst>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	f01e 0f10 	tst.w	lr, #16
 8006580:	bf08      	it	eq
 8006582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006594:	b672      	cpsid	i
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	b662      	cpsie	i
 80065a4:	f7fe fdde 	bl	8005164 <vTaskSwitchContext>
 80065a8:	f04f 0000 	mov.w	r0, #0
 80065ac:	f380 8811 	msr	BASEPRI, r0
 80065b0:	bc09      	pop	{r0, r3}
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f01e 0f10 	tst.w	lr, #16
 80065be:	bf08      	it	eq
 80065c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065c4:	f380 8809 	msr	PSP, r0
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <pxCurrentTCBConst>:
 80065d0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	b672      	cpsid	i
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	b662      	cpsie	i
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065f6:	f7fe fcfb 	bl	8004ff0 <xTaskIncrementTick>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <SysTick_Handler+0x44>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	2300      	movs	r3, #0
 800660a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f383 8811 	msr	BASEPRI, r3
}
 8006612:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <vPortSetupTimerInterrupt+0x34>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <vPortSetupTimerInterrupt+0x38>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <vPortSetupTimerInterrupt+0x3c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <vPortSetupTimerInterrupt+0x40>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortSetupTimerInterrupt+0x44>)
 800663e:	3b01      	subs	r3, #1
 8006640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006642:	4b04      	ldr	r3, [pc, #16]	; (8006654 <vPortSetupTimerInterrupt+0x34>)
 8006644:	2207      	movs	r2, #7
 8006646:	601a      	str	r2, [r3, #0]
}
 8006648:	bf00      	nop
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000e010 	.word	0xe000e010
 8006658:	e000e018 	.word	0xe000e018
 800665c:	20000004 	.word	0x20000004
 8006660:	10624dd3 	.word	0x10624dd3
 8006664:	e000e014 	.word	0xe000e014

08006668 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006668:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006678 <vPortEnableVFP+0x10>
 800666c:	6801      	ldr	r1, [r0, #0]
 800666e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006672:	6001      	str	r1, [r0, #0]
 8006674:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006676:	bf00      	nop
 8006678:	e000ed88 	.word	0xe000ed88

0800667c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006682:	f3ef 8305 	mrs	r3, IPSR
 8006686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d916      	bls.n	80066bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <vPortValidateInterruptPriority+0x78>)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006698:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <vPortValidateInterruptPriority+0x7c>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	7afa      	ldrb	r2, [r7, #11]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d20c      	bcs.n	80066bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	b672      	cpsid	i
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	b662      	cpsie	i
 80066b6:	607b      	str	r3, [r7, #4]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <vPortValidateInterruptPriority+0x80>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <vPortValidateInterruptPriority+0x84>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d90c      	bls.n	80066e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	b672      	cpsid	i
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	b662      	cpsie	i
 80066e0:	603b      	str	r3, [r7, #0]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <vPortValidateInterruptPriority+0x68>
	}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	e000e3f0 	.word	0xe000e3f0
 80066f8:	200009ec 	.word	0x200009ec
 80066fc:	e000ed0c 	.word	0xe000ed0c
 8006700:	200009f0 	.word	0x200009f0

08006704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006710:	f7fe fbb2 	bl	8004e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006714:	4b5b      	ldr	r3, [pc, #364]	; (8006884 <pvPortMalloc+0x180>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800671c:	f000 f91a 	bl	8006954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006720:	4b59      	ldr	r3, [pc, #356]	; (8006888 <pvPortMalloc+0x184>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 8092 	bne.w	8006852 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006734:	2208      	movs	r2, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	2b00      	cmp	r3, #0
 8006744:	d016      	beq.n	8006774 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <pvPortMalloc+0x70>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	b672      	cpsid	i
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	b662      	cpsie	i
 800676e:	617b      	str	r3, [r7, #20]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d06b      	beq.n	8006852 <pvPortMalloc+0x14e>
 800677a:	4b44      	ldr	r3, [pc, #272]	; (800688c <pvPortMalloc+0x188>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d866      	bhi.n	8006852 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006784:	4b42      	ldr	r3, [pc, #264]	; (8006890 <pvPortMalloc+0x18c>)
 8006786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006788:	4b41      	ldr	r3, [pc, #260]	; (8006890 <pvPortMalloc+0x18c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800678e:	e004      	b.n	800679a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d903      	bls.n	80067ac <pvPortMalloc+0xa8>
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f1      	bne.n	8006790 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067ac:	4b35      	ldr	r3, [pc, #212]	; (8006884 <pvPortMalloc+0x180>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d04d      	beq.n	8006852 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2208      	movs	r2, #8
 80067bc:	4413      	add	r3, r2
 80067be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	2308      	movs	r3, #8
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d921      	bls.n	800681c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <pvPortMalloc+0x100>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	b672      	cpsid	i
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	b662      	cpsie	i
 80067fe:	613b      	str	r3, [r7, #16]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006816:	69b8      	ldr	r0, [r7, #24]
 8006818:	f000 f8fe 	bl	8006a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <pvPortMalloc+0x188>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	4a19      	ldr	r2, [pc, #100]	; (800688c <pvPortMalloc+0x188>)
 8006828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800682a:	4b18      	ldr	r3, [pc, #96]	; (800688c <pvPortMalloc+0x188>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b19      	ldr	r3, [pc, #100]	; (8006894 <pvPortMalloc+0x190>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d203      	bcs.n	800683e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <pvPortMalloc+0x188>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <pvPortMalloc+0x190>)
 800683c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <pvPortMalloc+0x184>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	431a      	orrs	r2, r3
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006852:	f7fe fb1f 	bl	8004e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00c      	beq.n	800687a <pvPortMalloc+0x176>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	b672      	cpsid	i
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	b662      	cpsie	i
 8006874:	60fb      	str	r3, [r7, #12]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <pvPortMalloc+0x174>
	return pvReturn;
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3728      	adds	r7, #40	; 0x28
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	200089fc 	.word	0x200089fc
 8006888:	20008a08 	.word	0x20008a08
 800688c:	20008a00 	.word	0x20008a00
 8006890:	200089f4 	.word	0x200089f4
 8006894:	20008a04 	.word	0x20008a04

08006898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04c      	beq.n	8006944 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068aa:	2308      	movs	r3, #8
 80068ac:	425b      	negs	r3, r3
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b23      	ldr	r3, [pc, #140]	; (800694c <vPortFree+0xb4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <vPortFree+0x48>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	b672      	cpsid	i
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	b662      	cpsie	i
 80068da:	60fb      	str	r3, [r7, #12]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00c      	beq.n	8006902 <vPortFree+0x6a>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	b672      	cpsid	i
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	b662      	cpsie	i
 80068fc:	60bb      	str	r3, [r7, #8]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <vPortFree+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d019      	beq.n	8006944 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d115      	bne.n	8006944 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <vPortFree+0xb4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	43db      	mvns	r3, r3
 8006922:	401a      	ands	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006928:	f7fe faa6 	bl	8004e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <vPortFree+0xb8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4413      	add	r3, r2
 8006936:	4a06      	ldr	r2, [pc, #24]	; (8006950 <vPortFree+0xb8>)
 8006938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f000 f86c 	bl	8006a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006940:	f7fe faa8 	bl	8004e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20008a08 	.word	0x20008a08
 8006950:	20008a00 	.word	0x20008a00

08006954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006960:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <prvHeapInit+0xac>)
 8006962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00c      	beq.n	8006988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3307      	adds	r3, #7
 8006972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <prvHeapInit+0xac>)
 8006984:	4413      	add	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800698c:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <prvHeapInit+0xb0>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006992:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <prvHeapInit+0xb0>)
 8006994:	2200      	movs	r2, #0
 8006996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4413      	add	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069a0:	2208      	movs	r2, #8
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0307 	bic.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <prvHeapInit+0xb4>)
 80069b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <prvHeapInit+0xb4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069be:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <prvHeapInit+0xb4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <prvHeapInit+0xb4>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <prvHeapInit+0xb8>)
 80069e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <prvHeapInit+0xbc>)
 80069ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <prvHeapInit+0xc0>)
 80069ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	200009f4 	.word	0x200009f4
 8006a04:	200089f4 	.word	0x200089f4
 8006a08:	200089fc 	.word	0x200089fc
 8006a0c:	20008a04 	.word	0x20008a04
 8006a10:	20008a00 	.word	0x20008a00
 8006a14:	20008a08 	.word	0x20008a08

08006a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a20:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <prvInsertBlockIntoFreeList+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e002      	b.n	8006a2c <prvInsertBlockIntoFreeList+0x14>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d8f7      	bhi.n	8006a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d108      	bne.n	8006a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	441a      	add	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	441a      	add	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d118      	bne.n	8006aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d00d      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	441a      	add	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e008      	b.n	8006aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e003      	b.n	8006aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d002      	beq.n	8006ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	200089f4 	.word	0x200089f4
 8006ac8:	200089fc 	.word	0x200089fc

08006acc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8006ad0:	f004 f8f0 	bl	800acb4 <touchgfx_init>
}
 8006ad4:	bf00      	nop
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8006adc:	f004 f914 	bl	800ad08 <touchgfx_taskEntry>
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
    {
 8006aec:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	601a      	str	r2, [r3, #0]
    }
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	08020234 	.word	0x08020234

08006b04 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    }
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ffe9 	bl	8006ae4 <_ZN8touchgfx12FontProviderD1Ev>
 8006b12:	2104      	movs	r1, #4
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f016 fe7a 	bl	801d80e <_ZdlPvj>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d010      	beq.n	8006b58 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	dc13      	bgt.n	8006b62 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d005      	beq.n	8006b4e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8006b42:	e00e      	b.n	8006b62 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8006b44:	f002 fbb6 	bl	80092b4 <_ZN17TypedTextDatabase8getFontsEv>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	e00a      	b.n	8006b64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8006b4e:	f002 fbb1 	bl	80092b4 <_ZN17TypedTextDatabase8getFontsEv>
 8006b52:	4603      	mov	r3, r0
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	e005      	b.n	8006b64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8006b58:	f002 fbac 	bl	80092b4 <_ZN17TypedTextDatabase8getFontsEv>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	e000      	b.n	8006b64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8006b62:	2300      	movs	r3, #0
    }
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	4a05      	ldr	r2, [pc, #20]	; (8006b8c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff ffb1 	bl	8006ae4 <_ZN8touchgfx12FontProviderD1Ev>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	08020220 	.word	0x08020220

08006b90 <_ZN23ApplicationFontProviderD0Ev>:
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ffe7 	bl	8006b6c <_ZN23ApplicationFontProviderD1Ev>
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f016 fe34 	bl	801d80e <_ZdlPvj>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
    {
 8006bb8:	4a04      	ldr	r2, [pc, #16]	; (8006bcc <_ZN8touchgfx4FontD1Ev+0x1c>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
    }
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	08020630 	.word	0x08020630

08006bd0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
    }
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ffe9 	bl	8006bb0 <_ZN8touchgfx4FontD1Ev>
 8006bde:	2110      	movs	r1, #16
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f016 fe14 	bl	801d80e <_ZdlPvj>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e010      	b.n	8006c28 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	681c      	ldr	r4, [r3, #0]
 8006c16:	f107 030f 	add.w	r3, r7, #15
 8006c1a:	f107 0210 	add.w	r2, r7, #16
 8006c1e:	8879      	ldrh	r1, [r7, #2]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	47a0      	blx	r4
 8006c24:	6178      	str	r0, [r7, #20]
        return glyph;
 8006c26:	697b      	ldr	r3, [r7, #20]
    }
 8006c28:	4618      	mov	r0, r3
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd90      	pop	{r4, r7, pc}

08006c30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	895b      	ldrh	r3, [r3, #10]
    }
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	899b      	ldrh	r3, [r3, #12]
    }
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	889b      	ldrh	r3, [r3, #4]
    }
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	889a      	ldrh	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	799b      	ldrb	r3, [r3, #6]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
    }
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	79db      	ldrb	r3, [r3, #7]
 8006ca6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006caa:	b2db      	uxtb	r3, r3
    }
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	79db      	ldrb	r3, [r3, #7]
 8006cc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cc8:	b2db      	uxtb	r3, r3
    }
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ff61 	bl	8006bb0 <_ZN8touchgfx4FontD1Ev>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	08021d2c 	.word	0x08021d2c

08006cfc <_ZN8touchgfx9ConstFontD0Ev>:
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff ffe7 	bl	8006cd8 <_ZN8touchgfx9ConstFontD1Ev>
 8006d0a:	2118      	movs	r1, #24
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f016 fd7e 	bl	801d80e <_ZdlPvj>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ffd3 	bl	8006cd8 <_ZN8touchgfx9ConstFontD1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	08020258 	.word	0x08020258

08006d40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ffe7 	bl	8006d1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8006d4e:	2124      	movs	r1, #36	; 0x24
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f016 fd5c 	bl	801d80e <_ZdlPvj>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    {
 8006d68:	4a04      	ldr	r2, [pc, #16]	; (8006d7c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
    }
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	08020248 	.word	0x08020248

08006d80 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
    }
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ffe9 	bl	8006d60 <_ZN8touchgfx9TypedTextD1Ev>
 8006d8e:	2108      	movs	r1, #8
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f016 fd3c 	bl	801d80e <_ZdlPvj>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	889a      	ldrh	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	809a      	strh	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	08020248 	.word	0x08020248

08006dcc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
    }
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af08      	add	r7, sp, #32
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	460b      	mov	r3, r1
 8006df4:	80fb      	strh	r3, [r7, #6]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	88b9      	ldrh	r1, [r7, #4]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e02:	9306      	str	r3, [sp, #24]
 8006e04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e06:	9305      	str	r3, [sp, #20]
 8006e08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	7f3b      	ldrb	r3, [r7, #28]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	7e3b      	ldrb	r3, [r7, #24]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	460b      	mov	r3, r1
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	f009 fa15 	bl	8010254 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8006e2a:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e34:	619a      	str	r2, [r3, #24]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	61da      	str	r2, [r3, #28]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e40:	621a      	str	r2, [r3, #32]
{
}
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	08020258 	.word	0x08020258

08006e50 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	889b      	ldrh	r3, [r3, #4]
 8006e64:	0adb      	lsrs	r3, r3, #11
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8006e82:	b480      	push	{r7}
 8006e84:	b089      	sub	sp, #36	; 0x24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7b1b      	ldrb	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e030      	b.n	8006f04 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	7b5b      	ldrb	r3, [r3, #13]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eb6:	b219      	sxth	r1, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	7adb      	ldrb	r3, [r3, #11]
 8006ebc:	b21b      	sxth	r3, r3
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7b1b      	ldrb	r3, [r3, #12]
 8006ece:	837b      	strh	r3, [r7, #26]
 8006ed0:	8b7b      	ldrh	r3, [r7, #26]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d015      	beq.n	8006f02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	897a      	ldrh	r2, [r7, #10]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d103      	bne.n	8006ee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006ee6:	e00d      	b.n	8006f04 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	897a      	ldrh	r2, [r7, #10]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d306      	bcc.n	8006f00 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006ef2:	8b7b      	ldrh	r3, [r7, #26]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	837b      	strh	r3, [r7, #26]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3304      	adds	r3, #4
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e7e7      	b.n	8006ed0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8006f00:	bf00      	nop
        }
    }
    return 0;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3724      	adds	r7, #36	; 0x24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	4801      	ldr	r0, [pc, #4]	; (8006f1c <__tcf_0+0xc>)
 8006f16:	f7ff ff01 	bl	8006d1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20008a0c 	.word	0x20008a0c

08006f20 <_Z23getFont_verdana_10_4bppv>:
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8006f26:	4b1e      	ldr	r3, [pc, #120]	; (8006fa0 <_Z23getFont_verdana_10_4bppv+0x80>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f3bf 8f5b 	dmb	ish
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02a      	beq.n	8006f98 <_Z23getFont_verdana_10_4bppv+0x78>
 8006f42:	4817      	ldr	r0, [pc, #92]	; (8006fa0 <_Z23getFont_verdana_10_4bppv+0x80>)
 8006f44:	f016 fc65 	bl	801d812 <__cxa_guard_acquire>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01f      	beq.n	8006f98 <_Z23getFont_verdana_10_4bppv+0x78>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	233f      	movs	r3, #63	; 0x3f
 8006f62:	9307      	str	r3, [sp, #28]
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006f66:	9306      	str	r3, [sp, #24]
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <_Z23getFont_verdana_10_4bppv+0x88>)
 8006f6a:	9305      	str	r3, [sp, #20]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	2300      	movs	r3, #0
 8006f72:	9303      	str	r3, [sp, #12]
 8006f74:	2301      	movs	r3, #1
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	2304      	movs	r3, #4
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	230a      	movs	r3, #10
 8006f82:	2201      	movs	r2, #1
 8006f84:	4909      	ldr	r1, [pc, #36]	; (8006fac <_Z23getFont_verdana_10_4bppv+0x8c>)
 8006f86:	480a      	ldr	r0, [pc, #40]	; (8006fb0 <_Z23getFont_verdana_10_4bppv+0x90>)
 8006f88:	f7ff ff2c 	bl	8006de4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8006f8c:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <_Z23getFont_verdana_10_4bppv+0x80>)
 8006f8e:	f016 fc4c 	bl	801d82a <__cxa_guard_release>
 8006f92:	4808      	ldr	r0, [pc, #32]	; (8006fb4 <_Z23getFont_verdana_10_4bppv+0x94>)
 8006f94:	f017 f9f6 	bl	801e384 <atexit>
    return verdana_10_4bpp;
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20008a30 	.word	0x20008a30
 8006fa4:	08023a2c 	.word	0x08023a2c
 8006fa8:	080202a4 	.word	0x080202a4
 8006fac:	0802399c 	.word	0x0802399c
 8006fb0:	20008a0c 	.word	0x20008a0c
 8006fb4:	08006f11 	.word	0x08006f11

08006fb8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__tcf_0+0xc>)
 8006fbe:	f7ff fead 	bl	8006d1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20008a34 	.word	0x20008a34

08006fc8 <_Z23getFont_verdana_20_4bppv>:
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8006fce:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <_Z23getFont_verdana_20_4bppv+0x80>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	f3bf 8f5b 	dmb	ish
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d02a      	beq.n	8007040 <_Z23getFont_verdana_20_4bppv+0x78>
 8006fea:	4817      	ldr	r0, [pc, #92]	; (8007048 <_Z23getFont_verdana_20_4bppv+0x80>)
 8006fec:	f016 fc11 	bl	801d812 <__cxa_guard_acquire>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01f      	beq.n	8007040 <_Z23getFont_verdana_20_4bppv+0x78>
 8007000:	2300      	movs	r3, #0
 8007002:	9309      	str	r3, [sp, #36]	; 0x24
 8007004:	2300      	movs	r3, #0
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	233f      	movs	r3, #63	; 0x3f
 800700a:	9307      	str	r3, [sp, #28]
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <_Z23getFont_verdana_20_4bppv+0x84>)
 800700e:	9306      	str	r3, [sp, #24]
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	2301      	movs	r3, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	2300      	movs	r3, #0
 800701a:	9303      	str	r3, [sp, #12]
 800701c:	2301      	movs	r3, #1
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	2304      	movs	r3, #4
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	2314      	movs	r3, #20
 800702a:	2208      	movs	r2, #8
 800702c:	4909      	ldr	r1, [pc, #36]	; (8007054 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800702e:	480a      	ldr	r0, [pc, #40]	; (8007058 <_Z23getFont_verdana_20_4bppv+0x90>)
 8007030:	f7ff fed8 	bl	8006de4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8007034:	4804      	ldr	r0, [pc, #16]	; (8007048 <_Z23getFont_verdana_20_4bppv+0x80>)
 8007036:	f016 fbf8 	bl	801d82a <__cxa_guard_release>
 800703a:	4808      	ldr	r0, [pc, #32]	; (800705c <_Z23getFont_verdana_20_4bppv+0x94>)
 800703c:	f017 f9a2 	bl	801e384 <atexit>
    return verdana_20_4bpp;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8007042:	4618      	mov	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20008a58 	.word	0x20008a58
 800704c:	08023a30 	.word	0x08023a30
 8007050:	080202a8 	.word	0x080202a8
 8007054:	080239ac 	.word	0x080239ac
 8007058:	20008a34 	.word	0x20008a34
 800705c:	08006fb9 	.word	0x08006fb9

08007060 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__tcf_0+0xc>)
 8007066:	f7ff fe59 	bl	8006d1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20008a5c 	.word	0x20008a5c

08007070 <_Z23getFont_verdana_40_4bppv>:
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f3bf 8f5b 	dmb	ish
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d02a      	beq.n	80070e8 <_Z23getFont_verdana_40_4bppv+0x78>
 8007092:	4817      	ldr	r0, [pc, #92]	; (80070f0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8007094:	f016 fbbd 	bl	801d812 <__cxa_guard_acquire>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01f      	beq.n	80070e8 <_Z23getFont_verdana_40_4bppv+0x78>
 80070a8:	2300      	movs	r3, #0
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	2300      	movs	r3, #0
 80070ae:	9308      	str	r3, [sp, #32]
 80070b0:	233f      	movs	r3, #63	; 0x3f
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <_Z23getFont_verdana_40_4bppv+0x84>)
 80070b6:	9306      	str	r3, [sp, #24]
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <_Z23getFont_verdana_40_4bppv+0x88>)
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	2300      	movs	r3, #0
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	2300      	movs	r3, #0
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	2301      	movs	r3, #1
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	2304      	movs	r3, #4
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2328      	movs	r3, #40	; 0x28
 80070d2:	2201      	movs	r2, #1
 80070d4:	4909      	ldr	r1, [pc, #36]	; (80070fc <_Z23getFont_verdana_40_4bppv+0x8c>)
 80070d6:	480a      	ldr	r0, [pc, #40]	; (8007100 <_Z23getFont_verdana_40_4bppv+0x90>)
 80070d8:	f7ff fe84 	bl	8006de4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80070dc:	4804      	ldr	r0, [pc, #16]	; (80070f0 <_Z23getFont_verdana_40_4bppv+0x80>)
 80070de:	f016 fba4 	bl	801d82a <__cxa_guard_release>
 80070e2:	4808      	ldr	r0, [pc, #32]	; (8007104 <_Z23getFont_verdana_40_4bppv+0x94>)
 80070e4:	f017 f94e 	bl	801e384 <atexit>
    return verdana_40_4bpp;
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20008a80 	.word	0x20008a80
 80070f4:	08023a40 	.word	0x08023a40
 80070f8:	080202ac 	.word	0x080202ac
 80070fc:	08023a1c 	.word	0x08023a1c
 8007100:	20008a5c 	.word	0x20008a5c
 8007104:	08007061 	.word	0x08007061

08007108 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
    {
    }
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
    {
    }
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
    {
    }
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
    {
    }
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
    {
    }
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
    {
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
    }
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	080203b8 	.word	0x080203b8

080071c4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
    }
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ffe9 	bl	80071a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 80071d2:	2104      	movs	r1, #4
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f016 fb1a 	bl	801d80e <_ZdlPvj>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
    {
    }
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800720e:	6810      	ldr	r0, [r2, #0]
 8007210:	6851      	ldr	r1, [r2, #4]
 8007212:	c303      	stmia	r3!, {r0, r1}
    };
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
    {
 8007228:	4a04      	ldr	r2, [pc, #16]	; (800723c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
    }
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	080203a0 	.word	0x080203a0

08007240 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
    }
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ffe9 	bl	8007220 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800724e:	2104      	movs	r1, #4
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f016 fadc 	bl	801d80e <_ZdlPvj>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
    {
        return instance;
 8007264:	4b03      	ldr	r3, [pc, #12]	; (8007274 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8007266:	681b      	ldr	r3, [r3, #0]
    }
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20009bf4 	.word	0x20009bf4

08007278 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800727c:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8007284:	2b00      	cmp	r3, #0
 8007286:	d008      	beq.n	800729a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	e002      	b.n	80072a0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
        }
    }
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20009bf4 	.word	0x20009bf4

080072b0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80072b8:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	721a      	strb	r2, [r3, #8]
    {
    }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	0802037c 	.word	0x0802037c

080072dc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    {
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
    }
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	0802037c 	.word	0x0802037c

080072fc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    }
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ffe9 	bl	80072dc <_ZN8touchgfx10TransitionD1Ev>
 800730a:	210c      	movs	r1, #12
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f016 fa7e 	bl	801d80e <_ZdlPvj>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    {
    }
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    {
    }
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
    {
    }
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8007360:	f007 ff12 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 8007364:	4603      	mov	r3, r0
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	3230      	adds	r2, #48	; 0x30
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	4790      	blx	r2
    }
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	605a      	str	r2, [r3, #4]
    }
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	4a05      	ldr	r2, [pc, #20]	; (80073b4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fefd 	bl	80071a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	08021b94 	.word	0x08021b94

080073b8 <_ZN8touchgfx11ApplicationD0Ev>:
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ffe7 	bl	8007394 <_ZN8touchgfx11ApplicationD1Ev>
 80073c6:	f44f 719c 	mov.w	r1, #312	; 0x138
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f016 fa1f 	bl	801d80e <_ZdlPvj>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f007 ff38 	bl	800f25c <_ZN8touchgfx11ApplicationC1Ev>
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007406:	6013      	str	r3, [r2, #0]
    }
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	08020338 	.word	0x08020338
 8007418:	20009c40 	.word	0x20009c40

0800741c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f804 	bl	8007432 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00e      	beq.n	8007488 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	601a      	str	r2, [r3, #0]
    }
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ff69 	bl	8007394 <_ZN8touchgfx11ApplicationD1Ev>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08020338 	.word	0x08020338

080074d0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ffe7 	bl	80074ac <_ZN8touchgfx14MVPApplicationD1Ev>
 80074de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f016 f993 	bl	801d80e <_ZdlPvj>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	4a08      	ldr	r2, [pc, #32]	; (8007520 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fabd 	bl	8007a88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff ffcb 	bl	80074ac <_ZN8touchgfx14MVPApplicationD1Ev>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	080202dc 	.word	0x080202dc

08007524 <_ZN23FrontendApplicationBaseD0Ev>:
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ffe1 	bl	80074f4 <_ZN23FrontendApplicationBaseD1Ev>
 8007532:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f016 f969 	bl	801d80e <_ZdlPvj>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	721a      	strb	r2, [r3, #8]
    }
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	605a      	str	r2, [r3, #4]
    }
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff ff26 	bl	80073dc <_ZN8touchgfx14MVPApplicationC1Ev>
 8007590:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f89f 	bl	80076e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80075b2:	f7ff fe55 	bl	8007260 <_ZN8touchgfx3HAL11getInstanceEv>
 80075b6:	4603      	mov	r3, r0
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	3208      	adds	r2, #8
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80075c4:	2000      	movs	r0, #0
 80075c6:	f001 fdfd 	bl	80091c4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80075ca:	f7ff fe55 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f00e fff4 	bl	80165be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	080202dc 	.word	0x080202dc

080075e4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	4611      	mov	r1, r2
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ffe9 	bl	80075e4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	3208      	adds	r2, #8
 8007622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007626:	e883 0003 	stmia.w	r3, {r0, r1}
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b089      	sub	sp, #36	; 0x24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8007642:	4b10      	ldr	r3, [pc, #64]	; (8007684 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	f107 0008 	add.w	r0, r7, #8
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	cb0c      	ldmia	r3, {r2, r3}
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	f000 f85f 	bl	8007718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	4619      	mov	r1, r3
 8007660:	4620      	mov	r0, r4
 8007662:	f7ff ffcb 	bl	80075fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007666:	f107 0308 	add.w	r3, r7, #8
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fa0c 	bl	8007a88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800767c:	bf00      	nop
 800767e:	3724      	adds	r7, #36	; 0x24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd90      	pop	{r4, r7, pc}
 8007684:	08007689 	.word	0x08007689

08007688 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af02      	add	r7, sp, #8
 800768e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 80076a8:	4804      	ldr	r0, [pc, #16]	; (80076bc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 80076aa:	f000 f867 	bl	800777c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20009c34 	.word	0x20009c34
 80076bc:	20009c30 	.word	0x20009c30

080076c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4a04      	ldr	r2, [pc, #16]	; (80076dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	080203a0 	.word	0x080203a0

080076e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ffe8 	bl	80076c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80076f0:	4a08      	ldr	r2, [pc, #32]	; (8007714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	609a      	str	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	60da      	str	r2, [r3, #12]
    {
    }
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	08020320 	.word	0x08020320

08007718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4639      	mov	r1, r7
 8007724:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff ffc8 	bl	80076c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3308      	adds	r3, #8
 8007740:	463a      	mov	r2, r7
 8007742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007746:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	08020320 	.word	0x08020320

08007758 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fda4 	bl	80072b0 <_ZN8touchgfx10TransitionC1Ev>
 8007768:	4a03      	ldr	r2, [pc, #12]	; (8007778 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	080202b8 	.word	0x080202b8

0800777c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b08f      	sub	sp, #60	; 0x3c
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3320      	adds	r3, #32
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 80077a2:	d205      	bcs.n	80077b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80077a4:	4b7e      	ldr	r3, [pc, #504]	; (80079a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80077a6:	4a7f      	ldr	r2, [pc, #508]	; (80079a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80077a8:	21a7      	movs	r1, #167	; 0xa7
 80077aa:	487f      	ldr	r0, [pc, #508]	; (80079a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80077ac:	f016 fdcc 	bl	801e348 <__assert_func>
 80077b0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3320      	adds	r3, #32
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d805      	bhi.n	80077d6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80077ca:	4b78      	ldr	r3, [pc, #480]	; (80079ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80077cc:	4a75      	ldr	r2, [pc, #468]	; (80079a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80077ce:	21a8      	movs	r1, #168	; 0xa8
 80077d0:	4875      	ldr	r0, [pc, #468]	; (80079a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80077d2:	f016 fdb9 	bl	801e348 <__assert_func>
 80077d6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3320      	adds	r3, #32
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4610      	mov	r0, r2
 80077e8:	4798      	blx	r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b0b      	cmp	r3, #11
 80077ee:	d805      	bhi.n	80077fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80077f0:	4b6f      	ldr	r3, [pc, #444]	; (80079b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80077f2:	4a6c      	ldr	r2, [pc, #432]	; (80079a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80077f4:	21a9      	movs	r1, #169	; 0xa9
 80077f6:	486c      	ldr	r0, [pc, #432]	; (80079a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80077f8:	f016 fda6 	bl	801e348 <__assert_func>
 80077fc:	bf00      	nop
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800780a:	f007 fcbd 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800780e:	4603      	mov	r3, r0
 8007810:	4618      	mov	r0, r3
 8007812:	f007 fd07 	bl	800f224 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d008      	beq.n	8007830 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
    if (*currentTrans)
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
    if (*currentScreen)
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4610      	mov	r0, r2
 8007860:	4798      	blx	r3
    if (*currentPresenter)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
    if (*currentScreen)
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
    if (*currentPresenter)
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4610      	mov	r0, r2
 80078ac:	4798      	blx	r3
}
 80078ae:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f87c 	bl	80079b4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80078bc:	4603      	mov	r3, r0
 80078be:	4619      	mov	r1, r3
 80078c0:	200c      	movs	r0, #12
 80078c2:	f7ff fc21 	bl	8007108 <_ZnwjPv>
 80078c6:	4604      	mov	r4, r0
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7ff ff45 	bl	8007758 <_ZN8touchgfx12NoTransitionC1Ev>
 80078ce:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f87f 	bl	80079da <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 80078dc:	4603      	mov	r3, r0
 80078de:	4619      	mov	r1, r3
 80078e0:	f44f 701f 	mov.w	r0, #636	; 0x27c
 80078e4:	f7ff fc10 	bl	8007108 <_ZnwjPv>
 80078e8:	4604      	mov	r4, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f001 febe 	bl	800966c <_ZN10screenViewC1Ev>
 80078f0:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f881 	bl	8007a00 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80078fe:	4603      	mov	r3, r0
 8007900:	4619      	mov	r1, r3
 8007902:	2010      	movs	r0, #16
 8007904:	f7ff fc00 	bl	8007108 <_ZnwjPv>
 8007908:	4604      	mov	r4, r0
 800790a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800790c:	4620      	mov	r0, r4
 800790e:	f001 fe55 	bl	80095bc <_ZN15screenPresenterC1ER10screenView>
 8007912:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007918:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007924:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	3304      	adds	r3, #4
 8007930:	e000      	b.n	8007934 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8007932:	2300      	movs	r3, #0
 8007934:	4619      	mov	r1, r3
 8007936:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007938:	f7ff fdaa 	bl	8007490 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	3304      	adds	r3, #4
 8007940:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff fe0c 	bl	8007560 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f86a 	bl	8007a26 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	330c      	adds	r3, #12
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69f8      	ldr	r0, [r7, #28]
 8007968:	4798      	blx	r3
    newPresenter->activate();
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69b8      	ldr	r0, [r7, #24]
 8007972:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007974:	6979      	ldr	r1, [r7, #20]
 8007976:	69f8      	ldr	r0, [r7, #28]
 8007978:	f009 f861 	bl	8010a3e <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3310      	adds	r3, #16
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6978      	ldr	r0, [r7, #20]
 8007986:	4798      	blx	r3
    newTransition->invalidate();
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6978      	ldr	r0, [r7, #20]
 8007992:	4798      	blx	r3
}
 8007994:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007998:	4618      	mov	r0, r3
 800799a:	373c      	adds	r7, #60	; 0x3c
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}
 80079a0:	0801f4c0 	.word	0x0801f4c0
 80079a4:	0801f550 	.word	0x0801f550
 80079a8:	0801f654 	.word	0x0801f654
 80079ac:	0801f698 	.word	0x0801f698
 80079b0:	0801f73c 	.word	0x0801f73c

080079b4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3324      	adds	r3, #36	; 0x24
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	887a      	ldrh	r2, [r7, #2]
 80079ca:	4611      	mov	r1, r2
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
    }
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
    }
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3324      	adds	r3, #36	; 0x24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	887a      	ldrh	r2, [r7, #2]
 8007a16:	4611      	mov	r1, r2
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
 8007a1c:	4603      	mov	r3, r0
    }
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <_ZN8touchgfx12NoTransitionD1Ev>:
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	4a05      	ldr	r2, [pc, #20]	; (8007a64 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fc41 	bl	80072dc <_ZN8touchgfx10TransitionD1Ev>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	080202b8 	.word	0x080202b8

08007a68 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ffe7 	bl	8007a44 <_ZN8touchgfx12NoTransitionD1Ev>
 8007a76:	210c      	movs	r1, #12
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f015 fec8 	bl	801d80e <_ZdlPvj>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fbc1 	bl	8007220 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	08020320 	.word	0x08020320

08007aac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff ffe7 	bl	8007a88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8007aba:	2110      	movs	r1, #16
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f015 fea6 	bl	801d80e <_ZdlPvj>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68d2      	ldr	r2, [r2, #12]
 8007adc:	1052      	asrs	r2, r2, #1
 8007ade:	1899      	adds	r1, r3, r2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	e00a      	b.n	8007b08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68d2      	ldr	r2, [r2, #12]
 8007afa:	1052      	asrs	r2, r2, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6892      	ldr	r2, [r2, #8]
 8007b04:	4413      	add	r3, r2
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4798      	blx	r3
    }
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8007b46:	2300      	movs	r3, #0
    }
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	601a      	str	r2, [r3, #0]
    }
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	801a      	strh	r2, [r3, #0]
        y = 0;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	805a      	strh	r2, [r3, #2]
        width = 0;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	809a      	strh	r2, [r3, #4]
        height = 0;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	80da      	strh	r2, [r3, #6]
    }
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	4608      	mov	r0, r1
 8007baa:	4611      	mov	r1, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	817b      	strh	r3, [r7, #10]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	813b      	strh	r3, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	897a      	ldrh	r2, [r7, #10]
 8007bbe:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	893a      	ldrh	r2, [r7, #8]
 8007bc4:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8b3a      	ldrh	r2, [r7, #24]
 8007bd0:	80da      	strh	r2, [r3, #6]
    }
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	1d18      	adds	r0, r3, #4
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f7ff ffd0 	bl	8007ba0 <_ZN8touchgfx4RectC1Essss>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	330c      	adds	r3, #12
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff ffb4 	bl	8007b72 <_ZN8touchgfx4RectC1Ev>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	615a      	str	r2, [r3, #20]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	619a      	str	r2, [r3, #24]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	61da      	str	r2, [r3, #28]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	08021cc8 	.word	0x08021cc8

08007c3c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
    {
 8007c44:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	601a      	str	r2, [r3, #0]
    }
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	08021cc8 	.word	0x08021cc8

08007c5c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
    }
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ffe9 	bl	8007c3c <_ZN8touchgfx8DrawableD1Ev>
 8007c6a:	2128      	movs	r1, #40	; 0x28
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f015 fdce 	bl	801d80e <_ZdlPvj>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007c84:	2300      	movs	r3, #0
    }
 8007c86:	4618      	mov	r0, r3
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	887a      	ldrh	r2, [r7, #2]
 8007ca2:	809a      	strh	r2, [r3, #4]
    }
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	887a      	ldrh	r2, [r7, #2]
 8007cc0:	80da      	strh	r2, [r3, #6]
    }
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	807b      	strh	r3, [r7, #2]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	332c      	adds	r3, #44	; 0x2c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007cea:	4611      	mov	r1, r2
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
        setY(y);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3330      	adds	r3, #48	; 0x30
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
    }
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	811a      	strh	r2, [r3, #8]
    }
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	887a      	ldrh	r2, [r7, #2]
 8007d38:	815a      	strh	r2, [r3, #10]
    }
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
    {
    }
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
    {
    }
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
    {
    }
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
    {
    }
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
    {
    }
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	807b      	strh	r3, [r7, #2]
 8007df0:	4613      	mov	r3, r2
 8007df2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3350      	adds	r3, #80	; 0x50
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	8879      	ldrh	r1, [r7, #2]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007e04:	b292      	uxth	r2, r2
 8007e06:	1a8a      	subs	r2, r1, r2
 8007e08:	b292      	uxth	r2, r2
 8007e0a:	b210      	sxth	r0, r2
 8007e0c:	8839      	ldrh	r1, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8007e14:	b292      	uxth	r2, r2
 8007e16:	1a8a      	subs	r2, r1, r2
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	b212      	sxth	r2, r2
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
    }
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e38:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e40:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e48:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ffe1 	bl	8007e2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
    }
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fea8 	bl	8007be0 <_ZN8touchgfx8DrawableC1Ev>
 8007e90:	4a05      	ldr	r2, [pc, #20]	; (8007ea8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	080210b0 	.word	0x080210b0

08007eac <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8007ed0:	4a06      	ldr	r2, [pc, #24]	; (8007eec <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	887a      	ldrh	r2, [r7, #2]
 8007eda:	809a      	strh	r2, [r3, #4]
    }
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	08020248 	.word	0x08020248

08007ef0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	817b      	strh	r3, [r7, #10]
 8007efe:	4613      	mov	r3, r2
 8007f00:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff ff53 	bl	8007db0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff ff59 	bl	8007dca <_ZNK8touchgfx8Drawable11isTouchableEv>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
        }
    }
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff fe4c 	bl	8007be0 <_ZN8touchgfx8DrawableC1Ev>
 8007f48:	4a03      	ldr	r2, [pc, #12]	; (8007f58 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	080204ec 	.word	0x080204ec

08007f5c <_ZN8touchgfx6WidgetD1Ev>:
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	4a05      	ldr	r2, [pc, #20]	; (8007f7c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fe65 	bl	8007c3c <_ZN8touchgfx8DrawableD1Ev>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	080204ec 	.word	0x080204ec

08007f80 <_ZN8touchgfx6WidgetD0Ev>:
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff ffe7 	bl	8007f5c <_ZN8touchgfx6WidgetD1Ev>
 8007f8e:	2128      	movs	r1, #40	; 0x28
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f015 fc3c 	bl	801d80e <_ZdlPvj>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4618      	mov	r0, r3
 8007fac:	2326      	movs	r3, #38	; 0x26
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f016 fa55 	bl	801e460 <memset>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff ffbd 	bl	8007f38 <_ZN8touchgfx6WidgetC1Ev>
 8007fbe:	4a14      	ldr	r2, [pc, #80]	; (8008010 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3328      	adds	r3, #40	; 0x28
 8007fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff ff79 	bl	8007ec4 <_ZN8touchgfx9TypedTextC1Et>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3330      	adds	r3, #48	; 0x30
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fdbb 	bl	8007b54 <_ZN8touchgfx9colortypeC1Em>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	869a      	strh	r2, [r3, #52]	; 0x34
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	22ff      	movs	r2, #255	; 0xff
 8007fe8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	08021980 	.word	0x08021980

08008014 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800801e:	2300      	movs	r3, #0
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fdb9 	bl	8007ba0 <_ZN8touchgfx4RectC1Essss>
    }
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8008044:	687e      	ldr	r6, [r7, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3330      	adds	r3, #48	; 0x30
 800804c:	681c      	ldr	r4, [r3, #0]
 800804e:	887d      	ldrh	r5, [r7, #2]
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f866 	bl	8008128 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	617b      	str	r3, [r7, #20]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3e>
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800806e:	21b1      	movs	r1, #177	; 0xb1
 8008070:	481a      	ldr	r0, [pc, #104]	; (80080dc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8008072:	f016 f969 	bl	801e348 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	889a      	ldrh	r2, [r3, #4]
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d305      	bcc.n	800808e <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
 8008082:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8008086:	21b2      	movs	r1, #178	; 0xb2
 8008088:	4814      	ldr	r0, [pc, #80]	; (80080dc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800808a:	f016 f95d 	bl	801e348 <__assert_func>
    }
 800808e:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8008090:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8008096:	6819      	ldr	r1, [r3, #0]
 8008098:	8a3b      	ldrh	r3, [r7, #16]
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	440b      	add	r3, r1
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	322c      	adds	r2, #44	; 0x2c
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	4790      	blx	r2
 80080b0:	4603      	mov	r3, r0
 80080b2:	1aeb      	subs	r3, r5, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	4630      	mov	r0, r6
 80080bc:	47a0      	blx	r4
 80080be:	f107 030c 	add.w	r3, r7, #12
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fe4c 	bl	8006d60 <_ZN8touchgfx9TypedTextD1Ev>
    }
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	20009c44 	.word	0x20009c44
 80080d4:	0801f7e0 	.word	0x0801f7e0
 80080d8:	0801f824 	.word	0x0801f824
 80080dc:	0801f854 	.word	0x0801f854
 80080e0:	20009c48 	.word	0x20009c48
 80080e4:	0801f898 	.word	0x0801f898
 80080e8:	20009c4c 	.word	0x20009c4c

080080ec <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
 80080f8:	4613      	mov	r3, r2
 80080fa:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	332c      	adds	r3, #44	; 0x2c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800810a:	4610      	mov	r0, r2
 800810c:	4798      	blx	r3
        setBaselineY(baselineY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	335c      	adds	r3, #92	; 0x5c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f9b7 2000 	ldrsh.w	r2, [r7]
 800811a:	4611      	mov	r1, r2
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
    }
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
    {
        return typedText;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	3328      	adds	r3, #40	; 0x28
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fe fe31 	bl	8006da0 <_ZN8touchgfx9TypedTextC1ERKS0_>
    }
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	4a05      	ldr	r2, [pc, #20]	; (8008168 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fd6f 	bl	8007c3c <_ZN8touchgfx8DrawableD1Ev>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	080210b0 	.word	0x080210b0

0800816c <_ZN8touchgfx9ContainerD0Ev>:
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff ffe7 	bl	8008148 <_ZN8touchgfx9ContainerD1Ev>
 800817a:	212c      	movs	r1, #44	; 0x2c
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f015 fb46 	bl	801d80e <_ZdlPvj>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZN15MenuElementBaseD1Ev>:

class MenuElementBase : public touchgfx::Container
{
public:
    MenuElementBase();
    virtual ~MenuElementBase() {}
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <_ZN15MenuElementBaseD1Ev+0x2c>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	332c      	adds	r3, #44	; 0x2c
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f8f4 	bl	800838c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff ffce 	bl	8008148 <_ZN8touchgfx9ContainerD1Ev>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	080203e0 	.word	0x080203e0

080081bc <_ZN15MenuElementBaseD0Ev>:
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ffe1 	bl	800818c <_ZN15MenuElementBaseD1Ev>
 80081ca:	2184      	movs	r1, #132	; 0x84
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f015 fb1e 	bl	801d80e <_ZdlPvj>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80081dc:	b590      	push	{r4, r7, lr}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
 80081e6:	460b      	mov	r3, r1
 80081e8:	71bb      	strb	r3, [r7, #6]
 80081ea:	4613      	mov	r3, r2
 80081ec:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80081ee:	f7ff f837 	bl	8007260 <_ZN8touchgfx3HAL11getInstanceEv>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80081fa:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80081fc:	2135      	movs	r1, #53	; 0x35
 80081fe:	480b      	ldr	r0, [pc, #44]	; (800822c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8008200:	f016 f8a2 	bl	801e348 <__assert_func>
 8008204:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8008206:	f7ff f837 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800820a:	6803      	ldr	r3, [r0, #0]
 800820c:	3328      	adds	r3, #40	; 0x28
 800820e:	681c      	ldr	r4, [r3, #0]
 8008210:	797b      	ldrb	r3, [r7, #5]
 8008212:	79ba      	ldrb	r2, [r7, #6]
 8008214:	79f9      	ldrb	r1, [r7, #7]
 8008216:	47a0      	blx	r4
 8008218:	4603      	mov	r3, r0
    }
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	bd90      	pop	{r4, r7, pc}
 8008222:	bf00      	nop
 8008224:	0801f8ec 	.word	0x0801f8ec
 8008228:	0801f930 	.word	0x0801f930
 800822c:	0801f98c 	.word	0x0801f98c

08008230 <_ZN15MenuElementBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/MenuElementBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MenuElementBase::MenuElementBase()
 8008230:	b590      	push	{r4, r7, lr}
 8008232:	b089      	sub	sp, #36	; 0x24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fe20 	bl	8007e80 <_ZN8touchgfx9ContainerC1Ev>
 8008240:	4a28      	ldr	r2, [pc, #160]	; (80082e4 <_ZN15MenuElementBaseC1Ev+0xb4>)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	332c      	adds	r3, #44	; 0x2c
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f87e 	bl	800834c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>
{
    setWidth(160);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	21a0      	movs	r1, #160	; 0xa0
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fd58 	bl	8007d0a <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(32);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2120      	movs	r1, #32
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fd62 	bl	8007d28 <_ZN8touchgfx8Drawable9setHeightEs>
    textArea1.setXY(34, 4);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	332c      	adds	r3, #44	; 0x2c
 8008268:	2204      	movs	r2, #4
 800826a:	2122      	movs	r1, #34	; 0x22
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fd2e 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	2000      	movs	r0, #0
 800827e:	f7ff ffad 	bl	80081dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8008282:	4603      	mov	r3, r0
 8008284:	617c      	str	r4, [r7, #20]
 8008286:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800828e:	bf00      	nop
    textArea1.setLinespacing(0);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	332c      	adds	r3, #44	; 0x2c
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	2300      	movs	r3, #0
 8008298:	837b      	strh	r3, [r7, #26]
        linespace = space;
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	8b7a      	ldrh	r2, [r7, #26]
 800829e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80082a0:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fe08 	bl	8007ec4 <_ZN8touchgfx9TypedTextC1Et>
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	4619      	mov	r1, r3
 80082ba:	4620      	mov	r0, r4
 80082bc:	f005 fab5 	bl	800d82a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fd4b 	bl	8006d60 <_ZN8touchgfx9TypedTextD1Ev>

    add(textArea1);
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	332c      	adds	r3, #44	; 0x2c
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f004 f8fe 	bl	800c4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	3724      	adds	r7, #36	; 0x24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd90      	pop	{r4, r7, pc}
 80082e2:	bf00      	nop
 80082e4:	080203e0 	.word	0x080203e0

080082e8 <_ZN15MenuElementBase10initializeEv>:

void MenuElementBase::initialize()
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	4a08      	ldr	r2, [pc, #32]	; (8008328 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3328      	adds	r3, #40	; 0x28
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fd26 	bl	8006d60 <_ZN8touchgfx9TypedTextD1Ev>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fe20 	bl	8007f5c <_ZN8touchgfx6WidgetD1Ev>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	08021980 	.word	0x08021980

0800832c <_ZN8touchgfx8TextAreaD0Ev>:
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ffe1 	bl	80082fc <_ZN8touchgfx8TextAreaD1Ev>
 800833a:	213c      	movs	r1, #60	; 0x3c
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f015 fa66 	bl	801d80e <_ZdlPvj>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff fe22 	bl	8007fa0 <_ZN8touchgfx8TextAreaC1Ev>
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev+0x3c>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
    {
    }
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	0802046c 	.word	0x0802046c

0800838c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>:
class MoveAnimator : public T
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev+0x20>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff ffad 	bl	80082fc <_ZN8touchgfx8TextAreaD1Ev>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	0802046c 	.word	0x0802046c

080083b0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED0Ev>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ffe7 	bl	800838c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>
 80083be:	2158      	movs	r1, #88	; 0x58
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f015 fa24 	bl	801d80e <_ZdlPvj>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE15handleTickEventEv>:
            moveAnimationRunning = false;
        }
    }

    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fcde 	bl	8007d9c <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f81f 	bl	8008424 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
    }
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	887a      	ldrh	r2, [r7, #2]
 80083fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    }
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 808e 	beq.w	8008554 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x130>
        {
            moveAnimationCounter++;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800843c:	3301      	adds	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	879a      	strh	r2, [r3, #60]	; 0x3c
            if (moveAnimationCounter >= moveAnimationDelay)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844c:	429a      	cmp	r2, r3
 800844e:	f0c0 8081 	bcc.w	8008554 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x130>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	b298      	uxth	r0, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8008476:	b29b      	uxth	r3, r3
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	b29b      	uxth	r3, r3
 800847c:	b21a      	sxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008484:	2100      	movs	r1, #0
 8008486:	47a0      	blx	r4
 8008488:	4603      	mov	r3, r0
 800848a:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	b298      	uxth	r0, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	b21a      	sxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084b0:	2100      	movs	r1, #0
 80084b2:	47a0      	blx	r4
 80084b4:	4603      	mov	r3, r0
 80084b6:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	897b      	ldrh	r3, [r7, #10]
 80084c4:	4413      	add	r3, r2
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	b219      	sxth	r1, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	4413      	add	r3, r2
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b21b      	sxth	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	f7ff fc82 	bl	8007de4 <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ea:	4619      	mov	r1, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084f2:	440b      	add	r3, r1
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d32d      	bcc.n	8008554 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x130>
                {
                    // End of animation
                    moveAnimationRunning = false;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    moveAnimationCounter = 0;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	879a      	strh	r2, [r3, #60]	; 0x3c
                    Application::getInstance()->unregisterTimerWidget(this);
 8008506:	f006 fe3f 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f006 fe71 	bl	800f1f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00d      	beq.n	800853a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x116>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x116>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x118>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x130>
                    {
                        moveAnimationEndedCallback->execute(*this);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
                    }
                }
            }
        }
    }
 8008554:	bf00      	nop
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bd90      	pop	{r4, r7, pc}

0800855c <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	461a      	mov	r2, r3
 800856a:	4603      	mov	r3, r0
 800856c:	817b      	strh	r3, [r7, #10]
 800856e:	460b      	mov	r3, r1
 8008570:	813b      	strh	r3, [r7, #8]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8008576:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800857a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800857e:	4619      	mov	r1, r3
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fba4 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8008586:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800858a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800858e:	4619      	mov	r1, r3
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f804 	bl	800859e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	807b      	strh	r3, [r7, #2]
 80085aa:	4613      	mov	r3, r2
 80085ac:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3334      	adds	r3, #52	; 0x34
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80085ba:	4611      	mov	r1, r2
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
        setHeight(height);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3338      	adds	r3, #56	; 0x38
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80085cc:	4611      	mov	r1, r2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
    }
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    {
 80085e4:	4a06      	ldr	r2, [pc, #24]	; (8008600 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fdaa 	bl	8008148 <_ZN8touchgfx9ContainerD1Ev>
    }
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	08021dbc 	.word	0x08021dbc

08008604 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    }
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff ffe5 	bl	80085dc <_ZN8touchgfx6ScreenD1Ev>
 8008612:	213c      	movs	r1, #60	; 0x3c
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f015 f8fa 	bl	801d80e <_ZdlPvj>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
    {
    }
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
    {
    }
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    {
    }
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
    {
    }
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3304      	adds	r3, #4
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f003 ff19 	bl	800c4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4618      	mov	r0, r3
 80086b8:	2326      	movs	r3, #38	; 0x26
 80086ba:	461a      	mov	r2, r3
 80086bc:	2100      	movs	r1, #0
 80086be:	f015 fecf 	bl	801e460 <memset>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fc37 	bl	8007f38 <_ZN8touchgfx6WidgetC1Ev>
 80086ca:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	22ff      	movs	r2, #255	; 0xff
 80086d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3328      	adds	r3, #40	; 0x28
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff fa38 	bl	8007b54 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	08021a28 	.word	0x08021a28

080086f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
 */
class DrawableListItemsInterface
{
public:
    /** Finalizes an instance of the DrawableListItemsInterface class. */
    virtual ~DrawableListItemsInterface()
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
    {
 8008718:	4a04      	ldr	r2, [pc, #16]	; (800872c <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
    }
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	08020604 	.word	0x08020604

08008730 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
    }
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ffe9 	bl	8008710 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800873e:	2104      	movs	r1, #4
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f015 f864 	bl	801d80e <_ZdlPvj>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZN8touchgfx10ScrollBase10initializeEv>:
     * @param  itemIndex Zero-based index of the changed item.
     */
    virtual void itemChanged(int itemIndex);

    /** Removed all drawables and initializes the content of these items. */
    virtual void initialize()
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	332c      	adds	r3, #44	; 0x2c
 800875c:	4618      	mov	r0, r3
 800875e:	f003 f994 	bl	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	4a05      	ldr	r2, [pc, #20]	; (800878c <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ff2d 	bl	80085dc <_ZN8touchgfx6ScreenD1Ev>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	080205d0 	.word	0x080205d0

08008790 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ffe7 	bl	800876c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800879e:	2140      	movs	r1, #64	; 0x40
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f015 f834 	bl	801d80e <_ZdlPvj>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	4a13      	ldr	r2, [pc, #76]	; (8008808 <_ZN14screenViewBaseD1Ev+0x58>)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fa83 	bl	8008cd0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fa9f 	bl	8008d14 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3398      	adds	r3, #152	; 0x98
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 faf2 	bl	8008dc4 <_ZN8touchgfx11ScrollWheelD1Ev>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	336c      	adds	r3, #108	; 0x6c
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 facb 	bl	8008d80 <_ZN8touchgfx3BoxD1Ev>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3340      	adds	r3, #64	; 0x40
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fac6 	bl	8008d80 <_ZN8touchgfx3BoxD1Ev>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff ffb8 	bl	800876c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	08020550 	.word	0x08020550

0800880c <_ZN14screenViewBaseD0Ev>:
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ffcb 	bl	80087b0 <_ZN14screenViewBaseD1Ev>
 800881a:	f44f 711d 	mov.w	r1, #628	; 0x274
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f014 fff5 	bl	801d80e <_ZdlPvj>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <_ZN14screenViewBase22scrollWheel1UpdateItemER11MenuElements>:
    virtual void setupScreen();

    virtual void scrollWheel1UpdateItem(MenuElement& item, int16_t itemIndex)
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	4613      	mov	r3, r2
 800883a:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in screen
    }
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <_ZN8touchgfx10ScrollBaseD1Ev>:
class ScrollBase : public Container
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	4a08      	ldr	r2, [pc, #32]	; (8008874 <_ZN8touchgfx10ScrollBaseD1Ev+0x2c>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	332c      	adds	r3, #44	; 0x2c
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fad4 	bl	8008e08 <_ZN8touchgfx12DrawableListD1Ev>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fc70 	bl	8008148 <_ZN8touchgfx9ContainerD1Ev>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	08020e44 	.word	0x08020e44

08008878 <_ZN8touchgfx10ScrollBaseD0Ev>:
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ffe1 	bl	8008848 <_ZN8touchgfx10ScrollBaseD1Ev>
 8008886:	21bc      	movs	r1, #188	; 0xbc
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f014 ffc0 	bl	801d80e <_ZdlPvj>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <_ZN8touchgfx15ScrollWheelBaseD1Ev>:
 * item - the font can be larger or bold and images can change color - this can help to
 * give a kind of 3D effect using very few resources.
 *
 * @see ScrollWheel, ScrollWheelWithSelectionStyle
 */
class ScrollWheelBase : public ScrollBase
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <_ZN8touchgfx15ScrollWheelBaseD1Ev+0x20>)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ffcd 	bl	8008848 <_ZN8touchgfx10ScrollBaseD1Ev>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08020d70 	.word	0x08020d70

080088bc <_ZN8touchgfx15ScrollWheelBaseD0Ev>:
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ffe7 	bl	8008898 <_ZN8touchgfx15ScrollWheelBaseD1Ev>
 80088ca:	21c0      	movs	r1, #192	; 0xc0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f014 ff9e 	bl	801d80e <_ZdlPvj>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN8touchgfx11ScrollWheelC1Ev>:
 * it possible to handle a huge number of items using only a limited number of drawables
 * by reusing drawables that are no longer in view.
 *
 * @see ScrollWheelBase, DrawableList, ScrollWheelWithSelectionStyle
 */
class ScrollWheel : public ScrollWheelBase
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f003 fa68 	bl	800bdbc <_ZN8touchgfx15ScrollWheelBaseC1Ev>
 80088ec:	4a03      	ldr	r2, [pc, #12]	; (80088fc <_ZN8touchgfx11ScrollWheelC1Ev+0x20>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	08020f10 	.word	0x08020f10

08008900 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	4a04      	ldr	r2, [pc, #16]	; (800891c <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	08020604 	.word	0x08020604

08008920 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEC1Ev>:
 *              complex container.
 * @tparam SIZE Size of the array. This is the number of drawables to allocate and should be
 *              all visible drawables on the screen at any given time.
 */
template <class TYPE, int SIZE>
class DrawableListItems : public DrawableListItemsInterface
 8008920:	b5b0      	push	{r4, r5, r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff ffe8 	bl	8008900 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEC1Ev+0x38>)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3304      	adds	r3, #4
 800893a:	2401      	movs	r4, #1
 800893c:	461d      	mov	r5, r3
 800893e:	2c00      	cmp	r4, #0
 8008940:	db05      	blt.n	800894e <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEC1Ev+0x2e>
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fd58 	bl	80093f8 <_ZN11MenuElementC1Ev>
 8008948:	3584      	adds	r5, #132	; 0x84
 800894a:	3c01      	subs	r4, #1
 800894c:	e7f7      	b.n	800893e <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEC1Ev+0x1e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bdb0      	pop	{r4, r5, r7, pc}
 8008958:	080205b8 	.word	0x080205b8

0800895c <_ZN14screenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>

screenViewBase::screenViewBase() :
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b087      	sub	sp, #28
 8008960:	af02      	add	r7, sp, #8
 8008962:	6078      	str	r0, [r7, #4]
    updateItemCallback(this, &screenViewBase::updateItemCallbackHandler)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f91c 	bl	8008ba4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800896c:	4a5d      	ldr	r2, [pc, #372]	; (8008ae4 <_ZN14screenViewBaseC1Ev+0x188>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3340      	adds	r3, #64	; 0x40
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fe98 	bl	80086ac <_ZN8touchgfx3BoxC1Ev>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	336c      	adds	r3, #108	; 0x6c
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fe93 	bl	80086ac <_ZN8touchgfx3BoxC1Ev>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3398      	adds	r3, #152	; 0x98
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff ffa6 	bl	80088dc <_ZN8touchgfx11ScrollWheelC1Ev>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff ffc2 	bl	8008920 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEC1Ev>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f503 7019 	add.w	r0, r3, #612	; 0x264
 80089a2:	4b51      	ldr	r3, [pc, #324]	; (8008ae8 <_ZN14screenViewBaseC1Ev+0x18c>)
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	cb0c      	ldmia	r3, {r2, r3}
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	f000 f91d 	bl	8008bf0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{

    __background.setPosition(0, 0, 160, 128);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	23a0      	movs	r3, #160	; 0xa0
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	f7ff fdc9 	bl	800855c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	2000      	movs	r0, #0
 80089d6:	f7ff fc01 	bl	80081dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80089da:	4603      	mov	r3, r0
 80089dc:	4619      	mov	r1, r3
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fe88 	bl	80086f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 160, 128);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	23a0      	movs	r3, #160	; 0xa0
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	f7ff fdb2 	bl	800855c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 0));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80089fe:	2200      	movs	r2, #0
 8008a00:	21ff      	movs	r1, #255	; 0xff
 8008a02:	20ff      	movs	r0, #255	; 0xff
 8008a04:	f7ff fbea 	bl	80081dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff fe71 	bl	80086f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    scrollWheel1.setPosition(0, 48, 160, 32);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8008a18:	2320      	movs	r3, #32
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	23a0      	movs	r3, #160	; 0xa0
 8008a1e:	2230      	movs	r2, #48	; 0x30
 8008a20:	2100      	movs	r1, #0
 8008a22:	f7ff fd9b 	bl	800855c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollWheel1.setHorizontal(true);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3398      	adds	r3, #152	; 0x98
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f003 fc31 	bl	800c294 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    scrollWheel1.setCircular(true);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3398      	adds	r3, #152	; 0x98
 8008a36:	2101      	movs	r1, #1
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f003 fc81 	bl	800c340 <_ZN8touchgfx10ScrollBase11setCircularEb>
    scrollWheel1.setEasingEquation(touchgfx::EasingEquations::sineEaseOut);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3398      	adds	r3, #152	; 0x98
 8008a42:	492a      	ldr	r1, [pc, #168]	; (8008aec <_ZN14screenViewBaseC1Ev+0x190>)
 8008a44:	4618      	mov	r0, r3
 8008a46:	f003 fb69 	bl	800c11c <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    scrollWheel1.setSwipeAcceleration(10);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3398      	adds	r3, #152	; 0x98
 8008a4e:	210a      	movs	r1, #10
 8008a50:	4618      	mov	r0, r3
 8008a52:	f003 fb66 	bl	800c122 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    scrollWheel1.setDragAcceleration(10);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3398      	adds	r3, #152	; 0x98
 8008a5a:	210a      	movs	r1, #10
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f003 fb63 	bl	800c128 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    scrollWheel1.setNumberOfItems(10);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3398      	adds	r3, #152	; 0x98
 8008a66:	210a      	movs	r1, #10
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f003 fad4 	bl	800c016 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    scrollWheel1.setSelectedItemOffset(0);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3398      	adds	r3, #152	; 0x98
 8008a72:	2100      	movs	r1, #0
 8008a74:	4618      	mov	r0, r3
 8008a76:	f003 f89f 	bl	800bbb8 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>
    scrollWheel1.setDrawableSize(160, 0);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3398      	adds	r3, #152	; 0x98
 8008a7e:	2200      	movs	r2, #0
 8008a80:	21a0      	movs	r1, #160	; 0xa0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f003 fb43 	bl	800c10e <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    scrollWheel1.setDrawables(scrollWheel1ListItems, updateItemCallback);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f003 fc67 	bl	800c36e <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>
    scrollWheel1.animateToItem(0, 0);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3398      	adds	r3, #152	; 0x98
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f003 fa2d 	bl	800bf08 <_ZN8touchgfx10ScrollBase13animateToItemEss>

    add(__background);
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3340      	adds	r3, #64	; 0x40
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7ff fde8 	bl	800868c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	336c      	adds	r3, #108	; 0x6c
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7ff fde1 	bl	800868c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollWheel1);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3398      	adds	r3, #152	; 0x98
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7ff fdda 	bl	800868c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd90      	pop	{r4, r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	08020550 	.word	0x08020550
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08010acd 	.word	0x08010acd

08008af0 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
    scrollWheel1.initialize();
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3398      	adds	r3, #152	; 0x98
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fe27 	bl	8008750 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f88f 	bl	8008c30 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE20getNumberOfDrawablesEv>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bfb4      	ite	lt
 8008b1c:	2301      	movlt	r3, #1
 8008b1e:	2300      	movge	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d010      	beq.n	8008b48 <_ZN14screenViewBase11setupScreenEv+0x58>
    {
        scrollWheel1ListItems[i].initialize();
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b2c:	68f9      	ldr	r1, [r7, #12]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f88a 	bl	8008c48 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi>
 8008b34:	4603      	mov	r3, r0
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	3280      	adds	r2, #128	; 0x80
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	4790      	blx	r2
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e7de      	b.n	8008b06 <_ZN14screenViewBase11setupScreenEv+0x16>
    }
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <_ZN14screenViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void screenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	460b      	mov	r3, r1
 8008b60:	80fb      	strh	r3, [r7, #6]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80bb      	strh	r3, [r7, #4]
    if (items == &scrollWheel1ListItems)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d114      	bne.n	8008b9c <_ZN14screenViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	4798      	blx	r3
 8008b84:	6178      	str	r0, [r7, #20]
        MenuElement* cc = (MenuElement*)d;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	613b      	str	r3, [r7, #16]
        scrollWheel1UpdateItem(*cc, itemIndex);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	332c      	adds	r3, #44	; 0x2c
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008b96:	6939      	ldr	r1, [r7, #16]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	4798      	blx	r3
    }
}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f007 fdca 	bl	8010748 <_ZN8touchgfx6ScreenC1Ev>
 8008bb4:	4a05      	ldr	r2, [pc, #20]	; (8008bcc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	080205d0 	.word	0x080205d0

08008bd0 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	4a04      	ldr	r2, [pc, #16]	; (8008bec <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	080205a0 	.word	0x080205a0

08008bf0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ffe4 	bl	8008bd0 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 8008c08:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3308      	adds	r3, #8
 8008c18:	463a      	mov	r2, r7
 8008c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	08020588 	.word	0x08020588

08008c30 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE20getNumberOfDrawablesEv>:
    {
        assert(index >= 0 && index < SIZE);
        return element[index];
    }

    virtual int16_t getNumberOfDrawables()
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
    {
        return SIZE;
 8008c38:	2302      	movs	r3, #2
    }
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi>:
    TYPE& operator[](int index)
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db02      	blt.n	8008c5e <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi+0x16>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	dd05      	ble.n	8008c6a <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi+0x22>
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi+0x3c>)
 8008c60:	4a09      	ldr	r2, [pc, #36]	; (8008c88 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi+0x40>)
 8008c62:	2161      	movs	r1, #97	; 0x61
 8008c64:	4809      	ldr	r0, [pc, #36]	; (8008c8c <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EEixEi+0x44>)
 8008c66:	f015 fb6f 	bl	801e348 <__assert_func>
        return element[index];
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	015b      	lsls	r3, r3, #5
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	4413      	add	r3, r2
 8008c78:	3304      	adds	r3, #4
    }
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	0801faac 	.word	0x0801faac
 8008c88:	0801fac8 	.word	0x0801fac8
 8008c8c:	0801fb30 	.word	0x0801fb30

08008c90 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    }
 8008c98:	4a04      	ldr	r2, [pc, #16]	; (8008cac <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	080205a0 	.word	0x080205a0

08008cb0 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
    }
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff ffe9 	bl	8008c90 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f014 fda4 	bl	801d80e <_ZdlPvj>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	4a05      	ldr	r2, [pc, #20]	; (8008cf0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff ffd5 	bl	8008c90 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	08020588 	.word	0x08020588

08008cf4 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff ffe7 	bl	8008cd0 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 8008d02:	2110      	movs	r1, #16
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f014 fd82 	bl	801d80e <_ZdlPvj>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev>:
class DrawableListItems : public DrawableListItemsInterface
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	4a0e      	ldr	r2, [pc, #56]	; (8008d58 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev+0x44>)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3304      	adds	r3, #4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00d      	beq.n	8008d46 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev+0x32>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3304      	adds	r3, #4
 8008d36:	429c      	cmp	r4, r3
 8008d38:	d005      	beq.n	8008d46 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev+0x32>
 8008d3a:	3c84      	subs	r4, #132	; 0x84
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4620      	mov	r0, r4
 8008d42:	4798      	blx	r3
 8008d44:	e7f5      	b.n	8008d32 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev+0x1e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fce1 	bl	8008710 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd90      	pop	{r4, r7, pc}
 8008d58:	080205b8 	.word	0x080205b8

08008d5c <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED0Ev>:
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ffd5 	bl	8008d14 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EED1Ev>
 8008d6a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f014 fd4d 	bl	801d80e <_ZdlPvj>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	4a05      	ldr	r2, [pc, #20]	; (8008da0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff f8e3 	bl	8007f5c <_ZN8touchgfx6WidgetD1Ev>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	08021a28 	.word	0x08021a28

08008da4 <_ZN8touchgfx3BoxD0Ev>:
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff ffe7 	bl	8008d80 <_ZN8touchgfx3BoxD1Ev>
 8008db2:	212c      	movs	r1, #44	; 0x2c
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f014 fd2a 	bl	801d80e <_ZdlPvj>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZN8touchgfx11ScrollWheelD1Ev>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	4a05      	ldr	r2, [pc, #20]	; (8008de4 <_ZN8touchgfx11ScrollWheelD1Ev+0x20>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff fd5f 	bl	8008898 <_ZN8touchgfx15ScrollWheelBaseD1Ev>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	08020f10 	.word	0x08020f10

08008de8 <_ZN8touchgfx11ScrollWheelD0Ev>:
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ffe7 	bl	8008dc4 <_ZN8touchgfx11ScrollWheelD1Ev>
 8008df6:	21c0      	movs	r1, #192	; 0xc0
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f014 fd08 	bl	801d80e <_ZdlPvj>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <_ZN8touchgfx12DrawableListD1Ev>:
 * when each of these become visible.
 *
 * This means that all drawables must have an identical structure in some way, for
 * example an Image or a Container with a button and a text.
 */
class DrawableList : public Container
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	4a05      	ldr	r2, [pc, #20]	; (8008e28 <_ZN8touchgfx12DrawableListD1Ev+0x20>)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff f995 	bl	8008148 <_ZN8touchgfx9ContainerD1Ev>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08020cc8 	.word	0x08020cc8

08008e2c <_ZN8touchgfx12DrawableListD0Ev>:
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ffe7 	bl	8008e08 <_ZN8touchgfx12DrawableListD1Ev>
 8008e3a:	214c      	movs	r1, #76	; 0x4c
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f014 fce6 	bl	801d80e <_ZdlPvj>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 8008e4c:	b590      	push	{r4, r7, lr}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4611      	mov	r1, r2
 8008e58:	461a      	mov	r2, r3
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	80fb      	strh	r3, [r7, #6]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	68d2      	ldr	r2, [r2, #12]
 8008e6a:	1052      	asrs	r2, r2, #1
 8008e6c:	1898      	adds	r0, r3, r2
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689c      	ldr	r4, [r3, #8]
 8008e7e:	e00a      	b.n	8008e96 <_ZN8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	68d2      	ldr	r2, [r2, #12]
 8008e88:	1052      	asrs	r2, r2, #1
 8008e8a:	4413      	add	r3, r2
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	6892      	ldr	r2, [r2, #8]
 8008e92:	4413      	add	r3, r2
 8008e94:	681c      	ldr	r4, [r3, #0]
 8008e96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	47a0      	blx	r4
    }
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd90      	pop	{r4, r7, pc}

08008eaa <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d010      	beq.n	8008edc <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d107      	bne.n	8008ed2 <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d001      	beq.n	8008edc <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <_ZNK8touchgfx8CallbackI14screenViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 8008edc:	2300      	movs	r3, #0
    }
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 8008ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	db03      	blt.n	8008f08 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs+0x1c>
 8008f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	dd05      	ble.n	8008f14 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs+0x28>
 8008f08:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs+0x44>)
 8008f0a:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs+0x48>)
 8008f0c:	2154      	movs	r1, #84	; 0x54
 8008f0e:	480a      	ldr	r0, [pc, #40]	; (8008f38 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi2EE11getDrawableEs+0x4c>)
 8008f10:	f015 fa1a 	bl	801e348 <__assert_func>
        return &element[index];
 8008f14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	015b      	lsls	r3, r3, #5
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
    }
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	0801faac 	.word	0x0801faac
 8008f34:	0801fb8c 	.word	0x0801fb8c
 8008f38:	0801fb30 	.word	0x0801fb30

08008f3c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8008f40:	4b02      	ldr	r3, [pc, #8]	; (8008f4c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	08020614 	.word	0x08020614

08008f50 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8008f54:	2301      	movs	r3, #1
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8008f6e:	2300      	movs	r3, #0
    }
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008f84:	2300      	movs	r3, #0
    }
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
	...

08008f94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008fa2:	4a07      	ldr	r2, [pc, #28]	; (8008fc0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008fa8:	4a06      	ldr	r2, [pc, #24]	; (8008fc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008fae:	4a06      	ldr	r2, [pc, #24]	; (8008fc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	8013      	strh	r3, [r2, #0]
    }
 8008fb4:	bf00      	nop
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20009c44 	.word	0x20009c44
 8008fc4:	20009c4c 	.word	0x20009c4c
 8008fc8:	20009c48 	.word	0x20009c48

08008fcc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008fcc:	b40e      	push	{r1, r2, r3}
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008fd6:	f107 0320 	add.w	r3, r7, #32
 8008fda:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f006 ff6c 	bl	800fec0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008fec:	89fb      	ldrh	r3, [r7, #14]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ff8:	b003      	add	sp, #12
 8008ffa:	4770      	bx	lr

08008ffc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008ffc:	b40c      	push	{r2, r3}
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800900a:	f107 031c 	add.w	r3, r7, #28
 800900e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009010:	78f9      	ldrb	r1, [r7, #3]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f006 ff52 	bl	800fec0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800901c:	4603      	mov	r3, r0
 800901e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009020:	89fb      	ldrh	r3, [r7, #14]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800902c:	b002      	add	sp, #8
 800902e:	4770      	bx	lr

08009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d016      	beq.n	8009072 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	331a      	adds	r3, #26
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	8adb      	ldrh	r3, [r3, #22]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009052:	4b43      	ldr	r3, [pc, #268]	; (8009160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009054:	4a43      	ldr	r2, [pc, #268]	; (8009164 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009056:	21c0      	movs	r1, #192	; 0xc0
 8009058:	4843      	ldr	r0, [pc, #268]	; (8009168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800905a:	f015 f975 	bl	801e348 <__assert_func>
            return buffer[pos];
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	8a9b      	ldrh	r3, [r3, #20]
 8009062:	461a      	mov	r2, r3
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009072:	2300      	movs	r3, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d06a      	beq.n	800914e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f008 fab5 	bl	80115e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	331a      	adds	r3, #26
 8009082:	623b      	str	r3, [r7, #32]
 8009084:	2301      	movs	r3, #1
 8009086:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	8adb      	ldrh	r3, [r3, #22]
 800908c:	8bfa      	ldrh	r2, [r7, #30]
 800908e:	429a      	cmp	r2, r3
 8009090:	d305      	bcc.n	800909e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009092:	4b36      	ldr	r3, [pc, #216]	; (800916c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009094:	4a36      	ldr	r2, [pc, #216]	; (8009170 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009096:	21c5      	movs	r1, #197	; 0xc5
 8009098:	4833      	ldr	r0, [pc, #204]	; (8009168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800909a:	f015 f955 	bl	801e348 <__assert_func>
            const uint16_t index = pos + offset;
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	8a9a      	ldrh	r2, [r3, #20]
 80090a2:	8bfb      	ldrh	r3, [r7, #30]
 80090a4:	4413      	add	r3, r2
 80090a6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80090a8:	8bbb      	ldrh	r3, [r7, #28]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	d801      	bhi.n	80090b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80090ae:	8bbb      	ldrh	r3, [r7, #28]
 80090b0:	e001      	b.n	80090b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80090b2:	8bbb      	ldrh	r3, [r7, #28]
 80090b4:	3b0a      	subs	r3, #10
 80090b6:	6a3a      	ldr	r2, [r7, #32]
 80090b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090bc:	f640 123f 	movw	r2, #2367	; 0x93f
 80090c0:	4293      	cmp	r3, r2
 80090c2:	bf0c      	ite	eq
 80090c4:	2301      	moveq	r3, #1
 80090c6:	2300      	movne	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d03f      	beq.n	800914e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	331a      	adds	r3, #26
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	321a      	adds	r2, #26
 80090d6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	8ad2      	ldrh	r2, [r2, #22]
 80090dc:	2a00      	cmp	r2, #0
 80090de:	d105      	bne.n	80090ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80090e0:	4b1f      	ldr	r3, [pc, #124]	; (8009160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80090e2:	4a20      	ldr	r2, [pc, #128]	; (8009164 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80090e4:	21c0      	movs	r1, #192	; 0xc0
 80090e6:	4820      	ldr	r0, [pc, #128]	; (8009168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80090e8:	f015 f92e 	bl	801e348 <__assert_func>
            return buffer[pos];
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	8a92      	ldrh	r2, [r2, #20]
 80090f0:	4611      	mov	r1, r2
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	4613      	mov	r3, r2
 80090fc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	8adb      	ldrh	r3, [r3, #22]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d806      	bhi.n	8009114 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009106:	4b1b      	ldr	r3, [pc, #108]	; (8009174 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009108:	4a1b      	ldr	r2, [pc, #108]	; (8009178 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800910a:	f240 110d 	movw	r1, #269	; 0x10d
 800910e:	4816      	ldr	r0, [pc, #88]	; (8009168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009110:	f015 f91a 	bl	801e348 <__assert_func>
            const uint16_t index = pos + 1;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	8a9b      	ldrh	r3, [r3, #20]
 8009118:	3301      	adds	r3, #1
 800911a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800911c:	89bb      	ldrh	r3, [r7, #12]
 800911e:	2b09      	cmp	r3, #9
 8009120:	d801      	bhi.n	8009126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009122:	89bb      	ldrh	r3, [r7, #12]
 8009124:	e000      	b.n	8009128 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009126:	2300      	movs	r3, #0
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	89f9      	ldrh	r1, [r7, #14]
 800912c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009130:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	331a      	adds	r3, #26
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	f640 133f 	movw	r3, #2367	; 0x93f
 800913c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	8a9b      	ldrh	r3, [r3, #20]
 8009142:	4619      	mov	r1, r3
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	8afa      	ldrh	r2, [r7, #22]
 8009148:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800914c:	bf00      	nop
        }
    }
    return getNextChar();
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f008 f92e 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3728      	adds	r7, #40	; 0x28
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	0801fc1c 	.word	0x0801fc1c
 8009164:	0801fc28 	.word	0x0801fc28
 8009168:	0801fcd4 	.word	0x0801fcd4
 800916c:	0801fd1c 	.word	0x0801fd1c
 8009170:	0801fd2c 	.word	0x0801fd2c
 8009174:	0801fe00 	.word	0x0801fe00
 8009178:	0801fe0c 	.word	0x0801fe0c

0800917c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f008 f8cd 	bl	8011324 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af02      	add	r7, sp, #8
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	1d38      	adds	r0, r7, #4
 800919c:	e880 0006 	stmia.w	r0, {r1, r2}
 80091a0:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80091a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091a6:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80091a8:	1d39      	adds	r1, r7, #4
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f005 fb80 	bl	800e8bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80091bc:	bf00      	nop
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d127      	bne.n	8009228 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80091dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	4a1b      	ldr	r2, [pc, #108]	; (8009254 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80091e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ec:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	4a18      	ldr	r2, [pc, #96]	; (8009258 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80091f8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	4a16      	ldr	r2, [pc, #88]	; (800925c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009204:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e00a      	b.n	8009228 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009212:	4b11      	ldr	r3, [pc, #68]	; (8009258 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009214:	4a12      	ldr	r2, [pc, #72]	; (8009260 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009216:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009218:	4a12      	ldr	r2, [pc, #72]	; (8009264 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800921c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	4a11      	ldr	r2, [pc, #68]	; (8009268 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009226:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00d      	beq.n	800924a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800922e:	4a0f      	ldr	r2, [pc, #60]	; (800926c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009234:	f000 f83e 	bl	80092b4 <_ZN17TypedTextDatabase8getFontsEv>
 8009238:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800923a:	f000 f833 	bl	80092a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800923e:	4603      	mov	r3, r0
 8009240:	461a      	mov	r2, r3
 8009242:	4621      	mov	r1, r4
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff fea5 	bl	8008f94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
 8009252:	bf00      	nop
 8009254:	20008a84 	.word	0x20008a84
 8009258:	20008a8c 	.word	0x20008a8c
 800925c:	20008a90 	.word	0x20008a90
 8009260:	08025848 	.word	0x08025848
 8009264:	08025844 	.word	0x08025844
 8009268:	08025860 	.word	0x08025860
 800926c:	20008a88 	.word	0x20008a88

08009270 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	887b      	ldrh	r3, [r7, #2]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20008a8c 	.word	0x20008a8c
 80092a0:	20008a90 	.word	0x20008a90

080092a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80092a8:	2301      	movs	r3, #1
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	20008a94 	.word	0x20008a94

080092c8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d113      	bne.n	8009300 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092de:	4293      	cmp	r3, r2
 80092e0:	d10e      	bne.n	8009300 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80092e2:	f7fd fe71 	bl	8006fc8 <_Z23getFont_verdana_20_4bppv>
 80092e6:	4603      	mov	r3, r0
};
 80092e8:	4a07      	ldr	r2, [pc, #28]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092ea:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80092ec:	f7fd fec0 	bl	8007070 <_Z23getFont_verdana_40_4bppv>
 80092f0:	4603      	mov	r3, r0
};
 80092f2:	4a05      	ldr	r2, [pc, #20]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092f4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80092f6:	f7fd fe13 	bl	8006f20 <_Z23getFont_verdana_10_4bppv>
 80092fa:	4603      	mov	r3, r0
};
 80092fc:	4a02      	ldr	r2, [pc, #8]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092fe:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20008a94 	.word	0x20008a94

0800930c <_GLOBAL__sub_I_touchgfx_fonts>:
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
 8009310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009314:	2001      	movs	r0, #1
 8009316:	f7ff ffd7 	bl	80092c8 <_Z41__static_initialization_and_destruction_0ii>
 800931a:	bd80      	pop	{r7, pc}

0800931c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	4a05      	ldr	r2, [pc, #20]	; (800933c <_ZN19FrontendApplicationD1Ev+0x20>)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe f8e1 	bl	80074f4 <_ZN23FrontendApplicationBaseD1Ev>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	08020680 	.word	0x08020680

08009340 <_ZN19FrontendApplicationD0Ev>:
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ffe7 	bl	800931c <_ZN19FrontendApplicationD1Ev>
 800934e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f014 fa5b 	bl	801d80e <_ZdlPvj>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f86d 	bl	8009450 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	f005 fde7 	bl	800ef4c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe f8ee 	bl	800757c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80093a0:	4a03      	ldr	r2, [pc, #12]	; (80093b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]
{

}
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	08020680 	.word	0x08020680

080093b4 <_ZN11MenuElementD1Ev>:

class MenuElement : public MenuElementBase
{
public:
    MenuElement();
    virtual ~MenuElement() {}
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	4a05      	ldr	r2, [pc, #20]	; (80093d4 <_ZN11MenuElementD1Ev+0x20>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fee1 	bl	800818c <_ZN15MenuElementBaseD1Ev>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	080206c4 	.word	0x080206c4

080093d8 <_ZN11MenuElementD0Ev>:
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff ffe7 	bl	80093b4 <_ZN11MenuElementD1Ev>
 80093e6:	2184      	movs	r1, #132	; 0x84
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f014 fa10 	bl	801d80e <_ZdlPvj>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <_ZN11MenuElementC1Ev>:
#include <gui/containers/MenuElement.hpp>

MenuElement::MenuElement()
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe ff14 	bl	8008230 <_ZN15MenuElementBaseC1Ev>
 8009408:	4a03      	ldr	r2, [pc, #12]	; (8009418 <_ZN11MenuElementC1Ev+0x20>)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	601a      	str	r2, [r3, #0]
{

}
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	080206c4 	.word	0x080206c4

0800941c <_ZN11MenuElement10initializeEv>:

void MenuElement::initialize()
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
    MenuElementBase::initialize();
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe ff5e 	bl	80082e8 <_ZN15MenuElementBase10initializeEv>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
{

}
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]

}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
    {
    }
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
    {
    }
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
    {
 8009494:	4a04      	ldr	r2, [pc, #16]	; (80094a8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
    }
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	08020788 	.word	0x08020788

080094ac <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
    }
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ffe9 	bl	800948c <_ZN8touchgfx9PresenterD1Ev>
 80094ba:	2104      	movs	r1, #4
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f014 f9a6 	bl	801d80e <_ZdlPvj>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
    {
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	601a      	str	r2, [r3, #0]
    }
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	08020788 	.word	0x08020788

080094ec <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	4a06      	ldr	r2, [pc, #24]	; (8009510 <_ZN13ModelListenerC1Ev+0x24>)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	08020778 	.word	0x08020778

08009514 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4a04      	ldr	r2, [pc, #16]	; (8009530 <_ZN13ModelListenerD1Ev+0x1c>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	08020778 	.word	0x08020778

08009534 <_ZN13ModelListenerD0Ev>:
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ffe9 	bl	8009514 <_ZN13ModelListenerD1Ev>
 8009542:	2108      	movs	r1, #8
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f014 f962 	bl	801d80e <_ZdlPvj>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	4a09      	ldr	r2, [pc, #36]	; (8009584 <_ZN15screenPresenterD1Ev+0x30>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	4a09      	ldr	r2, [pc, #36]	; (8009588 <_ZN15screenPresenterD1Ev+0x34>)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3304      	adds	r3, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff ffd1 	bl	8009514 <_ZN13ModelListenerD1Ev>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff ff89 	bl	800948c <_ZN8touchgfx9PresenterD1Ev>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	08020750 	.word	0x08020750
 8009588:	08020768 	.word	0x08020768

0800958c <_ZThn4_N15screenPresenterD1Ev>:
 800958c:	f1a0 0004 	sub.w	r0, r0, #4
 8009590:	e7e0      	b.n	8009554 <_ZN15screenPresenterD1Ev>
 8009592:	bf00      	nop

08009594 <_ZN15screenPresenterD0Ev>:
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff ffd9 	bl	8009554 <_ZN15screenPresenterD1Ev>
 80095a2:	2110      	movs	r1, #16
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f014 f932 	bl	801d80e <_ZdlPvj>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <_ZThn4_N15screenPresenterD0Ev>:
 80095b4:	f1a0 0004 	sub.w	r0, r0, #4
 80095b8:	e7ec      	b.n	8009594 <_ZN15screenPresenterD0Ev>
	...

080095bc <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
    : view(v)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff ff7f 	bl	80094cc <_ZN8touchgfx9PresenterC1Ev>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff ff8a 	bl	80094ec <_ZN13ModelListenerC1Ev>
 80095d8:	4a06      	ldr	r2, [pc, #24]	; (80095f4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	4a06      	ldr	r2, [pc, #24]	; (80095f8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	60da      	str	r2, [r3, #12]
{

}
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	08020750 	.word	0x08020750
 80095f8:	08020768 	.word	0x08020768

080095fc <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	4a05      	ldr	r2, [pc, #20]	; (8009644 <_ZN10screenViewD1Ev+0x20>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff f8bb 	bl	80087b0 <_ZN14screenViewBaseD1Ev>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	080207a0 	.word	0x080207a0

08009648 <_ZN10screenViewD0Ev>:
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ffe7 	bl	8009624 <_ZN10screenViewD1Ev>
 8009656:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f014 f8d7 	bl	801d80e <_ZdlPvj>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>

screenView::screenView()
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff f970 	bl	800895c <_ZN14screenViewBaseC1Ev>
 800967c:	4a03      	ldr	r2, [pc, #12]	; (800968c <_ZN10screenViewC1Ev+0x20>)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	601a      	str	r2, [r3, #0]
{

}
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	080207a0 	.word	0x080207a0

08009690 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fa28 	bl	8008af0 <_ZN14screenViewBase11setupScreenEv>
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe ffca 	bl	800864c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <_ZN10screenView15handleTickEventEv>:

void screenView::handleTickEvent()
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
    tickCounter++;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274

    if (tickCounter == 100)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80096dc:	2b64      	cmp	r3, #100	; 0x64
 80096de:	d11f      	bne.n	8009720 <_ZN10screenView15handleTickEventEv+0x60>
    {
    	tickCounter = 0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274

    	countItem > 9 ? countItem = 0 : countItem++;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	dd04      	ble.n	80096fc <_ZN10screenView15handleTickEventEv+0x3c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 80096fa:	e006      	b.n	800970a <_ZN10screenView15handleTickEventEv+0x4a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

    	scrollWheel1.animateToItem(countItem, 30);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009716:	b21b      	sxth	r3, r3
 8009718:	221e      	movs	r2, #30
 800971a:	4619      	mov	r1, r3
 800971c:	f002 fbf4 	bl	800bf08 <_ZN8touchgfx10ScrollBase13animateToItemEss>
    }
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
    {
 8009730:	4a04      	ldr	r2, [pc, #16]	; (8009744 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	601a      	str	r2, [r3, #0]
    }
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	080207f0 	.word	0x080207f0

08009748 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    }
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff ffe9 	bl	8009728 <_ZN8touchgfx15TouchControllerD1Ev>
 8009756:	2104      	movs	r1, #4
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f014 f858 	bl	801d80e <_ZdlPvj>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	4a05      	ldr	r2, [pc, #20]	; (80097b8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ffbd 	bl	8009728 <_ZN8touchgfx15TouchControllerD1Ev>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	080207d8 	.word	0x080207d8

080097bc <_ZN20STM32TouchControllerD0Ev>:
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ffe7 	bl	8009798 <_ZN20STM32TouchControllerD1Ev>
 80097ca:	2104      	movs	r1, #4
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f014 f81e 	bl	801d80e <_ZdlPvj>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]

}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	4603      	mov	r3, r0
 80097fa:	71fb      	strb	r3, [r7, #7]

}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	71fb      	strb	r3, [r7, #7]

}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
    {
 8009828:	4a04      	ldr	r2, [pc, #16]	; (800983c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
    }
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	08021354 	.word	0x08021354

08009840 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
    }
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ffe9 	bl	8009820 <_ZN8touchgfx3HALD1Ev>
 800984e:	217c      	movs	r1, #124	; 0x7c
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f013 ffdc 	bl	801d80e <_ZdlPvj>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	e000      	b.n	80098b0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80098ae:	2300      	movs	r3, #0
        }
    }
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80098c6:	3301      	adds	r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f003 fc9f 	bl	800d228 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3390      	adds	r3, #144	; 0x90
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
    }
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
    {
        return false;
 8009908:	2300      	movs	r3, #0
    }
 800990a:	4618      	mov	r0, r3
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800992e:	4a12      	ldr	r2, [pc, #72]	; (8009978 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8009930:	f240 216b 	movw	r1, #619	; 0x26b
 8009934:	4811      	ldr	r0, [pc, #68]	; (800997c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8009936:	f014 fd07 	bl	801e348 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	bf14      	ite	ne
 8009952:	2301      	movne	r3, #1
 8009954:	2300      	moveq	r3, #0
 8009956:	b2da      	uxtb	r2, r3
 8009958:	4b09      	ldr	r3, [pc, #36]	; (8009980 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800995a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	bf14      	ite	ne
 8009962:	2301      	movne	r3, #1
 8009964:	2300      	moveq	r3, #0
 8009966:	b2da      	uxtb	r2, r3
 8009968:	4b06      	ldr	r3, [pc, #24]	; (8009984 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800996a:	701a      	strb	r2, [r3, #0]
    }
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0801fec0 	.word	0x0801fec0
 8009978:	0801fef8 	.word	0x0801fef8
 800997c:	0801ff48 	.word	0x0801ff48
 8009980:	20009bf2 	.word	0x20009bf2
 8009984:	20009bf3 	.word	0x20009bf3

08009988 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009990:	2300      	movs	r3, #0
    }
 8009992:	4618      	mov	r0, r3
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b6:	887a      	ldrh	r2, [r7, #2]
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
        }
    }
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80099cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3318      	adds	r3, #24
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4610      	mov	r0, r2
 80099f4:	4798      	blx	r3
 80099f6:	4603      	mov	r3, r0
    }
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8009a08:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00c      	beq.n	8009a2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3328      	adds	r3, #40	; 0x28
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d101      	bne.n	8009a2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	e001      	b.n	8009a3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20009bf2 	.word	0x20009bf2

08009a48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d017      	beq.n	8009a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8009a60:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d12a      	bne.n	8009abe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8009a6a:	881a      	ldrh	r2, [r3, #0]
 8009a6c:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8009a6e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8009a70:	4b19      	ldr	r3, [pc, #100]	; (8009ad8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8009a72:	881a      	ldrh	r2, [r3, #0]
 8009a74:	4b19      	ldr	r3, [pc, #100]	; (8009adc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8009a76:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8009a78:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8009a7a:	881a      	ldrh	r2, [r3, #0]
 8009a7c:	4b16      	ldr	r3, [pc, #88]	; (8009ad8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8009a7e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8009a80:	4b16      	ldr	r3, [pc, #88]	; (8009adc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8009a82:	881a      	ldrh	r2, [r3, #0]
 8009a84:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8009a86:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8009a88:	4b10      	ldr	r3, [pc, #64]	; (8009acc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8009a8e:	e016      	b.n	8009abe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d012      	beq.n	8009abe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8009a9a:	881a      	ldrh	r2, [r3, #0]
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8009a9e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8009aa2:	881a      	ldrh	r2, [r3, #0]
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8009aa6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8009aaa:	881a      	ldrh	r2, [r3, #0]
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8009aae:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8009ab0:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8009ab2:	881a      	ldrh	r2, [r3, #0]
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8009ab6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]
    }
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20009bec 	.word	0x20009bec
 8009ad0:	20009be8 	.word	0x20009be8
 8009ad4:	20009bee 	.word	0x20009bee
 8009ad8:	20009bea 	.word	0x20009bea
 8009adc:	20009bf0 	.word	0x20009bf0

08009ae0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fe34 	bl	800c758 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	4a05      	ldr	r2, [pc, #20]	; (8009b18 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fe89 	bl	8009820 <_ZN8touchgfx3HALD1Ev>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	08020a1c 	.word	0x08020a1c

08009b1c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff ffe7 	bl	8009af8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8009b2a:	217c      	movs	r1, #124	; 0x7c
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f013 fe6e 	bl	801d80e <_ZdlPvj>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff ffca 	bl	8009ae0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZN11TouchGFXHAL10initializeEv>:
#include "../../oled160128/Inc/oled160128.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fb60 	bl	800b224 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fba4 	bl	800b2c4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fba0 	bl	800b2da <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.

//    TouchGFXGeneratedHAL::flushFrameBuffer(rect);

		/* Set Cursor */
		Oled_160128_Set_Window(rect.x, rect.y, rect.width, rect.height);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bb2:	b298      	uxth	r0, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009bba:	b299      	uxth	r1, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f001 fc0f 	bl	800b3ee <Oled_160128_Set_Window>

		/* Prepare to write to LCD RAM */
		Oled_160128_Command(0x22);
 8009bd0:	2022      	movs	r0, #34	; 0x22
 8009bd2:	f001 fbd9 	bl	800b388 <Oled_160128_Command>

		/* Send Pixels */
		this->copyFrameBufferBlockToLCD(rect);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	6819      	ldr	r1, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	460a      	mov	r2, r1
 8009bde:	6859      	ldr	r1, [r3, #4]
 8009be0:	2300      	movs	r3, #0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4611      	mov	r1, r2
 8009be6:	461a      	mov	r2, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f846 	bl	8009c7a <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	f001 fb80 	bl	800b310 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8009c10:	4603      	mov	r3, r0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 fb21 	bl	800b26c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 fb21 	bl	800b284 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fb20 	bl	800b29a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fb1f 	bl	800b2b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const touchgfx::Rect rect)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	1d3b      	adds	r3, r7, #4
 8009c84:	e883 0006 	stmia.w	r3, {r1, r2}
    __IO uint16_t* ptr;
    uint16_t height;

    // Use default implementation (CPU copy!).
    // This can be accelerated using regular DMA hardware
    for (height = 0; height < rect.height ; height++)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	82fb      	strh	r3, [r7, #22]
 8009c8c:	8afb      	ldrh	r3, [r7, #22]
 8009c8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009c92:	4293      	cmp	r3, r2
 8009c94:	da1e      	bge.n	8009cd4 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x5a>
    {
    	ptr = getClientFrameBuffer() + rect.x + (height + rect.y)  * 160;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff feb1 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	8afb      	ldrh	r3, [r7, #22]
 8009ca8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009cac:	440b      	add	r3, r1
 8009cae:	4619      	mov	r1, r3
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	015b      	lsls	r3, r3, #5
 8009cb8:	4403      	add	r3, r0
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	4413      	add	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]
      LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
 8009cc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6938      	ldr	r0, [r7, #16]
 8009cc8:	f001 fc8a 	bl	800b5e0 <LCD_IO_WriteMultipleData>
    for (height = 0; height < rect.height ; height++)
 8009ccc:	8afb      	ldrh	r3, [r7, #22]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	82fb      	strh	r3, [r7, #22]
 8009cd2:	e7db      	b.n	8009c8c <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x12>
    }
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <touchgfx_signalVSyncTimer>:

extern "C" void touchgfx_signalVSyncTimer(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
    HAL::getInstance()->vSync();
 8009ce0:	f7fd fabe 	bl	8007260 <_ZN8touchgfx3HAL11getInstanceEv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff fde6 	bl	80098b8 <_ZN8touchgfx3HAL5vSyncEv>
    touchgfx::OSWrappers::signalVSync();
 8009cec:	f000 f88c 	bl	8009e08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8009cf0:	bf00      	nop
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	4a05      	ldr	r2, [pc, #20]	; (8009d14 <_ZN11TouchGFXHALD1Ev+0x20>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff fef7 	bl	8009af8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	08020808 	.word	0x08020808

08009d18 <_ZN11TouchGFXHALD0Ev>:
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ffe7 	bl	8009cf4 <_ZN11TouchGFXHALD1Ev>
 8009d26:	217c      	movs	r1, #124	; 0x7c
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f013 fd70 	bl	801d80e <_ZdlPvj>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4811      	ldr	r0, [pc, #68]	; (8009d84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8009d40:	f7f9 fd64 	bl	800380c <osSemaphoreCreate>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a10      	ldr	r2, [pc, #64]	; (8009d88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8009d48:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8009d54:	4a0e      	ldr	r2, [pc, #56]	; (8009d90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8009d56:	2125      	movs	r1, #37	; 0x25
 8009d58:	480e      	ldr	r0, [pc, #56]	; (8009d94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8009d5a:	f014 faf5 	bl	801e348 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8009d5e:	2101      	movs	r1, #1
 8009d60:	480d      	ldr	r0, [pc, #52]	; (8009d98 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8009d62:	f7f9 fd53 	bl	800380c <osSemaphoreCreate>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4a0c      	ldr	r2, [pc, #48]	; (8009d9c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8009d6a:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d105      	bne.n	8009d80 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8009d74:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8009d76:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8009d78:	2128      	movs	r1, #40	; 0x28
 8009d7a:	4806      	ldr	r0, [pc, #24]	; (8009d94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8009d7c:	f014 fae4 	bl	801e348 <__assert_func>
}
 8009d80:	bf00      	nop
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	080208bc 	.word	0x080208bc
 8009d88:	20008aa0 	.word	0x20008aa0
 8009d8c:	0801ff8c 	.word	0x0801ff8c
 8009d90:	0801ffd8 	.word	0x0801ffd8
 8009d94:	08020008 	.word	0x08020008
 8009d98:	080208c4 	.word	0x080208c4
 8009d9c:	20008aa4 	.word	0x20008aa4
 8009da0:	08020034 	.word	0x08020034

08009da4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f04f 31ff 	mov.w	r1, #4294967295
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7f9 fd5d 	bl	8003870 <osSemaphoreWait>
}
 8009db6:	bf00      	nop
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20008aa0 	.word	0x20008aa0

08009dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8009dc4:	4b03      	ldr	r3, [pc, #12]	; (8009dd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f9 fd9f 	bl	800390c <osSemaphoreRelease>
}
 8009dce:	bf00      	nop
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20008aa0 	.word	0x20008aa0

08009dd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8009ddc:	4b03      	ldr	r3, [pc, #12]	; (8009dec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7f9 fd44 	bl	8003870 <osSemaphoreWait>
}
 8009de8:	bf00      	nop
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20008aa0 	.word	0x20008aa0

08009df0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8009df4:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 fd87 	bl	800390c <osSemaphoreRelease>
}
 8009dfe:	bf00      	nop
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20008aa0 	.word	0x20008aa0

08009e08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8009e0c:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7f9 fd7b 	bl	800390c <osSemaphoreRelease>
}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20008aa4 	.word	0x20008aa4

08009e20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8009e24:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f9 fd20 	bl	8003870 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8009e30:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f04f 31ff 	mov.w	r1, #4294967295
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f9 fd19 	bl	8003870 <osSemaphoreWait>
}
 8009e3e:	bf00      	nop
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20008aa4 	.word	0x20008aa4

08009e48 <__NVIC_EnableIRQ>:
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	db0b      	blt.n	8009e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	f003 021f 	and.w	r2, r3, #31
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <__NVIC_EnableIRQ+0x38>)
 8009e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e66:	095b      	lsrs	r3, r3, #5
 8009e68:	2001      	movs	r0, #1
 8009e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8009e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	e000e100 	.word	0xe000e100

08009e84 <__NVIC_DisableIRQ>:
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	db12      	blt.n	8009ebc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 021f 	and.w	r2, r3, #31
 8009e9c:	490a      	ldr	r1, [pc, #40]	; (8009ec8 <__NVIC_DisableIRQ+0x44>)
 8009e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eaa:	3320      	adds	r3, #32
 8009eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009eb0:	f3bf 8f4f 	dsb	sy
}
 8009eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009eb6:	f3bf 8f6f 	isb	sy
}
 8009eba:	bf00      	nop
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	e000e100 	.word	0xe000e100

08009ecc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
        : color(0)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    }
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
        return color;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
    }
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
    {
 8009f08:	4a04      	ldr	r2, [pc, #16]	; (8009f1c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
    }
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	08020924 	.word	0x08020924

08009f20 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    }
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ffe9 	bl	8009f00 <_ZN8touchgfx9DMA_QueueD1Ev>
 8009f2e:	2104      	movs	r1, #4
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f013 fc6c 	bl	801d80e <_ZdlPvj>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3344      	adds	r3, #68	; 0x44
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
    }
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
    {
 8009f64:	4a04      	ldr	r2, [pc, #16]	; (8009f78 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
    }
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	080217a0 	.word	0x080217a0

08009f7c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
    }
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff ffe9 	bl	8009f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8009f8a:	210c      	movs	r1, #12
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f013 fc3e 	bl	801d80e <_ZdlPvj>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8009fa6:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	605a      	str	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	721a      	strb	r2, [r3, #8]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	725a      	strb	r2, [r3, #9]
    {
    }
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	080217a0 	.word	0x080217a0

08009fd0 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8009fd8:	2301      	movs	r3, #1
    }
 8009fda:	4618      	mov	r0, r3
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3328      	adds	r3, #40	; 0x28
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
    }
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4610      	mov	r0, r2
 800a01c:	4798      	blx	r3
    }
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 800a02e:	f7fd f917 	bl	8007260 <_ZN8touchgfx3HAL11getInstanceEv>
 800a032:	4603      	mov	r3, r0
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff ffe5 	bl	800a004 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff ff3c 	bl	8009ecc <_ZN8touchgfx9colortypeC1Ev>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 800a060:	b5b0      	push	{r4, r5, r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	330c      	adds	r3, #12
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f7ff ff93 	bl	8009f9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800a076:	4a0e      	ldr	r2, [pc, #56]	; (800a0b0 <_ZN10STM32F7DMAC1Ev+0x50>)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f103 000c 	add.w	r0, r3, #12
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3320      	adds	r3, #32
 800a086:	2260      	movs	r2, #96	; 0x60
 800a088:	4619      	mov	r1, r3
 800a08a:	f003 fa2d 	bl	800d4e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3320      	adds	r3, #32
 800a092:	245f      	movs	r4, #95	; 0x5f
 800a094:	461d      	mov	r5, r3
 800a096:	2c00      	cmp	r4, #0
 800a098:	db05      	blt.n	800a0a6 <_ZN10STM32F7DMAC1Ev+0x46>
 800a09a:	4628      	mov	r0, r5
 800a09c:	f7ff ffd1 	bl	800a042 <_ZN8touchgfx6BlitOpC1Ev>
 800a0a0:	3520      	adds	r5, #32
 800a0a2:	3c01      	subs	r4, #1
 800a0a4:	e7f7      	b.n	800a096 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a0b0:	080208d4 	.word	0x080208d4

0800a0b4 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <_ZN10STM32F7DMAD1Ev+0x30>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800a0c2:	205a      	movs	r0, #90	; 0x5a
 800a0c4:	f7ff fede 	bl	8009e84 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fb27 	bl	800a720 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff ff41 	bl	8009f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	080208d4 	.word	0x080208d4

0800a0e8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
}
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff ffdf 	bl	800a0b4 <_ZN10STM32F7DMAD1Ev>
 800a0f6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f013 fb87 	bl	801d80e <_ZdlPvj>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a114:	4b10      	ldr	r3, [pc, #64]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	4a0f      	ldr	r2, [pc, #60]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a11a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a11e:	6313      	str	r3, [r2, #48]	; 0x30
 800a120:	4b0d      	ldr	r3, [pc, #52]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	4a09      	ldr	r2, [pc, #36]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a136:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800a138:	4b07      	ldr	r3, [pc, #28]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4a06      	ldr	r2, [pc, #24]	; (800a158 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800a13e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a142:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800a144:	4b05      	ldr	r3, [pc, #20]	; (800a15c <_ZN10STM32F7DMA10initializeEv+0x50>)
 800a146:	4a06      	ldr	r2, [pc, #24]	; (800a160 <_ZN10STM32F7DMA10initializeEv+0x54>)
 800a148:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800a14a:	205a      	movs	r0, #90	; 0x5a
 800a14c:	f7ff fe7c 	bl	8009e48 <__NVIC_EnableIRQ>
}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40023800 	.word	0x40023800
 800a15c:	20009f14 	.word	0x20009f14
 800a160:	0800a027 	.word	0x0800a027

0800a164 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

    switch (format)
 800a174:	78fb      	ldrb	r3, [r7, #3]
 800a176:	2b0b      	cmp	r3, #11
 800a178:	d826      	bhi.n	800a1c8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1bd 	.word	0x0800a1bd
 800a184:	0800a1b7 	.word	0x0800a1b7
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1c9 	.word	0x0800a1c9
 800a190:	0800a1c9 	.word	0x0800a1c9
 800a194:	0800a1c9 	.word	0x0800a1c9
 800a198:	0800a1c9 	.word	0x0800a1c9
 800a19c:	0800a1c3 	.word	0x0800a1c3
 800a1a0:	0800a1c3 	.word	0x0800a1c3
 800a1a4:	0800a1c3 	.word	0x0800a1c3
 800a1a8:	0800a1c3 	.word	0x0800a1c3
 800a1ac:	0800a1c3 	.word	0x0800a1c3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60fb      	str	r3, [r7, #12]
        break;
 800a1b4:	e00e      	b.n	800a1d4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
        break;
 800a1ba:	e00b      	b.n	800a1d4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	60fb      	str	r3, [r7, #12]
        break;
 800a1c0:	e008      	b.n	800a1d4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800a1c2:	2305      	movs	r3, #5
 800a1c4:	60fb      	str	r3, [r7, #12]
        break;
 800a1c6:	e005      	b.n	800a1d4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800a1ca:	4a06      	ldr	r2, [pc, #24]	; (800a1e4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800a1cc:	2165      	movs	r1, #101	; 0x65
 800a1ce:	4806      	ldr	r0, [pc, #24]	; (800a1e8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800a1d0:	f014 f8ba 	bl	801e348 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	08020070 	.word	0x08020070
 800a1e4:	0802008c 	.word	0x0802008c
 800a1e8:	080200d8 	.word	0x080200d8

0800a1ec <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]

    switch (format)
 800a1fc:	78fb      	ldrb	r3, [r7, #3]
 800a1fe:	2b0a      	cmp	r3, #10
 800a200:	d821      	bhi.n	800a246 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a241 	.word	0x0800a241
 800a20c:	0800a23b 	.word	0x0800a23b
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a247 	.word	0x0800a247
 800a218:	0800a247 	.word	0x0800a247
 800a21c:	0800a247 	.word	0x0800a247
 800a220:	0800a247 	.word	0x0800a247
 800a224:	0800a23b 	.word	0x0800a23b
 800a228:	0800a23b 	.word	0x0800a23b
 800a22c:	0800a23b 	.word	0x0800a23b
 800a230:	0800a23b 	.word	0x0800a23b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
        break;
 800a238:	e00b      	b.n	800a252 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800a23a:	2301      	movs	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
        break;
 800a23e:	e008      	b.n	800a252 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800a240:	2302      	movs	r3, #2
 800a242:	60fb      	str	r3, [r7, #12]
        break;
 800a244:	e005      	b.n	800a252 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800a248:	4a05      	ldr	r2, [pc, #20]	; (800a260 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800a24a:	2186      	movs	r1, #134	; 0x86
 800a24c:	4805      	ldr	r0, [pc, #20]	; (800a264 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800a24e:	f014 f87b 	bl	801e348 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800a252:	68fb      	ldr	r3, [r7, #12]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	08020070 	.word	0x08020070
 800a260:	08020104 	.word	0x08020104
 800a264:	080200d8 	.word	0x080200d8

0800a268 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800a270:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 800a280:	b590      	push	{r4, r7, lr}
 800a282:	b089      	sub	sp, #36	; 0x24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	7f5b      	ldrb	r3, [r3, #29]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ff67 	bl	800a164 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800a296:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	7f9b      	ldrb	r3, [r3, #30]
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff ff60 	bl	800a164 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800a2a4:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	7f9b      	ldrb	r3, [r3, #30]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff ff9d 	bl	800a1ec <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800a2b2:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	8adb      	ldrh	r3, [r3, #22]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	8a1b      	ldrh	r3, [r3, #16]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	4b8b      	ldr	r3, [pc, #556]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	8adb      	ldrh	r3, [r3, #22]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	8a1b      	ldrh	r3, [r3, #16]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	4b87      	ldr	r3, [pc, #540]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a2d2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	8a9b      	ldrh	r3, [r3, #20]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	8a1b      	ldrh	r3, [r3, #16]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	4b83      	ldr	r3, [pc, #524]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a2e2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800a2e4:	4a82      	ldr	r2, [pc, #520]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	8a5b      	ldrh	r3, [r3, #18]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	8a1b      	ldrh	r3, [r3, #16]
 800a2f4:	041b      	lsls	r3, r3, #16
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	4b7d      	ldr	r3, [pc, #500]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a2fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a302:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	4b79      	ldr	r3, [pc, #484]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a30a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a314:	d046      	beq.n	800a3a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 800a316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31a:	f200 80f9 	bhi.w	800a510 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800a31e:	2b80      	cmp	r3, #128	; 0x80
 800a320:	d00e      	beq.n	800a340 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 800a322:	2b80      	cmp	r3, #128	; 0x80
 800a324:	f200 80f4 	bhi.w	800a510 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	f000 80cc 	beq.w	800a4c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800a32e:	2b40      	cmp	r3, #64	; 0x40
 800a330:	f200 80ee 	bhi.w	800a510 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800a334:	2b04      	cmp	r3, #4
 800a336:	d067      	beq.n	800a408 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
 800a338:	2b20      	cmp	r3, #32
 800a33a:	f000 80c4 	beq.w	800a4c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800a33e:	e0e7      	b.n	800a510 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	7f1b      	ldrb	r3, [r3, #28]
 800a344:	061b      	lsls	r3, r3, #24
 800a346:	4619      	mov	r1, r3
 800a348:	4a69      	ldr	r2, [pc, #420]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a34a:	4b6a      	ldr	r3, [pc, #424]	; (800a4f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800a34c:	430b      	orrs	r3, r1
 800a34e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	3318      	adds	r3, #24
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff fdc7 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a35a:	4603      	mov	r3, r0
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	3318      	adds	r3, #24
 800a366:	4618      	mov	r0, r3
 800a368:	f7ff fdbe 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a36c:	4603      	mov	r3, r0
 800a36e:	015b      	lsls	r3, r3, #5
 800a370:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800a374:	431c      	orrs	r4, r3
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	3318      	adds	r3, #24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fdb4 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a380:	4603      	mov	r3, r0
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800a388:	4a59      	ldr	r2, [pc, #356]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a38a:	4323      	orrs	r3, r4
 800a38c:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a38e:	4a58      	ldr	r2, [pc, #352]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	4b55      	ldr	r3, [pc, #340]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a39a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800a39c:	4b54      	ldr	r3, [pc, #336]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a39e:	4a56      	ldr	r2, [pc, #344]	; (800a4f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800a3a0:	601a      	str	r2, [r3, #0]
        break;
 800a3a2:	e0f6      	b.n	800a592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	7f1b      	ldrb	r3, [r3, #28]
 800a3a8:	061b      	lsls	r3, r3, #24
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4a50      	ldr	r2, [pc, #320]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a3ae:	4b53      	ldr	r3, [pc, #332]	; (800a4fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3318      	adds	r3, #24
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff fd95 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	3318      	adds	r3, #24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fd8c 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	015b      	lsls	r3, r3, #5
 800a3d4:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800a3d8:	431c      	orrs	r4, r3
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	3318      	adds	r3, #24
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fd82 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800a3ec:	4a40      	ldr	r2, [pc, #256]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a3ee:	4323      	orrs	r3, r4
 800a3f0:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a3f2:	4a3f      	ldr	r2, [pc, #252]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	4b3c      	ldr	r3, [pc, #240]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a3fe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800a400:	4b3b      	ldr	r3, [pc, #236]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a402:	4a3d      	ldr	r2, [pc, #244]	; (800a4f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800a404:	601a      	str	r2, [r3, #0]
        break;
 800a406:	e0c4      	b.n	800a592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	7f1b      	ldrb	r3, [r3, #28]
 800a40c:	061b      	lsls	r3, r3, #24
 800a40e:	461a      	mov	r2, r3
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4313      	orrs	r3, r2
 800a414:	4a36      	ldr	r2, [pc, #216]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a41a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a41c:	4a34      	ldr	r2, [pc, #208]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	4b32      	ldr	r3, [pc, #200]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a428:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	7f5b      	ldrb	r3, [r3, #29]
 800a42e:	2b0b      	cmp	r3, #11
 800a430:	d145      	bne.n	800a4be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	4b2c      	ldr	r3, [pc, #176]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a43e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d00d      	beq.n	800a46a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 800a44e:	e01a      	b.n	800a486 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800a450:	4b27      	ldr	r3, [pc, #156]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a452:	69da      	ldr	r2, [r3, #28]
 800a454:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800a456:	4013      	ands	r3, r2
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	8852      	ldrh	r2, [r2, #2]
 800a45c:	3a01      	subs	r2, #1
 800a45e:	0212      	lsls	r2, r2, #8
 800a460:	4611      	mov	r1, r2
 800a462:	4a23      	ldr	r2, [pc, #140]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a464:	430b      	orrs	r3, r1
 800a466:	61d3      	str	r3, [r2, #28]
                break;
 800a468:	e013      	b.n	800a492 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800a46a:	4b21      	ldr	r3, [pc, #132]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a46c:	69da      	ldr	r2, [r3, #28]
 800a46e:	4b24      	ldr	r3, [pc, #144]	; (800a500 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800a470:	4013      	ands	r3, r2
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	8852      	ldrh	r2, [r2, #2]
 800a476:	3a01      	subs	r2, #1
 800a478:	0212      	lsls	r2, r2, #8
 800a47a:	4313      	orrs	r3, r2
 800a47c:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a47e:	f043 0310 	orr.w	r3, r3, #16
 800a482:	61d3      	str	r3, [r2, #28]
                break;
 800a484:	e005      	b.n	800a492 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800a486:	4b1f      	ldr	r3, [pc, #124]	; (800a504 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 800a488:	4a1f      	ldr	r2, [pc, #124]	; (800a508 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 800a48a:	21fc      	movs	r1, #252	; 0xfc
 800a48c:	481f      	ldr	r0, [pc, #124]	; (800a50c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800a48e:	f013 ff5b 	bl	801e348 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800a492:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	4a16      	ldr	r2, [pc, #88]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a498:	f043 0320 	orr.w	r3, r3, #32
 800a49c:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800a49e:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bf14      	ite	ne
 800a4aa:	2301      	movne	r3, #1
 800a4ac:	2300      	moveq	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
                __NOP();
 800a4b4:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800a4b6:	e7f2      	b.n	800a49e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800a4b8:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4ba:	2210      	movs	r2, #16
 800a4bc:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800a4be:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4c0:	4a0d      	ldr	r2, [pc, #52]	; (800a4f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800a4c2:	601a      	str	r2, [r3, #0]
        break;
 800a4c4:	e065      	b.n	800a592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	7f1b      	ldrb	r3, [r3, #28]
 800a4ca:	061b      	lsls	r3, r3, #24
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	4a07      	ldr	r2, [pc, #28]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4d8:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a4da:	4a05      	ldr	r2, [pc, #20]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	68da      	ldr	r2, [r3, #12]
 800a4e4:	4b02      	ldr	r3, [pc, #8]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4e6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800a4ea:	4a03      	ldr	r2, [pc, #12]	; (800a4f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800a4ec:	601a      	str	r2, [r3, #0]
        break;
 800a4ee:	e050      	b.n	800a592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
 800a4f0:	4002b000 	.word	0x4002b000
 800a4f4:	0002000a 	.word	0x0002000a
 800a4f8:	00020201 	.word	0x00020201
 800a4fc:	00020009 	.word	0x00020009
 800a500:	ffff00ef 	.word	0xffff00ef
 800a504:	08020154 	.word	0x08020154
 800a508:	08020170 	.word	0x08020170
 800a50c:	080200d8 	.word	0x080200d8
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	7f1b      	ldrb	r3, [r3, #28]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	461a      	mov	r2, r3
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	4a1f      	ldr	r2, [pc, #124]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a522:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	7f5b      	ldrb	r3, [r3, #29]
 800a528:	2b0b      	cmp	r3, #11
 800a52a:	d12d      	bne.n	800a588 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x308>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1d1a      	adds	r2, r3, #4
 800a536:	4b19      	ldr	r3, [pc, #100]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a538:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800a53a:	4b18      	ldr	r3, [pc, #96]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a53c:	69da      	ldr	r2, [r3, #28]
 800a53e:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 800a540:	4013      	ands	r3, r2
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	8852      	ldrh	r2, [r2, #2]
 800a546:	3a01      	subs	r2, #1
 800a548:	0212      	lsls	r2, r2, #8
 800a54a:	4313      	orrs	r3, r2
 800a54c:	4a13      	ldr	r2, [pc, #76]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a54e:	f043 0310 	orr.w	r3, r3, #16
 800a552:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800a554:	4b11      	ldr	r3, [pc, #68]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	4a10      	ldr	r2, [pc, #64]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a55a:	f043 0320 	orr.w	r3, r3, #32
 800a55e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800a560:	4b0e      	ldr	r3, [pc, #56]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bf14      	ite	ne
 800a56c:	2301      	movne	r3, #1
 800a56e:	2300      	moveq	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fa>
            {
                __NOP();
 800a576:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800a578:	e7f2      	b.n	800a560 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800a57a:	4b08      	ldr	r3, [pc, #32]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a57c:	2210      	movs	r2, #16
 800a57e:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800a580:	4b06      	ldr	r3, [pc, #24]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a582:	4a08      	ldr	r2, [pc, #32]	; (800a5a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800a584:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800a586:	e003      	b.n	800a590 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800a58a:	f240 2201 	movw	r2, #513	; 0x201
 800a58e:	601a      	str	r2, [r3, #0]
        break;
 800a590:	bf00      	nop
    }
}
 800a592:	bf00      	nop
 800a594:	3724      	adds	r7, #36	; 0x24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd90      	pop	{r4, r7, pc}
 800a59a:	bf00      	nop
 800a59c:	4002b000 	.word	0x4002b000
 800a5a0:	ffff00ef 	.word	0xffff00ef
 800a5a4:	00010201 	.word	0x00010201

0800a5a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	7f9b      	ldrb	r3, [r3, #30]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fe17 	bl	800a1ec <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800a5be:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800a5c0:	4a53      	ldr	r2, [pc, #332]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	8a5b      	ldrh	r3, [r3, #18]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	8a1b      	ldrh	r3, [r3, #16]
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	4b4e      	ldr	r3, [pc, #312]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a5d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	4b4c      	ldr	r3, [pc, #304]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a5de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	8adb      	ldrh	r3, [r3, #22]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	8a1b      	ldrh	r3, [r3, #16]
 800a5ea:	1ad2      	subs	r2, r2, r3
 800a5ec:	4b48      	ldr	r3, [pc, #288]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d14c      	bne.n	800a692 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xea>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	8adb      	ldrh	r3, [r3, #22]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	8a1b      	ldrh	r3, [r3, #16]
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	4b42      	ldr	r3, [pc, #264]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a606:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	8adb      	ldrh	r3, [r3, #22]
 800a60c:	461a      	mov	r2, r3
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	8a1b      	ldrh	r3, [r3, #16]
 800a612:	1ad2      	subs	r2, r2, r3
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a616:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a618:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	7f1b      	ldrb	r3, [r3, #28]
 800a622:	061b      	lsls	r3, r3, #24
 800a624:	4619      	mov	r1, r3
 800a626:	4a3a      	ldr	r2, [pc, #232]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a628:	4b3a      	ldr	r3, [pc, #232]	; (800a714 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 800a62a:	430b      	orrs	r3, r1
 800a62c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	7f1b      	ldrb	r3, [r3, #28]
 800a632:	061b      	lsls	r3, r3, #24
 800a634:	461c      	mov	r4, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	3318      	adds	r3, #24
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7ff fc54 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a640:	4603      	mov	r3, r0
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800a648:	431c      	orrs	r4, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	3318      	adds	r3, #24
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fc4a 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a654:	4603      	mov	r3, r0
 800a656:	015b      	lsls	r3, r3, #5
 800a658:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800a65c:	431c      	orrs	r4, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	3318      	adds	r3, #24
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fc40 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a668:	4603      	mov	r3, r0
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800a670:	4323      	orrs	r3, r4
 800a672:	4a27      	ldr	r2, [pc, #156]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a678:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	4b24      	ldr	r3, [pc, #144]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a680:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	4b22      	ldr	r3, [pc, #136]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a688:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800a68a:	4b21      	ldr	r3, [pc, #132]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a68c:	4a22      	ldr	r2, [pc, #136]	; (800a718 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 800a68e:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800a690:	e039      	b.n	800a706 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800a692:	4a1f      	ldr	r2, [pc, #124]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800a698:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	7f9b      	ldrb	r3, [r3, #30]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d108      	bne.n	800a6b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	4c19      	ldr	r4, [pc, #100]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fc1b 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6b6:	e023      	b.n	800a700 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x158>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	7f1b      	ldrb	r3, [r3, #28]
 800a6bc:	061b      	lsls	r3, r3, #24
 800a6be:	461c      	mov	r4, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff fc0f 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800a6d2:	431c      	orrs	r4, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	3318      	adds	r3, #24
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fc05 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	015b      	lsls	r3, r3, #5
 800a6e2:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800a6e6:	431c      	orrs	r4, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	3318      	adds	r3, #24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fbfb 	bl	8009ee8 <_ZNK8touchgfx9colortypecvmEv>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800a6fa:	4a05      	ldr	r2, [pc, #20]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a6fc:	4323      	orrs	r3, r4
 800a6fe:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800a700:	4b03      	ldr	r3, [pc, #12]	; (800a710 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800a702:	4a06      	ldr	r2, [pc, #24]	; (800a71c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x174>)
 800a704:	601a      	str	r2, [r3, #0]
}
 800a706:	bf00      	nop
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd90      	pop	{r4, r7, pc}
 800a70e:	bf00      	nop
 800a710:	4002b000 	.word	0x4002b000
 800a714:	00010009 	.word	0x00010009
 800a718:	00020201 	.word	0x00020201
 800a71c:	00030201 	.word	0x00030201

0800a720 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	4a05      	ldr	r2, [pc, #20]	; (800a740 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fbe5 	bl	8009f00 <_ZN8touchgfx9DMA_QueueD1Ev>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	080217f0 	.word	0x080217f0

0800a744 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff ffe7 	bl	800a720 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800a752:	2114      	movs	r1, #20
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f013 f85a 	bl	801d80e <_ZdlPvj>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
        texts = t;
 800a76c:	4a04      	ldr	r2, [pc, #16]	; (800a780 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6013      	str	r3, [r2, #0]
    }
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20009c50 	.word	0x20009c50

0800a784 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800a792:	4a0b      	ldr	r2, [pc, #44]	; (800a7c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	605a      	str	r2, [r3, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	609a      	str	r2, [r3, #8]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	611a      	str	r2, [r3, #16]
    {
    }
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	08020a0c 	.word	0x08020a0c

0800a7c4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    {
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	601a      	str	r2, [r3, #0]
    }
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	08020a0c 	.word	0x08020a0c

0800a7e4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
    }
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ffe9 	bl	800a7c4 <_ZN8touchgfx7MVPHeapD1Ev>
 800a7f2:	2114      	movs	r1, #20
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f013 f80a 	bl	801d80e <_ZdlPvj>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
    {
 800a80c:	4a04      	ldr	r2, [pc, #16]	; (800a820 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
    }
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	08021a8c 	.word	0x08021a8c

0800a824 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
    }
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff ffe9 	bl	800a804 <_ZN8touchgfx3LCDD1Ev>
 800a832:	2108      	movs	r1, #8
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f012 ffea 	bl	801d80e <_ZdlPvj>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	801a      	strh	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	805a      	strh	r2, [r3, #2]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	809a      	strh	r2, [r3, #4]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	80da      	strh	r2, [r3, #6]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	811a      	strh	r2, [r3, #8]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	815a      	strh	r2, [r3, #10]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	819a      	strh	r2, [r3, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	739a      	strb	r2, [r3, #14]
        {
        }
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff ffd5 	bl	800a844 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	611a      	str	r2, [r3, #16]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	829a      	strh	r2, [r3, #20]
    {
    }
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 800a8be:	4a4a      	ldr	r2, [pc, #296]	; (800a9e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	605a      	str	r2, [r3, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	609a      	str	r2, [r3, #8]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	611a      	str	r2, [r3, #16]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	615a      	str	r2, [r3, #20]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	619a      	str	r2, [r3, #24]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	331c      	adds	r3, #28
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff ffcc 	bl	800a88a <_ZN8touchgfx8GesturesC1Ev>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	641a      	str	r2, [r3, #64]	; 0x40
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	645a      	str	r2, [r3, #68]	; 0x44
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	64da      	str	r2, [r3, #76]	; 0x4c
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3350      	adds	r3, #80	; 0x50
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fd f920 	bl	8007b72 <_ZN8touchgfx4RectC1Ev>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	671a      	str	r2, [r3, #112]	; 0x70
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800a9a0:	4a12      	ldr	r2, [pc, #72]	; (800a9ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800a9a6:	4a12      	ldr	r2, [pc, #72]	; (800a9f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800a9a8:	8b3b      	ldrh	r3, [r7, #24]
 800a9aa:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800a9ac:	4a11      	ldr	r2, [pc, #68]	; (800a9f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800a9ae:	8bbb      	ldrh	r3, [r7, #28]
 800a9b0:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800a9b2:	4b11      	ldr	r3, [pc, #68]	; (800a9f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800a9b8:	4b0d      	ldr	r3, [pc, #52]	; (800a9f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800a9ba:	881a      	ldrh	r2, [r3, #0]
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 800a9be:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800a9c0:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800a9c2:	881a      	ldrh	r2, [r3, #0]
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 800a9c6:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800a9c8:	8b3a      	ldrh	r2, [r7, #24]
 800a9ca:	8bbb      	ldrh	r3, [r7, #28]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	bf34      	ite	cc
 800a9d0:	2301      	movcc	r3, #1
 800a9d2:	2300      	movcs	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	08021354 	.word	0x08021354
 800a9ec:	20009bf4 	.word	0x20009bf4
 800a9f0:	20009be8 	.word	0x20009be8
 800a9f4:	20009bea 	.word	0x20009bea
 800a9f8:	20009bec 	.word	0x20009bec
 800a9fc:	20009bee 	.word	0x20009bee
 800aa00:	20009bf0 	.word	0x20009bf0

0800aa04 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fc fe0f 	bl	8007634 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	f7ff fea3 	bl	800a784 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800aa3e:	4a04      	ldr	r2, [pc, #16]	; (800aa50 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]
    {

    }
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	080209f8 	.word	0x080209f8

0800aa54 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__tcf_0+0xc>)
 800aa5a:	f000 f95f 	bl	800ad1c <_ZN12FrontendHeapD1Ev>
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20008aa8 	.word	0x20008aa8

0800aa64 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800aa68:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f3bf 8f5b 	dmb	ish
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d013      	beq.n	800aaac <_ZN12FrontendHeap11getInstanceEv+0x48>
 800aa84:	480b      	ldr	r0, [pc, #44]	; (800aab4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800aa86:	f012 fec4 	bl	801d812 <__cxa_guard_acquire>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <_ZN12FrontendHeap11getInstanceEv+0x48>
 800aa9a:	4807      	ldr	r0, [pc, #28]	; (800aab8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800aa9c:	f000 f868 	bl	800ab70 <_ZN12FrontendHeapC1Ev>
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800aaa2:	f012 fec2 	bl	801d82a <__cxa_guard_release>
 800aaa6:	4805      	ldr	r0, [pc, #20]	; (800aabc <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800aaa8:	f013 fc6c 	bl	801e384 <atexit>
        return instance;
 800aaac:	4b02      	ldr	r3, [pc, #8]	; (800aab8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800aaae:	4618      	mov	r0, r3
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20008ec8 	.word	0x20008ec8
 800aab8:	20008aa8 	.word	0x20008aa8
 800aabc:	0800aa55 	.word	0x0800aa55

0800aac0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	4a05      	ldr	r2, [pc, #20]	; (800aae0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fe77 	bl	800a7c4 <_ZN8touchgfx7MVPHeapD1Ev>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	080209f8 	.word	0x080209f8

0800aae4 <_ZN16FrontendHeapBaseD0Ev>:
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ffe7 	bl	800aac0 <_ZN16FrontendHeapBaseD1Ev>
 800aaf2:	2114      	movs	r1, #20
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f012 fe8a 	bl	801d80e <_ZdlPvj>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fe16 	bl	800b740 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ab14:	4a03      	ldr	r2, [pc, #12]	; (800ab24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	080209c4 	.word	0x080209c4

0800ab28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fe04 	bl	800b740 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ab38:	4a03      	ldr	r2, [pc, #12]	; (800ab48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08020990 	.word	0x08020990

0800ab4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fdf2 	bl	800b740 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ab5c:	4a03      	ldr	r2, [pc, #12]	; (800ab6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	0802095c 	.word	0x0802095c

0800ab70 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f103 0114 	add.w	r1, r3, #20
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f503 742c 	add.w	r4, r3, #688	; 0x2b0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
                     app(model, *this)
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4623      	mov	r3, r4
 800ab96:	f7ff ff43 	bl	800aa20 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800ab9a:	4a18      	ldr	r2, [pc, #96]	; (800abfc <_ZN12FrontendHeapC1Ev+0x8c>)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3314      	adds	r3, #20
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ffad 	bl	800ab04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	332c      	adds	r3, #44	; 0x2c
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff ffba 	bl	800ab28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff ffc6 	bl	800ab4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fc34 	bl	8009434 <_ZN5ModelC1Ev>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	4619      	mov	r1, r3
 800abdc:	f7fe fbd4 	bl	8009388 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7ff ff0a 	bl	800aa04 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd90      	pop	{r4, r7, pc}
 800abfa:	bf00      	nop
 800abfc:	08020948 	.word	0x08020948

0800ac00 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	8bbb      	ldrh	r3, [r7, #28]
 800ac12:	9301      	str	r3, [sp, #4]
 800ac14:	8b3b      	ldrh	r3, [r7, #24]
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	f7ff fe47 	bl	800a8b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800ac22:	4a04      	ldr	r2, [pc, #16]	; (800ac34 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	601a      	str	r2, [r3, #0]
    }
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	08020a1c 	.word	0x08020a1c

0800ac38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	8bbb      	ldrh	r3, [r7, #28]
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	8b3b      	ldrh	r3, [r7, #24]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	68b9      	ldr	r1, [r7, #8]
 800ac56:	f7ff ffd3 	bl	800ac00 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800ac5a:	4a04      	ldr	r2, [pc, #16]	; (800ac6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	601a      	str	r2, [r3, #0]
    }
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	08020808 	.word	0x08020808

0800ac70 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	4a04      	ldr	r2, [pc, #16]	; (800ac8c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	080207f0 	.word	0x080207f0

0800ac90 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff ffe8 	bl	800ac70 <_ZN8touchgfx15TouchControllerC1Ev>
 800aca0:	4a03      	ldr	r2, [pc, #12]	; (800acb0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	080207d8 	.word	0x080207d8

0800acb4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 160, 128);

void touchgfx_init()
{
 800acb4:	b590      	push	{r4, r7, lr}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800acba:	f7fe f93f 	bl	8008f3c <_ZN14BitmapDatabase11getInstanceEv>
 800acbe:	4604      	mov	r4, r0
 800acc0:	f7fe f946 	bl	8008f50 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800acc4:	4603      	mov	r3, r0
 800acc6:	4619      	mov	r1, r3
 800acc8:	2300      	movs	r3, #0
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	2300      	movs	r3, #0
 800acce:	2200      	movs	r2, #0
 800acd0:	4620      	mov	r0, r4
 800acd2:	f006 ff8d 	bl	8011bf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800acd6:	4809      	ldr	r0, [pc, #36]	; (800acfc <touchgfx_init+0x48>)
 800acd8:	f7ff fd44 	bl	800a764 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800acdc:	2000      	movs	r0, #0
 800acde:	f7fe fa71 	bl	80091c4 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800ace2:	4807      	ldr	r0, [pc, #28]	; (800ad00 <touchgfx_init+0x4c>)
 800ace4:	f006 fec6 	bl	8011a74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800ace8:	f7ff febc 	bl	800aa64 <_ZN12FrontendHeap11getInstanceEv>
 800acec:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 800acee:	4805      	ldr	r0, [pc, #20]	; (800ad04 <touchgfx_init+0x50>)
 800acf0:	f7fe ff30 	bl	8009b54 <_ZN11TouchGFXHAL10initializeEv>
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}
 800acfc:	20009b68 	.word	0x20009b68
 800ad00:	20000014 	.word	0x20000014
 800ad04:	20009b6c 	.word	0x20009b6c

0800ad08 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800ad0c:	4802      	ldr	r0, [pc, #8]	; (800ad18 <touchgfx_taskEntry+0x10>)
 800ad0e:	f001 fd54 	bl	800c7ba <_ZN8touchgfx3HAL9taskEntryEv>
}
 800ad12:	bf00      	nop
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20009b6c 	.word	0x20009b6c

0800ad1c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	4a10      	ldr	r2, [pc, #64]	; (800ad68 <_ZN12FrontendHeapD1Ev+0x4c>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe faf3 	bl	800931c <_ZN19FrontendApplicationD1Ev>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f827 	bl	800ad90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	332c      	adds	r3, #44	; 0x2c
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 f844 	bl	800add4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3314      	adds	r3, #20
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f863 	bl	800ae1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff feb1 	bl	800aac0 <_ZN16FrontendHeapBaseD1Ev>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	08020948 	.word	0x08020948

0800ad6c <_ZN12FrontendHeapD0Ev>:
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff ffd1 	bl	800ad1c <_ZN12FrontendHeapD1Ev>
 800ad7a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f012 fd45 	bl	801d80e <_ZdlPvj>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	4a05      	ldr	r2, [pc, #20]	; (800adb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fccb 	bl	800b73c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	0802095c 	.word	0x0802095c

0800adb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff ffe7 	bl	800ad90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800adc2:	2114      	movs	r1, #20
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f012 fd22 	bl	801d80e <_ZdlPvj>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	4a05      	ldr	r2, [pc, #20]	; (800adf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 fca9 	bl	800b73c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	08020990 	.word	0x08020990

0800adf8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ffe7 	bl	800add4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ae06:	f44f 7121 	mov.w	r1, #644	; 0x284
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f012 fcff 	bl	801d80e <_ZdlPvj>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	4a05      	ldr	r2, [pc, #20]	; (800ae3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fc85 	bl	800b73c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	080209c4 	.word	0x080209c4

0800ae40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff ffe7 	bl	800ae1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ae4e:	2118      	movs	r1, #24
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f012 fcdc 	bl	801d80e <_ZdlPvj>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	4a05      	ldr	r2, [pc, #20]	; (800ae80 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff fcc7 	bl	800a804 <_ZN8touchgfx3LCDD1Ev>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	08022ca8 	.word	0x08022ca8

0800ae84 <_ZN8touchgfx8LCD16bppD0Ev>:
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ffe7 	bl	800ae60 <_ZN8touchgfx8LCD16bppD1Ev>
 800ae92:	2178      	movs	r1, #120	; 0x78
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f012 fcba 	bl	801d80e <_ZdlPvj>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <_Z41__static_initialization_and_destruction_0ii>:
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d117      	bne.n	800aee4 <_Z41__static_initialization_and_destruction_0ii+0x40>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d112      	bne.n	800aee4 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 800aebe:	4817      	ldr	r0, [pc, #92]	; (800af1c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800aec0:	f7ff fee6 	bl	800ac90 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 800aec4:	4816      	ldr	r0, [pc, #88]	; (800af20 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800aec6:	f7ff f8cb 	bl	800a060 <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 800aeca:	4816      	ldr	r0, [pc, #88]	; (800af24 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800aecc:	f009 ff14 	bl	8014cf8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 160, 128);
 800aed0:	2380      	movs	r3, #128	; 0x80
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	23a0      	movs	r3, #160	; 0xa0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	4b10      	ldr	r3, [pc, #64]	; (800af1c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800aeda:	4a12      	ldr	r2, [pc, #72]	; (800af24 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800aedc:	4910      	ldr	r1, [pc, #64]	; (800af20 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800aede:	4812      	ldr	r0, [pc, #72]	; (800af28 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800aee0:	f7ff feaa 	bl	800ac38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d113      	bne.n	800af12 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d10e      	bne.n	800af12 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800aef4:	480c      	ldr	r0, [pc, #48]	; (800af28 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800aef6:	f7fe fefd 	bl	8009cf4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800aefa:	480c      	ldr	r0, [pc, #48]	; (800af2c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800aefc:	f7fb fe36 	bl	8006b6c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800af00:	4808      	ldr	r0, [pc, #32]	; (800af24 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800af02:	f7ff ffad 	bl	800ae60 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F7DMA dma;
 800af06:	4806      	ldr	r0, [pc, #24]	; (800af20 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800af08:	f7ff f8d4 	bl	800a0b4 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800af0c:	4803      	ldr	r0, [pc, #12]	; (800af1c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800af0e:	f7fe fc43 	bl	8009798 <_ZN20STM32TouchControllerD1Ev>
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20008ecc 	.word	0x20008ecc
 800af20:	20008ed0 	.word	0x20008ed0
 800af24:	20009af0 	.word	0x20009af0
 800af28:	20009b6c 	.word	0x20009b6c
 800af2c:	20000014 	.word	0x20000014

0800af30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800af38:	2301      	movs	r3, #1
    }
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800af4e:	230c      	movs	r3, #12
    }
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800af68:	887a      	ldrh	r2, [r7, #2]
 800af6a:	4613      	mov	r3, r2
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	3308      	adds	r3, #8
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	4413      	add	r3, r2
    }
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800af90:	887a      	ldrh	r2, [r7, #2]
 800af92:	4613      	mov	r3, r2
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	3308      	adds	r3, #8
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4413      	add	r3, r2
    }
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800afb4:	2301      	movs	r3, #1
    }
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800afca:	f44f 731f 	mov.w	r3, #636	; 0x27c
    }
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	460b      	mov	r3, r1
 800afe4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800afec:	fb02 f303 	mul.w	r3, r2, r3
 800aff0:	3308      	adds	r3, #8
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
    }
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b00e:	887b      	ldrh	r3, [r7, #2]
 800b010:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	3308      	adds	r3, #8
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	4413      	add	r3, r2
    }
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800b032:	2301      	movs	r3, #1
    }
 800b034:	4618      	mov	r0, r3
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800b048:	2310      	movs	r3, #16
    }
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b062:	887b      	ldrh	r3, [r7, #2]
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	3308      	adds	r3, #8
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
    }
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b084:	887b      	ldrh	r3, [r7, #2]
 800b086:	011b      	lsls	r3, r3, #4
 800b088:	3308      	adds	r3, #8
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	4413      	add	r3, r2
    }
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <_GLOBAL__sub_I_touchgfx_init>:
 800b09a:	b580      	push	{r7, lr}
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	f7ff fefe 	bl	800aea4 <_Z41__static_initialization_and_destruction_0ii>
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <_GLOBAL__sub_D_touchgfx_init>:
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f7ff fef6 	bl	800aea4 <_Z41__static_initialization_and_destruction_0ii>
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <__NVIC_EnableIRQ>:
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	db0b      	blt.n	800b0e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	f003 021f 	and.w	r2, r3, #31
 800b0d4:	4907      	ldr	r1, [pc, #28]	; (800b0f4 <__NVIC_EnableIRQ+0x38>)
 800b0d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0da:	095b      	lsrs	r3, r3, #5
 800b0dc:	2001      	movs	r0, #1
 800b0de:	fa00 f202 	lsl.w	r2, r0, r2
 800b0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	e000e100 	.word	0xe000e100

0800b0f8 <__NVIC_DisableIRQ>:
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b106:	2b00      	cmp	r3, #0
 800b108:	db12      	blt.n	800b130 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b10a:	79fb      	ldrb	r3, [r7, #7]
 800b10c:	f003 021f 	and.w	r2, r3, #31
 800b110:	490a      	ldr	r1, [pc, #40]	; (800b13c <__NVIC_DisableIRQ+0x44>)
 800b112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b116:	095b      	lsrs	r3, r3, #5
 800b118:	2001      	movs	r0, #1
 800b11a:	fa00 f202 	lsl.w	r2, r0, r2
 800b11e:	3320      	adds	r3, #32
 800b120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b124:	f3bf 8f4f 	dsb	sy
}
 800b128:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b12a:	f3bf 8f6f 	isb	sy
}
 800b12e:	bf00      	nop
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	e000e100 	.word	0xe000e100

0800b140 <__NVIC_SetPriority>:
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b14c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b150:	2b00      	cmp	r3, #0
 800b152:	db0a      	blt.n	800b16a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	490c      	ldr	r1, [pc, #48]	; (800b18c <__NVIC_SetPriority+0x4c>)
 800b15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b15e:	0112      	lsls	r2, r2, #4
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	440b      	add	r3, r1
 800b164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b168:	e00a      	b.n	800b180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	4908      	ldr	r1, [pc, #32]	; (800b190 <__NVIC_SetPriority+0x50>)
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	f003 030f 	and.w	r3, r3, #15
 800b176:	3b04      	subs	r3, #4
 800b178:	0112      	lsls	r2, r2, #4
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	440b      	add	r3, r1
 800b17e:	761a      	strb	r2, [r3, #24]
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	e000e100 	.word	0xe000e100
 800b190:	e000ed00 	.word	0xe000ed00

0800b194 <SCB_CleanInvalidateDCache>:
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800b19a:	4b21      	ldr	r3, [pc, #132]	; (800b220 <SCB_CleanInvalidateDCache+0x8c>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800b1a2:	f3bf 8f4f 	dsb	sy
}
 800b1a6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800b1a8:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <SCB_CleanInvalidateDCache+0x8c>)
 800b1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ae:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	0b5b      	lsrs	r3, r3, #13
 800b1b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b1b8:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	08db      	lsrs	r3, r3, #3
 800b1be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1c2:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800b1cc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800b1d2:	4913      	ldr	r1, [pc, #76]	; (800b220 <SCB_CleanInvalidateDCache+0x8c>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	1e5a      	subs	r2, r3, #1
 800b1de:	60ba      	str	r2, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bf14      	ite	ne
 800b1e4:	2301      	movne	r3, #1
 800b1e6:	2300      	moveq	r3, #0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d000      	beq.n	800b1f0 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800b1ee:	e7e9      	b.n	800b1c4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	1e5a      	subs	r2, r3, #1
 800b1f4:	60fa      	str	r2, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bf14      	ite	ne
 800b1fa:	2301      	movne	r3, #1
 800b1fc:	2300      	moveq	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b00      	cmp	r3, #0
 800b202:	d000      	beq.n	800b206 <SCB_CleanInvalidateDCache+0x72>
    do {
 800b204:	e7d9      	b.n	800b1ba <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800b206:	f3bf 8f4f 	dsb	sy
}
 800b20a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b20c:	f3bf 8f6f 	isb	sy
}
 800b210:	bf00      	nop
}
 800b212:	bf00      	nop
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	e000ed00 	.word	0xe000ed00

0800b224 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXGeneratedHAL::initialize()
{
 800b224:	b5b0      	push	{r4, r5, r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	f001 fd72 	bl	800cd18 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 800b234:	687d      	ldr	r5, [r7, #4]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	334c      	adds	r3, #76	; 0x4c
 800b23c:	681c      	ldr	r4, [r3, #0]
 800b23e:	f003 ffa3 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800b242:	4603      	mov	r3, r0
 800b244:	4619      	mov	r1, r3
 800b246:	4628      	mov	r0, r5
 800b248:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0x20030000, (void*)0x2003A000, (void*)0);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3370      	adds	r3, #112	; 0x70
 800b252:	681c      	ldr	r4, [r3, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	4a03      	ldr	r2, [pc, #12]	; (800b264 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800b258:	4903      	ldr	r1, [pc, #12]	; (800b268 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800b25a:	47a0      	blx	r4
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bdb0      	pop	{r4, r5, r7, pc}
 800b264:	2003a000 	.word	0x2003a000
 800b268:	20030000 	.word	0x20030000

0800b26c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800b274:	2109      	movs	r1, #9
 800b276:	205a      	movs	r0, #90	; 0x5a
 800b278:	f7ff ff62 	bl	800b140 <__NVIC_SetPriority>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800b28c:	205a      	movs	r0, #90	; 0x5a
 800b28e:	f7ff ff15 	bl	800b0bc <__NVIC_EnableIRQ>
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800b2a2:	205a      	movs	r0, #90	; 0x5a
 800b2a4:	f7ff ff28 	bl	800b0f8 <__NVIC_DisableIRQ>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b083      	sub	sp, #12
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f001 fa30 	bl	800c764 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 800b304:	f7ff ff46 	bl	800b194 <SCB_CleanInvalidateDCache>
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	f001 fb52 	bl	800c9ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800b32a:	4603      	mov	r3, r0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 800b33c:	f7ff ff2a 	bl	800b194 <SCB_CleanInvalidateDCache>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 800b350:	f7ff ff20 	bl	800b194 <SCB_CleanInvalidateDCache>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <Oled_160128_Reset>:
#include <string.h>

extern osSemaphoreId screen_frame_buffer_semHandle;

void Oled_160128_Reset(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 800b360:	2200      	movs	r2, #0
 800b362:	2120      	movs	r1, #32
 800b364:	4807      	ldr	r0, [pc, #28]	; (800b384 <Oled_160128_Reset+0x28>)
 800b366:	f7f6 ffe9 	bl	800233c <HAL_GPIO_WritePin>
	osDelay(10);
 800b36a:	200a      	movs	r0, #10
 800b36c:	f7f8 f9c1 	bl	80036f2 <osDelay>
	HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 800b370:	2201      	movs	r2, #1
 800b372:	2120      	movs	r1, #32
 800b374:	4803      	ldr	r0, [pc, #12]	; (800b384 <Oled_160128_Reset+0x28>)
 800b376:	f7f6 ffe1 	bl	800233c <HAL_GPIO_WritePin>
	osDelay(10);
 800b37a:	200a      	movs	r0, #10
 800b37c:	f7f8 f9b9 	bl	80036f2 <osDelay>
}
 800b380:	bf00      	nop
 800b382:	bd80      	pop	{r7, pc}
 800b384:	40021000 	.word	0x40021000

0800b388 <Oled_160128_Command>:

void Oled_160128_Command(uint8_t cmd)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
	ADDR_CMD = cmd;
 800b392:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	7013      	strb	r3, [r2, #0]
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <Oled_160128_Data>:

void Oled_160128_Data(uint8_t data)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
	ADDR_DATA = data;
 800b3b2:	4a04      	ldr	r2, [pc, #16]	; (800b3c4 <Oled_160128_Data+0x1c>)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	7013      	strb	r3, [r2, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	c0010000 	.word	0xc0010000

0800b3c8 <Oled_160128_Reg>:

	*pixel = (uint16_t)buf[0]<<8 | buf[1];
}

void Oled_160128_Reg(uint32_t reg, uint32_t value)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
	Oled_160128_Command(reg);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff ffd6 	bl	800b388 <Oled_160128_Command>
	Oled_160128_Data(value);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff ffe1 	bl	800b3a8 <Oled_160128_Data>
}
 800b3e6:	bf00      	nop
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <Oled_160128_Set_Window>:

// 160*128
void Oled_160128_Set_Window(uint16_t xPos, uint16_t yPos, uint16_t width, uint16_t height)
{
 800b3ee:	b590      	push	{r4, r7, lr}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4623      	mov	r3, r4
 800b3fe:	80fb      	strh	r3, [r7, #6]
 800b400:	4603      	mov	r3, r0
 800b402:	80bb      	strh	r3, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	807b      	strh	r3, [r7, #2]
 800b408:	4613      	mov	r3, r2
 800b40a:	803b      	strh	r3, [r7, #0]
	//set window
	Oled_160128_Reg(0x17, xPos);
 800b40c:	88fb      	ldrh	r3, [r7, #6]
 800b40e:	4619      	mov	r1, r3
 800b410:	2017      	movs	r0, #23
 800b412:	f7ff ffd9 	bl	800b3c8 <Oled_160128_Reg>
	Oled_160128_Reg(0x18, xPos + width - 1);
 800b416:	88fa      	ldrh	r2, [r7, #6]
 800b418:	887b      	ldrh	r3, [r7, #2]
 800b41a:	4413      	add	r3, r2
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4619      	mov	r1, r3
 800b420:	2018      	movs	r0, #24
 800b422:	f7ff ffd1 	bl	800b3c8 <Oled_160128_Reg>
	Oled_160128_Reg(0x19, yPos);
 800b426:	88bb      	ldrh	r3, [r7, #4]
 800b428:	4619      	mov	r1, r3
 800b42a:	2019      	movs	r0, #25
 800b42c:	f7ff ffcc 	bl	800b3c8 <Oled_160128_Reg>
	Oled_160128_Reg(0x1A, yPos + height - 1);
 800b430:	88ba      	ldrh	r2, [r7, #4]
 800b432:	883b      	ldrh	r3, [r7, #0]
 800b434:	4413      	add	r3, r2
 800b436:	3b01      	subs	r3, #1
 800b438:	4619      	mov	r1, r3
 800b43a:	201a      	movs	r0, #26
 800b43c:	f7ff ffc4 	bl	800b3c8 <Oled_160128_Reg>

	//start position
	Oled_160128_Reg(0x20, xPos);
 800b440:	88fb      	ldrh	r3, [r7, #6]
 800b442:	4619      	mov	r1, r3
 800b444:	2020      	movs	r0, #32
 800b446:	f7ff ffbf 	bl	800b3c8 <Oled_160128_Reg>
	Oled_160128_Reg(0x21, yPos);
 800b44a:	88bb      	ldrh	r3, [r7, #4]
 800b44c:	4619      	mov	r1, r3
 800b44e:	2021      	movs	r0, #33	; 0x21
 800b450:	f7ff ffba 	bl	800b3c8 <Oled_160128_Reg>
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd90      	pop	{r4, r7, pc}

0800b45c <Oled_160128_Fill_Rect>:

void Oled_160128_Fill_Rect(uint16_t xPos, uint16_t yPos, uint16_t width, uint16_t height, uint16_t color)
{
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	4611      	mov	r1, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4623      	mov	r3, r4
 800b46c:	80fb      	strh	r3, [r7, #6]
 800b46e:	4603      	mov	r3, r0
 800b470:	80bb      	strh	r3, [r7, #4]
 800b472:	460b      	mov	r3, r1
 800b474:	807b      	strh	r3, [r7, #2]
 800b476:	4613      	mov	r3, r2
 800b478:	803b      	strh	r3, [r7, #0]

	Oled_160128_Set_Window(xPos, yPos, width, height);
 800b47a:	883b      	ldrh	r3, [r7, #0]
 800b47c:	887a      	ldrh	r2, [r7, #2]
 800b47e:	88b9      	ldrh	r1, [r7, #4]
 800b480:	88f8      	ldrh	r0, [r7, #6]
 800b482:	f7ff ffb4 	bl	800b3ee <Oled_160128_Set_Window>

	Oled_160128_Command(0x22); //Enable write to display RAM
 800b486:	2022      	movs	r0, #34	; 0x22
 800b488:	f7ff ff7e 	bl	800b388 <Oled_160128_Command>

	for(int i = 0; i < X_SIZE*Y_SIZE*2; i+=2){
 800b48c:	2300      	movs	r3, #0
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e00c      	b.n	800b4ac <Oled_160128_Fill_Rect+0x50>
		ADDR_DATA = color>>8;
 800b492:	8c3b      	ldrh	r3, [r7, #32]
 800b494:	0a1b      	lsrs	r3, r3, #8
 800b496:	b29a      	uxth	r2, r3
 800b498:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <Oled_160128_Fill_Rect+0x64>)
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	701a      	strb	r2, [r3, #0]
		ADDR_DATA = color;
 800b49e:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <Oled_160128_Fill_Rect+0x64>)
 800b4a0:	8c3a      	ldrh	r2, [r7, #32]
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < X_SIZE*Y_SIZE*2; i+=2){
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4b2:	dbee      	blt.n	800b492 <Oled_160128_Fill_Rect+0x36>

	//	HAL_DMA_Start (&hdma_memtomem_dma2_stream0, buf, &ADDR_DATA, width*height*2);
//	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)ADDR_FRAME_BUFF, (uint32_t)&ADDR_DATA, width*height);
//	osSemaphoreWait(screen_frame_buffer_semHandle, portMAX_DELAY);
	//HAL_SRAM_Write_16b (&hsram1, &ADDR_DATA, buf, width*height);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	c0010000 	.word	0xc0010000

0800b4c4 <OLED_Init_160128RGB>:

void OLED_Init_160128RGB(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af02      	add	r7, sp, #8
	Oled_160128_Reset();
 800b4ca:	f7ff ff47 	bl	800b35c <Oled_160128_Reset>

		Oled_160128_Reg(0x04, 0x01); //Set REDUCE_CURRENT
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	2004      	movs	r0, #4
 800b4d2:	f7ff ff79 	bl	800b3c8 <Oled_160128_Reg>

		osDelay(2);
 800b4d6:	2002      	movs	r0, #2
 800b4d8:	f7f8 f90b 	bl	80036f2 <osDelay>

		Oled_160128_Reg(0x04, 0x00); //Set REDUCE_CURRENT
 800b4dc:	2100      	movs	r1, #0
 800b4de:	2004      	movs	r0, #4
 800b4e0:	f7ff ff72 	bl	800b3c8 <Oled_160128_Reg>

		osDelay(2);
 800b4e4:	2002      	movs	r0, #2
 800b4e6:	f7f8 f904 	bl	80036f2 <osDelay>

		Oled_160128_Reg(0x05, 0x00); //Set SOFT_RST
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	2005      	movs	r0, #5
 800b4ee:	f7ff ff6b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x06, 0x00); //Set DISP_ON_OFF
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	2006      	movs	r0, #6
 800b4f6:	f7ff ff67 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x02, 0x01); //Set OSC_CTL
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	2002      	movs	r0, #2
 800b4fe:	f7ff ff63 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x03, 0x30); //Set CLOCK_DIV
 800b502:	2130      	movs	r1, #48	; 0x30
 800b504:	2003      	movs	r0, #3
 800b506:	f7ff ff5f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x28, 0x7F); //Set DUTY
 800b50a:	217f      	movs	r1, #127	; 0x7f
 800b50c:	2028      	movs	r0, #40	; 0x28
 800b50e:	f7ff ff5b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x29, 0x00); //Set DSL
 800b512:	2100      	movs	r1, #0
 800b514:	2029      	movs	r0, #41	; 0x29
 800b516:	f7ff ff57 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x20, 0x00); //Set MEMORY_ACCESSPOINTER_X
 800b51a:	2100      	movs	r1, #0
 800b51c:	2020      	movs	r0, #32
 800b51e:	f7ff ff53 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x21, 0x00); //Set MEMORY_ACCESSPOINTER_Y
 800b522:	2100      	movs	r1, #0
 800b524:	2021      	movs	r0, #33	; 0x21
 800b526:	f7ff ff4f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x14, 0x31); //Set RGB_IF
 800b52a:	2131      	movs	r1, #49	; 0x31
 800b52c:	2014      	movs	r0, #20
 800b52e:	f7ff ff4b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x15, 0x00); //Set RGB_POL
 800b532:	2100      	movs	r1, #0
 800b534:	2015      	movs	r0, #21
 800b536:	f7ff ff47 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x13, 0x00); //Set DISPLAY_MODE_SET
 800b53a:	2100      	movs	r1, #0
 800b53c:	2013      	movs	r0, #19
 800b53e:	f7ff ff43 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x16, 0x66); //Set MEMORY_WRITE_MODE 16 bit
 800b542:	2166      	movs	r1, #102	; 0x66
 800b544:	2016      	movs	r0, #22
 800b546:	f7ff ff3f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x10, 0x45); //Set DRIVING_CURRENT_R
 800b54a:	2145      	movs	r1, #69	; 0x45
 800b54c:	2010      	movs	r0, #16
 800b54e:	f7ff ff3b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x11, 0x34); //Set DRIVING_CURRENT_G
 800b552:	2134      	movs	r1, #52	; 0x34
 800b554:	2011      	movs	r0, #17
 800b556:	f7ff ff37 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x12, 0x33); //Set DRIVING_CURRENT_B
 800b55a:	2133      	movs	r1, #51	; 0x33
 800b55c:	2012      	movs	r0, #18
 800b55e:	f7ff ff33 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x08, 0x04); //Set PRECHARGE_TIME_R
 800b562:	2104      	movs	r1, #4
 800b564:	2008      	movs	r0, #8
 800b566:	f7ff ff2f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x09, 0x05); //Set PRECHARGE_TIME_G
 800b56a:	2105      	movs	r1, #5
 800b56c:	2009      	movs	r0, #9
 800b56e:	f7ff ff2b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x0A, 0x05); //Set PRECHARGE_TIME_B
 800b572:	2105      	movs	r1, #5
 800b574:	200a      	movs	r0, #10
 800b576:	f7ff ff27 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x0B, 0x9D); //Set PRECHARGE_CURRENT_R
 800b57a:	219d      	movs	r1, #157	; 0x9d
 800b57c:	200b      	movs	r0, #11
 800b57e:	f7ff ff23 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x0C, 0x8C); //Set PRECHARGE_CURRENT_R
 800b582:	218c      	movs	r1, #140	; 0x8c
 800b584:	200c      	movs	r0, #12
 800b586:	f7ff ff1f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x0D, 0x57); //Set PRECHARGE_CURRENT_R
 800b58a:	2157      	movs	r1, #87	; 0x57
 800b58c:	200d      	movs	r0, #13
 800b58e:	f7ff ff1b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x80, 0x00); //Set IREF
 800b592:	2100      	movs	r1, #0
 800b594:	2080      	movs	r0, #128	; 0x80
 800b596:	f7ff ff17 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x17, 0x00); //Set MX1_ADDR
 800b59a:	2100      	movs	r1, #0
 800b59c:	2017      	movs	r0, #23
 800b59e:	f7ff ff13 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x18, 0x9F); //Set MX2_ADDR
 800b5a2:	219f      	movs	r1, #159	; 0x9f
 800b5a4:	2018      	movs	r0, #24
 800b5a6:	f7ff ff0f 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x19, 0x00); //Set MY1_ADDR
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	2019      	movs	r0, #25
 800b5ae:	f7ff ff0b 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x1A, 0x7F); //Set MY2_ADDR
 800b5b2:	217f      	movs	r1, #127	; 0x7f
 800b5b4:	201a      	movs	r0, #26
 800b5b6:	f7ff ff07 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Reg(0x06, 0x01); //Set DISP_ON_OFF
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	2006      	movs	r0, #6
 800b5be:	f7ff ff03 	bl	800b3c8 <Oled_160128_Reg>

		Oled_160128_Fill_Rect(0x00, 0x0, 160, 128, BLUE);
 800b5c2:	231f      	movs	r3, #31
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	2380      	movs	r3, #128	; 0x80
 800b5c8:	22a0      	movs	r2, #160	; 0xa0
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f7ff ff45 	bl	800b45c <Oled_160128_Fill_Rect>

		osDelay(1000);
 800b5d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b5d6:	f7f8 f88c 	bl	80036f2 <osDelay>
}
 800b5da:	bf00      	nop
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <LCD_IO_WriteMultipleData>:
//		l--;
//	}
//}

void LCD_IO_WriteMultipleData(uint16_t *pData, uint32_t Size)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
//	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)buff, (uint32_t)&ADDR_DATA, Size);
//	osSemaphoreWait(screen_frame_buffer_semHandle, portMAX_DELAY);

	for(uint32_t i = 0; i < Size; i++){
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	e014      	b.n	800b61a <LCD_IO_WriteMultipleData+0x3a>
		ADDR_DATA = pData[i]>>8;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	0a1b      	lsrs	r3, r3, #8
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <LCD_IO_WriteMultipleData+0x50>)
 800b600:	b2d2      	uxtb	r2, r2
 800b602:	701a      	strb	r2, [r3, #0]
		ADDR_DATA = pData[i];
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	881a      	ldrh	r2, [r3, #0]
 800b60e:	4b08      	ldr	r3, [pc, #32]	; (800b630 <LCD_IO_WriteMultipleData+0x50>)
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < Size; i++){
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d3e6      	bcc.n	800b5f0 <LCD_IO_WriteMultipleData+0x10>
	}

}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	c0010000 	.word	0xc0010000

0800b634 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800b634:	8880      	ldrh	r0, [r0, #4]
 800b636:	4770      	bx	lr

0800b638 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800b638:	2300      	movs	r3, #0
 800b63a:	8083      	strh	r3, [r0, #4]
 800b63c:	4770      	bx	lr
	...

0800b640 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	6803      	ldr	r3, [r0, #0]
 800b644:	460e      	mov	r6, r1
 800b646:	2100      	movs	r1, #0
 800b648:	4605      	mov	r5, r0
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	4798      	blx	r3
 800b64e:	4604      	mov	r4, r0
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	4628      	mov	r0, r5
 800b654:	1b34      	subs	r4, r6, r4
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	b2a4      	uxth	r4, r4
 800b65a:	4798      	blx	r3
 800b65c:	88ab      	ldrh	r3, [r5, #4]
 800b65e:	fbb4 f4f0 	udiv	r4, r4, r0
 800b662:	42a3      	cmp	r3, r4
 800b664:	d805      	bhi.n	800b672 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800b666:	4b0e      	ldr	r3, [pc, #56]	; (800b6a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800b668:	2120      	movs	r1, #32
 800b66a:	4a0e      	ldr	r2, [pc, #56]	; (800b6a4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b66c:	480e      	ldr	r0, [pc, #56]	; (800b6a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800b66e:	f012 fe6b 	bl	801e348 <__assert_func>
 800b672:	682b      	ldr	r3, [r5, #0]
 800b674:	2100      	movs	r1, #0
 800b676:	4628      	mov	r0, r5
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67a:	4798      	blx	r3
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	4607      	mov	r7, r0
 800b680:	4628      	mov	r0, r5
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	4798      	blx	r3
 800b686:	1bf3      	subs	r3, r6, r7
 800b688:	b29b      	uxth	r3, r3
 800b68a:	fbb3 f2f0 	udiv	r2, r3, r0
 800b68e:	fb02 3010 	mls	r0, r2, r0, r3
 800b692:	b118      	cbz	r0, 800b69c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800b694:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800b696:	2121      	movs	r1, #33	; 0x21
 800b698:	4a02      	ldr	r2, [pc, #8]	; (800b6a4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b69a:	e7e7      	b.n	800b66c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800b69c:	4620      	mov	r0, r4
 800b69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a0:	08020ad0 	.word	0x08020ad0
 800b6a4:	08020c3e 	.word	0x08020c3e
 800b6a8:	08020ae5 	.word	0x08020ae5
 800b6ac:	08020b13 	.word	0x08020b13

0800b6b0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	6803      	ldr	r3, [r0, #0]
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	4798      	blx	r3
 800b6bc:	4285      	cmp	r5, r0
 800b6be:	d905      	bls.n	800b6cc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800b6c2:	2132      	movs	r1, #50	; 0x32
 800b6c4:	4a0c      	ldr	r2, [pc, #48]	; (800b6f8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b6c6:	480d      	ldr	r0, [pc, #52]	; (800b6fc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800b6c8:	f012 fe3e 	bl	801e348 <__assert_func>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	88a5      	ldrh	r5, [r4, #4]
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	4798      	blx	r3
 800b6d6:	4285      	cmp	r5, r0
 800b6d8:	d303      	bcc.n	800b6e2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800b6da:	4b09      	ldr	r3, [pc, #36]	; (800b700 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800b6dc:	2133      	movs	r1, #51	; 0x33
 800b6de:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b6e0:	e7f1      	b.n	800b6c6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	88a1      	ldrh	r1, [r4, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	4798      	blx	r3
 800b6ec:	88a3      	ldrh	r3, [r4, #4]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	80a3      	strh	r3, [r4, #4]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	08020b8d 	.word	0x08020b8d
 800b6f8:	08020c81 	.word	0x08020c81
 800b6fc:	08020ae5 	.word	0x08020ae5
 800b700:	08020ba4 	.word	0x08020ba4

0800b704 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	6803      	ldr	r3, [r0, #0]
 800b708:	4616      	mov	r6, r2
 800b70a:	4604      	mov	r4, r0
 800b70c:	460d      	mov	r5, r1
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	4798      	blx	r3
 800b712:	4286      	cmp	r6, r0
 800b714:	d905      	bls.n	800b722 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800b718:	213c      	movs	r1, #60	; 0x3c
 800b71a:	4a06      	ldr	r2, [pc, #24]	; (800b734 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800b71c:	4806      	ldr	r0, [pc, #24]	; (800b738 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800b71e:	f012 fe13 	bl	801e348 <__assert_func>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b72e:	4718      	bx	r3
 800b730:	08020b8d 	.word	0x08020b8d
 800b734:	08020bf4 	.word	0x08020bf4
 800b738:	08020ae5 	.word	0x08020ae5

0800b73c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800b73c:	4770      	bx	lr
	...

0800b740 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800b740:	4a02      	ldr	r2, [pc, #8]	; (800b74c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800b742:	6002      	str	r2, [r0, #0]
 800b744:	2200      	movs	r2, #0
 800b746:	8082      	strh	r2, [r0, #4]
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	08020bc8 	.word	0x08020bc8

0800b750 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 800b750:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800b754:	4770      	bx	lr

0800b756 <_ZNK8touchgfx12DrawableList11getCircularEv>:
 800b756:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800b75a:	4770      	bx	lr

0800b75c <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 800b75c:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 800b760:	4770      	bx	lr

0800b762 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 800b762:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800b764:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800b766:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800b76a:	b200      	sxth	r0, r0
 800b76c:	4770      	bx	lr

0800b76e <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 800b76e:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 800b772:	4770      	bx	lr

0800b774 <_ZN8touchgfx12DrawableListC1Ev>:
 800b774:	2101      	movs	r1, #1
 800b776:	2200      	movs	r2, #0
 800b778:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800b77c:	490f      	ldr	r1, [pc, #60]	; (800b7bc <_ZN8touchgfx12DrawableListC1Ev+0x48>)
 800b77e:	8082      	strh	r2, [r0, #4]
 800b780:	80c2      	strh	r2, [r0, #6]
 800b782:	8102      	strh	r2, [r0, #8]
 800b784:	8142      	strh	r2, [r0, #10]
 800b786:	8182      	strh	r2, [r0, #12]
 800b788:	81c2      	strh	r2, [r0, #14]
 800b78a:	8202      	strh	r2, [r0, #16]
 800b78c:	8242      	strh	r2, [r0, #18]
 800b78e:	61c2      	str	r2, [r0, #28]
 800b790:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800b794:	6282      	str	r2, [r0, #40]	; 0x28
 800b796:	6001      	str	r1, [r0, #0]
 800b798:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800b79c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 800b7a0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 800b7a4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800b7a8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800b7ac:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 800b7b0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 800b7b4:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	08020cc8 	.word	0x08020cc8

0800b7c0 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 800b7c0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b7c4:	86c2      	strh	r2, [r0, #54]	; 0x36
 800b7c6:	8681      	strh	r1, [r0, #52]	; 0x34
 800b7c8:	4770      	bx	lr

0800b7ca <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 800b7ca:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b7ce:	4770      	bx	lr

0800b7d0 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800b7d6:	b308      	cbz	r0, 800b81c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 800b7d8:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	dd21      	ble.n	800b824 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 800b7e0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b7e4:	b1db      	cbz	r3, 800b81e <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 800b7e6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 800b7ea:	1e63      	subs	r3, r4, #1
 800b7ec:	1e54      	subs	r4, r2, #1
 800b7ee:	441c      	add	r4, r3
 800b7f0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b7f4:	fb94 f4f2 	sdiv	r4, r4, r2
 800b7f8:	3401      	adds	r4, #1
 800b7fa:	b224      	sxth	r4, r4
 800b7fc:	b923      	cbnz	r3, 800b808 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 800b7fe:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
 800b802:	429c      	cmp	r4, r3
 800b804:	bfa8      	it	ge
 800b806:	461c      	movge	r4, r3
 800b808:	6803      	ldr	r3, [r0, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4798      	blx	r3
 800b80e:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
 800b812:	1ac0      	subs	r0, r0, r3
 800b814:	42a0      	cmp	r0, r4
 800b816:	bfa8      	it	ge
 800b818:	4620      	movge	r0, r4
 800b81a:	b200      	sxth	r0, r0
 800b81c:	bd38      	pop	{r3, r4, r5, pc}
 800b81e:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 800b822:	e7e2      	b.n	800b7ea <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 800b824:	2000      	movs	r0, #0
 800b826:	e7f9      	b.n	800b81c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

0800b828 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 800b828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	4604      	mov	r4, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	6321      	str	r1, [r4, #48]	; 0x30
 800b832:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
 800b836:	2b00      	cmp	r3, #0
 800b838:	f000 80ec 	beq.w	800ba14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 800b83c:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 80e7 	beq.w	800ba14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 800b846:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 80e2 	beq.w	800ba14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 800b850:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b852:	2800      	cmp	r0, #0
 800b854:	f000 80de 	beq.w	800ba14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 800b858:	6803      	ldr	r3, [r0, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	4798      	blx	r3
 800b85e:	2800      	cmp	r0, #0
 800b860:	f000 80d8 	beq.w	800ba14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 800b864:	2d00      	cmp	r5, #0
 800b866:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800b86a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 800b86e:	bfd8      	it	le
 800b870:	2300      	movle	r3, #0
 800b872:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 800b876:	bfc1      	itttt	gt
 800b878:	fb95 f2f1 	sdivgt	r2, r5, r1
 800b87c:	3201      	addgt	r2, #1
 800b87e:	4253      	neggt	r3, r2
 800b880:	fb01 5512 	mlsgt	r5, r1, r2, r5
 800b884:	f1c1 0200 	rsb	r2, r1, #0
 800b888:	bfc8      	it	gt
 800b88a:	b21b      	sxthgt	r3, r3
 800b88c:	42aa      	cmp	r2, r5
 800b88e:	bfa1      	itttt	ge
 800b890:	fb95 f2f1 	sdivge	r2, r5, r1
 800b894:	1a9b      	subge	r3, r3, r2
 800b896:	fb01 5512 	mlsge	r5, r1, r2, r5
 800b89a:	b21b      	sxthge	r3, r3
 800b89c:	b167      	cbz	r7, 800b8b8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x90>
 800b89e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800b8a2:	fb93 f2f1 	sdiv	r2, r3, r1
 800b8a6:	fb01 3312 	mls	r3, r1, r2, r3
 800b8aa:	440b      	add	r3, r1
 800b8ac:	fb93 f2f1 	sdiv	r2, r3, r1
 800b8b0:	fb01 3312 	mls	r3, r1, r2, r3
 800b8b4:	b21b      	sxth	r3, r3
 800b8b6:	e004      	b.n	800b8c2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	da64      	bge.n	800b986 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15e>
 800b8bc:	fb01 5513 	mls	r5, r1, r3, r5
 800b8c0:	463b      	mov	r3, r7
 800b8c2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 800b8c6:	b1be      	cbz	r6, 800b8f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 800b8c8:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
 800b8cc:	459e      	cmp	lr, r3
 800b8ce:	d068      	beq.n	800b9a2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17a>
 800b8d0:	2601      	movs	r6, #1
 800b8d2:	4286      	cmp	r6, r0
 800b8d4:	da67      	bge.n	800b9a6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17e>
 800b8d6:	eb0e 0106 	add.w	r1, lr, r6
 800b8da:	199a      	adds	r2, r3, r6
 800b8dc:	b14f      	cbz	r7, 800b8f2 <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 800b8de:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
 800b8e2:	fb91 f8fc 	sdiv	r8, r1, ip
 800b8e6:	fb0c 1118 	mls	r1, ip, r8, r1
 800b8ea:	fb92 f8fc 	sdiv	r8, r2, ip
 800b8ee:	fb0c 2218 	mls	r2, ip, r8, r2
 800b8f2:	428b      	cmp	r3, r1
 800b8f4:	d151      	bne.n	800b99a <_ZN8touchgfx12DrawableList9setOffsetEl+0x172>
 800b8f6:	4276      	negs	r6, r6
 800b8f8:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800b8fc:	2700      	movs	r7, #0
 800b8fe:	b2ad      	uxth	r5, r5
 800b900:	f04f 0b01 	mov.w	fp, #1
 800b904:	1b92      	subs	r2, r2, r6
 800b906:	46ba      	mov	sl, r7
 800b908:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800b90a:	4402      	add	r2, r0
 800b90c:	fb92 f1f0 	sdiv	r1, r2, r0
 800b910:	fb00 2011 	mls	r0, r0, r1, r2
 800b914:	87e0      	strh	r0, [r4, #62]	; 0x3e
 800b916:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 800b91a:	42ba      	cmp	r2, r7
 800b91c:	dd77      	ble.n	800ba0e <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 800b91e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800b922:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b924:	443b      	add	r3, r7
 800b926:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800b92a:	fb93 f8f2 	sdiv	r8, r3, r2
 800b92e:	fb02 3818 	mls	r8, r2, r8, r3
 800b932:	6803      	ldr	r3, [r0, #0]
 800b934:	fa1f f888 	uxth.w	r8, r8
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	4441      	add	r1, r8
 800b93c:	b209      	sxth	r1, r1
 800b93e:	4798      	blx	r3
 800b940:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800b944:	4681      	mov	r9, r0
 800b946:	fa1f fe87 	uxth.w	lr, r7
 800b94a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800b94c:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 800b950:	6802      	ldr	r2, [r0, #0]
 800b952:	b351      	cbz	r1, 800b9aa <_ZN8touchgfx12DrawableList9setOffsetEl+0x182>
 800b954:	18e9      	adds	r1, r5, r3
 800b956:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b958:	2200      	movs	r2, #0
 800b95a:	fb1c 110e 	smlabb	r1, ip, lr, r1
 800b95e:	b209      	sxth	r1, r1
 800b960:	4798      	blx	r3
 800b962:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800b966:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800b96a:	443b      	add	r3, r7
 800b96c:	b322      	cbz	r2, 800b9b8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x190>
 800b96e:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 800b972:	fb93 f1f2 	sdiv	r1, r3, r2
 800b976:	fb02 3311 	mls	r3, r2, r1, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	da22      	bge.n	800b9c4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x19c>
 800b97e:	f889 a025 	strb.w	sl, [r9, #37]	; 0x25
 800b982:	3701      	adds	r7, #1
 800b984:	e7c7      	b.n	800b916 <_ZN8touchgfx12DrawableList9setOffsetEl+0xee>
 800b986:	18c6      	adds	r6, r0, r3
 800b988:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 800b98c:	4296      	cmp	r6, r2
 800b98e:	dd98      	ble.n	800b8c2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 800b990:	1b92      	subs	r2, r2, r6
 800b992:	fb01 5502 	mla	r5, r1, r2, r5
 800b996:	4413      	add	r3, r2
 800b998:	e78c      	b.n	800b8b4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x8c>
 800b99a:	4596      	cmp	lr, r2
 800b99c:	d0ac      	beq.n	800b8f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 800b99e:	3601      	adds	r6, #1
 800b9a0:	e797      	b.n	800b8d2 <_ZN8touchgfx12DrawableList9setOffsetEl+0xaa>
 800b9a2:	2600      	movs	r6, #0
 800b9a4:	e7a8      	b.n	800b8f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	e7a6      	b.n	800b8f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 800b9aa:	442b      	add	r3, r5
 800b9ac:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 800b9b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b9b2:	fa0f f28c 	sxth.w	r2, ip
 800b9b6:	e7d3      	b.n	800b960 <_ZN8touchgfx12DrawableList9setOffsetEl+0x138>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dbe0      	blt.n	800b97e <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 800b9bc:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	dadc      	bge.n	800b97e <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 800b9c4:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 800b9c8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800b9cc:	b132      	cbz	r2, 800b9dc <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 800b9ce:	42be      	cmp	r6, r7
 800b9d0:	dc04      	bgt.n	800b9dc <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 800b9d2:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 800b9d6:	4432      	add	r2, r6
 800b9d8:	4297      	cmp	r7, r2
 800b9da:	dbd2      	blt.n	800b982 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 800b9dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	6802      	ldr	r2, [r0, #0]
 800b9e2:	68d2      	ldr	r2, [r2, #12]
 800b9e4:	4790      	blx	r2
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0cb      	beq.n	800b982 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 800b9ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b9ec:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800b9f0:	6801      	ldr	r1, [r0, #0]
 800b9f2:	9b01      	ldr	r3, [sp, #4]
 800b9f4:	4442      	add	r2, r8
 800b9f6:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800b9fa:	b21b      	sxth	r3, r3
 800b9fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b9fe:	b212      	sxth	r2, r2
 800ba00:	47c0      	blx	r8
 800ba02:	f8d9 3000 	ldr.w	r3, [r9]
 800ba06:	4648      	mov	r0, r9
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	4798      	blx	r3
 800ba0c:	e7b9      	b.n	800b982 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ba14:	b003      	add	sp, #12
 800ba16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba1a <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 800ba1a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ba1c:	4770      	bx	lr

0800ba1e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 800ba1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba20:	1c54      	adds	r4, r2, #1
 800ba22:	db2f      	blt.n	800ba84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 800ba24:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 800ba28:	4294      	cmp	r4, r2
 800ba2a:	dd2b      	ble.n	800ba84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 800ba2c:	b354      	cbz	r4, 800ba84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 800ba2e:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	; 0x38
 800ba32:	b33e      	cbz	r6, 800ba84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 800ba34:	1c53      	adds	r3, r2, #1
 800ba36:	d008      	beq.n	800ba4a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 800ba38:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
 800ba3c:	1ad2      	subs	r2, r2, r3
 800ba3e:	4422      	add	r2, r4
 800ba40:	fb92 f3f4 	sdiv	r3, r2, r4
 800ba44:	fb04 2213 	mls	r2, r4, r3, r2
 800ba48:	b212      	sxth	r2, r2
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	b212      	sxth	r2, r2
 800ba4e:	4294      	cmp	r4, r2
 800ba50:	dd18      	ble.n	800ba84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 800ba52:	b295      	uxth	r5, r2
 800ba54:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800ba56:	f890 702d 	ldrb.w	r7, [r0, #45]	; 0x2d
 800ba5a:	442b      	add	r3, r5
 800ba5c:	b21b      	sxth	r3, r3
 800ba5e:	b127      	cbz	r7, 800ba6a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 800ba60:	fb93 f7f6 	sdiv	r7, r3, r6
 800ba64:	fb06 3317 	mls	r3, r6, r7, r3
 800ba68:	b21b      	sxth	r3, r3
 800ba6a:	428b      	cmp	r3, r1
 800ba6c:	d108      	bne.n	800ba80 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 800ba6e:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 800ba72:	4402      	add	r2, r0
 800ba74:	fb92 f0f4 	sdiv	r0, r2, r4
 800ba78:	fb04 2010 	mls	r0, r4, r0, r2
 800ba7c:	b200      	sxth	r0, r0
 800ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba80:	1c6a      	adds	r2, r5, #1
 800ba82:	e7e3      	b.n	800ba4c <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	e7f9      	b.n	800ba7e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

0800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 800ba8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba90:	4604      	mov	r4, r0
 800ba92:	b913      	cbnz	r3, 800ba9a <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x10>
 800ba94:	8743      	strh	r3, [r0, #58]	; 0x3a
 800ba96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9a:	2700      	movs	r7, #0
 800ba9c:	f7ff fe98 	bl	800b7d0 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 800baa0:	8760      	strh	r0, [r4, #58]	; 0x3a
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fc88 	bl	800c3b8 <_ZN8touchgfx9Container9removeAllEv>
 800baa8:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
 800baac:	42bb      	cmp	r3, r7
 800baae:	dd32      	ble.n	800bb16 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x8c>
 800bab0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bab2:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800bab6:	6803      	ldr	r3, [r0, #0]
 800bab8:	4439      	add	r1, r7
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	b209      	sxth	r1, r1
 800babe:	4798      	blx	r3
 800bac0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800bac4:	4606      	mov	r6, r0
 800bac6:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800bac8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800baca:	b1ca      	cbz	r2, 800bb00 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x76>
 800bacc:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 800bad0:	2200      	movs	r2, #0
 800bad2:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
 800bad6:	b21d      	sxth	r5, r3
 800bad8:	4611      	mov	r1, r2
 800bada:	f7fc f8f8 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
 800bade:	4642      	mov	r2, r8
 800bae0:	4629      	mov	r1, r5
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7fc fd5b 	bl	800859e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800bae8:	6970      	ldr	r0, [r6, #20]
 800baea:	b118      	cbz	r0, 800baf4 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x6a>
 800baec:	6803      	ldr	r3, [r0, #0]
 800baee:	4631      	mov	r1, r6
 800baf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baf2:	4798      	blx	r3
 800baf4:	4631      	mov	r1, r6
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fcec 	bl	800c4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800bafc:	3701      	adds	r7, #1
 800bafe:	e7d3      	b.n	800baa8 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x1e>
 800bb00:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 800bb04:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	b21d      	sxth	r5, r3
 800bb0c:	f7fc f8df 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
 800bb10:	4641      	mov	r1, r8
 800bb12:	462a      	mov	r2, r5
 800bb14:	e7e5      	b.n	800bae2 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x58>
 800bb16:	2300      	movs	r3, #0
 800bb18:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bb20:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bb22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb26:	f7ff be7f 	b.w	800b828 <_ZN8touchgfx12DrawableList9setOffsetEl>

0800bb2a <_ZN8touchgfx12DrawableList8setWidthEs>:
 800bb2a:	8101      	strh	r1, [r0, #8]
 800bb2c:	f7ff bfad 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0800bb30 <_ZN8touchgfx12DrawableList9setHeightEs>:
 800bb30:	8141      	strh	r1, [r0, #10]
 800bb32:	f7ff bfaa 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0800bb36 <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 800bb36:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800bb3a:	b121      	cbz	r1, 800bb46 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 800bb3c:	b92b      	cbnz	r3, 800bb4a <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 800bb3e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 800bb42:	f7ff bfa2 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f9      	bne.n	800bb3e <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 800bb4a:	4770      	bx	lr

0800bb4c <_ZN8touchgfx12DrawableList11setCircularEb>:
 800bb4c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800bb50:	b121      	cbz	r1, 800bb5c <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 800bb52:	b92b      	cbnz	r3, 800bb60 <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 800bb54:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 800bb58:	f7ff bf97 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1f9      	bne.n	800bb54 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 800bb60:	4770      	bx	lr

0800bb62 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 800bb62:	b410      	push	{r4}
 800bb64:	6441      	str	r1, [r0, #68]	; 0x44
 800bb66:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800bb6a:	6483      	str	r3, [r0, #72]	; 0x48
 800bb6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb70:	f7ff bf8b 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0800bb74 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 800bb74:	8701      	strh	r1, [r0, #56]	; 0x38
 800bb76:	f7ff bf88 	b.w	800ba8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0800bb7a <_ZN8touchgfx12DrawableList11itemChangedEs>:
 800bb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800bb80:	460e      	mov	r6, r1
 800bb82:	b1c0      	cbz	r0, 800bbb6 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 800bb84:	6803      	ldr	r3, [r0, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	4798      	blx	r3
 800bb8a:	b1a0      	cbz	r0, 800bbb6 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 800bb8c:	f04f 35ff 	mov.w	r5, #4294967295
 800bb90:	462a      	mov	r2, r5
 800bb92:	4631      	mov	r1, r6
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7ff ff42 	bl	800ba1e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	d00a      	beq.n	800bbb6 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 800bba0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bba2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800bba6:	6803      	ldr	r3, [r0, #0]
 800bba8:	442a      	add	r2, r5
 800bbaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bbac:	689f      	ldr	r7, [r3, #8]
 800bbae:	4633      	mov	r3, r6
 800bbb0:	b212      	sxth	r2, r2
 800bbb2:	47b8      	blx	r7
 800bbb4:	e7ec      	b.n	800bb90 <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 800bbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbb8 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	6803      	ldr	r3, [r0, #0]
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbc4:	4798      	blx	r3
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 800bbcc:	4601      	mov	r1, r0
 800bbce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbd8:	4718      	bx	r3

0800bbda <_ZNK8touchgfx15ScrollWheelBase21getSelectedItemOffsetEv>:
 800bbda:	f9b0 007a 	ldrsh.w	r0, [r0, #122]	; 0x7a
 800bbde:	4770      	bx	lr

0800bbe0 <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	6803      	ldr	r3, [r0, #0]
 800bbe4:	4249      	negs	r1, r1
 800bbe6:	f9b0 407c 	ldrsh.w	r4, [r0, #124]	; 0x7c
 800bbea:	4605      	mov	r5, r0
 800bbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbf0:	434c      	muls	r4, r1
 800bbf2:	4798      	blx	r3
 800bbf4:	b1c0      	cbz	r0, 800bc28 <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs+0x48>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbfe:	4798      	blx	r3
 800bc00:	f8b5 607c 	ldrh.w	r6, [r5, #124]	; 0x7c
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	fb10 4606 	smlabb	r6, r0, r6, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc10:	4798      	blx	r3
 800bc12:	1a23      	subs	r3, r4, r0
 800bc14:	1a30      	subs	r0, r6, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfb8      	it	lt
 800bc1a:	425b      	neglt	r3, r3
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	bfb8      	it	lt
 800bc20:	4240      	neglt	r0, r0
 800bc22:	4283      	cmp	r3, r0
 800bc24:	bfc8      	it	gt
 800bc26:	4634      	movgt	r4, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}

0800bc2c <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	6803      	ldr	r3, [r0, #0]
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	4616      	mov	r6, r2
 800bc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc3a:	4798      	blx	r3
 800bc3c:	b980      	cbnz	r0, 800bc60 <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls+0x34>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	42b4      	cmp	r4, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc48:	bfa8      	it	ge
 800bc4a:	4634      	movge	r4, r6
 800bc4c:	4798      	blx	r3
 800bc4e:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 800bc52:	f1c0 0101 	rsb	r1, r0, #1
 800bc56:	4359      	muls	r1, r3
 800bc58:	1b89      	subs	r1, r1, r6
 800bc5a:	428c      	cmp	r4, r1
 800bc5c:	bfb8      	it	lt
 800bc5e:	460c      	movlt	r4, r1
 800bc60:	4620      	mov	r0, r4
 800bc62:	bd70      	pop	{r4, r5, r6, pc}

0800bc64 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE>:
 800bc64:	2302      	movs	r3, #2
 800bc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800bc6e:	4605      	mov	r5, r0
 800bc70:	6803      	ldr	r3, [r0, #0]
 800bc72:	460e      	mov	r6, r1
 800bc74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc78:	4798      	blx	r3
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc84:	4798      	blx	r3
 800bc86:	b3a0      	cbz	r0, 800bcf2 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x8e>
 800bc88:	8973      	ldrh	r3, [r6, #10]
 800bc8a:	88f4      	ldrh	r4, [r6, #6]
 800bc8c:	1b1b      	subs	r3, r3, r4
 800bc8e:	f8b5 4080 	ldrh.w	r4, [r5, #128]	; 0x80
 800bc92:	4628      	mov	r0, r5
 800bc94:	b21b      	sxth	r3, r3
 800bc96:	435c      	muls	r4, r3
 800bc98:	230a      	movs	r3, #10
 800bc9a:	fb94 f4f3 	sdiv	r4, r4, r3
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	443c      	add	r4, r7
 800bca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca6:	4798      	blx	r3
 800bca8:	b9d8      	cbnz	r0, 800bce2 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x7e>
 800bcaa:	f9b5 107c 	ldrsh.w	r1, [r5, #124]	; 0x7c
 800bcae:	2604      	movs	r6, #4
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bcb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcbc:	fb91 f1f6 	sdiv	r1, r1, r6
 800bcc0:	428c      	cmp	r4, r1
 800bcc2:	bfa8      	it	ge
 800bcc4:	460c      	movge	r4, r1
 800bcc6:	4798      	blx	r3
 800bcc8:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 800bccc:	3801      	subs	r0, #1
 800bcce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800bcd2:	fb91 f1f6 	sdiv	r1, r1, r6
 800bcd6:	4249      	negs	r1, r1
 800bcd8:	fb03 1110 	mls	r1, r3, r0, r1
 800bcdc:	428c      	cmp	r4, r1
 800bcde:	bfb8      	it	lt
 800bce0:	460c      	movlt	r4, r1
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	4621      	mov	r1, r4
 800bce6:	4628      	mov	r0, r5
 800bce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf0:	4718      	bx	r3
 800bcf2:	89b3      	ldrh	r3, [r6, #12]
 800bcf4:	8934      	ldrh	r4, [r6, #8]
 800bcf6:	e7c9      	b.n	800bc8c <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x28>

0800bcf8 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	6803      	ldr	r3, [r0, #0]
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	790e      	ldrb	r6, [r1, #4]
 800bd00:	460d      	mov	r5, r1
 800bd02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd06:	4798      	blx	r3
 800bd08:	f080 0001 	eor.w	r0, r0, #1
 800bd0c:	b2c0      	uxtb	r0, r0
 800bd0e:	42b0      	cmp	r0, r6
 800bd10:	d126      	bne.n	800bd60 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x68>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	4620      	mov	r0, r4
 800bd16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd1a:	4798      	blx	r3
 800bd1c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bd20:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
 800bd24:	4359      	muls	r1, r3
 800bd26:	230a      	movs	r3, #10
 800bd28:	fb91 f1f3 	sdiv	r1, r1, r3
 800bd2c:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 800bd30:	4401      	add	r1, r0
 800bd32:	b163      	cbz	r3, 800bd4e <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x56>
 800bd34:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 800bd38:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800bd3c:	4343      	muls	r3, r0
 800bd3e:	18d0      	adds	r0, r2, r3
 800bd40:	4281      	cmp	r1, r0
 800bd42:	bfa8      	it	ge
 800bd44:	4601      	movge	r1, r0
 800bd46:	1ad0      	subs	r0, r2, r3
 800bd48:	4281      	cmp	r1, r0
 800bd4a:	bfb8      	it	lt
 800bd4c:	4601      	movlt	r1, r0
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	4620      	mov	r0, r4
 800bd52:	f04f 32ff 	mov.w	r2, #4294967295
 800bd56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd5e:	4718      	bx	r3
 800bd60:	bd70      	pop	{r4, r5, r6, pc}

0800bd62 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls>:
 800bd62:	b570      	push	{r4, r5, r6, lr}
 800bd64:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 800bd68:	4604      	mov	r4, r0
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	b31b      	cbz	r3, 800bdb8 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x56>
 800bd70:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800bd74:	b1c8      	cbz	r0, 800bdaa <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 800bd76:	6803      	ldr	r3, [r0, #0]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	4798      	blx	r3
 800bd7c:	b1a8      	cbz	r0, 800bdaa <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 800bd7e:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd11      	ble.n	800bdaa <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bd90:	4798      	blx	r3
 800bd92:	4605      	mov	r5, r0
 800bd94:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 800bd98:	4269      	negs	r1, r5
 800bd9a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800bd9e:	fb91 f1f3 	sdiv	r1, r1, r3
 800bda2:	6803      	ldr	r3, [r0, #0]
 800bda4:	b209      	sxth	r1, r1
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	4798      	blx	r3
 800bdaa:	4632      	mov	r2, r6
 800bdac:	4629      	mov	r1, r5
 800bdae:	4620      	mov	r0, r4
 800bdb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdb4:	f000 b8ce 	b.w	800bf54 <_ZN8touchgfx10ScrollBase17animateToPositionEls>
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdbc <_ZN8touchgfx15ScrollWheelBaseC1Ev>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	f000 fa72 	bl	800c2a8 <_ZN8touchgfx10ScrollBaseC1Ev>
 800bdc4:	4b06      	ldr	r3, [pc, #24]	; (800bde0 <_ZN8touchgfx15ScrollWheelBaseC1Ev+0x24>)
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4620      	mov	r0, r4
 800bdca:	6023      	str	r3, [r4, #0]
 800bdcc:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
 800bdd0:	f000 fa60 	bl	800c294 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800bddc:	bd10      	pop	{r4, pc}
 800bdde:	bf00      	nop
 800bde0:	08020d70 	.word	0x08020d70

0800bde4 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 800bdea:	4604      	mov	r4, r0
 800bdec:	b1a3      	cbz	r3, 800be18 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x34>
 800bdee:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d109      	bne.n	800be0a <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x26>
 800bdf6:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 800bdfa:	f000 f9e5 	bl	800c1c8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800bdfe:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 800be02:	4240      	negs	r0, r0
 800be04:	fb90 f0f3 	sdiv	r0, r0, r3
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	6803      	ldr	r3, [r0, #0]
 800be0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be10:	4798      	blx	r3
 800be12:	4601      	mov	r1, r0
 800be14:	4620      	mov	r0, r4
 800be16:	e7f0      	b.n	800bdfa <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x16>
 800be18:	4618      	mov	r0, r3
 800be1a:	e7f5      	b.n	800be08 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x24>

0800be1c <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE>:
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 800be22:	4604      	mov	r4, r0
 800be24:	460d      	mov	r5, r1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d06d      	beq.n	800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800be2a:	6803      	ldr	r3, [r0, #0]
 800be2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be30:	4798      	blx	r3
 800be32:	792b      	ldrb	r3, [r5, #4]
 800be34:	4606      	mov	r6, r0
 800be36:	b9fb      	cbnz	r3, 800be78 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x5c>
 800be38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800be3c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
 800be40:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800be44:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 800be48:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800be4c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
 800be50:	2800      	cmp	r0, #0
 800be52:	d058      	beq.n	800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800be54:	6803      	ldr	r3, [r0, #0]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	4798      	blx	r3
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d053      	beq.n	800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800be5e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 800be62:	682b      	ldr	r3, [r5, #0]
 800be64:	4620      	mov	r0, r4
 800be66:	689e      	ldr	r6, [r3, #8]
 800be68:	f7ff ffbc 	bl	800bde4 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 800be6c:	b201      	sxth	r1, r0
 800be6e:	4628      	mov	r0, r5
 800be70:	4633      	mov	r3, r6
 800be72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be76:	4718      	bx	r3
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d144      	bne.n	800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800be7c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800be80:	bbb3      	cbnz	r3, 800bef0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xd4>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	4620      	mov	r0, r4
 800be86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be8a:	4798      	blx	r3
 800be8c:	b1f0      	cbz	r0, 800becc <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xb0>
 800be8e:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	; 0xb0
 800be92:	f9b4 207a 	ldrsh.w	r2, [r4, #122]	; 0x7a
 800be96:	6821      	ldr	r1, [r4, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 800be9e:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 800bea2:	dd16      	ble.n	800bed2 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xb6>
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	fb93 f3f0 	sdiv	r3, r3, r0
 800beae:	fb03 0000 	mla	r0, r3, r0, r0
 800beb2:	1981      	adds	r1, r0, r6
 800beb4:	4620      	mov	r0, r4
 800beb6:	47a8      	blx	r5
 800beb8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bebc:	b318      	cbz	r0, 800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800bebe:	6803      	ldr	r3, [r0, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	4798      	blx	r3
 800bec4:	b1f8      	cbz	r0, 800bf06 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 800bec6:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800beca:	e7ca      	b.n	800be62 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x46>
 800becc:	f9b4 30b2 	ldrsh.w	r3, [r4, #178]	; 0xb2
 800bed0:	e7df      	b.n	800be92 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x76>
 800bed2:	1881      	adds	r1, r0, r2
 800bed4:	4299      	cmp	r1, r3
 800bed6:	da07      	bge.n	800bee8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xcc>
 800bed8:	1a9b      	subs	r3, r3, r2
 800beda:	f04f 32ff 	mov.w	r2, #4294967295
 800bede:	fb93 f3f0 	sdiv	r3, r3, r0
 800bee2:	fb00 6113 	mls	r1, r0, r3, r6
 800bee6:	e7e5      	b.n	800beb4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x98>
 800bee8:	f04f 32ff 	mov.w	r2, #4294967295
 800beec:	4631      	mov	r1, r6
 800beee:	e7e1      	b.n	800beb4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x98>
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d1e1      	bne.n	800beb8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x9c>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	4601      	mov	r1, r0
 800bef8:	f04f 32ff 	mov.w	r2, #4294967295
 800befc:	4620      	mov	r0, r4
 800befe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bf02:	4798      	blx	r3
 800bf04:	e7d8      	b.n	800beb8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x9c>
 800bf06:	bd70      	pop	{r4, r5, r6, pc}

0800bf08 <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	6803      	ldr	r3, [r0, #0]
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	4615      	mov	r5, r2
 800bf10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf14:	4798      	blx	r3
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	462a      	mov	r2, r5
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bf20:	4620      	mov	r0, r4
 800bf22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf26:	4718      	bx	r3

0800bf28 <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 800bf28:	302c      	adds	r0, #44	; 0x2c
 800bf2a:	f7ff bc4e 	b.w	800b7ca <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

0800bf2e <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 800bf2e:	b209      	sxth	r1, r1
 800bf30:	302c      	adds	r0, #44	; 0x2c
 800bf32:	f7ff be22 	b.w	800bb7a <_ZN8touchgfx12DrawableList11itemChangedEs>

0800bf36 <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 800bf36:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	; 0x7a
 800bf3a:	302c      	adds	r0, #44	; 0x2c
 800bf3c:	4419      	add	r1, r3
 800bf3e:	f7ff bc73 	b.w	800b828 <_ZN8touchgfx12DrawableList9setOffsetEl>

0800bf42 <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 800bf42:	b510      	push	{r4, lr}
 800bf44:	4604      	mov	r4, r0
 800bf46:	302c      	adds	r0, #44	; 0x2c
 800bf48:	f7ff fd67 	bl	800ba1a <_ZNK8touchgfx12DrawableList9getOffsetEv>
 800bf4c:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	bd10      	pop	{r4, pc}

0800bf54 <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	6803      	ldr	r3, [r0, #0]
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4615      	mov	r5, r2
 800bf5c:	460f      	mov	r7, r1
 800bf5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf62:	4798      	blx	r3
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	4606      	mov	r6, r0
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4798      	blx	r3
 800bf72:	2d00      	cmp	r5, #0
 800bf74:	eba0 0306 	sub.w	r3, r0, r6
 800bf78:	4601      	mov	r1, r0
 800bf7a:	bfb8      	it	lt
 800bf7c:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bfb8      	it	lt
 800bf84:	425b      	neglt	r3, r3
 800bf86:	429d      	cmp	r5, r3
 800bf88:	bfa8      	it	ge
 800bf8a:	b21d      	sxthge	r5, r3
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	dc08      	bgt.n	800bfa2 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x4e>
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	4620      	mov	r0, r4
 800bf94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf98:	4798      	blx	r3
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 800bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 800bfa8:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	e9c4 602a 	strd	r6, r0, [r4, #168]	; 0xa8
 800bfb2:	d0f5      	beq.n	800bfa0 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x4c>
 800bfb4:	f003 f8e8 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f003 f8eb 	bl	800f194 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e7ec      	b.n	800bf9c <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x48>

0800bfc2 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 800bfc2:	b538      	push	{r3, r4, r5, lr}
 800bfc4:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 800bfc8:	4605      	mov	r5, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	b18b      	cbz	r3, 800bff2 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>
 800bfce:	6803      	ldr	r3, [r0, #0]
 800bfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd4:	4798      	blx	r3
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	b168      	cbz	r0, 800bff6 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x34>
 800bfda:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 800bfde:	2102      	movs	r1, #2
 800bfe0:	2c00      	cmp	r4, #0
 800bfe2:	fb93 f1f1 	sdiv	r1, r3, r1
 800bfe6:	bfb4      	ite	lt
 800bfe8:	1a64      	sublt	r4, r4, r1
 800bfea:	1864      	addge	r4, r4, r1
 800bfec:	fb94 f4f3 	sdiv	r4, r4, r3
 800bff0:	435c      	muls	r4, r3
 800bff2:	4620      	mov	r0, r4
 800bff4:	bd38      	pop	{r3, r4, r5, pc}
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	4621      	mov	r1, r4
 800bffa:	4628      	mov	r0, r5
 800bffc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c000:	4798      	blx	r3
 800c002:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	; 0x7c
 800c006:	2302      	movs	r3, #2
 800c008:	fb94 f3f3 	sdiv	r3, r4, r3
 800c00c:	1ac0      	subs	r0, r0, r3
 800c00e:	fb90 f0f4 	sdiv	r0, r0, r4
 800c012:	4344      	muls	r4, r0
 800c014:	e7ed      	b.n	800bff2 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>

0800c016 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	6803      	ldr	r3, [r0, #0]
 800c01c:	460d      	mov	r5, r1
 800c01e:	4604      	mov	r4, r0
 800c020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c024:	4798      	blx	r3
 800c026:	42a8      	cmp	r0, r5
 800c028:	d020      	beq.n	800c06c <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 800c02a:	4629      	mov	r1, r5
 800c02c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c030:	f7ff fda0 	bl	800bb74 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	4620      	mov	r0, r4
 800c038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c03c:	4798      	blx	r3
 800c03e:	4605      	mov	r5, r0
 800c040:	b9a0      	cbnz	r0, 800c06c <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	4620      	mov	r0, r4
 800c046:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 800c04a:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 800c04e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c052:	4798      	blx	r3
 800c054:	462a      	mov	r2, r5
 800c056:	4601      	mov	r1, r0
 800c058:	4620      	mov	r0, r4
 800c05a:	47b8      	blx	r7
 800c05c:	4633      	mov	r3, r6
 800c05e:	4601      	mov	r1, r0
 800c060:	f04f 32ff 	mov.w	r2, #4294967295
 800c064:	4620      	mov	r0, r4
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	4718      	bx	r3
 800c06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c070 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	6803      	ldr	r3, [r0, #0]
 800c074:	4605      	mov	r5, r0
 800c076:	790e      	ldrb	r6, [r1, #4]
 800c078:	460c      	mov	r4, r1
 800c07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07e:	4798      	blx	r3
 800c080:	f080 0001 	eor.w	r0, r0, #1
 800c084:	b2c0      	uxtb	r0, r0
 800c086:	42b0      	cmp	r0, r6
 800c088:	d140      	bne.n	800c10c <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x9c>
 800c08a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c08e:	4628      	mov	r0, r5
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfbb      	ittet	lt
 800c094:	425b      	neglt	r3, r3
 800c096:	f04f 36ff 	movlt.w	r6, #4294967295
 800c09a:	2601      	movge	r6, #1
 800c09c:	b21b      	sxthlt	r3, r3
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	bfc9      	itett	gt
 800c0a2:	3b04      	subgt	r3, #4
 800c0a4:	2407      	movle	r4, #7
 800c0a6:	ebc3 03c3 	rsbgt	r3, r3, r3, lsl #3
 800c0aa:	b21c      	sxthgt	r4, r3
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0b2:	4366      	muls	r6, r4
 800c0b4:	4798      	blx	r3
 800c0b6:	f8b5 107e 	ldrh.w	r1, [r5, #126]	; 0x7e
 800c0ba:	230a      	movs	r3, #10
 800c0bc:	4371      	muls	r1, r6
 800c0be:	fb91 f1f3 	sdiv	r1, r1, r3
 800c0c2:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
 800c0c6:	4401      	add	r1, r0
 800c0c8:	b163      	cbz	r3, 800c0e4 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x74>
 800c0ca:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	; 0x7c
 800c0ce:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800c0d2:	4343      	muls	r3, r0
 800c0d4:	1898      	adds	r0, r3, r2
 800c0d6:	4281      	cmp	r1, r0
 800c0d8:	bfa8      	it	ge
 800c0da:	4601      	movge	r1, r0
 800c0dc:	1ad0      	subs	r0, r2, r3
 800c0de:	4281      	cmp	r1, r0
 800c0e0:	bfb8      	it	lt
 800c0e2:	4601      	movlt	r1, r0
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0ee:	4798      	blx	r3
 800c0f0:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	42a2      	cmp	r2, r4
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c100:	bfa8      	it	ge
 800c102:	4622      	movge	r2, r4
 800c104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c108:	b212      	sxth	r2, r2
 800c10a:	4718      	bx	r3
 800c10c:	bd70      	pop	{r4, r5, r6, pc}

0800c10e <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 800c10e:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800c112:	302c      	adds	r0, #44	; 0x2c
 800c114:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800c118:	f7ff bb52 	b.w	800b7c0 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

0800c11c <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 800c11c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 800c120:	4770      	bx	lr

0800c122 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 800c122:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
 800c126:	4770      	bx	lr

0800c128 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 800c128:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
 800c12c:	4770      	bx	lr

0800c12e <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 800c12e:	b510      	push	{r4, lr}
 800c130:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 800c134:	4604      	mov	r4, r0
 800c136:	2b01      	cmp	r3, #1
 800c138:	d10b      	bne.n	800c152 <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x24>
 800c13a:	f003 f825 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800c13e:	4621      	mov	r1, r4
 800c140:	f003 f85a 	bl	800f1f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c14a:	4620      	mov	r0, r4
 800c14c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c150:	4798      	blx	r3
 800c152:	2300      	movs	r3, #0
 800c154:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 800c158:	bd10      	pop	{r4, pc}

0800c15a <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 800c15a:	b570      	push	{r4, r5, r6, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	460e      	mov	r6, r1
 800c160:	f7ff ffe5 	bl	800c12e <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 800c164:	2302      	movs	r3, #2
 800c166:	4620      	mov	r0, r4
 800c168:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c172:	4798      	blx	r3
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	4605      	mov	r5, r0
 800c178:	4620      	mov	r0, r4
 800c17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c17e:	4798      	blx	r3
 800c180:	b1f8      	cbz	r0, 800c1c2 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x68>
 800c182:	8973      	ldrh	r3, [r6, #10]
 800c184:	88f1      	ldrh	r1, [r6, #6]
 800c186:	1a5b      	subs	r3, r3, r1
 800c188:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 800c18c:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 800c190:	4620      	mov	r0, r4
 800c192:	b21b      	sxth	r3, r3
 800c194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c198:	434b      	muls	r3, r1
 800c19a:	210a      	movs	r1, #10
 800c19c:	fb93 f3f1 	sdiv	r3, r3, r1
 800c1a0:	2104      	movs	r1, #4
 800c1a2:	fb92 f2f1 	sdiv	r2, r2, r1
 800c1a6:	6821      	ldr	r1, [r4, #0]
 800c1a8:	b212      	sxth	r2, r2
 800c1aa:	f8d1 60b8 	ldr.w	r6, [r1, #184]	; 0xb8
 800c1ae:	1959      	adds	r1, r3, r5
 800c1b0:	47b0      	blx	r6
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	4601      	mov	r1, r0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1c0:	4718      	bx	r3
 800c1c2:	89b3      	ldrh	r3, [r6, #12]
 800c1c4:	8931      	ldrh	r1, [r6, #8]
 800c1c6:	e7de      	b.n	800c186 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2c>

0800c1c8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	6803      	ldr	r3, [r0, #0]
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1d4:	4798      	blx	r3
 800c1d6:	b150      	cbz	r0, 800c1ee <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 800c1d8:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 800c1dc:	b13b      	cbz	r3, 800c1ee <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 800c1de:	4358      	muls	r0, r3
 800c1e0:	fb94 f3f0 	sdiv	r3, r4, r0
 800c1e4:	fb00 4413 	mls	r4, r0, r3, r4
 800c1e8:	2c00      	cmp	r4, #0
 800c1ea:	bfc8      	it	gt
 800c1ec:	1a24      	subgt	r4, r4, r0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}

0800c1f2 <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 800c1f2:	b570      	push	{r4, r5, r6, lr}
 800c1f4:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d149      	bne.n	800c292 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa0>
 800c1fe:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800c202:	2100      	movs	r1, #0
 800c204:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800c208:	3001      	adds	r0, #1
 800c20a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800c20e:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	; 0xa8
 800c212:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 800c216:	b280      	uxth	r0, r0
 800c218:	1b92      	subs	r2, r2, r6
 800c21a:	b212      	sxth	r2, r2
 800c21c:	47a8      	blx	r5
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	1981      	adds	r1, r0, r6
 800c222:	4620      	mov	r0, r4
 800c224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c228:	4798      	blx	r3
 800c22a:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
 800c22e:	429a      	cmp	r2, r3
 800c230:	dd2f      	ble.n	800c292 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa0>
 800c232:	2300      	movs	r3, #0
 800c234:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 800c238:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800c23c:	f002 ffa4 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800c240:	4621      	mov	r1, r4
 800c242:	f002 ffd9 	bl	800f1f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c24c:	4620      	mov	r0, r4
 800c24e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800c252:	f7ff ffb9 	bl	800c1c8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800c256:	4601      	mov	r1, r0
 800c258:	4620      	mov	r0, r4
 800c25a:	47a8      	blx	r5
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	4620      	mov	r0, r4
 800c260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c264:	4798      	blx	r3
 800c266:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c26a:	1ac0      	subs	r0, r0, r3
 800c26c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c270:	4403      	add	r3, r0
 800c272:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c276:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 800c27a:	b150      	cbz	r0, 800c292 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa0>
 800c27c:	6803      	ldr	r3, [r0, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	4798      	blx	r3
 800c282:	b130      	cbz	r0, 800c292 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa0>
 800c284:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c288:	6803      	ldr	r3, [r0, #0]
 800c28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	4718      	bx	r3
 800c292:	bd70      	pop	{r4, r5, r6, pc}

0800c294 <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 800c294:	f081 0301 	eor.w	r3, r1, #1
 800c298:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 800c29c:	302c      	adds	r0, #44	; 0x2c
 800c29e:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 800c2a2:	f7ff bc48 	b.w	800bb36 <_ZN8touchgfx12DrawableList13setHorizontalEb>
	...

0800c2a8 <_ZN8touchgfx10ScrollBaseC1Ev>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	2500      	movs	r5, #0
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	2701      	movs	r7, #1
 800c2b0:	4b21      	ldr	r3, [pc, #132]	; (800c338 <_ZN8touchgfx10ScrollBaseC1Ev+0x90>)
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	8085      	strh	r5, [r0, #4]
 800c2b6:	80c5      	strh	r5, [r0, #6]
 800c2b8:	8105      	strh	r5, [r0, #8]
 800c2ba:	8145      	strh	r5, [r0, #10]
 800c2bc:	8185      	strh	r5, [r0, #12]
 800c2be:	81c5      	strh	r5, [r0, #14]
 800c2c0:	8205      	strh	r5, [r0, #16]
 800c2c2:	8245      	strh	r5, [r0, #18]
 800c2c4:	61c5      	str	r5, [r0, #28]
 800c2c6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 800c2ca:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 800c2ce:	6285      	str	r5, [r0, #40]	; 0x28
 800c2d0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800c2d4:	f846 3b2c 	str.w	r3, [r6], #44
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff fa4b 	bl	800b774 <_ZN8touchgfx12DrawableListC1Ev>
 800c2de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800c2e2:	230a      	movs	r3, #10
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	67a5      	str	r5, [r4, #120]	; 0x78
 800c2ea:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 800c2ee:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800c2f2:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 800c2f6:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 800c2fa:	4b10      	ldr	r3, [pc, #64]	; (800c33c <_ZN8touchgfx10ScrollBaseC1Ev+0x94>)
 800c2fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800c300:	231e      	movs	r3, #30
 800c302:	e9c4 5523 	strd	r5, r5, [r4, #140]	; 0x8c
 800c306:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 800c30a:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 800c30e:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 800c312:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 800c316:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
 800c31a:	f000 f8db 	bl	800c4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c31e:	4629      	mov	r1, r5
 800c320:	4630      	mov	r0, r6
 800c322:	6325      	str	r5, [r4, #48]	; 0x30
 800c324:	f7ff fc07 	bl	800bb36 <_ZN8touchgfx12DrawableList13setHorizontalEb>
 800c328:	4630      	mov	r0, r6
 800c32a:	4629      	mov	r1, r5
 800c32c:	f7ff fc0e 	bl	800bb4c <_ZN8touchgfx12DrawableList11setCircularEb>
 800c330:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800c334:	4620      	mov	r0, r4
 800c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c338:	08020e44 	.word	0x08020e44
 800c33c:	08010a4d 	.word	0x08010a4d

0800c340 <_ZN8touchgfx10ScrollBase11setCircularEb>:
 800c340:	302c      	adds	r0, #44	; 0x2c
 800c342:	f7ff bc03 	b.w	800bb4c <_ZN8touchgfx12DrawableList11setCircularEb>

0800c346 <_ZN8touchgfx10ScrollBase8setWidthEs>:
 800c346:	8101      	strh	r1, [r0, #8]
 800c348:	302c      	adds	r0, #44	; 0x2c
 800c34a:	f7ff bbee 	b.w	800bb2a <_ZN8touchgfx12DrawableList8setWidthEs>

0800c34e <_ZN8touchgfx10ScrollBase9setHeightEs>:
 800c34e:	8141      	strh	r1, [r0, #10]
 800c350:	302c      	adds	r0, #44	; 0x2c
 800c352:	f7ff bbed 	b.w	800bb30 <_ZN8touchgfx12DrawableList9setHeightEs>

0800c356 <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 800c356:	302c      	adds	r0, #44	; 0x2c
 800c358:	f7ff b9fa 	b.w	800b750 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

0800c35c <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 800c35c:	302c      	adds	r0, #44	; 0x2c
 800c35e:	f7ff b9fa 	b.w	800b756 <_ZNK8touchgfx12DrawableList11getCircularEv>

0800c362 <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 800c362:	302c      	adds	r0, #44	; 0x2c
 800c364:	f7ff b9fd 	b.w	800b762 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

0800c368 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 800c368:	302c      	adds	r0, #44	; 0x2c
 800c36a:	f7ff ba00 	b.w	800b76e <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

0800c36e <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	460d      	mov	r5, r1
 800c372:	4604      	mov	r4, r0
 800c374:	4616      	mov	r6, r2
 800c376:	f7ff feda 	bl	800c12e <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	4628      	mov	r0, r5
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	4798      	blx	r3
 800c382:	4633      	mov	r3, r6
 800c384:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
 800c388:	4629      	mov	r1, r5
 800c38a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c38e:	2200      	movs	r2, #0
 800c390:	f7ff fbe7 	bl	800bb62 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	4620      	mov	r0, r4
 800c398:	2100      	movs	r1, #0
 800c39a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3a2:	4718      	bx	r3

0800c3a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c3a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	b12b      	cbz	r3, 800c3b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c3aa:	b920      	cbnz	r0, 800c3b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c3ac:	1a5a      	subs	r2, r3, r1
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	4250      	negs	r0, r2
 800c3b2:	4150      	adcs	r0, r2
 800c3b4:	e7f8      	b.n	800c3a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c3b6:	4770      	bx	lr

0800c3b8 <_ZN8touchgfx9Container9removeAllEv>:
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c3bc:	b123      	cbz	r3, 800c3c8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c3be:	6999      	ldr	r1, [r3, #24]
 800c3c0:	6281      	str	r1, [r0, #40]	; 0x28
 800c3c2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c3c6:	e7f8      	b.n	800c3ba <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c3c8:	4770      	bx	lr

0800c3ca <_ZN8touchgfx9Container6unlinkEv>:
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6283      	str	r3, [r0, #40]	; 0x28
 800c3ce:	4770      	bx	lr

0800c3d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	461f      	mov	r7, r3
 800c3d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c3da:	460d      	mov	r5, r1
 800c3dc:	4616      	mov	r6, r2
 800c3de:	b103      	cbz	r3, 800c3e2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800c3e0:	6038      	str	r0, [r7, #0]
 800c3e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c3e4:	b314      	cbz	r4, 800c42c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c3e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c3ea:	b1eb      	cbz	r3, 800c428 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c3ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c3f0:	428d      	cmp	r5, r1
 800c3f2:	db19      	blt.n	800c428 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c3f4:	b289      	uxth	r1, r1
 800c3f6:	8923      	ldrh	r3, [r4, #8]
 800c3f8:	440b      	add	r3, r1
 800c3fa:	b21b      	sxth	r3, r3
 800c3fc:	429d      	cmp	r5, r3
 800c3fe:	da13      	bge.n	800c428 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c400:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c404:	4296      	cmp	r6, r2
 800c406:	db0f      	blt.n	800c428 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c408:	b292      	uxth	r2, r2
 800c40a:	8963      	ldrh	r3, [r4, #10]
 800c40c:	4413      	add	r3, r2
 800c40e:	b21b      	sxth	r3, r3
 800c410:	429e      	cmp	r6, r3
 800c412:	da09      	bge.n	800c428 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	1ab2      	subs	r2, r6, r2
 800c418:	1a69      	subs	r1, r5, r1
 800c41a:	4620      	mov	r0, r4
 800c41c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800c420:	b212      	sxth	r2, r2
 800c422:	463b      	mov	r3, r7
 800c424:	b209      	sxth	r1, r1
 800c426:	47c0      	blx	r8
 800c428:	69a4      	ldr	r4, [r4, #24]
 800c42a:	e7db      	b.n	800c3e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c430 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c430:	2200      	movs	r2, #0
 800c432:	8002      	strh	r2, [r0, #0]
 800c434:	8042      	strh	r2, [r0, #2]
 800c436:	8082      	strh	r2, [r0, #4]
 800c438:	80c2      	strh	r2, [r0, #6]
 800c43a:	4770      	bx	lr

0800c43c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	460d      	mov	r5, r1
 800c440:	4616      	mov	r6, r2
 800c442:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c444:	b13c      	cbz	r4, 800c456 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	4620      	mov	r0, r4
 800c44a:	4632      	mov	r2, r6
 800c44c:	4629      	mov	r1, r5
 800c44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c450:	4798      	blx	r3
 800c452:	69a4      	ldr	r4, [r4, #24]
 800c454:	e7f6      	b.n	800c444 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c456:	bd70      	pop	{r4, r5, r6, pc}

0800c458 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	460d      	mov	r5, r1
 800c45c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c45e:	b134      	cbz	r4, 800c46e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	4798      	blx	r3
 800c46a:	69a4      	ldr	r4, [r4, #24]
 800c46c:	e7f7      	b.n	800c45e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c46e:	bd38      	pop	{r3, r4, r5, pc}

0800c470 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c470:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c472:	b19b      	cbz	r3, 800c49c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c474:	428b      	cmp	r3, r1
 800c476:	d109      	bne.n	800c48c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c478:	699a      	ldr	r2, [r3, #24]
 800c47a:	2100      	movs	r1, #0
 800c47c:	6159      	str	r1, [r3, #20]
 800c47e:	6282      	str	r2, [r0, #40]	; 0x28
 800c480:	b902      	cbnz	r2, 800c484 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c482:	4770      	bx	lr
 800c484:	6199      	str	r1, [r3, #24]
 800c486:	4770      	bx	lr
 800c488:	4613      	mov	r3, r2
 800c48a:	b13a      	cbz	r2, 800c49c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	428a      	cmp	r2, r1
 800c490:	d1fa      	bne.n	800c488 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c492:	698a      	ldr	r2, [r1, #24]
 800c494:	619a      	str	r2, [r3, #24]
 800c496:	2300      	movs	r3, #0
 800c498:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c49c:	4770      	bx	lr

0800c49e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c49e:	b410      	push	{r4}
 800c4a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	b92b      	cbnz	r3, 800c4b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c4a6:	6803      	ldr	r3, [r0, #0]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4b0:	4718      	bx	r3
 800c4b2:	b941      	cbnz	r1, 800c4c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c4b4:	6193      	str	r3, [r2, #24]
 800c4b6:	6282      	str	r2, [r0, #40]	; 0x28
 800c4b8:	6154      	str	r4, [r2, #20]
 800c4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d0f9      	beq.n	800c4ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c4c6:	4299      	cmp	r1, r3
 800c4c8:	6998      	ldr	r0, [r3, #24]
 800c4ca:	d1f9      	bne.n	800c4c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c4cc:	6190      	str	r0, [r2, #24]
 800c4ce:	618a      	str	r2, [r1, #24]
 800c4d0:	e7f2      	b.n	800c4b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800c4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c4d4:	4288      	cmp	r0, r1
 800c4d6:	b508      	push	{r3, lr}
 800c4d8:	d105      	bne.n	800c4e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c4da:	4b11      	ldr	r3, [pc, #68]	; (800c520 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800c4dc:	2123      	movs	r1, #35	; 0x23
 800c4de:	4a11      	ldr	r2, [pc, #68]	; (800c524 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c4e0:	4811      	ldr	r0, [pc, #68]	; (800c528 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c4e2:	f011 ff31 	bl	801e348 <__assert_func>
 800c4e6:	694b      	ldr	r3, [r1, #20]
 800c4e8:	b11b      	cbz	r3, 800c4f2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c4ea:	4b10      	ldr	r3, [pc, #64]	; (800c52c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c4ec:	2124      	movs	r1, #36	; 0x24
 800c4ee:	4a0d      	ldr	r2, [pc, #52]	; (800c524 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c4f0:	e7f6      	b.n	800c4e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c4f2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800c4f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c4f8:	b913      	cbnz	r3, 800c500 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c4fa:	6281      	str	r1, [r0, #40]	; 0x28
 800c4fc:	bd08      	pop	{r3, pc}
 800c4fe:	4613      	mov	r3, r2
 800c500:	699a      	ldr	r2, [r3, #24]
 800c502:	b12a      	cbz	r2, 800c510 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800c504:	428b      	cmp	r3, r1
 800c506:	d1fa      	bne.n	800c4fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800c508:	4b09      	ldr	r3, [pc, #36]	; (800c530 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c50a:	2135      	movs	r1, #53	; 0x35
 800c50c:	4a05      	ldr	r2, [pc, #20]	; (800c524 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c50e:	e7e7      	b.n	800c4e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c510:	428b      	cmp	r3, r1
 800c512:	d103      	bne.n	800c51c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800c514:	4b06      	ldr	r3, [pc, #24]	; (800c530 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c516:	2138      	movs	r1, #56	; 0x38
 800c518:	4a02      	ldr	r2, [pc, #8]	; (800c524 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c51a:	e7e1      	b.n	800c4e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c51c:	6199      	str	r1, [r3, #24]
 800c51e:	e7ed      	b.n	800c4fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800c520:	08020fe0 	.word	0x08020fe0
 800c524:	08021130 	.word	0x08021130
 800c528:	0802100c 	.word	0x0802100c
 800c52c:	0802103f 	.word	0x0802103f
 800c530:	08021075 	.word	0x08021075

0800c534 <_ZN8touchgfx4RectaNERKS0_>:
 800c534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c538:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c53c:	888c      	ldrh	r4, [r1, #4]
 800c53e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c542:	443c      	add	r4, r7
 800c544:	b2a4      	uxth	r4, r4
 800c546:	fa0f f884 	sxth.w	r8, r4
 800c54a:	45c1      	cmp	r9, r8
 800c54c:	da2f      	bge.n	800c5ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c54e:	8882      	ldrh	r2, [r0, #4]
 800c550:	444a      	add	r2, r9
 800c552:	b292      	uxth	r2, r2
 800c554:	fa0f fe82 	sxth.w	lr, r2
 800c558:	4577      	cmp	r7, lr
 800c55a:	da28      	bge.n	800c5ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c55c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c560:	88cb      	ldrh	r3, [r1, #6]
 800c562:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c566:	442b      	add	r3, r5
 800c568:	b21b      	sxth	r3, r3
 800c56a:	429e      	cmp	r6, r3
 800c56c:	da1f      	bge.n	800c5ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c56e:	88c3      	ldrh	r3, [r0, #6]
 800c570:	4433      	add	r3, r6
 800c572:	b29b      	uxth	r3, r3
 800c574:	fa0f fc83 	sxth.w	ip, r3
 800c578:	4565      	cmp	r5, ip
 800c57a:	da18      	bge.n	800c5ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c57c:	454f      	cmp	r7, r9
 800c57e:	bfb8      	it	lt
 800c580:	464f      	movlt	r7, r9
 800c582:	42b5      	cmp	r5, r6
 800c584:	bfb8      	it	lt
 800c586:	4635      	movlt	r5, r6
 800c588:	45f0      	cmp	r8, lr
 800c58a:	bfd8      	it	le
 800c58c:	4622      	movle	r2, r4
 800c58e:	1bd2      	subs	r2, r2, r7
 800c590:	8082      	strh	r2, [r0, #4]
 800c592:	884a      	ldrh	r2, [r1, #2]
 800c594:	88c9      	ldrh	r1, [r1, #6]
 800c596:	8007      	strh	r7, [r0, #0]
 800c598:	440a      	add	r2, r1
 800c59a:	8045      	strh	r5, [r0, #2]
 800c59c:	b292      	uxth	r2, r2
 800c59e:	b211      	sxth	r1, r2
 800c5a0:	458c      	cmp	ip, r1
 800c5a2:	bfa8      	it	ge
 800c5a4:	4613      	movge	r3, r2
 800c5a6:	1b5b      	subs	r3, r3, r5
 800c5a8:	80c3      	strh	r3, [r0, #6]
 800c5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	8003      	strh	r3, [r0, #0]
 800c5b2:	8043      	strh	r3, [r0, #2]
 800c5b4:	8083      	strh	r3, [r0, #4]
 800c5b6:	80c3      	strh	r3, [r0, #6]
 800c5b8:	e7f7      	b.n	800c5aa <_ZN8touchgfx4RectaNERKS0_+0x76>

0800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c5ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	dd06      	ble.n	800c5d0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c5c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	bfcc      	ite	gt
 800c5ca:	2000      	movgt	r0, #0
 800c5cc:	2001      	movle	r0, #1
 800c5ce:	4770      	bx	lr
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	4770      	bx	lr

0800c5d4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4604      	mov	r4, r0
 800c5dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c5de:	8003      	strh	r3, [r0, #0]
 800c5e0:	8043      	strh	r3, [r0, #2]
 800c5e2:	8083      	strh	r3, [r0, #4]
 800c5e4:	80c3      	strh	r3, [r0, #6]
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	d040      	beq.n	800c66c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800c5ea:	1d28      	adds	r0, r5, #4
 800c5ec:	f7ff ffe5 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800c5f0:	b988      	cbnz	r0, 800c616 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7ff ffe1 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800c5f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c5fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c600:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800c604:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800c608:	b138      	cbz	r0, 800c61a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800c60a:	8022      	strh	r2, [r4, #0]
 800c60c:	8063      	strh	r3, [r4, #2]
 800c60e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800c612:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c616:	69ad      	ldr	r5, [r5, #24]
 800c618:	e7e5      	b.n	800c5e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c61a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c61e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c622:	4290      	cmp	r0, r2
 800c624:	4607      	mov	r7, r0
 800c626:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800c62a:	460e      	mov	r6, r1
 800c62c:	bfa8      	it	ge
 800c62e:	4617      	movge	r7, r2
 800c630:	4299      	cmp	r1, r3
 800c632:	4472      	add	r2, lr
 800c634:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800c638:	bfa8      	it	ge
 800c63a:	461e      	movge	r6, r3
 800c63c:	4440      	add	r0, r8
 800c63e:	4471      	add	r1, lr
 800c640:	4463      	add	r3, ip
 800c642:	b200      	sxth	r0, r0
 800c644:	8027      	strh	r7, [r4, #0]
 800c646:	b212      	sxth	r2, r2
 800c648:	8066      	strh	r6, [r4, #2]
 800c64a:	b209      	sxth	r1, r1
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	4290      	cmp	r0, r2
 800c650:	bfac      	ite	ge
 800c652:	ebc7 0200 	rsbge	r2, r7, r0
 800c656:	ebc7 0202 	rsblt	r2, r7, r2
 800c65a:	4299      	cmp	r1, r3
 800c65c:	bfac      	ite	ge
 800c65e:	ebc6 0301 	rsbge	r3, r6, r1
 800c662:	ebc6 0303 	rsblt	r3, r6, r3
 800c666:	80a2      	strh	r2, [r4, #4]
 800c668:	80e3      	strh	r3, [r4, #6]
 800c66a:	e7d4      	b.n	800c616 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c66c:	4620      	mov	r0, r4
 800c66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c672 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c672:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c676:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c67a:	b383      	cbz	r3, 800c6de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c67c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c67e:	b374      	cbz	r4, 800c6de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c680:	f9b1 5000 	ldrsh.w	r5, [r1]
 800c684:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800c688:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800c68c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c690:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c694:	b303      	cbz	r3, 800c6d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c696:	4668      	mov	r0, sp
 800c698:	1d21      	adds	r1, r4, #4
 800c69a:	f8ad 5000 	strh.w	r5, [sp]
 800c69e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c6a2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800c6a6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800c6aa:	f7ff ff43 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 800c6ae:	4668      	mov	r0, sp
 800c6b0:	f7ff ff83 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800c6b4:	b980      	cbnz	r0, 800c6d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c6b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6ba:	4669      	mov	r1, sp
 800c6bc:	88a2      	ldrh	r2, [r4, #4]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	1a9b      	subs	r3, r3, r2
 800c6c2:	88e2      	ldrh	r2, [r4, #6]
 800c6c4:	f8ad 3000 	strh.w	r3, [sp]
 800c6c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	4798      	blx	r3
 800c6d8:	69a4      	ldr	r4, [r4, #24]
 800c6da:	2c00      	cmp	r4, #0
 800c6dc:	d1d8      	bne.n	800c690 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800c6de:	b002      	add	sp, #8
 800c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c6e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c6e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	b323      	cbz	r3, 800c73a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c6f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c6f2:	b314      	cbz	r4, 800c73a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c6f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c6f8:	b1eb      	cbz	r3, 800c736 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c6fa:	6828      	ldr	r0, [r5, #0]
 800c6fc:	466b      	mov	r3, sp
 800c6fe:	6869      	ldr	r1, [r5, #4]
 800c700:	c303      	stmia	r3!, {r0, r1}
 800c702:	4668      	mov	r0, sp
 800c704:	1d21      	adds	r1, r4, #4
 800c706:	f7ff ff15 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 800c70a:	4668      	mov	r0, sp
 800c70c:	f7ff ff55 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800c710:	b988      	cbnz	r0, 800c736 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c712:	f8bd 3000 	ldrh.w	r3, [sp]
 800c716:	4669      	mov	r1, sp
 800c718:	88a2      	ldrh	r2, [r4, #4]
 800c71a:	4620      	mov	r0, r4
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	88e2      	ldrh	r2, [r4, #6]
 800c720:	f8ad 3000 	strh.w	r3, [sp]
 800c724:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	4632      	mov	r2, r6
 800c72c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c734:	4798      	blx	r3
 800c736:	69a4      	ldr	r4, [r4, #24]
 800c738:	e7db      	b.n	800c6f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800c73a:	b002      	add	sp, #8
 800c73c:	bd70      	pop	{r4, r5, r6, pc}

0800c73e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800c73e:	4770      	bx	lr

0800c740 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800c740:	4770      	bx	lr

0800c742 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c742:	6803      	ldr	r3, [r0, #0]
 800c744:	b513      	push	{r0, r1, r4, lr}
 800c746:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800c74a:	2300      	movs	r3, #0
 800c74c:	e9cd 3300 	strd	r3, r3, [sp]
 800c750:	466b      	mov	r3, sp
 800c752:	47a0      	blx	r4
 800c754:	b002      	add	sp, #8
 800c756:	bd10      	pop	{r4, pc}

0800c758 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c758:	2301      	movs	r3, #1
 800c75a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c75e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c762:	4770      	bx	lr

0800c764 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c764:	2301      	movs	r3, #1
 800c766:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c76a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c76e:	4770      	bx	lr

0800c770 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c770:	6843      	ldr	r3, [r0, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	725a      	strb	r2, [r3, #9]
 800c776:	6840      	ldr	r0, [r0, #4]
 800c778:	6803      	ldr	r3, [r0, #0]
 800c77a:	691b      	ldr	r3, [r3, #16]
 800c77c:	4718      	bx	r3

0800c77e <_ZN8touchgfx3HAL8flushDMAEv>:
 800c77e:	6840      	ldr	r0, [r0, #4]
 800c780:	6803      	ldr	r3, [r0, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	4718      	bx	r3
	...

0800c788 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c788:	4b04      	ldr	r3, [pc, #16]	; (800c79c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b123      	cbz	r3, 800c798 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c78e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800c792:	f080 0001 	eor.w	r0, r0, #1
 800c796:	4770      	bx	lr
 800c798:	2001      	movs	r0, #1
 800c79a:	4770      	bx	lr
 800c79c:	20009bf2 	.word	0x20009bf2

0800c7a0 <_ZN8touchgfx3HAL8endFrameEv>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	6840      	ldr	r0, [r0, #4]
 800c7a6:	6803      	ldr	r3, [r0, #0]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	4798      	blx	r3
 800c7ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800c7b0:	b113      	cbz	r3, 800c7b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c7b8:	bd10      	pop	{r4, pc}

0800c7ba <_ZN8touchgfx3HAL9taskEntryEv>:
 800c7ba:	b508      	push	{r3, lr}
 800c7bc:	6803      	ldr	r3, [r0, #0]
 800c7be:	4604      	mov	r4, r0
 800c7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7c2:	4798      	blx	r3
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	4798      	blx	r3
 800c7cc:	f7fd fb28 	bl	8009e20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d4:	e7f8      	b.n	800c7c8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800c7d8 <_ZN8touchgfx3HAL4tickEv>:
 800c7d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	4604      	mov	r4, r0
 800c7de:	4d5c      	ldr	r5, [pc, #368]	; (800c950 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800c7e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7e4:	4798      	blx	r3
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f000 8097 	beq.w	800c91a <_ZN8touchgfx3HAL4tickEv+0x142>
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	f7fc fff4 	bl	80097dc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c7f4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800c7f8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800c7fc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c800:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800c804:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800c808:	b133      	cbz	r3, 800c818 <_ZN8touchgfx3HAL4tickEv+0x40>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	4620      	mov	r0, r4
 800c80e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c812:	4798      	blx	r3
 800c814:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800c818:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800c81c:	2601      	movs	r6, #1
 800c81e:	6862      	ldr	r2, [r4, #4]
 800c820:	f083 0301 	eor.w	r3, r3, #1
 800c824:	702e      	strb	r6, [r5, #0]
 800c826:	7253      	strb	r3, [r2, #9]
 800c828:	f002 fcae 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800c82c:	6803      	ldr	r3, [r0, #0]
 800c82e:	4631      	mov	r1, r6
 800c830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c832:	4798      	blx	r3
 800c834:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c838:	b90b      	cbnz	r3, 800c83e <_ZN8touchgfx3HAL4tickEv+0x66>
 800c83a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800c83e:	f002 fca3 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800c842:	6803      	ldr	r3, [r0, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	4798      	blx	r3
 800c848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c84a:	6803      	ldr	r3, [r0, #0]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	4798      	blx	r3
 800c850:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c854:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800c858:	3b01      	subs	r3, #1
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c860:	b10a      	cbz	r2, 800c866 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1eb      	bne.n	800c83e <_ZN8touchgfx3HAL4tickEv+0x66>
 800c866:	4a3b      	ldr	r2, [pc, #236]	; (800c954 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c868:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800c86c:	7813      	ldrb	r3, [r2, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	b25b      	sxtb	r3, r3
 800c872:	4299      	cmp	r1, r3
 800c874:	7013      	strb	r3, [r2, #0]
 800c876:	dc10      	bgt.n	800c89a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800c878:	2300      	movs	r3, #0
 800c87a:	68e0      	ldr	r0, [r4, #12]
 800c87c:	a902      	add	r1, sp, #8
 800c87e:	7013      	strb	r3, [r2, #0]
 800c880:	aa03      	add	r2, sp, #12
 800c882:	6803      	ldr	r3, [r0, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	4798      	blx	r3
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d051      	beq.n	800c932 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800c88e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c892:	4620      	mov	r0, r4
 800c894:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c898:	4798      	blx	r3
 800c89a:	2300      	movs	r3, #0
 800c89c:	6960      	ldr	r0, [r4, #20]
 800c89e:	f88d 3007 	strb.w	r3, [sp, #7]
 800c8a2:	b158      	cbz	r0, 800c8bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800c8a4:	6803      	ldr	r3, [r0, #0]
 800c8a6:	f10d 0107 	add.w	r1, sp, #7
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	4798      	blx	r3
 800c8ae:	b128      	cbz	r0, 800c8bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800c8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c8b6:	6803      	ldr	r3, [r0, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	4798      	blx	r3
 800c8bc:	f104 001c 	add.w	r0, r4, #28
 800c8c0:	f010 feec 	bl	801d69c <_ZN8touchgfx8Gestures4tickEv>
 800c8c4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800c8c8:	b30b      	cbz	r3, 800c90e <_ZN8touchgfx3HAL4tickEv+0x136>
 800c8ca:	6920      	ldr	r0, [r4, #16]
 800c8cc:	6803      	ldr	r3, [r0, #0]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4798      	blx	r3
 800c8d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	b903      	cbnz	r3, 800c8da <_ZN8touchgfx3HAL4tickEv+0x102>
 800c8d8:	6720      	str	r0, [r4, #112]	; 0x70
 800c8da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8dc:	4a1e      	ldr	r2, [pc, #120]	; (800c958 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800c8de:	1af3      	subs	r3, r6, r3
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d914      	bls.n	800c90e <_ZN8touchgfx3HAL4tickEv+0x136>
 800c8e4:	6920      	ldr	r0, [r4, #16]
 800c8e6:	6803      	ldr	r3, [r0, #0]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	4798      	blx	r3
 800c8ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8ee:	2264      	movs	r2, #100	; 0x64
 800c8f0:	1af3      	subs	r3, r6, r3
 800c8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f6:	fbb0 f0f3 	udiv	r0, r0, r3
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	dc1e      	bgt.n	800c93c <_ZN8touchgfx3HAL4tickEv+0x164>
 800c8fe:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800c902:	6920      	ldr	r0, [r4, #16]
 800c904:	2100      	movs	r1, #0
 800c906:	6803      	ldr	r3, [r0, #0]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	4798      	blx	r3
 800c90c:	6726      	str	r6, [r4, #112]	; 0x70
 800c90e:	f002 fc3b 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 800c912:	6803      	ldr	r3, [r0, #0]
 800c914:	2100      	movs	r1, #0
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	4798      	blx	r3
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4620      	mov	r0, r4
 800c91e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c922:	4798      	blx	r3
 800c924:	2001      	movs	r0, #1
 800c926:	f7fc ff64 	bl	80097f2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c92a:	2300      	movs	r3, #0
 800c92c:	702b      	strb	r3, [r5, #0]
 800c92e:	b004      	add	sp, #16
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c936:	4620      	mov	r0, r4
 800c938:	4798      	blx	r3
 800c93a:	e7ae      	b.n	800c89a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800c93c:	2863      	cmp	r0, #99	; 0x63
 800c93e:	bfcb      	itete	gt
 800c940:	2300      	movgt	r3, #0
 800c942:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800c946:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800c94a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800c94e:	e7d8      	b.n	800c902 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800c950:	20009bf8 	.word	0x20009bf8
 800c954:	20009bf9 	.word	0x20009bf9
 800c958:	05f5e100 	.word	0x05f5e100

0800c95c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800c95c:	f7fd ba30 	b.w	8009dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c960 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800c960:	6581      	str	r1, [r0, #88]	; 0x58
 800c962:	301c      	adds	r0, #28
 800c964:	f010 be98 	b.w	801d698 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800c968 <_ZN8touchgfx3HAL5touchEll>:
 800c968:	b530      	push	{r4, r5, lr}
 800c96a:	b087      	sub	sp, #28
 800c96c:	4604      	mov	r4, r0
 800c96e:	a804      	add	r0, sp, #16
 800c970:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c974:	f002 f9d2 	bl	800ed1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800c978:	9b04      	ldr	r3, [sp, #16]
 800c97a:	a906      	add	r1, sp, #24
 800c97c:	a803      	add	r0, sp, #12
 800c97e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c982:	9b05      	ldr	r3, [sp, #20]
 800c984:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800c988:	f002 fa06 	bl	800ed98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800c98c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800c990:	f104 001c 	add.w	r0, r4, #28
 800c994:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c998:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c99c:	b189      	cbz	r1, 800c9c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800c99e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	f010 fe84 	bl	801d6b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800c9b0:	b128      	cbz	r0, 800c9be <_ZN8touchgfx3HAL5touchEll+0x56>
 800c9b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c9b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c9b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c9bc:	6623      	str	r3, [r4, #96]	; 0x60
 800c9be:	b007      	add	sp, #28
 800c9c0:	bd30      	pop	{r4, r5, pc}
 800c9c2:	f010 febd 	bl	801d740 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c9cc:	e7f1      	b.n	800c9b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800c9ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800c9ce:	b570      	push	{r4, r5, r6, lr}
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d050      	beq.n	800ca76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800c9d4:	ea81 0002 	eor.w	r0, r1, r2
 800c9d8:	07c6      	lsls	r6, r0, #31
 800c9da:	d508      	bpl.n	800c9ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800c9dc:	3a01      	subs	r2, #1
 800c9de:	18cc      	adds	r4, r1, r3
 800c9e0:	42a1      	cmp	r1, r4
 800c9e2:	d048      	beq.n	800ca76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800c9e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c9e8:	f801 0b01 	strb.w	r0, [r1], #1
 800c9ec:	e7f8      	b.n	800c9e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800c9ee:	07d5      	lsls	r5, r2, #31
 800c9f0:	bf42      	ittt	mi
 800c9f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800c9f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c9fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d915      	bls.n	800ca2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ca02:	ea82 0001 	eor.w	r0, r2, r1
 800ca06:	0784      	lsls	r4, r0, #30
 800ca08:	d02d      	beq.n	800ca66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800ca0a:	1e94      	subs	r4, r2, #2
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	18ce      	adds	r6, r1, r3
 800ca10:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800ca14:	f820 5b02 	strh.w	r5, [r0], #2
 800ca18:	1a35      	subs	r5, r6, r0
 800ca1a:	2d01      	cmp	r5, #1
 800ca1c:	d8f8      	bhi.n	800ca10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800ca1e:	1e98      	subs	r0, r3, #2
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	f020 0001 	bic.w	r0, r0, #1
 800ca28:	3002      	adds	r0, #2
 800ca2a:	4401      	add	r1, r0
 800ca2c:	4402      	add	r2, r0
 800ca2e:	1f14      	subs	r4, r2, #4
 800ca30:	4608      	mov	r0, r1
 800ca32:	18ce      	adds	r6, r1, r3
 800ca34:	1a35      	subs	r5, r6, r0
 800ca36:	2d03      	cmp	r5, #3
 800ca38:	d810      	bhi.n	800ca5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800ca3a:	089c      	lsrs	r4, r3, #2
 800ca3c:	00a0      	lsls	r0, r4, #2
 800ca3e:	4401      	add	r1, r0
 800ca40:	3801      	subs	r0, #1
 800ca42:	4402      	add	r2, r0
 800ca44:	f06f 0003 	mvn.w	r0, #3
 800ca48:	fb00 3404 	mla	r4, r0, r4, r3
 800ca4c:	440c      	add	r4, r1
 800ca4e:	42a1      	cmp	r1, r4
 800ca50:	d011      	beq.n	800ca76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800ca52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ca56:	f801 3b01 	strb.w	r3, [r1], #1
 800ca5a:	e7f8      	b.n	800ca4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800ca5c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800ca60:	f840 5b04 	str.w	r5, [r0], #4
 800ca64:	e7e6      	b.n	800ca34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800ca66:	0790      	lsls	r0, r2, #30
 800ca68:	d0e1      	beq.n	800ca2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ca6a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ca6e:	3b02      	subs	r3, #2
 800ca70:	f821 0b02 	strh.w	r0, [r1], #2
 800ca74:	e7db      	b.n	800ca2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ca76:	2001      	movs	r0, #1
 800ca78:	bd70      	pop	{r4, r5, r6, pc}

0800ca7a <_ZN8touchgfx3HAL7noTouchEv>:
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800ca80:	4604      	mov	r4, r0
 800ca82:	b153      	cbz	r3, 800ca9a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ca84:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800ca88:	2101      	movs	r1, #1
 800ca8a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ca8e:	301c      	adds	r0, #28
 800ca90:	f010 fe56 	bl	801d740 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ca94:	2300      	movs	r3, #0
 800ca96:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ca9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caa0:	4604      	mov	r4, r0
 800caa2:	6980      	ldr	r0, [r0, #24]
 800caa4:	b085      	sub	sp, #20
 800caa6:	460f      	mov	r7, r1
 800caa8:	4690      	mov	r8, r2
 800caaa:	4699      	mov	r9, r3
 800caac:	b930      	cbnz	r0, 800cabc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800caae:	4b1c      	ldr	r3, [pc, #112]	; (800cb20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800cab0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800cab4:	4a1b      	ldr	r2, [pc, #108]	; (800cb24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cab6:	481c      	ldr	r0, [pc, #112]	; (800cb28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800cab8:	f011 fc46 	bl	801e348 <__assert_func>
 800cabc:	ad04      	add	r5, sp, #16
 800cabe:	2600      	movs	r6, #0
 800cac0:	f845 6d04 	str.w	r6, [r5, #-4]!
 800cac4:	6806      	ldr	r6, [r0, #0]
 800cac6:	9501      	str	r5, [sp, #4]
 800cac8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800cacc:	9500      	str	r5, [sp, #0]
 800cace:	6835      	ldr	r5, [r6, #0]
 800cad0:	47a8      	blx	r5
 800cad2:	4d16      	ldr	r5, [pc, #88]	; (800cb2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cad4:	4606      	mov	r6, r0
 800cad6:	f8a5 9000 	strh.w	r9, [r5]
 800cada:	f7fa fbcd 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800cade:	6803      	ldr	r3, [r0, #0]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	4798      	blx	r3
 800cae4:	2801      	cmp	r0, #1
 800cae6:	d012      	beq.n	800cb0e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800cae8:	d306      	bcc.n	800caf8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800caea:	280d      	cmp	r0, #13
 800caec:	d80b      	bhi.n	800cb06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800caee:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800caf0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800caf4:	4a0b      	ldr	r2, [pc, #44]	; (800cb24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800caf6:	e7de      	b.n	800cab6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800caf8:	882b      	ldrh	r3, [r5, #0]
 800cafa:	fb08 7203 	mla	r2, r8, r3, r7
 800cafe:	9b03      	ldr	r3, [sp, #12]
 800cb00:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800cb04:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cb06:	4630      	mov	r0, r6
 800cb08:	b005      	add	sp, #20
 800cb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb0e:	882a      	ldrh	r2, [r5, #0]
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	fb08 7202 	mla	r2, r8, r2, r7
 800cb16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cb1a:	1a9a      	subs	r2, r3, r2
 800cb1c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cb1e:	e7f2      	b.n	800cb06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cb20:	080211d9 	.word	0x080211d9
 800cb24:	080214f2 	.word	0x080214f2
 800cb28:	0802121e 	.word	0x0802121e
 800cb2c:	20009bee 	.word	0x20009bee
 800cb30:	08021244 	.word	0x08021244

0800cb34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800cb34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb38:	4698      	mov	r8, r3
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	b087      	sub	sp, #28
 800cb3e:	460e      	mov	r6, r1
 800cb40:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800cb42:	4617      	mov	r7, r2
 800cb44:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800cb46:	4604      	mov	r4, r0
 800cb48:	f8b3 9000 	ldrh.w	r9, [r3]
 800cb4c:	f7fa fb94 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800cb50:	6803      	ldr	r3, [r0, #0]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	4798      	blx	r3
 800cb56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800cb5a:	463a      	mov	r2, r7
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	9302      	str	r3, [sp, #8]
 800cb60:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800cb6a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4620      	mov	r0, r4
 800cb72:	4643      	mov	r3, r8
 800cb74:	47a8      	blx	r5
 800cb76:	b007      	add	sp, #28
 800cb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb7c:	20009bee 	.word	0x20009bee

0800cb80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800cb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb84:	4604      	mov	r4, r0
 800cb86:	b08b      	sub	sp, #44	; 0x2c
 800cb88:	4610      	mov	r0, r2
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	4691      	mov	r9, r2
 800cb8e:	461e      	mov	r6, r3
 800cb90:	f004 ff88 	bl	8011aa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	f000 80a0 	beq.w	800ccda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cd10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 800cba2:	af0a      	add	r7, sp, #40	; 0x28
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	4798      	blx	r3
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f8df a164 	ldr.w	sl, [pc, #356]	; 800cd14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb2:	4798      	blx	r3
 800cbb4:	f8bb 3000 	ldrh.w	r3, [fp]
 800cbb8:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	f8ba 3000 	ldrh.w	r3, [sl]
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	4b4f      	ldr	r3, [pc, #316]	; (800cd04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 800cbc8:	881a      	ldrh	r2, [r3, #0]
 800cbca:	4698      	mov	r8, r3
 800cbcc:	9203      	str	r2, [sp, #12]
 800cbce:	4a4e      	ldr	r2, [pc, #312]	; (800cd08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800cbd0:	8812      	ldrh	r2, [r2, #0]
 800cbd2:	9204      	str	r2, [sp, #16]
 800cbd4:	4a4d      	ldr	r2, [pc, #308]	; (800cd0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 800cbd6:	7812      	ldrb	r2, [r2, #0]
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	f040 8081 	bne.w	800cce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 800cbde:	f005 f81b 	bl	8011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cbe2:	f8ab 0000 	strh.w	r0, [fp]
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	f005 f850 	bl	8011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cbec:	f8aa 0000 	strh.w	r0, [sl]
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f005 f811 	bl	8011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cbf6:	f8a8 0000 	strh.w	r0, [r8]
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	f005 f846 	bl	8011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cc00:	4b41      	ldr	r3, [pc, #260]	; (800cd08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800cc02:	8018      	strh	r0, [r3, #0]
 800cc04:	4648      	mov	r0, r9
 800cc06:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800cc0a:	f004 ff4b 	bl	8011aa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cc0e:	2200      	movs	r2, #0
 800cc10:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800cc14:	4611      	mov	r1, r2
 800cc16:	4628      	mov	r0, r5
 800cc18:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800cc1c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800cc20:	f7fb f855 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
 800cc24:	2301      	movs	r3, #1
 800cc26:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800cc2a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800cc2e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dd5c      	ble.n	800ccf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 800cc36:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dd58      	ble.n	800ccf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 800cc3e:	462a      	mov	r2, r5
 800cc40:	ab08      	add	r3, sp, #32
 800cc42:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800cc46:	6851      	ldr	r1, [r2, #4]
 800cc48:	c303      	stmia	r3!, {r0, r1}
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	a808      	add	r0, sp, #32
 800cc4e:	f7ff fc71 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 800cc52:	a807      	add	r0, sp, #28
 800cc54:	f005 f972 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800cc58:	4606      	mov	r6, r0
 800cc5a:	f7fa fb0d 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800cc5e:	6803      	ldr	r3, [r0, #0]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	4798      	blx	r3
 800cc64:	4286      	cmp	r6, r0
 800cc66:	d04a      	beq.n	800ccfe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 800cc68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800cc6a:	b150      	cbz	r0, 800cc82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 800cc6c:	a807      	add	r0, sp, #28
 800cc6e:	f005 f965 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800cc72:	4606      	mov	r6, r0
 800cc74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800cc76:	6803      	ldr	r3, [r0, #0]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	4798      	blx	r3
 800cc7c:	1a33      	subs	r3, r6, r0
 800cc7e:	4258      	negs	r0, r3
 800cc80:	4158      	adcs	r0, r3
 800cc82:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800cc86:	2600      	movs	r6, #0
 800cc88:	696b      	ldr	r3, [r5, #20]
 800cc8a:	a908      	add	r1, sp, #32
 800cc8c:	682a      	ldr	r2, [r5, #0]
 800cc8e:	4628      	mov	r0, r5
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	616e      	str	r6, [r5, #20]
 800cc94:	6892      	ldr	r2, [r2, #8]
 800cc96:	4790      	blx	r2
 800cc98:	9b05      	ldr	r3, [sp, #20]
 800cc9a:	4652      	mov	r2, sl
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	616b      	str	r3, [r5, #20]
 800cca0:	4628      	mov	r0, r5
 800cca2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800cca6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800ccaa:	f7fb f810 	bl	8007cce <_ZN8touchgfx8Drawable5setXYEss>
 800ccae:	9a01      	ldr	r2, [sp, #4]
 800ccb0:	4b17      	ldr	r3, [pc, #92]	; (800cd10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	801a      	strh	r2, [r3, #0]
 800ccb6:	9a02      	ldr	r2, [sp, #8]
 800ccb8:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 800ccba:	801a      	strh	r2, [r3, #0]
 800ccbc:	9a03      	ldr	r2, [sp, #12]
 800ccbe:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 800ccc0:	801a      	strh	r2, [r3, #0]
 800ccc2:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800ccc4:	9a04      	ldr	r2, [sp, #16]
 800ccc6:	801a      	strh	r2, [r3, #0]
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	4798      	blx	r3
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	4798      	blx	r3
 800ccda:	b00b      	add	sp, #44	; 0x2c
 800ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce0:	f004 ffd4 	bl	8011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cce4:	f8ab 0000 	strh.w	r0, [fp]
 800cce8:	4638      	mov	r0, r7
 800ccea:	f004 ff95 	bl	8011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ccee:	e77d      	b.n	800cbec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	ab08      	add	r3, sp, #32
 800ccf4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ccf8:	6851      	ldr	r1, [r2, #4]
 800ccfa:	c303      	stmia	r3!, {r0, r1}
 800ccfc:	e7a9      	b.n	800cc52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	e7bf      	b.n	800cc82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 800cd02:	bf00      	nop
 800cd04:	20009be8 	.word	0x20009be8
 800cd08:	20009bea 	.word	0x20009bea
 800cd0c:	20009bec 	.word	0x20009bec
 800cd10:	20009bee 	.word	0x20009bee
 800cd14:	20009bf0 	.word	0x20009bf0

0800cd18 <_ZN8touchgfx3HAL10initializeEv>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	f7fd f80c 	bl	8009d38 <_ZN8touchgfx10OSWrappers10initializeEv>
 800cd20:	6860      	ldr	r0, [r4, #4]
 800cd22:	6803      	ldr	r3, [r0, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	4798      	blx	r3
 800cd28:	68e0      	ldr	r0, [r4, #12]
 800cd2a:	6803      	ldr	r3, [r0, #0]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	4798      	blx	r3
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	4620      	mov	r0, r4
 800cd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd3a:	4718      	bx	r3

0800cd3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800cd3c:	b508      	push	{r3, lr}
 800cd3e:	290d      	cmp	r1, #13
 800cd40:	d817      	bhi.n	800cd72 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800cd42:	e8df f001 	tbb	[pc, r1]
 800cd46:	090b      	.short	0x090b
 800cd48:	0d0d0d07 	.word	0x0d0d0d07
 800cd4c:	1414140d 	.word	0x1414140d
 800cd50:	0d0d1414 	.word	0x0d0d1414
 800cd54:	2020      	movs	r0, #32
 800cd56:	bd08      	pop	{r3, pc}
 800cd58:	2018      	movs	r0, #24
 800cd5a:	e7fc      	b.n	800cd56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800cd5c:	2010      	movs	r0, #16
 800cd5e:	e7fa      	b.n	800cd56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800cd60:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800cd62:	f44f 7111 	mov.w	r1, #580	; 0x244
 800cd66:	4a05      	ldr	r2, [pc, #20]	; (800cd7c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800cd68:	4805      	ldr	r0, [pc, #20]	; (800cd80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800cd6a:	f011 faed 	bl	801e348 <__assert_func>
 800cd6e:	2008      	movs	r0, #8
 800cd70:	e7f1      	b.n	800cd56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e7ef      	b.n	800cd56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800cd76:	bf00      	nop
 800cd78:	08021317 	.word	0x08021317
 800cd7c:	080216b4 	.word	0x080216b4
 800cd80:	0802121e 	.word	0x0802121e

0800cd84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	460d      	mov	r5, r1
 800cd88:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800cd8c:	4616      	mov	r6, r2
 800cd8e:	461c      	mov	r4, r3
 800cd90:	f7ff ffd4 	bl	800cd3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800cd94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800cd98:	10c0      	asrs	r0, r0, #3
 800cd9a:	fb06 5101 	mla	r1, r6, r1, r5
 800cd9e:	fb00 4001 	mla	r0, r0, r1, r4
 800cda2:	bd70      	pop	{r4, r5, r6, pc}

0800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	b08a      	sub	sp, #40	; 0x28
 800cdaa:	f04f 0c00 	mov.w	ip, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	469a      	mov	sl, r3
 800cdb2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800cdb6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800cdba:	f1b8 0f02 	cmp.w	r8, #2
 800cdbe:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800cdc2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800cdc6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800cdca:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800cdce:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800cdd2:	f8cd c020 	str.w	ip, [sp, #32]
 800cdd6:	d030      	beq.n	800ce3a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800cdd8:	2bff      	cmp	r3, #255	; 0xff
 800cdda:	d12c      	bne.n	800ce36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800cddc:	4560      	cmp	r0, ip
 800cdde:	bf14      	ite	ne
 800cde0:	2004      	movne	r0, #4
 800cde2:	2001      	moveq	r0, #1
 800cde4:	9204      	str	r2, [sp, #16]
 800cde6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800cdea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cdee:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cdf2:	f8ad 6018 	strh.w	r6, [sp, #24]
 800cdf6:	f8ad 501a 	strh.w	r5, [sp, #26]
 800cdfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7fc fdfe 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ce04:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800ce08:	4603      	mov	r3, r0
 800ce0a:	4651      	mov	r1, sl
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	e9cd 9700 	strd	r9, r7, [sp]
 800ce12:	f7ff ffb7 	bl	800cd84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800ce16:	f8ad 901e 	strh.w	r9, [sp, #30]
 800ce1a:	9005      	str	r0, [sp, #20]
 800ce1c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800ce20:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800ce24:	b106      	cbz	r6, 800ce28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800ce26:	b98d      	cbnz	r5, 800ce4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800ce28:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800ce2a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800ce2e:	4a12      	ldr	r2, [pc, #72]	; (800ce78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800ce30:	4812      	ldr	r0, [pc, #72]	; (800ce7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800ce32:	f011 fa89 	bl	801e348 <__assert_func>
 800ce36:	2004      	movs	r0, #4
 800ce38:	e7d4      	b.n	800cde4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ce3a:	2bff      	cmp	r3, #255	; 0xff
 800ce3c:	d104      	bne.n	800ce48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	bf14      	ite	ne
 800ce42:	2040      	movne	r0, #64	; 0x40
 800ce44:	2020      	moveq	r0, #32
 800ce46:	e7cd      	b.n	800cde4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ce48:	2040      	movs	r0, #64	; 0x40
 800ce4a:	e7cb      	b.n	800cde4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	9d02      	ldr	r5, [sp, #8]
 800ce52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce54:	4798      	blx	r3
 800ce56:	4228      	tst	r0, r5
 800ce58:	d104      	bne.n	800ce64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800ce5a:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800ce5c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800ce60:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800ce62:	e7e5      	b.n	800ce30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800ce64:	6860      	ldr	r0, [r4, #4]
 800ce66:	a902      	add	r1, sp, #8
 800ce68:	6803      	ldr	r3, [r0, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4798      	blx	r3
 800ce6e:	b00a      	add	sp, #40	; 0x28
 800ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce74:	0802129a 	.word	0x0802129a
 800ce78:	08021556 	.word	0x08021556
 800ce7c:	0802121e 	.word	0x0802121e
 800ce80:	080212d2 	.word	0x080212d2

0800ce84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800ce84:	b510      	push	{r4, lr}
 800ce86:	b08a      	sub	sp, #40	; 0x28
 800ce88:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800ce8c:	9408      	str	r4, [sp, #32]
 800ce8e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800ce92:	9407      	str	r4, [sp, #28]
 800ce94:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800ce98:	9406      	str	r4, [sp, #24]
 800ce9a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800ce9e:	9405      	str	r4, [sp, #20]
 800cea0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800cea4:	9404      	str	r4, [sp, #16]
 800cea6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800ceaa:	9403      	str	r4, [sp, #12]
 800ceac:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800ceb0:	9402      	str	r4, [sp, #8]
 800ceb2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800ceb6:	e9cd 3400 	strd	r3, r4, [sp]
 800ceba:	4613      	mov	r3, r2
 800cebc:	2200      	movs	r2, #0
 800cebe:	f7ff ff71 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800cec2:	b00a      	add	sp, #40	; 0x28
 800cec4:	bd10      	pop	{r4, pc}
	...

0800cec8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800cec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceca:	b08b      	sub	sp, #44	; 0x2c
 800cecc:	4616      	mov	r6, r2
 800cece:	460d      	mov	r5, r1
 800ced0:	461f      	mov	r7, r3
 800ced2:	4604      	mov	r4, r0
 800ced4:	f7fa f9d0 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800ced8:	6803      	ldr	r3, [r0, #0]
 800ceda:	6a1b      	ldr	r3, [r3, #32]
 800cedc:	4798      	blx	r3
 800cede:	4b0e      	ldr	r3, [pc, #56]	; (800cf18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	4629      	mov	r1, r5
 800cee4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	4620      	mov	r0, r4
 800ceec:	9306      	str	r3, [sp, #24]
 800ceee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cef2:	9305      	str	r3, [sp, #20]
 800cef4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cefe:	9303      	str	r3, [sp, #12]
 800cf00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cf04:	9302      	str	r3, [sp, #8]
 800cf06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cf0a:	e9cd 7300 	strd	r7, r3, [sp]
 800cf0e:	4633      	mov	r3, r6
 800cf10:	f7ff ff48 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800cf14:	b00b      	add	sp, #44	; 0x2c
 800cf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf18:	20009bee 	.word	0x20009bee

0800cf1c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	461f      	mov	r7, r3
 800cf22:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800cf24:	b08a      	sub	sp, #40	; 0x28
 800cf26:	4616      	mov	r6, r2
 800cf28:	f8b3 8000 	ldrh.w	r8, [r3]
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	4604      	mov	r4, r0
 800cf30:	f7fa f9a2 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800cf34:	6803      	ldr	r3, [r0, #0]
 800cf36:	6a1b      	ldr	r3, [r3, #32]
 800cf38:	4798      	blx	r3
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	9008      	str	r0, [sp, #32]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	4629      	mov	r1, r5
 800cf42:	4620      	mov	r0, r4
 800cf44:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800cf48:	2301      	movs	r3, #1
 800cf4a:	9305      	str	r3, [sp, #20]
 800cf4c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cf56:	9303      	str	r3, [sp, #12]
 800cf58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cf5c:	9302      	str	r3, [sp, #8]
 800cf5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cf62:	e9cd 7300 	strd	r7, r3, [sp]
 800cf66:	4633      	mov	r3, r6
 800cf68:	f7ff ff1c 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800cf6c:	b00a      	add	sp, #40	; 0x28
 800cf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf72:	bf00      	nop
 800cf74:	20009bee 	.word	0x20009bee

0800cf78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7c:	b08b      	sub	sp, #44	; 0x2c
 800cf7e:	469b      	mov	fp, r3
 800cf80:	4604      	mov	r4, r0
 800cf82:	4692      	mov	sl, r2
 800cf84:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800cf88:	2600      	movs	r6, #0
 800cf8a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800cf8e:	4689      	mov	r9, r1
 800cf90:	2fff      	cmp	r7, #255	; 0xff
 800cf92:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800cf96:	9608      	str	r6, [sp, #32]
 800cf98:	bf14      	ite	ne
 800cf9a:	2308      	movne	r3, #8
 800cf9c:	2302      	moveq	r3, #2
 800cf9e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800cfa2:	f7fc fd2d 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cfa6:	465a      	mov	r2, fp
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	4651      	mov	r1, sl
 800cfac:	4620      	mov	r0, r4
 800cfae:	e9cd 8500 	strd	r8, r5, [sp]
 800cfb2:	f7ff fee7 	bl	800cd84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800cfb6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800cfba:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800cfbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cfc2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800cfc6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800cfca:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	9d02      	ldr	r5, [sp, #8]
 800cfd2:	9005      	str	r0, [sp, #20]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f8ad 601c 	strh.w	r6, [sp, #28]
 800cfda:	f8ad 801e 	strh.w	r8, [sp, #30]
 800cfde:	f8cd 9020 	str.w	r9, [sp, #32]
 800cfe2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	4798      	blx	r3
 800cfea:	4228      	tst	r0, r5
 800cfec:	d106      	bne.n	800cffc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800cfee:	4b07      	ldr	r3, [pc, #28]	; (800d00c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800cff0:	f240 11fb 	movw	r1, #507	; 0x1fb
 800cff4:	4a06      	ldr	r2, [pc, #24]	; (800d010 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800cff6:	4807      	ldr	r0, [pc, #28]	; (800d014 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800cff8:	f011 f9a6 	bl	801e348 <__assert_func>
 800cffc:	6860      	ldr	r0, [r4, #4]
 800cffe:	a902      	add	r1, sp, #8
 800d000:	6803      	ldr	r3, [r0, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	4798      	blx	r3
 800d006:	b00b      	add	sp, #44	; 0x2c
 800d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00c:	080212d2 	.word	0x080212d2
 800d010:	0802161f 	.word	0x0802161f
 800d014:	0802121e 	.word	0x0802121e

0800d018 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d01c:	461f      	mov	r7, r3
 800d01e:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d020:	460d      	mov	r5, r1
 800d022:	4616      	mov	r6, r2
 800d024:	f8b3 8000 	ldrh.w	r8, [r3]
 800d028:	4604      	mov	r4, r0
 800d02a:	f7fa f925 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800d02e:	6803      	ldr	r3, [r0, #0]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	4798      	blx	r3
 800d034:	463b      	mov	r3, r7
 800d036:	4632      	mov	r2, r6
 800d038:	4629      	mov	r1, r5
 800d03a:	e9cd 8000 	strd	r8, r0, [sp]
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff fea0 	bl	800cd84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d044:	b002      	add	sp, #8
 800d046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04a:	bf00      	nop
 800d04c:	20009bee 	.word	0x20009bee

0800d050 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	4698      	mov	r8, r3
 800d056:	b088      	sub	sp, #32
 800d058:	2300      	movs	r3, #0
 800d05a:	4617      	mov	r7, r2
 800d05c:	4604      	mov	r4, r0
 800d05e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d062:	9306      	str	r3, [sp, #24]
 800d064:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d068:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d06c:	f8ad 6010 	strh.w	r6, [sp, #16]
 800d070:	f8ad 5012 	strh.w	r5, [sp, #18]
 800d074:	e9cd 3100 	strd	r3, r1, [sp]
 800d078:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d07c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d080:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d084:	f88d 301c 	strb.w	r3, [sp, #28]
 800d088:	f7fc fcba 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d08c:	4642      	mov	r2, r8
 800d08e:	4603      	mov	r3, r0
 800d090:	4639      	mov	r1, r7
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff ffc0 	bl	800d018 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800d09a:	9003      	str	r0, [sp, #12]
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0a2:	f7fa f8e9 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800d0a6:	6803      	ldr	r3, [r0, #0]
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	4798      	blx	r3
 800d0ac:	f88d 001e 	strb.w	r0, [sp, #30]
 800d0b0:	f88d 001d 	strb.w	r0, [sp, #29]
 800d0b4:	b106      	cbz	r6, 800d0b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800d0b6:	b935      	cbnz	r5, 800d0c6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800d0ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800d0be:	4a0f      	ldr	r2, [pc, #60]	; (800d0fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800d0c0:	480f      	ldr	r0, [pc, #60]	; (800d100 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800d0c2:	f011 f941 	bl	801e348 <__assert_func>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	9d00      	ldr	r5, [sp, #0]
 800d0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ce:	4798      	blx	r3
 800d0d0:	4228      	tst	r0, r5
 800d0d2:	d104      	bne.n	800d0de <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800d0d6:	f240 11e1 	movw	r1, #481	; 0x1e1
 800d0da:	4a08      	ldr	r2, [pc, #32]	; (800d0fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800d0dc:	e7f0      	b.n	800d0c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800d0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0e0:	4669      	mov	r1, sp
 800d0e2:	6860      	ldr	r0, [r4, #4]
 800d0e4:	9306      	str	r3, [sp, #24]
 800d0e6:	6803      	ldr	r3, [r0, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	4798      	blx	r3
 800d0ec:	b008      	add	sp, #32
 800d0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20009bee 	.word	0x20009bee
 800d0f8:	0802129a 	.word	0x0802129a
 800d0fc:	08021408 	.word	0x08021408
 800d100:	0802121e 	.word	0x0802121e
 800d104:	080212d2 	.word	0x080212d2

0800d108 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	4604      	mov	r4, r0
 800d10e:	466b      	mov	r3, sp
 800d110:	e883 0006 	stmia.w	r3, {r1, r2}
 800d114:	4b1f      	ldr	r3, [pc, #124]	; (800d194 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	b933      	cbnz	r3, 800d128 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d11a:	4b1f      	ldr	r3, [pc, #124]	; (800d198 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d11c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800d120:	4a1e      	ldr	r2, [pc, #120]	; (800d19c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800d122:	481f      	ldr	r0, [pc, #124]	; (800d1a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800d124:	f011 f910 	bl	801e348 <__assert_func>
 800d128:	2300      	movs	r3, #0
 800d12a:	f8bd 5000 	ldrh.w	r5, [sp]
 800d12e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800d132:	9308      	str	r3, [sp, #32]
 800d134:	2301      	movs	r3, #1
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	6803      	ldr	r3, [r0, #0]
 800d13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13c:	4798      	blx	r3
 800d13e:	4632      	mov	r2, r6
 800d140:	4629      	mov	r1, r5
 800d142:	4603      	mov	r3, r0
 800d144:	4620      	mov	r0, r4
 800d146:	f7ff ff67 	bl	800d018 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d14a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d14c:	9003      	str	r0, [sp, #12]
 800d14e:	9305      	str	r3, [sp, #20]
 800d150:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d154:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d158:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d15c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d160:	4b10      	ldr	r3, [pc, #64]	; (800d1a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d168:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d16c:	f7fa f884 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800d170:	6803      	ldr	r3, [r0, #0]
 800d172:	6a1b      	ldr	r3, [r3, #32]
 800d174:	4798      	blx	r3
 800d176:	23ff      	movs	r3, #255	; 0xff
 800d178:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d17c:	a902      	add	r1, sp, #8
 800d17e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d182:	6860      	ldr	r0, [r4, #4]
 800d184:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d188:	6803      	ldr	r3, [r0, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	4798      	blx	r3
 800d18e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d190:	b00a      	add	sp, #40	; 0x28
 800d192:	bd70      	pop	{r4, r5, r6, pc}
 800d194:	20009bf3 	.word	0x20009bf3
 800d198:	0802116b 	.word	0x0802116b
 800d19c:	080214ac 	.word	0x080214ac
 800d1a0:	0802121e 	.word	0x0802121e
 800d1a4:	20009bee 	.word	0x20009bee

0800d1a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b08b      	sub	sp, #44	; 0x2c
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	466d      	mov	r5, sp
 800d1b0:	e885 0006 	stmia.w	r5, {r1, r2}
 800d1b4:	461d      	mov	r5, r3
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f8bd 6000 	ldrh.w	r6, [sp]
 800d1bc:	9308      	str	r3, [sp, #32]
 800d1be:	2301      	movs	r3, #1
 800d1c0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	6803      	ldr	r3, [r0, #0]
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ca:	4798      	blx	r3
 800d1cc:	463a      	mov	r2, r7
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f7ff ff20 	bl	800d018 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d1d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d1dc:	9003      	str	r0, [sp, #12]
 800d1de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d1e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d1e6:	9505      	str	r5, [sp, #20]
 800d1e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d1ec:	4b0d      	ldr	r3, [pc, #52]	; (800d224 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d1fa:	f7fa f83d 	bl	8007278 <_ZN8touchgfx3HAL3lcdEv>
 800d1fe:	6803      	ldr	r3, [r0, #0]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	4798      	blx	r3
 800d204:	23ff      	movs	r3, #255	; 0xff
 800d206:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d20a:	a902      	add	r1, sp, #8
 800d20c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d210:	6860      	ldr	r0, [r4, #4]
 800d212:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d216:	6803      	ldr	r3, [r0, #0]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	4798      	blx	r3
 800d21c:	4628      	mov	r0, r5
 800d21e:	b00b      	add	sp, #44	; 0x2c
 800d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d222:	bf00      	nop
 800d224:	20009bee 	.word	0x20009bee

0800d228 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d22e:	4604      	mov	r4, r0
 800d230:	b19b      	cbz	r3, 800d25a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d232:	2002      	movs	r0, #2
 800d234:	f7fc fae8 	bl	8009808 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d238:	2300      	movs	r3, #0
 800d23a:	4620      	mov	r0, r4
 800d23c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d240:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800d24a:	f7fc fbd9 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d24e:	4601      	mov	r1, r0
 800d250:	4620      	mov	r0, r4
 800d252:	462b      	mov	r3, r5
 800d254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d258:	4718      	bx	r3
 800d25a:	bd70      	pop	{r4, r5, r6, pc}

0800d25c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	428a      	cmp	r2, r1
 800d268:	d008      	beq.n	800d27c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 800d26a:	2a01      	cmp	r2, #1
 800d26c:	6803      	ldr	r3, [r0, #0]
 800d26e:	d106      	bne.n	800d27e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 800d270:	b929      	cbnz	r1, 800d27e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 800d272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d276:	4798      	blx	r3
 800d278:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800d27c:	bd38      	pop	{r3, r4, r5, pc}
 800d27e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d282:	4620      	mov	r0, r4
 800d284:	e7f7      	b.n	800d276 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

0800d288 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d288:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800d28a:	b510      	push	{r4, lr}
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	4604      	mov	r4, r0
 800d290:	b95b      	cbnz	r3, 800d2aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d292:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d296:	2b02      	cmp	r3, #2
 800d298:	d007      	beq.n	800d2aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d29a:	6840      	ldr	r0, [r0, #4]
 800d29c:	f000 f930 	bl	800d500 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d2a0:	b118      	cbz	r0, 800d2aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d2a2:	6862      	ldr	r2, [r4, #4]
 800d2a4:	7a53      	ldrb	r3, [r2, #9]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d0fc      	beq.n	800d2a4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800d2aa:	f7fc fd7b 	bl	8009da4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	f7ff ffd3 	bl	800d25c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7fc fba2 	bl	8009a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop
 800d2c0:	20009bf2 	.word	0x20009bf2

0800d2c4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800d2c4:	4770      	bx	lr

0800d2c6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	4770      	bx	lr

0800d2ca <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d2ca:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800d2ce:	1a13      	subs	r3, r2, r0
 800d2d0:	4258      	negs	r0, r3
 800d2d2:	4158      	adcs	r0, r3
 800d2d4:	4770      	bx	lr

0800d2d6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d2d6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d2da:	1a9b      	subs	r3, r3, r2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfdc      	itt	le
 800d2e0:	6882      	ldrle	r2, [r0, #8]
 800d2e2:	189b      	addle	r3, r3, r2
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	bfcc      	ite	gt
 800d2e8:	2000      	movgt	r0, #0
 800d2ea:	2001      	movle	r0, #1
 800d2ec:	4770      	bx	lr

0800d2ee <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d2ee:	6902      	ldr	r2, [r0, #16]
 800d2f0:	6840      	ldr	r0, [r0, #4]
 800d2f2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800d2f6:	4770      	bx	lr

0800d2f8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d2f8:	6803      	ldr	r3, [r0, #0]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	4718      	bx	r3

0800d2fe <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d2fe:	4770      	bx	lr

0800d300 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d300:	4770      	bx	lr
	...

0800d304 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d304:	2301      	movs	r3, #1
 800d306:	b570      	push	{r4, r5, r6, lr}
 800d308:	7203      	strb	r3, [r0, #8]
 800d30a:	4604      	mov	r4, r0
 800d30c:	6840      	ldr	r0, [r0, #4]
 800d30e:	6803      	ldr	r3, [r0, #0]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	4798      	blx	r3
 800d314:	6803      	ldr	r3, [r0, #0]
 800d316:	4605      	mov	r5, r0
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d01e      	beq.n	800d35a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800d31c:	d80b      	bhi.n	800d336 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d027      	beq.n	800d372 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d322:	2b04      	cmp	r3, #4
 800d324:	d011      	beq.n	800d34a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800d326:	2b01      	cmp	r3, #1
 800d328:	d028      	beq.n	800d37c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d32a:	4b17      	ldr	r3, [pc, #92]	; (800d388 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800d32c:	218c      	movs	r1, #140	; 0x8c
 800d32e:	4a17      	ldr	r2, [pc, #92]	; (800d38c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800d330:	4817      	ldr	r0, [pc, #92]	; (800d390 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800d332:	f011 f809 	bl	801e348 <__assert_func>
 800d336:	2b40      	cmp	r3, #64	; 0x40
 800d338:	d020      	beq.n	800d37c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d33a:	d801      	bhi.n	800d340 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	e7f3      	b.n	800d328 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800d340:	2b80      	cmp	r3, #128	; 0x80
 800d342:	d01b      	beq.n	800d37c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d348:	e7ee      	b.n	800d328 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	7f01      	ldrb	r1, [r0, #28]
 800d34e:	4620      	mov	r0, r4
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	4798      	blx	r3
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	e006      	b.n	800d368 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	7f01      	ldrb	r1, [r0, #28]
 800d35e:	4620      	mov	r0, r4
 800d360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d362:	4798      	blx	r3
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d368:	4629      	mov	r1, r5
 800d36a:	4620      	mov	r0, r4
 800d36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d370:	4718      	bx	r3
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	4620      	mov	r0, r4
 800d376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d378:	4798      	blx	r3
 800d37a:	e7f3      	b.n	800d364 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	4620      	mov	r0, r4
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	4798      	blx	r3
 800d384:	e7e6      	b.n	800d354 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800d386:	bf00      	nop
 800d388:	080216fd 	.word	0x080216fd
 800d38c:	0802180c 	.word	0x0802180c
 800d390:	08021722 	.word	0x08021722

0800d394 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	4604      	mov	r4, r0
 800d398:	460e      	mov	r6, r1
 800d39a:	6860      	ldr	r0, [r4, #4]
 800d39c:	6803      	ldr	r3, [r0, #0]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	4798      	blx	r3
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1f9      	bne.n	800d39a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d3a6:	4d0d      	ldr	r5, [pc, #52]	; (800d3dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800d3a8:	6828      	ldr	r0, [r5, #0]
 800d3aa:	6803      	ldr	r3, [r0, #0]
 800d3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ae:	4798      	blx	r3
 800d3b0:	f7fc fd12 	bl	8009dd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d3b4:	6828      	ldr	r0, [r5, #0]
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	f7ff ff50 	bl	800d25c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800d3bc:	6860      	ldr	r0, [r4, #4]
 800d3be:	4631      	mov	r1, r6
 800d3c0:	6803      	ldr	r3, [r0, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	4798      	blx	r3
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3cc:	4798      	blx	r3
 800d3ce:	6828      	ldr	r0, [r5, #0]
 800d3d0:	6803      	ldr	r3, [r0, #0]
 800d3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d8:	4718      	bx	r3
 800d3da:	bf00      	nop
 800d3dc:	20009bf4 	.word	0x20009bf4

0800d3e0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d3e0:	b508      	push	{r3, lr}
 800d3e2:	f7fc fcdf 	bl	8009da4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d3e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d3ea:	f7fc bce9 	b.w	8009dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d3ee <_ZN8touchgfx13DMA_Interface5startEv>:
 800d3ee:	b510      	push	{r4, lr}
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	6840      	ldr	r0, [r0, #4]
 800d3f4:	6803      	ldr	r3, [r0, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4798      	blx	r3
 800d3fa:	b948      	cbnz	r0, 800d410 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d3fc:	7a63      	ldrb	r3, [r4, #9]
 800d3fe:	b13b      	cbz	r3, 800d410 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d400:	7a23      	ldrb	r3, [r4, #8]
 800d402:	b92b      	cbnz	r3, 800d410 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	4620      	mov	r0, r4
 800d408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d40e:	4718      	bx	r3
 800d410:	bd10      	pop	{r4, pc}
	...

0800d414 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d414:	b510      	push	{r4, lr}
 800d416:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800d41a:	1b12      	subs	r2, r2, r4
 800d41c:	2a00      	cmp	r2, #0
 800d41e:	bfdc      	itt	le
 800d420:	6883      	ldrle	r3, [r0, #8]
 800d422:	18d2      	addle	r2, r2, r3
 800d424:	2a01      	cmp	r2, #1
 800d426:	dd18      	ble.n	800d45a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800d428:	6843      	ldr	r3, [r0, #4]
 800d42a:	f101 021c 	add.w	r2, r1, #28
 800d42e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800d432:	f851 4b04 	ldr.w	r4, [r1], #4
 800d436:	4291      	cmp	r1, r2
 800d438:	f843 4b04 	str.w	r4, [r3], #4
 800d43c:	d1f9      	bne.n	800d432 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800d43e:	880a      	ldrh	r2, [r1, #0]
 800d440:	801a      	strh	r2, [r3, #0]
 800d442:	788a      	ldrb	r2, [r1, #2]
 800d444:	709a      	strb	r2, [r3, #2]
 800d446:	68c3      	ldr	r3, [r0, #12]
 800d448:	6882      	ldr	r2, [r0, #8]
 800d44a:	f3bf 8f5b 	dmb	ish
 800d44e:	3301      	adds	r3, #1
 800d450:	429a      	cmp	r2, r3
 800d452:	bfd8      	it	le
 800d454:	1a9b      	suble	r3, r3, r2
 800d456:	60c3      	str	r3, [r0, #12]
 800d458:	bd10      	pop	{r4, pc}
 800d45a:	4b03      	ldr	r3, [pc, #12]	; (800d468 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800d45c:	2139      	movs	r1, #57	; 0x39
 800d45e:	4a03      	ldr	r2, [pc, #12]	; (800d46c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800d460:	4803      	ldr	r0, [pc, #12]	; (800d470 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800d462:	f010 ff71 	bl	801e348 <__assert_func>
 800d466:	bf00      	nop
 800d468:	08021748 	.word	0x08021748
 800d46c:	0802183c 	.word	0x0802183c
 800d470:	08021722 	.word	0x08021722

0800d474 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800d474:	b510      	push	{r4, lr}
 800d476:	6803      	ldr	r3, [r0, #0]
 800d478:	4604      	mov	r4, r0
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4798      	blx	r3
 800d47e:	b128      	cbz	r0, 800d48c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800d480:	4b07      	ldr	r3, [pc, #28]	; (800d4a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800d482:	213f      	movs	r1, #63	; 0x3f
 800d484:	4a07      	ldr	r2, [pc, #28]	; (800d4a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800d486:	4808      	ldr	r0, [pc, #32]	; (800d4a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800d488:	f010 ff5e 	bl	801e348 <__assert_func>
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	68a2      	ldr	r2, [r4, #8]
 800d490:	f3bf 8f5b 	dmb	ish
 800d494:	3301      	adds	r3, #1
 800d496:	429a      	cmp	r2, r3
 800d498:	bfd8      	it	le
 800d49a:	1a9b      	suble	r3, r3, r2
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	bd10      	pop	{r4, pc}
 800d4a0:	0802176b 	.word	0x0802176b
 800d4a4:	0802188a 	.word	0x0802188a
 800d4a8:	08021722 	.word	0x08021722

0800d4ac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800d4ac:	b570      	push	{r4, r5, r6, lr}
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	6840      	ldr	r0, [r0, #4]
 800d4b2:	6803      	ldr	r3, [r0, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4798      	blx	r3
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	b930      	cbnz	r0, 800d4ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d4bc:	7a23      	ldrb	r3, [r4, #8]
 800d4be:	b123      	cbz	r3, 800d4ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d4c0:	6860      	ldr	r0, [r4, #4]
 800d4c2:	6803      	ldr	r3, [r0, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	4798      	blx	r3
 800d4c8:	7225      	strb	r5, [r4, #8]
 800d4ca:	6860      	ldr	r0, [r4, #4]
 800d4cc:	6803      	ldr	r3, [r0, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4798      	blx	r3
 800d4d2:	b928      	cbnz	r0, 800d4e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4de:	4718      	bx	r3
 800d4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4e4:	f7fc bc84 	b.w	8009df0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800d4e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	6082      	str	r2, [r0, #8]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4c03      	ldr	r4, [pc, #12]	; (800d4fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800d4f0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800d4f4:	e9c0 4100 	strd	r4, r1, [r0]
 800d4f8:	bd10      	pop	{r4, pc}
 800d4fa:	bf00      	nop
 800d4fc:	080217f0 	.word	0x080217f0

0800d500 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800d500:	6840      	ldr	r0, [r0, #4]
 800d502:	6803      	ldr	r3, [r0, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4718      	bx	r3

0800d508 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800d508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d50a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d50e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d510:	4299      	cmp	r1, r3
 800d512:	d029      	beq.n	800d568 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800d514:	4b15      	ldr	r3, [pc, #84]	; (800d56c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	b92b      	cbnz	r3, 800d526 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800d51a:	4b15      	ldr	r3, [pc, #84]	; (800d570 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800d51c:	21b1      	movs	r1, #177	; 0xb1
 800d51e:	4a15      	ldr	r2, [pc, #84]	; (800d574 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800d520:	4815      	ldr	r0, [pc, #84]	; (800d578 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800d522:	f010 ff11 	bl	801e348 <__assert_func>
 800d526:	4a15      	ldr	r2, [pc, #84]	; (800d57c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800d528:	8812      	ldrh	r2, [r2, #0]
 800d52a:	428a      	cmp	r2, r1
 800d52c:	d803      	bhi.n	800d536 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800d52e:	4b14      	ldr	r3, [pc, #80]	; (800d580 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800d530:	21b2      	movs	r1, #178	; 0xb2
 800d532:	4a10      	ldr	r2, [pc, #64]	; (800d574 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800d534:	e7f4      	b.n	800d520 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800d536:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800d53a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800d53e:	4b11      	ldr	r3, [pc, #68]	; (800d584 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800d540:	7854      	ldrb	r4, [r2, #1]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800d548:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	69de      	ldr	r6, [r3, #28]
 800d550:	4b0d      	ldr	r3, [pc, #52]	; (800d588 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800d552:	6818      	ldr	r0, [r3, #0]
 800d554:	f7fb fe8c 	bl	8009270 <_ZNK8touchgfx5Texts7getTextEt>
 800d558:	2300      	movs	r3, #0
 800d55a:	4602      	mov	r2, r0
 800d55c:	4621      	mov	r1, r4
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	4628      	mov	r0, r5
 800d562:	47b0      	blx	r6
 800d564:	b002      	add	sp, #8
 800d566:	bd70      	pop	{r4, r5, r6, pc}
 800d568:	2000      	movs	r0, #0
 800d56a:	e7fb      	b.n	800d564 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800d56c:	20009c44 	.word	0x20009c44
 800d570:	080218ba 	.word	0x080218ba
 800d574:	080219f0 	.word	0x080219f0
 800d578:	080218fc 	.word	0x080218fc
 800d57c:	20009c48 	.word	0x20009c48
 800d580:	08021925 	.word	0x08021925
 800d584:	20009c4c 	.word	0x20009c4c
 800d588:	20009c50 	.word	0x20009c50

0800d58c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800d58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d594:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d596:	b08c      	sub	sp, #48	; 0x30
 800d598:	4604      	mov	r4, r0
 800d59a:	4293      	cmp	r3, r2
 800d59c:	4688      	mov	r8, r1
 800d59e:	d05f      	beq.n	800d660 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800d5a0:	4e31      	ldr	r6, [pc, #196]	; (800d668 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800d5a2:	6832      	ldr	r2, [r6, #0]
 800d5a4:	b92a      	cbnz	r2, 800d5b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800d5a6:	4b31      	ldr	r3, [pc, #196]	; (800d66c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800d5a8:	21b1      	movs	r1, #177	; 0xb1
 800d5aa:	4a31      	ldr	r2, [pc, #196]	; (800d670 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800d5ac:	4831      	ldr	r0, [pc, #196]	; (800d674 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800d5ae:	f010 fecb 	bl	801e348 <__assert_func>
 800d5b2:	4d31      	ldr	r5, [pc, #196]	; (800d678 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800d5b4:	8829      	ldrh	r1, [r5, #0]
 800d5b6:	4299      	cmp	r1, r3
 800d5b8:	d803      	bhi.n	800d5c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800d5ba:	4b30      	ldr	r3, [pc, #192]	; (800d67c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800d5bc:	21b2      	movs	r1, #178	; 0xb2
 800d5be:	4a2c      	ldr	r2, [pc, #176]	; (800d670 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800d5c0:	e7f4      	b.n	800d5ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800d5c2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800d5c6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d5ca:	4b2d      	ldr	r3, [pc, #180]	; (800d680 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	d044      	beq.n	800d660 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800d5d6:	784b      	ldrb	r3, [r1, #1]
 800d5d8:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 800d5dc:	f3c3 0901 	ubfx	r9, r3, #0, #2
 800d5e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d5e4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 800d5e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800d5ec:	4b25      	ldr	r3, [pc, #148]	; (800d684 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800d5ee:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800d5f8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800d5fc:	9207      	str	r2, [sp, #28]
 800d5fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d600:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d604:	9009      	str	r0, [sp, #36]	; 0x24
 800d606:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d60a:	f88d 9020 	strb.w	r9, [sp, #32]
 800d60e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 800d612:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 800d616:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800d61a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800d61e:	b10a      	cbz	r2, 800d624 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800d620:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800d622:	b907      	cbnz	r7, 800d626 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800d624:	689f      	ldr	r7, [r3, #8]
 800d626:	f10d 0914 	add.w	r9, sp, #20
 800d62a:	4621      	mov	r1, r4
 800d62c:	4648      	mov	r0, r9
 800d62e:	f002 fdff 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d632:	6833      	ldr	r3, [r6, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0b6      	beq.n	800d5a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800d638:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800d63a:	882b      	ldrh	r3, [r5, #0]
 800d63c:	428b      	cmp	r3, r1
 800d63e:	d9bc      	bls.n	800d5ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800d640:	4b11      	ldr	r3, [pc, #68]	; (800d688 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	f7fb fe14 	bl	8009270 <_ZNK8touchgfx5Texts7getTextEt>
 800d648:	2300      	movs	r3, #0
 800d64a:	9001      	str	r0, [sp, #4]
 800d64c:	4638      	mov	r0, r7
 800d64e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d652:	ab07      	add	r3, sp, #28
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	4643      	mov	r3, r8
 800d658:	e899 0006 	ldmia.w	r9, {r1, r2}
 800d65c:	f7fb fd99 	bl	8009192 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d660:	b00c      	add	sp, #48	; 0x30
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	bf00      	nop
 800d668:	20009c44 	.word	0x20009c44
 800d66c:	080218ba 	.word	0x080218ba
 800d670:	080219f0 	.word	0x080219f0
 800d674:	080218fc 	.word	0x080218fc
 800d678:	20009c48 	.word	0x20009c48
 800d67c:	08021925 	.word	0x08021925
 800d680:	20009c4c 	.word	0x20009c4c
 800d684:	20009bf4 	.word	0x20009bf4
 800d688:	20009c50 	.word	0x20009c50

0800d68c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800d68c:	b40e      	push	{r1, r2, r3}
 800d68e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d696:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d698:	b09b      	sub	sp, #108	; 0x6c
 800d69a:	4604      	mov	r4, r0
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d061      	beq.n	800d764 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 800d6a0:	aa24      	add	r2, sp, #144	; 0x90
 800d6a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d778 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800d6a6:	9203      	str	r2, [sp, #12]
 800d6a8:	f8da 2000 	ldr.w	r2, [sl]
 800d6ac:	b92a      	cbnz	r2, 800d6ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800d6ae:	4b2e      	ldr	r3, [pc, #184]	; (800d768 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 800d6b0:	21b1      	movs	r1, #177	; 0xb1
 800d6b2:	4a2e      	ldr	r2, [pc, #184]	; (800d76c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 800d6b4:	482e      	ldr	r0, [pc, #184]	; (800d770 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 800d6b6:	f010 fe47 	bl	801e348 <__assert_func>
 800d6ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800d77c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 800d6be:	f8b8 1000 	ldrh.w	r1, [r8]
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	d803      	bhi.n	800d6ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800d6c6:	4b2b      	ldr	r3, [pc, #172]	; (800d774 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 800d6c8:	21b2      	movs	r1, #178	; 0xb2
 800d6ca:	4a28      	ldr	r2, [pc, #160]	; (800d76c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 800d6cc:	e7f2      	b.n	800d6b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800d6ce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800d780 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 800d6d2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d6d6:	f8d9 3000 	ldr.w	r3, [r9]
 800d6da:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e4:	4798      	blx	r3
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	b205      	sxth	r5, r0
 800d6ea:	a804      	add	r0, sp, #16
 800d6ec:	f003 fa28 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f6:	4798      	blx	r3
 800d6f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	9a03      	ldr	r2, [sp, #12]
 800d6fe:	a804      	add	r0, sp, #16
 800d700:	f003 fa63 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d704:	f8da 3000 	ldr.w	r3, [sl]
 800d708:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d0ce      	beq.n	800d6ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800d710:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800d712:	f8b8 0000 	ldrh.w	r0, [r8]
 800d716:	4290      	cmp	r0, r2
 800d718:	d9d5      	bls.n	800d6c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800d71a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 800d71e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800d722:	f8d9 3000 	ldr.w	r3, [r9]
 800d726:	787a      	ldrb	r2, [r7, #1]
 800d728:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 800d72c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d730:	9700      	str	r7, [sp, #0]
 800d732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d736:	a804      	add	r0, sp, #16
 800d738:	f001 f89b 	bl	800e872 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d73c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800d740:	b203      	sxth	r3, r0
 800d742:	18a9      	adds	r1, r5, r2
 800d744:	2900      	cmp	r1, #0
 800d746:	dd0b      	ble.n	800d760 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 800d748:	3b01      	subs	r3, #1
 800d74a:	fb13 f302 	smulbb	r3, r3, r2
 800d74e:	fb16 3300 	smlabb	r3, r6, r0, r3
 800d752:	b21d      	sxth	r5, r3
 800d754:	4628      	mov	r0, r5
 800d756:	b01b      	add	sp, #108	; 0x6c
 800d758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d75c:	b003      	add	sp, #12
 800d75e:	4770      	bx	lr
 800d760:	2b00      	cmp	r3, #0
 800d762:	dcf7      	bgt.n	800d754 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800d764:	2500      	movs	r5, #0
 800d766:	e7f5      	b.n	800d754 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800d768:	080218ba 	.word	0x080218ba
 800d76c:	080219f0 	.word	0x080219f0
 800d770:	080218fc 	.word	0x080218fc
 800d774:	08021925 	.word	0x08021925
 800d778:	20009c44 	.word	0x20009c44
 800d77c:	20009c48 	.word	0x20009c48
 800d780:	20009c4c 	.word	0x20009c4c

0800d784 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800d784:	b570      	push	{r4, r5, r6, lr}
 800d786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d78a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d78c:	4604      	mov	r4, r0
 800d78e:	4299      	cmp	r1, r3
 800d790:	d01e      	beq.n	800d7d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800d792:	6803      	ldr	r3, [r0, #0]
 800d794:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	b92b      	cbnz	r3, 800d7a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800d79c:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800d79e:	21b1      	movs	r1, #177	; 0xb1
 800d7a0:	4a0e      	ldr	r2, [pc, #56]	; (800d7dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d7a2:	480f      	ldr	r0, [pc, #60]	; (800d7e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800d7a4:	f010 fdd0 	bl	801e348 <__assert_func>
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	428b      	cmp	r3, r1
 800d7ae:	d803      	bhi.n	800d7b8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800d7b0:	4b0d      	ldr	r3, [pc, #52]	; (800d7e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800d7b2:	21b2      	movs	r1, #178	; 0xb2
 800d7b4:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d7b6:	e7f4      	b.n	800d7a2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800d7b8:	4b0c      	ldr	r3, [pc, #48]	; (800d7ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	f7fb fd58 	bl	8009270 <_ZNK8touchgfx5Texts7getTextEt>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	46ac      	mov	ip, r5
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7ce:	4760      	bx	ip
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	20009c44 	.word	0x20009c44
 800d7d8:	080218ba 	.word	0x080218ba
 800d7dc:	080219f0 	.word	0x080219f0
 800d7e0:	080218fc 	.word	0x080218fc
 800d7e4:	20009c48 	.word	0x20009c48
 800d7e8:	08021925 	.word	0x08021925
 800d7ec:	20009c50 	.word	0x20009c50

0800d7f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d014      	beq.n	800d828 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800d7fe:	6803      	ldr	r3, [r0, #0]
 800d800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d802:	4798      	blx	r3
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	4605      	mov	r5, r0
 800d808:	4620      	mov	r0, r4
 800d80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d80c:	4798      	blx	r3
 800d80e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d812:	b22d      	sxth	r5, r5
 800d814:	4601      	mov	r1, r0
 800d816:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800d81a:	bf06      	itte	eq
 800d81c:	4602      	moveq	r2, r0
 800d81e:	4629      	moveq	r1, r5
 800d820:	462a      	movne	r2, r5
 800d822:	4620      	mov	r0, r4
 800d824:	f7fa febb 	bl	800859e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d828:	bd38      	pop	{r3, r4, r5, pc}

0800d82a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 800d82a:	888a      	ldrh	r2, [r1, #4]
 800d82c:	8582      	strh	r2, [r0, #44]	; 0x2c
 800d82e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800d832:	b922      	cbnz	r2, 800d83e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 800d834:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d838:	b90b      	cbnz	r3, 800d83e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 800d83a:	f7ff bfd9 	b.w	800d7f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800d83e:	4770      	bx	lr

0800d840 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d840:	2300      	movs	r3, #0
 800d842:	8083      	strh	r3, [r0, #4]
 800d844:	80c3      	strh	r3, [r0, #6]
 800d846:	8003      	strh	r3, [r0, #0]
 800d848:	8043      	strh	r3, [r0, #2]
 800d84a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800d84e:	2bff      	cmp	r3, #255	; 0xff
 800d850:	bf01      	itttt	eq
 800d852:	890b      	ldrheq	r3, [r1, #8]
 800d854:	8083      	strheq	r3, [r0, #4]
 800d856:	894b      	ldrheq	r3, [r1, #10]
 800d858:	80c3      	strheq	r3, [r0, #6]
 800d85a:	4770      	bx	lr

0800d85c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d85e:	4604      	mov	r4, r0
 800d860:	466b      	mov	r3, sp
 800d862:	6808      	ldr	r0, [r1, #0]
 800d864:	6849      	ldr	r1, [r1, #4]
 800d866:	c303      	stmia	r3!, {r0, r1}
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	4669      	mov	r1, sp
 800d86c:	4620      	mov	r0, r4
 800d86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d870:	4798      	blx	r3
 800d872:	4b08      	ldr	r3, [pc, #32]	; (800d894 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d87a:	b10a      	cbz	r2, 800d880 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800d87c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d87e:	b900      	cbnz	r0, 800d882 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800d880:	6898      	ldr	r0, [r3, #8]
 800d882:	6803      	ldr	r3, [r0, #0]
 800d884:	4669      	mov	r1, sp
 800d886:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d888:	699d      	ldr	r5, [r3, #24]
 800d88a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d88e:	47a8      	blx	r5
 800d890:	b003      	add	sp, #12
 800d892:	bd30      	pop	{r4, r5, pc}
 800d894:	20009bf4 	.word	0x20009bf4

0800d898 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89c:	4696      	mov	lr, r2
 800d89e:	b097      	sub	sp, #92	; 0x5c
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	4614      	mov	r4, r2
 800d8a4:	460e      	mov	r6, r1
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	f10d 0c1c 	add.w	ip, sp, #28
 800d8ac:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800d8b0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800d8b4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800d8b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8c0:	f8de 3000 	ldr.w	r3, [lr]
 800d8c4:	f104 0e14 	add.w	lr, r4, #20
 800d8c8:	f8cc 3000 	str.w	r3, [ip]
 800d8cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d8d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8d8:	f8de 3000 	ldr.w	r3, [lr]
 800d8dc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d8e0:	f8cc 3000 	str.w	r3, [ip]
 800d8e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d8e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8f0:	f8de 3000 	ldr.w	r3, [lr]
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f8cc 3000 	str.w	r3, [ip]
 800d8fe:	682b      	ldr	r3, [r5, #0]
 800d900:	9201      	str	r2, [sp, #4]
 800d902:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d904:	f8cd 8008 	str.w	r8, [sp, #8]
 800d908:	9200      	str	r2, [sp, #0]
 800d90a:	aa07      	add	r2, sp, #28
 800d90c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d910:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 800d914:	463b      	mov	r3, r7
 800d916:	47d8      	blx	fp
 800d918:	46a6      	mov	lr, r4
 800d91a:	f10d 0c1c 	add.w	ip, sp, #28
 800d91e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d926:	f8de 3000 	ldr.w	r3, [lr]
 800d92a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d92e:	343c      	adds	r4, #60	; 0x3c
 800d930:	f8cc 3000 	str.w	r3, [ip]
 800d934:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d93c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d940:	f8de 3000 	ldr.w	r3, [lr]
 800d944:	f8cc 3000 	str.w	r3, [ip]
 800d948:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d94c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d94e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	f8cc 3000 	str.w	r3, [ip]
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d962:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d964:	f8cd 8008 	str.w	r8, [sp, #8]
 800d968:	9201      	str	r2, [sp, #4]
 800d96a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d96c:	9200      	str	r2, [sp, #0]
 800d96e:	aa07      	add	r2, sp, #28
 800d970:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d972:	463b      	mov	r3, r7
 800d974:	47a0      	blx	r4
 800d976:	b017      	add	sp, #92	; 0x5c
 800d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d97c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d97c:	2000      	movs	r0, #0
 800d97e:	4770      	bx	lr

0800d980 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	b08d      	sub	sp, #52	; 0x34
 800d986:	4688      	mov	r8, r1
 800d988:	f8d3 c000 	ldr.w	ip, [r3]
 800d98c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d98e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800d992:	680f      	ldr	r7, [r1, #0]
 800d994:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800d998:	eba7 070c 	sub.w	r7, r7, ip
 800d99c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800d9a0:	edd3 6a07 	vldr	s13, [r3, #28]
 800d9a4:	42bc      	cmp	r4, r7
 800d9a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d9a8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800d9ac:	bfa8      	it	ge
 800d9ae:	463c      	movge	r4, r7
 800d9b0:	f9b1 9000 	ldrsh.w	r9, [r1]
 800d9b4:	f9ba 1000 	ldrsh.w	r1, [sl]
 800d9b8:	ee07 4a90 	vmov	s15, r4
 800d9bc:	eb09 0e0c 	add.w	lr, r9, ip
 800d9c0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800d9c4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d9c8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800d9cc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800d9d0:	4571      	cmp	r1, lr
 800d9d2:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d9d6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d9da:	ee25 5a27 	vmul.f32	s10, s10, s15
 800d9de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d9e2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800d9e6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800d9ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d9ee:	ee36 0a84 	vadd.f32	s0, s13, s8
 800d9f2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d9f6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d9fa:	f340 808c 	ble.w	800db16 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800d9fe:	eba1 060e 	sub.w	r6, r1, lr
 800da02:	fb96 f5f4 	sdiv	r5, r6, r4
 800da06:	ee07 5a10 	vmov	s14, r5
 800da0a:	2d00      	cmp	r5, #0
 800da0c:	fb04 6615 	mls	r6, r4, r5, r6
 800da10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da14:	eea7 0a04 	vfma.f32	s0, s14, s8
 800da18:	eee7 0a24 	vfma.f32	s1, s14, s9
 800da1c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800da20:	dd12      	ble.n	800da48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800da22:	ee70 6a44 	vsub.f32	s13, s0, s8
 800da26:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800da2a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800da2e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	bf14      	ite	ne
 800da38:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800da3c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800da40:	ee61 1a87 	vmul.f32	s3, s3, s14
 800da44:	ee22 2a07 	vmul.f32	s4, s4, s14
 800da48:	fb05 f204 	mul.w	r2, r5, r4
 800da4c:	1abf      	subs	r7, r7, r2
 800da4e:	4494      	add	ip, r2
 800da50:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800da54:	4411      	add	r1, r2
 800da56:	eb09 020c 	add.w	r2, r9, ip
 800da5a:	b209      	sxth	r1, r1
 800da5c:	443a      	add	r2, r7
 800da5e:	428a      	cmp	r2, r1
 800da60:	bfc4      	itt	gt
 800da62:	eba1 0209 	subgt.w	r2, r1, r9
 800da66:	eba2 070c 	subgt.w	r7, r2, ip
 800da6a:	2f00      	cmp	r7, #0
 800da6c:	dd50      	ble.n	800db10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800da6e:	fb97 f1f4 	sdiv	r1, r7, r4
 800da72:	fb04 7211 	mls	r2, r4, r1, r7
 800da76:	b90a      	cbnz	r2, 800da7c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800da78:	3901      	subs	r1, #1
 800da7a:	4622      	mov	r2, r4
 800da7c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800da80:	6840      	ldr	r0, [r0, #4]
 800da82:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800da86:	44b6      	add	lr, r6
 800da88:	f8d0 a000 	ldr.w	sl, [r0]
 800da8c:	2900      	cmp	r1, #0
 800da8e:	bfcc      	ite	gt
 800da90:	46a1      	movgt	r9, r4
 800da92:	4691      	movle	r9, r2
 800da94:	900b      	str	r0, [sp, #44]	; 0x2c
 800da96:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800da98:	fb04 e505 	mla	r5, r4, r5, lr
 800da9c:	eef0 6a42 	vmov.f32	s13, s4
 800daa0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800daa4:	9008      	str	r0, [sp, #32]
 800daa6:	eeb0 7a61 	vmov.f32	s14, s3
 800daaa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800dab2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800dab6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800daba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dabc:	445b      	add	r3, fp
 800dabe:	9307      	str	r3, [sp, #28]
 800dac0:	ee16 3a90 	vmov	r3, s13
 800dac4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800dac8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800dacc:	ee21 3a23 	vmul.f32	s6, s2, s7
 800dad0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800dad4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800dad8:	ee17 7a90 	vmov	r7, s15
 800dadc:	ee73 7a42 	vsub.f32	s15, s6, s4
 800dae0:	fb97 f7f4 	sdiv	r7, r7, r4
 800dae4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800dae8:	ee17 ca90 	vmov	ip, s15
 800daec:	fb9c fcf4 	sdiv	ip, ip, r4
 800daf0:	fb0c 3306 	mla	r3, ip, r6, r3
 800daf4:	9302      	str	r3, [sp, #8]
 800daf6:	ee17 3a10 	vmov	r3, s14
 800dafa:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800dafe:	fb07 3706 	mla	r7, r7, r6, r3
 800db02:	eba9 0306 	sub.w	r3, r9, r6
 800db06:	e9cd 4700 	strd	r4, r7, [sp]
 800db0a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800db0e:	47a0      	blx	r4
 800db10:	b00d      	add	sp, #52	; 0x34
 800db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db16:	2500      	movs	r5, #0
 800db18:	462e      	mov	r6, r5
 800db1a:	e799      	b.n	800da50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800db1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	b0db      	sub	sp, #364	; 0x16c
 800db22:	461d      	mov	r5, r3
 800db24:	4614      	mov	r4, r2
 800db26:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800db2a:	910f      	str	r1, [sp, #60]	; 0x3c
 800db2c:	4629      	mov	r1, r5
 800db2e:	930a      	str	r3, [sp, #40]	; 0x28
 800db30:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800db34:	9009      	str	r0, [sp, #36]	; 0x24
 800db36:	930b      	str	r3, [sp, #44]	; 0x2c
 800db38:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800db3c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800db40:	9310      	str	r3, [sp, #64]	; 0x40
 800db42:	6803      	ldr	r3, [r0, #0]
 800db44:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800db46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db4a:	47b8      	blx	r7
 800db4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db4e:	6058      	str	r0, [r3, #4]
 800db50:	2800      	cmp	r0, #0
 800db52:	f000 83a1 	beq.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800db5c:	ed94 7a02 	vldr	s14, [r4, #8]
 800db60:	9314      	str	r3, [sp, #80]	; 0x50
 800db62:	686b      	ldr	r3, [r5, #4]
 800db64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db68:	9315      	str	r3, [sp, #84]	; 0x54
 800db6a:	4bc1      	ldr	r3, [pc, #772]	; (800de70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800db6c:	7819      	ldrb	r1, [r3, #0]
 800db6e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800db72:	2900      	cmp	r1, #0
 800db74:	bf16      	itet	ne
 800db76:	4619      	movne	r1, r3
 800db78:	4611      	moveq	r1, r2
 800db7a:	4613      	movne	r3, r2
 800db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db80:	9116      	str	r1, [sp, #88]	; 0x58
 800db82:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800db86:	f240 8387 	bls.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db8a:	ed94 7a07 	vldr	s14, [r4, #28]
 800db8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db96:	f240 837f 	bls.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db9a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800db9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba6:	f240 8377 	bls.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbaa:	6822      	ldr	r2, [r4, #0]
 800dbac:	4bb1      	ldr	r3, [pc, #708]	; (800de74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	f2c0 8372 	blt.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbb4:	49b0      	ldr	r1, [pc, #704]	; (800de78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800dbb6:	6963      	ldr	r3, [r4, #20]
 800dbb8:	428a      	cmp	r2, r1
 800dbba:	f300 836d 	bgt.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbbe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800dbc2:	48ae      	ldr	r0, [pc, #696]	; (800de7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800dbc4:	33ff      	adds	r3, #255	; 0xff
 800dbc6:	4283      	cmp	r3, r0
 800dbc8:	f200 8366 	bhi.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbce:	4dac      	ldr	r5, [pc, #688]	; (800de80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800dbd0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800dbd4:	33ff      	adds	r3, #255	; 0xff
 800dbd6:	42ab      	cmp	r3, r5
 800dbd8:	f200 835e 	bhi.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbdc:	6862      	ldr	r2, [r4, #4]
 800dbde:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800dbe2:	33ff      	adds	r3, #255	; 0xff
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	f200 8357 	bhi.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbea:	69a1      	ldr	r1, [r4, #24]
 800dbec:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800dbf0:	33ff      	adds	r3, #255	; 0xff
 800dbf2:	4283      	cmp	r3, r0
 800dbf4:	f200 8350 	bhi.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dbfa:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800dbfe:	30ff      	adds	r0, #255	; 0xff
 800dc00:	42a8      	cmp	r0, r5
 800dc02:	f200 8349 	bhi.w	800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dc06:	428a      	cmp	r2, r1
 800dc08:	f280 8110 	bge.w	800de2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f300 8119 	bgt.w	800de44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800dc12:	4299      	cmp	r1, r3
 800dc14:	f280 811d 	bge.w	800de52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800dc18:	2502      	movs	r5, #2
 800dc1a:	2701      	movs	r7, #1
 800dc1c:	46a9      	mov	r9, r5
 800dc1e:	46b8      	mov	r8, r7
 800dc20:	f04f 0a00 	mov.w	sl, #0
 800dc24:	4621      	mov	r1, r4
 800dc26:	a849      	add	r0, sp, #292	; 0x124
 800dc28:	f003 fd44 	bl	80116b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	4653      	mov	r3, sl
 800dc30:	a949      	add	r1, sp, #292	; 0x124
 800dc32:	f8cd 9000 	str.w	r9, [sp]
 800dc36:	a819      	add	r0, sp, #100	; 0x64
 800dc38:	f003 fe6c 	bl	8011914 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	4653      	mov	r3, sl
 800dc40:	a949      	add	r1, sp, #292	; 0x124
 800dc42:	f8cd 8000 	str.w	r8, [sp]
 800dc46:	a829      	add	r0, sp, #164	; 0xa4
 800dc48:	f003 fe64 	bl	8011914 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc4c:	4643      	mov	r3, r8
 800dc4e:	4622      	mov	r2, r4
 800dc50:	a949      	add	r1, sp, #292	; 0x124
 800dc52:	f8cd 9000 	str.w	r9, [sp]
 800dc56:	a839      	add	r0, sp, #228	; 0xe4
 800dc58:	f003 fe5c 	bl	8011914 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc5c:	42af      	cmp	r7, r5
 800dc5e:	af12      	add	r7, sp, #72	; 0x48
 800dc60:	bfb7      	itett	lt
 800dc62:	2300      	movlt	r3, #0
 800dc64:	2301      	movge	r3, #1
 800dc66:	ad29      	addlt	r5, sp, #164	; 0xa4
 800dc68:	ac19      	addlt	r4, sp, #100	; 0x64
 800dc6a:	bfb1      	iteee	lt
 800dc6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dc6e:	ad19      	addge	r5, sp, #100	; 0x64
 800dc70:	930e      	strge	r3, [sp, #56]	; 0x38
 800dc72:	ac29      	addge	r4, sp, #164	; 0xa4
 800dc74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc76:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc7a:	e887 0003 	stmia.w	r7, {r0, r1}
 800dc7e:	b928      	cbnz	r0, 800dc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800dc80:	4b80      	ldr	r3, [pc, #512]	; (800de84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	6803      	ldr	r3, [r0, #0]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	4798      	blx	r3
 800dc8a:	6038      	str	r0, [r7, #0]
 800dc8c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dc8e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800dc92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc96:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800dc98:	930c      	str	r3, [sp, #48]	; 0x30
 800dc9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dc9c:	6963      	ldr	r3, [r4, #20]
 800dc9e:	440b      	add	r3, r1
 800dca0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800dca4:	4408      	add	r0, r1
 800dca6:	b200      	sxth	r0, r0
 800dca8:	4283      	cmp	r3, r0
 800dcaa:	900d      	str	r0, [sp, #52]	; 0x34
 800dcac:	f280 80dd 	bge.w	800de6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	da08      	bge.n	800dcc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dcb4:	2a00      	cmp	r2, #0
 800dcb6:	dd06      	ble.n	800dcc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dcb8:	1acb      	subs	r3, r1, r3
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	f2c0 80e4 	blt.w	800de88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f300 80e2 	bgt.w	800de8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800dcc6:	6967      	ldr	r7, [r4, #20]
 800dcc8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800dccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcce:	443b      	add	r3, r7
 800dcd0:	461f      	mov	r7, r3
 800dcd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcd4:	1bdf      	subs	r7, r3, r7
 800dcd6:	4297      	cmp	r7, r2
 800dcd8:	bfa8      	it	ge
 800dcda:	4617      	movge	r7, r2
 800dcdc:	2f00      	cmp	r7, #0
 800dcde:	f340 8166 	ble.w	800dfae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800dce2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dce4:	6829      	ldr	r1, [r5, #0]
 800dce6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dcea:	f9bb 3000 	ldrsh.w	r3, [fp]
 800dcee:	4411      	add	r1, r2
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	4299      	cmp	r1, r3
 800dcf4:	dd1a      	ble.n	800dd2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dcf6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800dcfa:	4402      	add	r2, r0
 800dcfc:	440b      	add	r3, r1
 800dcfe:	b21b      	sxth	r3, r3
 800dd00:	429a      	cmp	r2, r3
 800dd02:	dc13      	bgt.n	800dd2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dd04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd06:	a912      	add	r1, sp, #72	; 0x48
 800dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	9206      	str	r2, [sp, #24]
 800dd10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd12:	9500      	str	r5, [sp, #0]
 800dd14:	9205      	str	r2, [sp, #20]
 800dd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd18:	e9cd b203 	strd	fp, r2, [sp, #12]
 800dd1c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800dd1e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800dd22:	aa49      	add	r2, sp, #292	; 0x124
 800dd24:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 800dd28:	4623      	mov	r3, r4
 800dd2a:	47c8      	blx	r9
 800dd2c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800dd30:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800dd34:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800dd38:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd3c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800dd40:	68a1      	ldr	r1, [r4, #8]
 800dd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd46:	ed94 6a08 	vldr	s12, [r4, #32]
 800dd4a:	edd4 6a07 	vldr	s13, [r4, #28]
 800dd4e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800dd52:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dd56:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800dd5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd5e:	edc4 6a07 	vstr	s13, [r4, #28]
 800dd62:	441a      	add	r2, r3
 800dd64:	6963      	ldr	r3, [r4, #20]
 800dd66:	3301      	adds	r3, #1
 800dd68:	6022      	str	r2, [r4, #0]
 800dd6a:	6163      	str	r3, [r4, #20]
 800dd6c:	69a3      	ldr	r3, [r4, #24]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	61a3      	str	r3, [r4, #24]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	440b      	add	r3, r1
 800dd76:	68e1      	ldr	r1, [r4, #12]
 800dd78:	428b      	cmp	r3, r1
 800dd7a:	6123      	str	r3, [r4, #16]
 800dd7c:	db15      	blt.n	800ddaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800dd7e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800dd82:	3201      	adds	r2, #1
 800dd84:	1a5b      	subs	r3, r3, r1
 800dd86:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	edc4 6a07 	vstr	s13, [r4, #28]
 800dd92:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800dd96:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dd9a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800dd9e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800dda2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dda6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ddaa:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800ddae:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ddb2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800ddb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddba:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ddbe:	68a9      	ldr	r1, [r5, #8]
 800ddc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddc4:	ed95 6a08 	vldr	s12, [r5, #32]
 800ddc8:	edd5 6a07 	vldr	s13, [r5, #28]
 800ddcc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800ddd0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ddd4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ddd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dddc:	edc5 6a07 	vstr	s13, [r5, #28]
 800dde0:	441a      	add	r2, r3
 800dde2:	696b      	ldr	r3, [r5, #20]
 800dde4:	3301      	adds	r3, #1
 800dde6:	602a      	str	r2, [r5, #0]
 800dde8:	616b      	str	r3, [r5, #20]
 800ddea:	69ab      	ldr	r3, [r5, #24]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	61ab      	str	r3, [r5, #24]
 800ddf0:	692b      	ldr	r3, [r5, #16]
 800ddf2:	440b      	add	r3, r1
 800ddf4:	68e9      	ldr	r1, [r5, #12]
 800ddf6:	428b      	cmp	r3, r1
 800ddf8:	612b      	str	r3, [r5, #16]
 800ddfa:	db15      	blt.n	800de28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800ddfc:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800de00:	3201      	adds	r2, #1
 800de02:	1a5b      	subs	r3, r3, r1
 800de04:	ee76 6a26 	vadd.f32	s13, s12, s13
 800de08:	602a      	str	r2, [r5, #0]
 800de0a:	612b      	str	r3, [r5, #16]
 800de0c:	edc5 6a07 	vstr	s13, [r5, #28]
 800de10:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800de14:	ee36 7a87 	vadd.f32	s14, s13, s14
 800de18:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800de1c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800de20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de24:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800de28:	3f01      	subs	r7, #1
 800de2a:	e757      	b.n	800dcdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800de2c:	4299      	cmp	r1, r3
 800de2e:	dc13      	bgt.n	800de58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800de30:	429a      	cmp	r2, r3
 800de32:	da14      	bge.n	800de5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800de34:	2502      	movs	r5, #2
 800de36:	2703      	movs	r7, #3
 800de38:	f04f 0800 	mov.w	r8, #0
 800de3c:	46a9      	mov	r9, r5
 800de3e:	f04f 0a01 	mov.w	sl, #1
 800de42:	e6ef      	b.n	800dc24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800de44:	2501      	movs	r5, #1
 800de46:	2700      	movs	r7, #0
 800de48:	46a9      	mov	r9, r5
 800de4a:	46b8      	mov	r8, r7
 800de4c:	f04f 0a02 	mov.w	sl, #2
 800de50:	e6e8      	b.n	800dc24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800de52:	2501      	movs	r5, #1
 800de54:	2702      	movs	r7, #2
 800de56:	e6e1      	b.n	800dc1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800de58:	2500      	movs	r5, #0
 800de5a:	2701      	movs	r7, #1
 800de5c:	e7f4      	b.n	800de48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800de5e:	2702      	movs	r7, #2
 800de60:	2503      	movs	r5, #3
 800de62:	f04f 0900 	mov.w	r9, #0
 800de66:	46b8      	mov	r8, r7
 800de68:	e7e9      	b.n	800de3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800de6a:	4613      	mov	r3, r2
 800de6c:	e728      	b.n	800dcc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800de6e:	bf00      	nop
 800de70:	20009bec 	.word	0x20009bec
 800de74:	fffd8f01 	.word	0xfffd8f01
 800de78:	00027100 	.word	0x00027100
 800de7c:	0004e1ff 	.word	0x0004e1ff
 800de80:	0004e1fe 	.word	0x0004e1fe
 800de84:	20009bf4 	.word	0x20009bf4
 800de88:	4613      	mov	r3, r2
 800de8a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800de8c:	469e      	mov	lr, r3
 800de8e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800de90:	469c      	mov	ip, r3
 800de92:	9111      	str	r1, [sp, #68]	; 0x44
 800de94:	f04f 0900 	mov.w	r9, #0
 800de98:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800de9c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800dea0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800dea4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800dea8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800deac:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800deb0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800deb4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800deb8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800debc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800dec0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800dec4:	f1bc 0f00 	cmp.w	ip, #0
 800dec8:	d147      	bne.n	800df5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800deca:	eb03 0c07 	add.w	ip, r3, r7
 800dece:	1ad7      	subs	r7, r2, r3
 800ded0:	f1b9 0f00 	cmp.w	r9, #0
 800ded4:	d009      	beq.n	800deea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800ded6:	9029      	str	r0, [sp, #164]	; 0xa4
 800ded8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800dedc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800dee0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800dee4:	912d      	str	r1, [sp, #180]	; 0xb4
 800dee6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800deea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800deec:	f04f 0800 	mov.w	r8, #0
 800def0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800def4:	9111      	str	r1, [sp, #68]	; 0x44
 800def6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800defa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800defe:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800df02:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800df06:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800df0a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800df0e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800df12:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800df16:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800df1a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800df1e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800df22:	f1be 0f00 	cmp.w	lr, #0
 800df26:	d031      	beq.n	800df8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800df28:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800df2a:	4450      	add	r0, sl
 800df2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800df30:	4431      	add	r1, r6
 800df32:	ee37 7a04 	vadd.f32	s14, s14, s8
 800df36:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800df3a:	4549      	cmp	r1, r9
 800df3c:	db08      	blt.n	800df50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800df3e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800df42:	3001      	adds	r0, #1
 800df44:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800df48:	eba1 0109 	sub.w	r1, r1, r9
 800df4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800df50:	f10e 3eff 	add.w	lr, lr, #4294967295
 800df54:	f04f 0801 	mov.w	r8, #1
 800df58:	e7e3      	b.n	800df22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800df5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800df5c:	4450      	add	r0, sl
 800df5e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800df62:	4431      	add	r1, r6
 800df64:	ee77 7a84 	vadd.f32	s15, s15, s8
 800df68:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800df6c:	4541      	cmp	r1, r8
 800df6e:	db08      	blt.n	800df82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800df70:	ee76 6a85 	vadd.f32	s13, s13, s10
 800df74:	3001      	adds	r0, #1
 800df76:	ee37 7a25 	vadd.f32	s14, s14, s11
 800df7a:	eba1 0108 	sub.w	r1, r1, r8
 800df7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800df82:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df86:	f04f 0901 	mov.w	r9, #1
 800df8a:	e79b      	b.n	800dec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800df8c:	449c      	add	ip, r3
 800df8e:	1aff      	subs	r7, r7, r3
 800df90:	f1b8 0f00 	cmp.w	r8, #0
 800df94:	d009      	beq.n	800dfaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800df96:	9019      	str	r0, [sp, #100]	; 0x64
 800df98:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800df9c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800dfa0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800dfa4:	911d      	str	r1, [sp, #116]	; 0x74
 800dfa6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800dfaa:	1ad2      	subs	r2, r2, r3
 800dfac:	e68b      	b.n	800dcc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dfae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfb0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 80d1 	beq.w	800e15a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800dfb8:	ad19      	add	r5, sp, #100	; 0x64
 800dfba:	ac39      	add	r4, sp, #228	; 0xe4
 800dfbc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dfbe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800dfc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfc6:	930c      	str	r3, [sp, #48]	; 0x30
 800dfc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfca:	6963      	ldr	r3, [r4, #20]
 800dfcc:	440b      	add	r3, r1
 800dfce:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800dfd2:	4408      	add	r0, r1
 800dfd4:	b200      	sxth	r0, r0
 800dfd6:	4283      	cmp	r3, r0
 800dfd8:	900d      	str	r0, [sp, #52]	; 0x34
 800dfda:	f280 80c1 	bge.w	800e160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800dfde:	428b      	cmp	r3, r1
 800dfe0:	da08      	bge.n	800dff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800dfe2:	2a00      	cmp	r2, #0
 800dfe4:	dd06      	ble.n	800dff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800dfe6:	1acb      	subs	r3, r1, r3
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	f2c0 80bb 	blt.w	800e164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f300 80b9 	bgt.w	800e166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800dff4:	6967      	ldr	r7, [r4, #20]
 800dff6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800dffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dffc:	443b      	add	r3, r7
 800dffe:	461f      	mov	r7, r3
 800e000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e002:	1bdf      	subs	r7, r3, r7
 800e004:	4297      	cmp	r7, r2
 800e006:	bfa8      	it	ge
 800e008:	4617      	movge	r7, r2
 800e00a:	2f00      	cmp	r7, #0
 800e00c:	f340 813c 	ble.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800e010:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e012:	6829      	ldr	r1, [r5, #0]
 800e014:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e018:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e01c:	4411      	add	r1, r2
 800e01e:	6820      	ldr	r0, [r4, #0]
 800e020:	4299      	cmp	r1, r3
 800e022:	dd1a      	ble.n	800e05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e024:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e028:	4402      	add	r2, r0
 800e02a:	440b      	add	r3, r1
 800e02c:	b21b      	sxth	r3, r3
 800e02e:	429a      	cmp	r2, r3
 800e030:	dc13      	bgt.n	800e05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e032:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e034:	a912      	add	r1, sp, #72	; 0x48
 800e036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	9206      	str	r2, [sp, #24]
 800e03e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e040:	9500      	str	r5, [sp, #0]
 800e042:	9205      	str	r2, [sp, #20]
 800e044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e046:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e04a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e04c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e050:	aa49      	add	r2, sp, #292	; 0x124
 800e052:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 800e056:	4623      	mov	r3, r4
 800e058:	47c8      	blx	r9
 800e05a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e05e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e062:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800e066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e06a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e06e:	68a1      	ldr	r1, [r4, #8]
 800e070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e074:	ed94 6a08 	vldr	s12, [r4, #32]
 800e078:	edd4 6a07 	vldr	s13, [r4, #28]
 800e07c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e080:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e084:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e088:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e08c:	edc4 6a07 	vstr	s13, [r4, #28]
 800e090:	441a      	add	r2, r3
 800e092:	6963      	ldr	r3, [r4, #20]
 800e094:	3301      	adds	r3, #1
 800e096:	6022      	str	r2, [r4, #0]
 800e098:	6163      	str	r3, [r4, #20]
 800e09a:	69a3      	ldr	r3, [r4, #24]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	61a3      	str	r3, [r4, #24]
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	440b      	add	r3, r1
 800e0a4:	68e1      	ldr	r1, [r4, #12]
 800e0a6:	428b      	cmp	r3, r1
 800e0a8:	6123      	str	r3, [r4, #16]
 800e0aa:	db15      	blt.n	800e0d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800e0ac:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800e0b0:	3201      	adds	r2, #1
 800e0b2:	1a5b      	subs	r3, r3, r1
 800e0b4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e0b8:	6022      	str	r2, [r4, #0]
 800e0ba:	6123      	str	r3, [r4, #16]
 800e0bc:	edc4 6a07 	vstr	s13, [r4, #28]
 800e0c0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800e0c4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e0c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e0cc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e0d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0d4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e0d8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800e0dc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800e0e0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800e0e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0e8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800e0ec:	68a9      	ldr	r1, [r5, #8]
 800e0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0f2:	ed95 6a08 	vldr	s12, [r5, #32]
 800e0f6:	edd5 6a07 	vldr	s13, [r5, #28]
 800e0fa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e0fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e102:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e106:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e10a:	edc5 6a07 	vstr	s13, [r5, #28]
 800e10e:	441a      	add	r2, r3
 800e110:	696b      	ldr	r3, [r5, #20]
 800e112:	3301      	adds	r3, #1
 800e114:	602a      	str	r2, [r5, #0]
 800e116:	616b      	str	r3, [r5, #20]
 800e118:	69ab      	ldr	r3, [r5, #24]
 800e11a:	3b01      	subs	r3, #1
 800e11c:	61ab      	str	r3, [r5, #24]
 800e11e:	692b      	ldr	r3, [r5, #16]
 800e120:	440b      	add	r3, r1
 800e122:	68e9      	ldr	r1, [r5, #12]
 800e124:	428b      	cmp	r3, r1
 800e126:	612b      	str	r3, [r5, #16]
 800e128:	db15      	blt.n	800e156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800e12a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800e12e:	3201      	adds	r2, #1
 800e130:	1a5b      	subs	r3, r3, r1
 800e132:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e136:	602a      	str	r2, [r5, #0]
 800e138:	612b      	str	r3, [r5, #16]
 800e13a:	edc5 6a07 	vstr	s13, [r5, #28]
 800e13e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800e142:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e146:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e14a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800e14e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e152:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e156:	3f01      	subs	r7, #1
 800e158:	e757      	b.n	800e00a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800e15a:	ad39      	add	r5, sp, #228	; 0xe4
 800e15c:	ac19      	add	r4, sp, #100	; 0x64
 800e15e:	e72d      	b.n	800dfbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800e160:	4613      	mov	r3, r2
 800e162:	e744      	b.n	800dfee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800e164:	4613      	mov	r3, r2
 800e166:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800e168:	469e      	mov	lr, r3
 800e16a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800e16e:	461f      	mov	r7, r3
 800e170:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800e174:	f04f 0900 	mov.w	r9, #0
 800e178:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800e17c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800e180:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800e184:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800e188:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800e18c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800e18e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800e192:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800e196:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800e19a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800e19e:	960e      	str	r6, [sp, #56]	; 0x38
 800e1a0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800e1a4:	2f00      	cmp	r7, #0
 800e1a6:	d146      	bne.n	800e236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800e1a8:	449c      	add	ip, r3
 800e1aa:	1ad7      	subs	r7, r2, r3
 800e1ac:	f1b9 0f00 	cmp.w	r9, #0
 800e1b0:	d009      	beq.n	800e1c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800e1b2:	9039      	str	r0, [sp, #228]	; 0xe4
 800e1b4:	913d      	str	r1, [sp, #244]	; 0xf4
 800e1b6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800e1ba:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800e1be:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800e1c2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800e1c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e1c8:	f04f 0800 	mov.w	r8, #0
 800e1cc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800e1d0:	910e      	str	r1, [sp, #56]	; 0x38
 800e1d2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800e1d6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800e1da:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800e1de:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800e1e2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800e1e6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800e1ea:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800e1ee:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800e1f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800e1f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800e1fa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800e1fe:	f1be 0f00 	cmp.w	lr, #0
 800e202:	d030      	beq.n	800e266 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800e204:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e206:	4450      	add	r0, sl
 800e208:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e20c:	4431      	add	r1, r6
 800e20e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e212:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e216:	4549      	cmp	r1, r9
 800e218:	db08      	blt.n	800e22c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800e21a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e21e:	3001      	adds	r0, #1
 800e220:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e224:	eba1 0109 	sub.w	r1, r1, r9
 800e228:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e22c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e230:	f04f 0801 	mov.w	r8, #1
 800e234:	e7e3      	b.n	800e1fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800e236:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e238:	4450      	add	r0, sl
 800e23a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e23e:	4431      	add	r1, r6
 800e240:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e244:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e248:	4541      	cmp	r1, r8
 800e24a:	db08      	blt.n	800e25e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800e24c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e250:	3001      	adds	r0, #1
 800e252:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e256:	eba1 0108 	sub.w	r1, r1, r8
 800e25a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e25e:	3f01      	subs	r7, #1
 800e260:	f04f 0901 	mov.w	r9, #1
 800e264:	e79e      	b.n	800e1a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800e266:	449c      	add	ip, r3
 800e268:	1aff      	subs	r7, r7, r3
 800e26a:	f1b8 0f00 	cmp.w	r8, #0
 800e26e:	d009      	beq.n	800e284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800e270:	9019      	str	r0, [sp, #100]	; 0x64
 800e272:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800e276:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800e27a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800e27e:	911d      	str	r1, [sp, #116]	; 0x74
 800e280:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800e284:	1ad2      	subs	r2, r2, r3
 800e286:	e6b5      	b.n	800dff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	b923      	cbnz	r3, 800e298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e28e:	4b04      	ldr	r3, [pc, #16]	; (800e2a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800e290:	6818      	ldr	r0, [r3, #0]
 800e292:	6803      	ldr	r3, [r0, #0]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	4798      	blx	r3
 800e298:	b05b      	add	sp, #364	; 0x16c
 800e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29e:	bf00      	nop
 800e2a0:	20009bf4 	.word	0x20009bf4

0800e2a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	2500      	movs	r5, #0
 800e2aa:	9804      	ldr	r0, [sp, #16]
 800e2ac:	7223      	strb	r3, [r4, #8]
 800e2ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e2b2:	8025      	strh	r5, [r4, #0]
 800e2b4:	6061      	str	r1, [r4, #4]
 800e2b6:	7263      	strb	r3, [r4, #9]
 800e2b8:	60e0      	str	r0, [r4, #12]
 800e2ba:	8222      	strh	r2, [r4, #16]
 800e2bc:	8265      	strh	r5, [r4, #18]
 800e2be:	82a5      	strh	r5, [r4, #20]
 800e2c0:	82e5      	strh	r5, [r4, #22]
 800e2c2:	8325      	strh	r5, [r4, #24]
 800e2c4:	8365      	strh	r5, [r4, #26]
 800e2c6:	83a5      	strh	r5, [r4, #28]
 800e2c8:	77a5      	strb	r5, [r4, #30]
 800e2ca:	6803      	ldr	r3, [r0, #0]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	4798      	blx	r3
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	b1f8      	cbz	r0, 800e314 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e2d4:	68e0      	ldr	r0, [r4, #12]
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	6803      	ldr	r3, [r0, #0]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	4798      	blx	r3
 800e2de:	7b43      	ldrb	r3, [r0, #13]
 800e2e0:	7a82      	ldrb	r2, [r0, #10]
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	83a3      	strh	r3, [r4, #28]
 800e2ee:	7a63      	ldrb	r3, [r4, #9]
 800e2f0:	2b04      	cmp	r3, #4
 800e2f2:	d10f      	bne.n	800e314 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e2f4:	68e0      	ldr	r0, [r4, #12]
 800e2f6:	462a      	mov	r2, r5
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	6803      	ldr	r3, [r0, #0]
 800e2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2fe:	4798      	blx	r3
 800e300:	7b6b      	ldrb	r3, [r5, #13]
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e308:	7aab      	ldrb	r3, [r5, #10]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	4418      	add	r0, r3
 800e30e:	8ba3      	ldrh	r3, [r4, #28]
 800e310:	4418      	add	r0, r3
 800e312:	83a0      	strh	r0, [r4, #28]
 800e314:	4620      	mov	r0, r4
 800e316:	bd70      	pop	{r4, r5, r6, pc}

0800e318 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	2400      	movs	r4, #0
 800e31e:	b085      	sub	sp, #20
 800e320:	4681      	mov	r9, r0
 800e322:	4688      	mov	r8, r1
 800e324:	4692      	mov	sl, r2
 800e326:	469b      	mov	fp, r3
 800e328:	4627      	mov	r7, r4
 800e32a:	4625      	mov	r5, r4
 800e32c:	4626      	mov	r6, r4
 800e32e:	4554      	cmp	r4, sl
 800e330:	da2a      	bge.n	800e388 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e332:	2300      	movs	r3, #0
 800e334:	9303      	str	r3, [sp, #12]
 800e336:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e33a:	429d      	cmp	r5, r3
 800e33c:	d004      	beq.n	800e348 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800e33e:	f242 030b 	movw	r3, #8203	; 0x200b
 800e342:	429d      	cmp	r5, r3
 800e344:	bf18      	it	ne
 800e346:	462f      	movne	r7, r5
 800e348:	ab03      	add	r3, sp, #12
 800e34a:	4642      	mov	r2, r8
 800e34c:	4659      	mov	r1, fp
 800e34e:	4648      	mov	r0, r9
 800e350:	f002 ff36 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e354:	4605      	mov	r5, r0
 800e356:	b1b8      	cbz	r0, 800e388 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e358:	280a      	cmp	r0, #10
 800e35a:	d015      	beq.n	800e388 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e35c:	9a03      	ldr	r2, [sp, #12]
 800e35e:	b18a      	cbz	r2, 800e384 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800e360:	7b50      	ldrb	r0, [r2, #13]
 800e362:	4639      	mov	r1, r7
 800e364:	7a93      	ldrb	r3, [r2, #10]
 800e366:	0040      	lsls	r0, r0, #1
 800e368:	8895      	ldrh	r5, [r2, #4]
 800e36a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800e36e:	4303      	orrs	r3, r0
 800e370:	4640      	mov	r0, r8
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	f8d8 3000 	ldr.w	r3, [r8]
 800e378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e37a:	4798      	blx	r3
 800e37c:	9b01      	ldr	r3, [sp, #4]
 800e37e:	4418      	add	r0, r3
 800e380:	4406      	add	r6, r0
 800e382:	b2b6      	uxth	r6, r6
 800e384:	3401      	adds	r4, #1
 800e386:	e7d2      	b.n	800e32e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800e388:	4630      	mov	r0, r6
 800e38a:	b005      	add	sp, #20
 800e38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e390 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800e390:	2a02      	cmp	r2, #2
 800e392:	b530      	push	{r4, r5, lr}
 800e394:	d011      	beq.n	800e3ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800e396:	2a03      	cmp	r2, #3
 800e398:	d01c      	beq.n	800e3d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800e39a:	2a01      	cmp	r2, #1
 800e39c:	d10c      	bne.n	800e3b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e39e:	888b      	ldrh	r3, [r1, #4]
 800e3a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800e3a4:	8801      	ldrh	r1, [r0, #0]
 800e3a6:	1a9b      	subs	r3, r3, r2
 800e3a8:	8844      	ldrh	r4, [r0, #2]
 800e3aa:	1a5b      	subs	r3, r3, r1
 800e3ac:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e3b0:	8004      	strh	r4, [r0, #0]
 800e3b2:	8043      	strh	r3, [r0, #2]
 800e3b4:	8081      	strh	r1, [r0, #4]
 800e3b6:	80c2      	strh	r2, [r0, #6]
 800e3b8:	bd30      	pop	{r4, r5, pc}
 800e3ba:	88cb      	ldrh	r3, [r1, #6]
 800e3bc:	88c2      	ldrh	r2, [r0, #6]
 800e3be:	1a9b      	subs	r3, r3, r2
 800e3c0:	8842      	ldrh	r2, [r0, #2]
 800e3c2:	1a9b      	subs	r3, r3, r2
 800e3c4:	888a      	ldrh	r2, [r1, #4]
 800e3c6:	8881      	ldrh	r1, [r0, #4]
 800e3c8:	8043      	strh	r3, [r0, #2]
 800e3ca:	1a52      	subs	r2, r2, r1
 800e3cc:	8801      	ldrh	r1, [r0, #0]
 800e3ce:	1a52      	subs	r2, r2, r1
 800e3d0:	8002      	strh	r2, [r0, #0]
 800e3d2:	e7f1      	b.n	800e3b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e3d4:	88cb      	ldrh	r3, [r1, #6]
 800e3d6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e3da:	8841      	ldrh	r1, [r0, #2]
 800e3dc:	1a9b      	subs	r3, r3, r2
 800e3de:	f9b0 5000 	ldrsh.w	r5, [r0]
 800e3e2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e3e6:	1a5b      	subs	r3, r3, r1
 800e3e8:	8045      	strh	r5, [r0, #2]
 800e3ea:	8082      	strh	r2, [r0, #4]
 800e3ec:	8003      	strh	r3, [r0, #0]
 800e3ee:	80c4      	strh	r4, [r0, #6]
 800e3f0:	e7e2      	b.n	800e3b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800e3f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800e3f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f6:	b09f      	sub	sp, #124	; 0x7c
 800e3f8:	9116      	str	r1, [sp, #88]	; 0x58
 800e3fa:	9317      	str	r3, [sp, #92]	; 0x5c
 800e3fc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e3fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e400:	8809      	ldrh	r1, [r1, #0]
 800e402:	889b      	ldrh	r3, [r3, #4]
 800e404:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800e408:	440b      	add	r3, r1
 800e40a:	9212      	str	r2, [sp, #72]	; 0x48
 800e40c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800e410:	b21b      	sxth	r3, r3
 800e412:	9011      	str	r0, [sp, #68]	; 0x44
 800e414:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800e418:	9310      	str	r3, [sp, #64]	; 0x40
 800e41a:	f8d8 3000 	ldr.w	r3, [r8]
 800e41e:	7a59      	ldrb	r1, [r3, #9]
 800e420:	7a1b      	ldrb	r3, [r3, #8]
 800e422:	9114      	str	r1, [sp, #80]	; 0x50
 800e424:	9315      	str	r3, [sp, #84]	; 0x54
 800e426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e42c:	2a00      	cmp	r2, #0
 800e42e:	d067      	beq.n	800e500 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800e430:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e434:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e436:	2b04      	cmp	r3, #4
 800e438:	bf14      	ite	ne
 800e43a:	2301      	movne	r3, #1
 800e43c:	2302      	moveq	r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	f04f 0900 	mov.w	r9, #0
 800e444:	930f      	str	r3, [sp, #60]	; 0x3c
 800e446:	464c      	mov	r4, r9
 800e448:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e44c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800e450:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e454:	4293      	cmp	r3, r2
 800e456:	f280 808c 	bge.w	800e572 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e45a:	2300      	movs	r3, #0
 800e45c:	931c      	str	r3, [sp, #112]	; 0x70
 800e45e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e462:	429c      	cmp	r4, r3
 800e464:	d006      	beq.n	800e474 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800e466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e468:	f242 020b 	movw	r2, #8203	; 0x200b
 800e46c:	4294      	cmp	r4, r2
 800e46e:	bf18      	it	ne
 800e470:	4623      	movne	r3, r4
 800e472:	930d      	str	r3, [sp, #52]	; 0x34
 800e474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e476:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e478:	f8d8 2000 	ldr.w	r2, [r8]
 800e47c:	428b      	cmp	r3, r1
 800e47e:	db41      	blt.n	800e504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800e480:	6813      	ldr	r3, [r2, #0]
 800e482:	4610      	mov	r0, r2
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	4798      	blx	r3
 800e488:	4604      	mov	r4, r0
 800e48a:	f8d8 0000 	ldr.w	r0, [r8]
 800e48e:	aa1d      	add	r2, sp, #116	; 0x74
 800e490:	4621      	mov	r1, r4
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	689e      	ldr	r6, [r3, #8]
 800e496:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e49a:	47b0      	blx	r6
 800e49c:	901c      	str	r0, [sp, #112]	; 0x70
 800e49e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	f000 80ea 	beq.w	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e4a8:	f242 030b 	movw	r3, #8203	; 0x200b
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	f000 80e5 	beq.w	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e4b2:	2c00      	cmp	r4, #0
 800e4b4:	f000 80f7 	beq.w	800e6a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e4b8:	2c0a      	cmp	r4, #10
 800e4ba:	d060      	beq.n	800e57e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e4bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e4be:	b36a      	cbz	r2, 800e51c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800e4c0:	8894      	ldrh	r4, [r2, #4]
 800e4c2:	f1bb 0f00 	cmp.w	fp, #0
 800e4c6:	d03b      	beq.n	800e540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800e4c8:	f892 900d 	ldrb.w	r9, [r2, #13]
 800e4cc:	f1bb 0f01 	cmp.w	fp, #1
 800e4d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800e4d4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800e4d8:	f892 900a 	ldrb.w	r9, [r2, #10]
 800e4dc:	ea49 0903 	orr.w	r9, r9, r3
 800e4e0:	d134      	bne.n	800e54c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800e4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e4:	eba5 0509 	sub.w	r5, r5, r9
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d14f      	bne.n	800e58c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4ee:	eb09 0305 	add.w	r3, r9, r5
 800e4f2:	4413      	add	r3, r2
 800e4f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e4f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	da51      	bge.n	800e5a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e4fe:	e038      	b.n	800e572 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e500:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e502:	e79d      	b.n	800e440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800e504:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e508:	4659      	mov	r1, fp
 800e50a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	ab1d      	add	r3, sp, #116	; 0x74
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	ab1c      	add	r3, sp, #112	; 0x70
 800e514:	f002 feac 	bl	8011270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800e518:	4604      	mov	r4, r0
 800e51a:	e7c0      	b.n	800e49e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800e51c:	f8d8 0000 	ldr.w	r0, [r8]
 800e520:	6803      	ldr	r3, [r0, #0]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	4798      	blx	r3
 800e526:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e52a:	4298      	cmp	r0, r3
 800e52c:	f000 80a6 	beq.w	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e530:	f242 030b 	movw	r3, #8203	; 0x200b
 800e534:	4298      	cmp	r0, r3
 800e536:	f000 80a1 	beq.w	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e53a:	f1bb 0f00 	cmp.w	fp, #0
 800e53e:	d100      	bne.n	800e542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800e540:	444d      	add	r5, r9
 800e542:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e544:	2a00      	cmp	r2, #0
 800e546:	d1bf      	bne.n	800e4c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800e548:	4691      	mov	r9, r2
 800e54a:	e097      	b.n	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 80ab 	beq.w	800e6aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800e554:	f1bb 0f00 	cmp.w	fp, #0
 800e558:	d118      	bne.n	800e58c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e55a:	f8d8 0000 	ldr.w	r0, [r8]
 800e55e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e560:	6803      	ldr	r3, [r0, #0]
 800e562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e564:	4798      	blx	r3
 800e566:	4405      	add	r5, r0
 800e568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e56a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e56c:	1aeb      	subs	r3, r5, r3
 800e56e:	4293      	cmp	r3, r2
 800e570:	dd17      	ble.n	800e5a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e572:	2c00      	cmp	r4, #0
 800e574:	f000 8097 	beq.w	800e6a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e578:	2c0a      	cmp	r4, #10
 800e57a:	f040 8085 	bne.w	800e688 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800e57e:	240a      	movs	r4, #10
 800e580:	fab4 f084 	clz	r0, r4
 800e584:	0940      	lsrs	r0, r0, #5
 800e586:	b01f      	add	sp, #124	; 0x7c
 800e588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58c:	f8d8 0000 	ldr.w	r0, [r8]
 800e590:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e592:	6803      	ldr	r3, [r0, #0]
 800e594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e596:	4798      	blx	r3
 800e598:	f1bb 0f01 	cmp.w	fp, #1
 800e59c:	eba5 0500 	sub.w	r5, r5, r0
 800e5a0:	d0a4      	beq.n	800e4ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800e5a2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e5a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e5a6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800e5aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e5ae:	7b43      	ldrb	r3, [r0, #13]
 800e5b0:	4429      	add	r1, r5
 800e5b2:	015b      	lsls	r3, r3, #5
 800e5b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e5b8:	7983      	ldrb	r3, [r0, #6]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	440b      	add	r3, r1
 800e5be:	42b3      	cmp	r3, r6
 800e5c0:	db5c      	blt.n	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e5c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5c4:	4299      	cmp	r1, r3
 800e5c6:	da59      	bge.n	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e5c8:	f8d8 0000 	ldr.w	r0, [r8]
 800e5cc:	42ae      	cmp	r6, r5
 800e5ce:	6803      	ldr	r3, [r0, #0]
 800e5d0:	bfcc      	ite	gt
 800e5d2:	1b76      	subgt	r6, r6, r5
 800e5d4:	2600      	movle	r6, #0
 800e5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d8:	bfc8      	it	gt
 800e5da:	b2b6      	uxthgt	r6, r6
 800e5dc:	4798      	blx	r3
 800e5de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e5e0:	7b5a      	ldrb	r2, [r3, #13]
 800e5e2:	00d1      	lsls	r1, r2, #3
 800e5e4:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800e5e8:	7a19      	ldrb	r1, [r3, #8]
 800e5ea:	4339      	orrs	r1, r7
 800e5ec:	0657      	lsls	r7, r2, #25
 800e5ee:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800e5f0:	bf48      	it	mi
 800e5f2:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800e5f6:	4407      	add	r7, r0
 800e5f8:	bf48      	it	mi
 800e5fa:	b209      	sxthmi	r1, r1
 800e5fc:	1a7f      	subs	r7, r7, r1
 800e5fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e600:	b2bf      	uxth	r7, r7
 800e602:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800e606:	fa0f fa87 	sxth.w	sl, r7
 800e60a:	4551      	cmp	r1, sl
 800e60c:	dd3a      	ble.n	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800e60e:	0112      	lsls	r2, r2, #4
 800e610:	79d8      	ldrb	r0, [r3, #7]
 800e612:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e616:	4302      	orrs	r2, r0
 800e618:	4492      	add	sl, r2
 800e61a:	4551      	cmp	r1, sl
 800e61c:	dc2e      	bgt.n	800e67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e61e:	1bcf      	subs	r7, r1, r7
 800e620:	468a      	mov	sl, r1
 800e622:	b2bf      	uxth	r7, r7
 800e624:	9319      	str	r3, [sp, #100]	; 0x64
 800e626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e628:	f8d8 0000 	ldr.w	r0, [r8]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	6801      	ldr	r1, [r0, #0]
 800e630:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e632:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e634:	9313      	str	r3, [sp, #76]	; 0x4c
 800e636:	9218      	str	r2, [sp, #96]	; 0x60
 800e638:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800e63a:	4788      	blx	r1
 800e63c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e642:	910b      	str	r1, [sp, #44]	; 0x2c
 800e644:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e648:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e64a:	910a      	str	r1, [sp, #40]	; 0x28
 800e64c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800e650:	9109      	str	r1, [sp, #36]	; 0x24
 800e652:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e656:	9305      	str	r3, [sp, #20]
 800e658:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e65a:	9206      	str	r2, [sp, #24]
 800e65c:	e9cd a601 	strd	sl, r6, [sp, #4]
 800e660:	442e      	add	r6, r5
 800e662:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800e666:	b236      	sxth	r6, r6
 800e668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e66a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800e66e:	9600      	str	r6, [sp, #0]
 800e670:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e67a:	47b0      	blx	r6
 800e67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e67e:	3301      	adds	r3, #1
 800e680:	930e      	str	r3, [sp, #56]	; 0x38
 800e682:	e6e5      	b.n	800e450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800e684:	2700      	movs	r7, #0
 800e686:	e7cd      	b.n	800e624 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800e688:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e68a:	3501      	adds	r5, #1
 800e68c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e68e:	429d      	cmp	r5, r3
 800e690:	f6bf af76 	bge.w	800e580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e694:	4659      	mov	r1, fp
 800e696:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e698:	f7fa fcca 	bl	8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e69c:	4604      	mov	r4, r0
 800e69e:	b110      	cbz	r0, 800e6a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e6a0:	280a      	cmp	r0, #10
 800e6a2:	d1f2      	bne.n	800e68a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800e6a4:	e76b      	b.n	800e57e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e6a6:	2400      	movs	r4, #0
 800e6a8:	e76a      	b.n	800e580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e6aa:	f1bb 0f00 	cmp.w	fp, #0
 800e6ae:	f43f af5b 	beq.w	800e568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800e6b2:	e776      	b.n	800e5a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800e6b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800e6b4:	b530      	push	{r4, r5, lr}
 800e6b6:	8a44      	ldrh	r4, [r0, #18]
 800e6b8:	8ac5      	ldrh	r5, [r0, #22]
 800e6ba:	82c3      	strh	r3, [r0, #22]
 800e6bc:	442c      	add	r4, r5
 800e6be:	1ae4      	subs	r4, r4, r3
 800e6c0:	8b03      	ldrh	r3, [r0, #24]
 800e6c2:	8244      	strh	r4, [r0, #18]
 800e6c4:	8a84      	ldrh	r4, [r0, #20]
 800e6c6:	4422      	add	r2, r4
 800e6c8:	440c      	add	r4, r1
 800e6ca:	1a59      	subs	r1, r3, r1
 800e6cc:	8342      	strh	r2, [r0, #26]
 800e6ce:	8284      	strh	r4, [r0, #20]
 800e6d0:	8301      	strh	r1, [r0, #24]
 800e6d2:	bd30      	pop	{r4, r5, pc}

0800e6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d8:	7a43      	ldrb	r3, [r0, #9]
 800e6da:	b087      	sub	sp, #28
 800e6dc:	4604      	mov	r4, r0
 800e6de:	460f      	mov	r7, r1
 800e6e0:	1eda      	subs	r2, r3, #3
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	2900      	cmp	r1, #0
 800e6e6:	d036      	beq.n	800e756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800e6e8:	2a01      	cmp	r2, #1
 800e6ea:	d932      	bls.n	800e752 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800e6ec:	1e58      	subs	r0, r3, #1
 800e6ee:	f1d0 0b00 	rsbs	fp, r0, #0
 800e6f2:	eb4b 0b00 	adc.w	fp, fp, r0
 800e6f6:	1e99      	subs	r1, r3, #2
 800e6f8:	424b      	negs	r3, r1
 800e6fa:	414b      	adcs	r3, r1
 800e6fc:	9303      	str	r3, [sp, #12]
 800e6fe:	2300      	movs	r3, #0
 800e700:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e704:	2500      	movs	r5, #0
 800e706:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800e70a:	46a9      	mov	r9, r5
 800e70c:	8265      	strh	r5, [r4, #18]
 800e70e:	82a5      	strh	r5, [r4, #20]
 800e710:	2300      	movs	r3, #0
 800e712:	9305      	str	r3, [sp, #20]
 800e714:	8823      	ldrh	r3, [r4, #0]
 800e716:	2b20      	cmp	r3, #32
 800e718:	d02b      	beq.n	800e772 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800e71a:	eba3 020a 	sub.w	r2, r3, sl
 800e71e:	4256      	negs	r6, r2
 800e720:	4156      	adcs	r6, r2
 800e722:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800e726:	4293      	cmp	r3, r2
 800e728:	d004      	beq.n	800e734 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800e72a:	4553      	cmp	r3, sl
 800e72c:	bf16      	itet	ne
 800e72e:	4699      	movne	r9, r3
 800e730:	2601      	moveq	r6, #1
 800e732:	2600      	movne	r6, #0
 800e734:	ab05      	add	r3, sp, #20
 800e736:	68e2      	ldr	r2, [r4, #12]
 800e738:	7a21      	ldrb	r1, [r4, #8]
 800e73a:	6860      	ldr	r0, [r4, #4]
 800e73c:	f002 fd40 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e740:	8020      	strh	r0, [r4, #0]
 800e742:	b9c8      	cbnz	r0, 800e778 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800e744:	8b22      	ldrh	r2, [r4, #24]
 800e746:	2300      	movs	r3, #0
 800e748:	4611      	mov	r1, r2
 800e74a:	4620      	mov	r0, r4
 800e74c:	f7ff ffb2 	bl	800e6b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e750:	e066      	b.n	800e820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800e752:	468b      	mov	fp, r1
 800e754:	e7cf      	b.n	800e6f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800e756:	3b01      	subs	r3, #1
 800e758:	2a01      	cmp	r2, #1
 800e75a:	9103      	str	r1, [sp, #12]
 800e75c:	468b      	mov	fp, r1
 800e75e:	bf8c      	ite	hi
 800e760:	2200      	movhi	r2, #0
 800e762:	2201      	movls	r2, #1
 800e764:	2b01      	cmp	r3, #1
 800e766:	9202      	str	r2, [sp, #8]
 800e768:	bf8c      	ite	hi
 800e76a:	2300      	movhi	r3, #0
 800e76c:	2301      	movls	r3, #1
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	e7c8      	b.n	800e704 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800e772:	4699      	mov	r9, r3
 800e774:	2601      	movs	r6, #1
 800e776:	e7dd      	b.n	800e734 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800e778:	8ae3      	ldrh	r3, [r4, #22]
 800e77a:	280a      	cmp	r0, #10
 800e77c:	f103 0301 	add.w	r3, r3, #1
 800e780:	82e3      	strh	r3, [r4, #22]
 800e782:	d0df      	beq.n	800e744 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800e784:	9a05      	ldr	r2, [sp, #20]
 800e786:	bb42      	cbnz	r2, 800e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800e788:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e78c:	4298      	cmp	r0, r3
 800e78e:	d001      	beq.n	800e794 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800e790:	4550      	cmp	r0, sl
 800e792:	d1bd      	bne.n	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e794:	8823      	ldrh	r3, [r4, #0]
 800e796:	8b21      	ldrh	r1, [r4, #24]
 800e798:	2b20      	cmp	r3, #32
 800e79a:	d001      	beq.n	800e7a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800e79c:	4553      	cmp	r3, sl
 800e79e:	d131      	bne.n	800e804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800e7a0:	2e00      	cmp	r6, #0
 800e7a2:	bf0a      	itet	eq
 800e7a4:	460d      	moveq	r5, r1
 800e7a6:	4630      	movne	r0, r6
 800e7a8:	2001      	moveq	r0, #1
 800e7aa:	440a      	add	r2, r1
 800e7ac:	8aa3      	ldrh	r3, [r4, #20]
 800e7ae:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800e7b2:	b292      	uxth	r2, r2
 800e7b4:	8322      	strh	r2, [r4, #24]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	2f00      	cmp	r7, #0
 800e7ba:	d03a      	beq.n	800e832 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800e7bc:	f1bb 0f00 	cmp.w	fp, #0
 800e7c0:	d102      	bne.n	800e7c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800e7c2:	9903      	ldr	r1, [sp, #12]
 800e7c4:	b301      	cbz	r1, 800e808 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e7c6:	b1f8      	cbz	r0, 800e808 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e7c8:	8ba1      	ldrh	r1, [r4, #28]
 800e7ca:	4419      	add	r1, r3
 800e7cc:	458c      	cmp	ip, r1
 800e7ce:	da2a      	bge.n	800e826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e7d0:	8a61      	ldrh	r1, [r4, #18]
 800e7d2:	b341      	cbz	r1, 800e826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e7d4:	4563      	cmp	r3, ip
 800e7d6:	dd9b      	ble.n	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e7d8:	e01c      	b.n	800e814 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800e7da:	8893      	ldrh	r3, [r2, #4]
 800e7dc:	4649      	mov	r1, r9
 800e7de:	8023      	strh	r3, [r4, #0]
 800e7e0:	f892 800d 	ldrb.w	r8, [r2, #13]
 800e7e4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800e7e8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800e7ec:	f892 800a 	ldrb.w	r8, [r2, #10]
 800e7f0:	ea48 0800 	orr.w	r8, r8, r0
 800e7f4:	68e0      	ldr	r0, [r4, #12]
 800e7f6:	6803      	ldr	r3, [r0, #0]
 800e7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7fa:	4798      	blx	r3
 800e7fc:	eb08 0200 	add.w	r2, r8, r0
 800e800:	b292      	uxth	r2, r2
 800e802:	e7c7      	b.n	800e794 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800e804:	2000      	movs	r0, #0
 800e806:	e7d0      	b.n	800e7aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800e808:	4563      	cmp	r3, ip
 800e80a:	dd81      	ble.n	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e80c:	8a63      	ldrh	r3, [r4, #18]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f43f af7e 	beq.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e814:	2301      	movs	r3, #1
 800e816:	8ba2      	ldrh	r2, [r4, #28]
 800e818:	77a3      	strb	r3, [r4, #30]
 800e81a:	8b63      	ldrh	r3, [r4, #26]
 800e81c:	4413      	add	r3, r2
 800e81e:	8363      	strh	r3, [r4, #26]
 800e820:	b007      	add	sp, #28
 800e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e826:	2300      	movs	r3, #0
 800e828:	4611      	mov	r1, r2
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7ff ff42 	bl	800e6b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e830:	e76e      	b.n	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e832:	4563      	cmp	r3, ip
 800e834:	dd14      	ble.n	800e860 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800e836:	9b02      	ldr	r3, [sp, #8]
 800e838:	b113      	cbz	r3, 800e840 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800e83a:	2301      	movs	r3, #1
 800e83c:	460a      	mov	r2, r1
 800e83e:	e783      	b.n	800e748 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f43f af64 	beq.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e848:	2800      	cmp	r0, #0
 800e84a:	f47f af61 	bne.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e84e:	b116      	cbz	r6, 800e856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800e850:	2301      	movs	r3, #1
 800e852:	462a      	mov	r2, r5
 800e854:	e779      	b.n	800e74a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800e856:	8a63      	ldrh	r3, [r4, #18]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f43f af59 	beq.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e85e:	e7df      	b.n	800e820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800e860:	2800      	cmp	r0, #0
 800e862:	f47f af55 	bne.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e866:	2e00      	cmp	r6, #0
 800e868:	f43f af52 	beq.w	800e710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e86c:	2301      	movs	r3, #1
 800e86e:	462a      	mov	r2, r5
 800e870:	e7db      	b.n	800e82a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800e872 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800e872:	b530      	push	{r4, r5, lr}
 800e874:	4605      	mov	r5, r0
 800e876:	b08b      	sub	sp, #44	; 0x2c
 800e878:	b191      	cbz	r1, 800e8a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800e87a:	2401      	movs	r4, #1
 800e87c:	e9cd 3100 	strd	r3, r1, [sp]
 800e880:	4613      	mov	r3, r2
 800e882:	4601      	mov	r1, r0
 800e884:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800e888:	a802      	add	r0, sp, #8
 800e88a:	f7ff fd0b 	bl	800e2a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e88e:	2100      	movs	r1, #0
 800e890:	a802      	add	r0, sp, #8
 800e892:	f7ff ff1f 	bl	800e6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e896:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e89a:	b163      	cbz	r3, 800e8b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800e89c:	3401      	adds	r4, #1
 800e89e:	e7f6      	b.n	800e88e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800e8a0:	2401      	movs	r4, #1
 800e8a2:	f002 fd85 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e8a6:	280a      	cmp	r0, #10
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	bf08      	it	eq
 800e8ac:	3401      	addeq	r4, #1
 800e8ae:	f002 fd7f 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d1f7      	bne.n	800e8a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800e8b6:	b2a0      	uxth	r0, r4
 800e8b8:	b00b      	add	sp, #44	; 0x2c
 800e8ba:	bd30      	pop	{r4, r5, pc}

0800e8bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c0:	b0db      	sub	sp, #364	; 0x16c
 800e8c2:	4689      	mov	r9, r1
 800e8c4:	461c      	mov	r4, r3
 800e8c6:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 800e8ca:	900a      	str	r0, [sp, #40]	; 0x28
 800e8cc:	f1ba 0f00 	cmp.w	sl, #0
 800e8d0:	f000 80a5 	beq.w	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 80a1 	beq.w	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800e8dc:	7ba3      	ldrb	r3, [r4, #14]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 809d 	beq.w	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800e8e4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e8e8:	6810      	ldr	r0, [r2, #0]
 800e8ea:	6851      	ldr	r1, [r2, #4]
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	4643      	mov	r3, r8
 800e8f0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800e8f4:	950e      	str	r5, [sp, #56]	; 0x38
 800e8f6:	af18      	add	r7, sp, #96	; 0x60
 800e8f8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800e8fc:	79a2      	ldrb	r2, [r4, #6]
 800e8fe:	c303      	stmia	r3!, {r0, r1}
 800e900:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800e904:	a90e      	add	r1, sp, #56	; 0x38
 800e906:	4640      	mov	r0, r8
 800e908:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800e90c:	f7ff fd40 	bl	800e390 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e910:	a90e      	add	r1, sp, #56	; 0x38
 800e912:	79a2      	ldrb	r2, [r4, #6]
 800e914:	4608      	mov	r0, r1
 800e916:	f7ff fd3b 	bl	800e390 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e91a:	4638      	mov	r0, r7
 800e91c:	f002 f910 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 800e920:	6820      	ldr	r0, [r4, #0]
 800e922:	6803      	ldr	r3, [r0, #0]
 800e924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e926:	4798      	blx	r3
 800e928:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800e92a:	4603      	mov	r3, r0
 800e92c:	4651      	mov	r1, sl
 800e92e:	4638      	mov	r0, r7
 800e930:	f002 f94b 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800e934:	7923      	ldrb	r3, [r4, #4]
 800e936:	6820      	ldr	r0, [r4, #0]
 800e938:	9308      	str	r3, [sp, #32]
 800e93a:	6803      	ldr	r3, [r0, #0]
 800e93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e93e:	4798      	blx	r3
 800e940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e944:	181e      	adds	r6, r3, r0
 800e946:	42ae      	cmp	r6, r5
 800e948:	dd06      	ble.n	800e958 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 800e94a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800e94e:	4282      	cmp	r2, r0
 800e950:	bfa4      	itt	ge
 800e952:	189d      	addge	r5, r3, r2
 800e954:	fb95 f5f6 	sdivge	r5, r5, r6
 800e958:	a82e      	add	r0, sp, #184	; 0xb8
 800e95a:	f002 f8f1 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 800e95e:	7c23      	ldrb	r3, [r4, #16]
 800e960:	b14b      	cbz	r3, 800e976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 800e962:	6820      	ldr	r0, [r4, #0]
 800e964:	6803      	ldr	r3, [r0, #0]
 800e966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e968:	4798      	blx	r3
 800e96a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800e96c:	4603      	mov	r3, r0
 800e96e:	4651      	mov	r1, sl
 800e970:	a82e      	add	r0, sp, #184	; 0xb8
 800e972:	f002 f92a 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800e976:	7c21      	ldrb	r1, [r4, #16]
 800e978:	a810      	add	r0, sp, #64	; 0x40
 800e97a:	7963      	ldrb	r3, [r4, #5]
 800e97c:	9101      	str	r1, [sp, #4]
 800e97e:	6821      	ldr	r1, [r4, #0]
 800e980:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800e984:	9100      	str	r1, [sp, #0]
 800e986:	a92e      	add	r1, sp, #184	; 0xb8
 800e988:	f7ff fc8c 	bl	800e2a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e98c:	7c23      	ldrb	r3, [r4, #16]
 800e98e:	b9bb      	cbnz	r3, 800e9c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 800e990:	fa1f fa86 	uxth.w	sl, r6
 800e994:	2d00      	cmp	r5, #0
 800e996:	dd45      	ble.n	800ea24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 800e998:	4638      	mov	r0, r7
 800e99a:	f002 fd09 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d03d      	beq.n	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800e9a2:	280a      	cmp	r0, #10
 800e9a4:	d1f6      	bne.n	800e994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800e9a6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800e9aa:	3d01      	subs	r5, #1
 800e9ac:	4453      	add	r3, sl
 800e9ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800e9b2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e9b6:	eba3 030a 	sub.w	r3, r3, sl
 800e9ba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800e9be:	e7e9      	b.n	800e994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800e9c0:	0073      	lsls	r3, r6, #1
 800e9c2:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800e9c6:	fa1f fa86 	uxth.w	sl, r6
 800e9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e9cc:	2d00      	cmp	r5, #0
 800e9ce:	dd29      	ble.n	800ea24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 800e9d0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800e9d4:	a810      	add	r0, sp, #64	; 0x40
 800e9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d8:	428b      	cmp	r3, r1
 800e9da:	bfd4      	ite	le
 800e9dc:	2100      	movle	r1, #0
 800e9de:	2101      	movgt	r1, #1
 800e9e0:	f7ff fe78 	bl	800e6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e9e4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	455b      	cmp	r3, fp
 800e9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9f0:	d005      	beq.n	800e9fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800e9f2:	7961      	ldrb	r1, [r4, #5]
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f7fa fb1b 	bl	8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9fc:	e7f4      	b.n	800e9e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 800e9fe:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800ea02:	3d01      	subs	r5, #1
 800ea04:	4453      	add	r3, sl
 800ea06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800ea0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ea0e:	eba3 030a 	sub.w	r3, r3, sl
 800ea12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ea16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1d6      	bne.n	800e9cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 800ea1e:	b05b      	add	sp, #364	; 0x16c
 800ea20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea24:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800ea28:	ad44      	add	r5, sp, #272	; 0x110
 800ea2a:	f04f 0b00 	mov.w	fp, #0
 800ea2e:	7c23      	ldrb	r3, [r4, #16]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d067      	beq.n	800eb04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800ea34:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800ea38:	a810      	add	r0, sp, #64	; 0x40
 800ea3a:	458a      	cmp	sl, r1
 800ea3c:	bfd4      	ite	le
 800ea3e:	2100      	movle	r1, #0
 800ea40:	2101      	movgt	r1, #1
 800ea42:	f7ff fe47 	bl	800e6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ea46:	9b08      	ldr	r3, [sp, #32]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d056      	beq.n	800eafa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800ea4c:	7c23      	ldrb	r3, [r4, #16]
 800ea4e:	2258      	movs	r2, #88	; 0x58
 800ea50:	4639      	mov	r1, r7
 800ea52:	4628      	mov	r0, r5
 800ea54:	9309      	str	r3, [sp, #36]	; 0x24
 800ea56:	f00f fcf5 	bl	801e444 <memcpy>
 800ea5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d059      	beq.n	800eb14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800ea60:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 800ea64:	7922      	ldrb	r2, [r4, #4]
 800ea66:	2a01      	cmp	r2, #1
 800ea68:	d13d      	bne.n	800eae6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 800ea6a:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800ea6e:	1ac0      	subs	r0, r0, r3
 800ea70:	2302      	movs	r3, #2
 800ea72:	fb90 f0f3 	sdiv	r0, r0, r3
 800ea76:	b200      	sxth	r0, r0
 800ea78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800ea7c:	4418      	add	r0, r3
 800ea7e:	7c23      	ldrb	r3, [r4, #16]
 800ea80:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d03a      	beq.n	800eafe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 800ea88:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 800ea8c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 800ea90:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800ea94:	9500      	str	r5, [sp, #0]
 800ea96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea98:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800ea9c:	e9cd b703 	strd	fp, r7, [sp, #12]
 800eaa0:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800eaa4:	464a      	mov	r2, r9
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	f7ff fca3 	bl	800e3f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d1b6      	bne.n	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800eab0:	b2b2      	uxth	r2, r6
 800eab2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800eab6:	4611      	mov	r1, r2
 800eab8:	4413      	add	r3, r2
 800eaba:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800eabe:	b21b      	sxth	r3, r3
 800eac0:	1a52      	subs	r2, r2, r1
 800eac2:	7c21      	ldrb	r1, [r4, #16]
 800eac4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800eac8:	b212      	sxth	r2, r2
 800eaca:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800eace:	b109      	cbz	r1, 800ead4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800ead0:	42b2      	cmp	r2, r6
 800ead2:	dba4      	blt.n	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800ead4:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800ead8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800eadc:	440a      	add	r2, r1
 800eade:	b212      	sxth	r2, r2
 800eae0:	4293      	cmp	r3, r2
 800eae2:	dda4      	ble.n	800ea2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 800eae4:	e79b      	b.n	800ea1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 800eae6:	2a02      	cmp	r2, #2
 800eae8:	d105      	bne.n	800eaf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 800eaea:	7be2      	ldrb	r2, [r4, #15]
 800eaec:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800eaf0:	1a80      	subs	r0, r0, r2
 800eaf2:	1ac0      	subs	r0, r0, r3
 800eaf4:	e7bf      	b.n	800ea76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	e7be      	b.n	800ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 800eafa:	7be0      	ldrb	r0, [r4, #15]
 800eafc:	e7bc      	b.n	800ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 800eafe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eb02:	e7c3      	b.n	800ea8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 800eb04:	9b08      	ldr	r3, [sp, #32]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d0f7      	beq.n	800eafa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800eb0a:	2258      	movs	r2, #88	; 0x58
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f00f fc98 	bl	801e444 <memcpy>
 800eb14:	2300      	movs	r3, #0
 800eb16:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eb1a:	6821      	ldr	r1, [r4, #0]
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	f7ff fbfb 	bl	800e318 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800eb22:	b203      	sxth	r3, r0
 800eb24:	e79e      	b.n	800ea64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0800eb26 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eb2e:	d00b      	beq.n	800eb48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d00e      	beq.n	800eb52 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d001      	beq.n	800eb3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800eb38:	1860      	adds	r0, r4, r1
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	8880      	ldrh	r0, [r0, #4]
 800eb3e:	4420      	add	r0, r4
 800eb40:	b200      	sxth	r0, r0
 800eb42:	1a80      	subs	r0, r0, r2
 800eb44:	3801      	subs	r0, #1
 800eb46:	e7f8      	b.n	800eb3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800eb48:	8880      	ldrh	r0, [r0, #4]
 800eb4a:	4420      	add	r0, r4
 800eb4c:	b200      	sxth	r0, r0
 800eb4e:	1a40      	subs	r0, r0, r1
 800eb50:	e7f8      	b.n	800eb44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800eb52:	18a0      	adds	r0, r4, r2
 800eb54:	e7f1      	b.n	800eb3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800eb56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800eb5e:	d006      	beq.n	800eb6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800eb60:	2b03      	cmp	r3, #3
 800eb62:	d00a      	beq.n	800eb7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	bf14      	ite	ne
 800eb68:	18a0      	addne	r0, r4, r2
 800eb6a:	1860      	addeq	r0, r4, r1
 800eb6c:	bd10      	pop	{r4, pc}
 800eb6e:	88c0      	ldrh	r0, [r0, #6]
 800eb70:	4420      	add	r0, r4
 800eb72:	b200      	sxth	r0, r0
 800eb74:	1a80      	subs	r0, r0, r2
 800eb76:	3801      	subs	r0, #1
 800eb78:	e7f8      	b.n	800eb6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800eb7a:	88c0      	ldrh	r0, [r0, #6]
 800eb7c:	4420      	add	r0, r4
 800eb7e:	b200      	sxth	r0, r0
 800eb80:	1a40      	subs	r0, r0, r1
 800eb82:	e7f8      	b.n	800eb76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0800eb84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800eb84:	4b01      	ldr	r3, [pc, #4]	; (800eb8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	4770      	bx	lr
 800eb8c:	20009bfc 	.word	0x20009bfc

0800eb90 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800eb90:	4603      	mov	r3, r0
 800eb92:	b1c8      	cbz	r0, 800ebc8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800eb94:	0c02      	lsrs	r2, r0, #16
 800eb96:	0412      	lsls	r2, r2, #16
 800eb98:	b9a2      	cbnz	r2, 800ebc4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800eb9a:	0403      	lsls	r3, r0, #16
 800eb9c:	2010      	movs	r0, #16
 800eb9e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800eba2:	bf04      	itt	eq
 800eba4:	021b      	lsleq	r3, r3, #8
 800eba6:	3008      	addeq	r0, #8
 800eba8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ebac:	bf04      	itt	eq
 800ebae:	011b      	lsleq	r3, r3, #4
 800ebb0:	3004      	addeq	r0, #4
 800ebb2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ebb6:	bf04      	itt	eq
 800ebb8:	009b      	lsleq	r3, r3, #2
 800ebba:	3002      	addeq	r0, #2
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	db04      	blt.n	800ebca <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800ebc0:	3001      	adds	r0, #1
 800ebc2:	4770      	bx	lr
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	e7ea      	b.n	800eb9e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800ebc8:	2020      	movs	r0, #32
 800ebca:	4770      	bx	lr

0800ebcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800ebcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd0:	b087      	sub	sp, #28
 800ebd2:	4681      	mov	r9, r0
 800ebd4:	4698      	mov	r8, r3
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	460d      	mov	r5, r1
 800ebda:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800ebde:	b981      	cbnz	r1, 800ec02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800ebe0:	b14b      	cbz	r3, 800ebf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	464a      	mov	r2, r9
 800ebe6:	4641      	mov	r1, r8
 800ebe8:	e9cd 4700 	strd	r4, r7, [sp]
 800ebec:	f7ff ffee 	bl	800ebcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ebf0:	b007      	add	sp, #28
 800ebf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ebfe:	603b      	str	r3, [r7, #0]
 800ec00:	e7f6      	b.n	800ebf0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ec02:	fa32 fa01 	lsrs.w	sl, r2, r1
 800ec06:	d107      	bne.n	800ec18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800ec08:	fb09 f602 	mul.w	r6, r9, r2
 800ec0c:	fbb6 f0f4 	udiv	r0, r6, r4
 800ec10:	fb04 6610 	mls	r6, r4, r0, r6
 800ec14:	603e      	str	r6, [r7, #0]
 800ec16:	e7eb      	b.n	800ebf0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ec18:	2601      	movs	r6, #1
 800ec1a:	fa09 fb01 	lsl.w	fp, r9, r1
 800ec1e:	408e      	lsls	r6, r1
 800ec20:	fbbb f3f4 	udiv	r3, fp, r4
 800ec24:	3e01      	subs	r6, #1
 800ec26:	9302      	str	r3, [sp, #8]
 800ec28:	fb0a f303 	mul.w	r3, sl, r3
 800ec2c:	4016      	ands	r6, r2
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7ff ffad 	bl	800eb90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ec36:	464a      	mov	r2, r9
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	e9cd 4700 	strd	r4, r7, [sp]
 800ec42:	f7ff ffc3 	bl	800ebcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ec46:	9b02      	ldr	r3, [sp, #8]
 800ec48:	4606      	mov	r6, r0
 800ec4a:	eb05 0108 	add.w	r1, r5, r8
 800ec4e:	fb04 bb13 	mls	fp, r4, r3, fp
 800ec52:	4658      	mov	r0, fp
 800ec54:	f7ff ff9c 	bl	800eb90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ec58:	ab05      	add	r3, sp, #20
 800ec5a:	465a      	mov	r2, fp
 800ec5c:	e9cd 4300 	strd	r4, r3, [sp]
 800ec60:	4603      	mov	r3, r0
 800ec62:	4650      	mov	r0, sl
 800ec64:	f7ff ffb2 	bl	800ebcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ec68:	6839      	ldr	r1, [r7, #0]
 800ec6a:	9a05      	ldr	r2, [sp, #20]
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	4411      	add	r1, r2
 800ec70:	fbb1 f2f4 	udiv	r2, r1, r4
 800ec74:	18d3      	adds	r3, r2, r3
 800ec76:	fb04 1412 	mls	r4, r4, r2, r1
 800ec7a:	441e      	add	r6, r3
 800ec7c:	603c      	str	r4, [r7, #0]
 800ec7e:	4430      	add	r0, r6
 800ec80:	e7b6      	b.n	800ebf0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800ec82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800ec82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec86:	b085      	sub	sp, #20
 800ec88:	f1b0 0900 	subs.w	r9, r0, #0
 800ec8c:	461d      	mov	r5, r3
 800ec8e:	4617      	mov	r7, r2
 800ec90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ec92:	bfbb      	ittet	lt
 800ec94:	f1c9 0900 	rsblt	r9, r9, #0
 800ec98:	f04f 36ff 	movlt.w	r6, #4294967295
 800ec9c:	2601      	movge	r6, #1
 800ec9e:	6823      	ldrlt	r3, [r4, #0]
 800eca0:	bfbc      	itt	lt
 800eca2:	425b      	neglt	r3, r3
 800eca4:	6023      	strlt	r3, [r4, #0]
 800eca6:	2a00      	cmp	r2, #0
 800eca8:	da04      	bge.n	800ecb4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	4257      	negs	r7, r2
 800ecae:	4276      	negs	r6, r6
 800ecb0:	425b      	negs	r3, r3
 800ecb2:	6023      	str	r3, [r4, #0]
 800ecb4:	2d00      	cmp	r5, #0
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	bfba      	itte	lt
 800ecba:	426d      	neglt	r5, r5
 800ecbc:	f04f 38ff 	movlt.w	r8, #4294967295
 800ecc0:	f04f 0801 	movge.w	r8, #1
 800ecc4:	f7ff ff64 	bl	800eb90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ecc8:	ab03      	add	r3, sp, #12
 800ecca:	463a      	mov	r2, r7
 800eccc:	e9cd 5300 	strd	r5, r3, [sp]
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	f7ff ff7a 	bl	800ebcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	9a03      	ldr	r2, [sp, #12]
 800ecdc:	4546      	cmp	r6, r8
 800ecde:	441a      	add	r2, r3
 800ece0:	fb92 f3f5 	sdiv	r3, r2, r5
 800ece4:	4418      	add	r0, r3
 800ece6:	fb05 2313 	mls	r3, r5, r3, r2
 800ecea:	bf18      	it	ne
 800ecec:	4240      	negne	r0, r0
 800ecee:	1c72      	adds	r2, r6, #1
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	d105      	bne.n	800ed00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f1c3 0200 	rsb	r2, r3, #0
 800ecfa:	db0b      	blt.n	800ed14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800ecfc:	6022      	str	r2, [r4, #0]
 800ecfe:	e006      	b.n	800ed0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ed00:	2e01      	cmp	r6, #1
 800ed02:	d104      	bne.n	800ed0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	da02      	bge.n	800ed0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ed08:	442b      	add	r3, r5
 800ed0a:	3801      	subs	r0, #1
 800ed0c:	6023      	str	r3, [r4, #0]
 800ed0e:	b005      	add	sp, #20
 800ed10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed14:	3801      	subs	r0, #1
 800ed16:	1b52      	subs	r2, r2, r5
 800ed18:	e7f0      	b.n	800ecfc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800ed1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800ed1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ed20:	4c1c      	ldr	r4, [pc, #112]	; (800ed94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800ed22:	4605      	mov	r5, r0
 800ed24:	6807      	ldr	r7, [r0, #0]
 800ed26:	69a3      	ldr	r3, [r4, #24]
 800ed28:	b92b      	cbnz	r3, 800ed36 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800ed2a:	6840      	ldr	r0, [r0, #4]
 800ed2c:	e9c5 7000 	strd	r7, r0, [r5]
 800ed30:	b004      	add	sp, #16
 800ed32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed36:	f04f 0802 	mov.w	r8, #2
 800ed3a:	68a2      	ldr	r2, [r4, #8]
 800ed3c:	ae04      	add	r6, sp, #16
 800ed3e:	6820      	ldr	r0, [r4, #0]
 800ed40:	fb93 f1f8 	sdiv	r1, r3, r8
 800ed44:	440a      	add	r2, r1
 800ed46:	69e1      	ldr	r1, [r4, #28]
 800ed48:	f846 2d04 	str.w	r2, [r6, #-4]!
 800ed4c:	463a      	mov	r2, r7
 800ed4e:	9600      	str	r6, [sp, #0]
 800ed50:	f7ff ff97 	bl	800ec82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ed54:	69a3      	ldr	r3, [r4, #24]
 800ed56:	4607      	mov	r7, r0
 800ed58:	686a      	ldr	r2, [r5, #4]
 800ed5a:	6a21      	ldr	r1, [r4, #32]
 800ed5c:	9600      	str	r6, [sp, #0]
 800ed5e:	6860      	ldr	r0, [r4, #4]
 800ed60:	f7ff ff8f 	bl	800ec82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ed64:	69a3      	ldr	r3, [r4, #24]
 800ed66:	6962      	ldr	r2, [r4, #20]
 800ed68:	4407      	add	r7, r0
 800ed6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed6c:	9600      	str	r6, [sp, #0]
 800ed6e:	68e0      	ldr	r0, [r4, #12]
 800ed70:	fb93 f8f8 	sdiv	r8, r3, r8
 800ed74:	4442      	add	r2, r8
 800ed76:	9203      	str	r2, [sp, #12]
 800ed78:	682a      	ldr	r2, [r5, #0]
 800ed7a:	f7ff ff82 	bl	800ec82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ed7e:	4680      	mov	r8, r0
 800ed80:	9600      	str	r6, [sp, #0]
 800ed82:	69a3      	ldr	r3, [r4, #24]
 800ed84:	686a      	ldr	r2, [r5, #4]
 800ed86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ed88:	6920      	ldr	r0, [r4, #16]
 800ed8a:	f7ff ff7a 	bl	800ec82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ed8e:	4440      	add	r0, r8
 800ed90:	e7cc      	b.n	800ed2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ed92:	bf00      	nop
 800ed94:	20009c00 	.word	0x20009c00

0800ed98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ed9a:	b510      	push	{r4, lr}
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d108      	bne.n	800edb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800eda2:	4b06      	ldr	r3, [pc, #24]	; (800edbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800eda4:	880c      	ldrh	r4, [r1, #0]
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800edac:	3b01      	subs	r3, #1
 800edae:	1b1b      	subs	r3, r3, r4
 800edb0:	8003      	strh	r3, [r0, #0]
 800edb2:	800a      	strh	r2, [r1, #0]
 800edb4:	bd10      	pop	{r4, pc}
 800edb6:	bf00      	nop
 800edb8:	20009bec 	.word	0x20009bec
 800edbc:	20009bf0 	.word	0x20009bf0

0800edc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800edc0:	4b0a      	ldr	r3, [pc, #40]	; (800edec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800edc2:	b510      	push	{r4, lr}
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d10e      	bne.n	800ede8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800edca:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800edce:	8843      	ldrh	r3, [r0, #2]
 800edd0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800edd4:	18ca      	adds	r2, r1, r3
 800edd6:	4b06      	ldr	r3, [pc, #24]	; (800edf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800edd8:	8044      	strh	r4, [r0, #2]
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	1a9b      	subs	r3, r3, r2
 800edde:	8003      	strh	r3, [r0, #0]
 800ede0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ede4:	8081      	strh	r1, [r0, #4]
 800ede6:	80c3      	strh	r3, [r0, #6]
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	bf00      	nop
 800edec:	20009bec 	.word	0x20009bec
 800edf0:	20009be8 	.word	0x20009be8

0800edf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800edf4:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800edf6:	b510      	push	{r4, lr}
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d108      	bne.n	800ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800edfe:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ee02:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ee06:	8003      	strh	r3, [r0, #0]
 800ee08:	8893      	ldrh	r3, [r2, #4]
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	1b1b      	subs	r3, r3, r4
 800ee0e:	800b      	strh	r3, [r1, #0]
 800ee10:	bd10      	pop	{r4, pc}
 800ee12:	bf00      	nop
 800ee14:	20009bec 	.word	0x20009bec

0800ee18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800ee18:	4b08      	ldr	r3, [pc, #32]	; (800ee3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800ee1a:	b513      	push	{r0, r1, r4, lr}
 800ee1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee20:	2400      	movs	r4, #0
 800ee22:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 800ee24:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ee28:	466a      	mov	r2, sp
 800ee2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2e:	9400      	str	r4, [sp, #0]
 800ee30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee34:	f7ff ffde 	bl	800edf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800ee38:	b002      	add	sp, #8
 800ee3a:	bd10      	pop	{r4, pc}
 800ee3c:	20009be8 	.word	0x20009be8
 800ee40:	20009bea 	.word	0x20009bea

0800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800ee44:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800ee46:	460a      	mov	r2, r1
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d10d      	bne.n	800ee6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800ee50:	8881      	ldrh	r1, [r0, #4]
 800ee52:	8803      	ldrh	r3, [r0, #0]
 800ee54:	440b      	add	r3, r1
 800ee56:	4601      	mov	r1, r0
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	f821 3b02 	strh.w	r3, [r1], #2
 800ee5e:	f7ff ffc9 	bl	800edf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800ee62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ee66:	88c2      	ldrh	r2, [r0, #6]
 800ee68:	80c3      	strh	r3, [r0, #6]
 800ee6a:	8082      	strh	r2, [r0, #4]
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	bf00      	nop
 800ee70:	20009bec 	.word	0x20009bec

0800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800ee74:	4b09      	ldr	r3, [pc, #36]	; (800ee9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800ee76:	b507      	push	{r0, r1, r2, lr}
 800ee78:	2100      	movs	r1, #0
 800ee7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee7e:	4b08      	ldr	r3, [pc, #32]	; (800eea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 800ee80:	9100      	str	r1, [sp, #0]
 800ee82:	4669      	mov	r1, sp
 800ee84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee88:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ee8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee90:	f7ff ffd8 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800ee94:	b003      	add	sp, #12
 800ee96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee9a:	bf00      	nop
 800ee9c:	20009be8 	.word	0x20009be8
 800eea0:	20009bea 	.word	0x20009bea

0800eea4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800eea4:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800eea6:	2100      	movs	r1, #0
 800eea8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eeac:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800eeae:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800eeb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eeb6:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800eeba:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800eebe:	4770      	bx	lr
 800eec0:	20009be8 	.word	0x20009be8
 800eec4:	20009bea 	.word	0x20009bea

0800eec8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800eec8:	4b03      	ldr	r3, [pc, #12]	; (800eed8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	b110      	cbz	r0, 800eed4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800eece:	6803      	ldr	r3, [r0, #0]
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	4718      	bx	r3
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	20009c30 	.word	0x20009c30

0800eedc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800eedc:	4770      	bx	lr
	...

0800eee0 <_ZN8touchgfx11Application4drawEv>:
 800eee0:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <_ZN8touchgfx11Application4drawEv+0x28>)
 800eee2:	b507      	push	{r0, r1, r2, lr}
 800eee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eee8:	2100      	movs	r1, #0
 800eeea:	4b08      	ldr	r3, [pc, #32]	; (800ef0c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800eeec:	9100      	str	r1, [sp, #0]
 800eeee:	4669      	mov	r1, sp
 800eef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eef4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800eef8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eefc:	6803      	ldr	r3, [r0, #0]
 800eefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef00:	4798      	blx	r3
 800ef02:	b003      	add	sp, #12
 800ef04:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef08:	20009be8 	.word	0x20009be8
 800ef0c:	20009bea 	.word	0x20009bea

0800ef10 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ef10:	4b03      	ldr	r3, [pc, #12]	; (800ef20 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	b110      	cbz	r0, 800ef1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ef16:	6803      	ldr	r3, [r0, #0]
 800ef18:	69db      	ldr	r3, [r3, #28]
 800ef1a:	4718      	bx	r3
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	20009c30 	.word	0x20009c30

0800ef24 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ef24:	4b03      	ldr	r3, [pc, #12]	; (800ef34 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ef26:	6818      	ldr	r0, [r3, #0]
 800ef28:	b110      	cbz	r0, 800ef30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ef2a:	6803      	ldr	r3, [r0, #0]
 800ef2c:	6a1b      	ldr	r3, [r3, #32]
 800ef2e:	4718      	bx	r3
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	20009c30 	.word	0x20009c30

0800ef38 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ef38:	4b03      	ldr	r3, [pc, #12]	; (800ef48 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ef3a:	6818      	ldr	r0, [r3, #0]
 800ef3c:	b110      	cbz	r0, 800ef44 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ef3e:	6803      	ldr	r3, [r0, #0]
 800ef40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef42:	4718      	bx	r3
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	20009c30 	.word	0x20009c30

0800ef4c <_ZN8touchgfx11Application15handleTickEventEv>:
 800ef4c:	b570      	push	{r4, r5, r6, lr}
 800ef4e:	4d34      	ldr	r5, [pc, #208]	; (800f020 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 800ef50:	4604      	mov	r4, r0
 800ef52:	6828      	ldr	r0, [r5, #0]
 800ef54:	b140      	cbz	r0, 800ef68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ef56:	7a03      	ldrb	r3, [r0, #8]
 800ef58:	b933      	cbnz	r3, 800ef68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ef5a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800ef5e:	6803      	ldr	r3, [r0, #0]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef66:	4718      	bx	r3
 800ef68:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800ef6c:	b97b      	cbnz	r3, 800ef8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ef6e:	b170      	cbz	r0, 800ef8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ef70:	7a03      	ldrb	r3, [r0, #8]
 800ef72:	b163      	cbz	r3, 800ef8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ef74:	4b2b      	ldr	r3, [pc, #172]	; (800f024 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	b110      	cbz	r0, 800ef80 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800ef7a:	6803      	ldr	r3, [r0, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	4798      	blx	r3
 800ef80:	6828      	ldr	r0, [r5, #0]
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	4798      	blx	r3
 800ef88:	2301      	movs	r3, #1
 800ef8a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800ef8e:	2500      	movs	r5, #0
 800ef90:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800ef94:	42a8      	cmp	r0, r5
 800ef96:	dd0c      	ble.n	800efb2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800ef98:	1963      	adds	r3, r4, r5
 800ef9a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800ef9e:	b132      	cbz	r2, 800efae <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800efa0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800efa4:	4413      	add	r3, r2
 800efa6:	6858      	ldr	r0, [r3, #4]
 800efa8:	6803      	ldr	r3, [r0, #0]
 800efaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efac:	4798      	blx	r3
 800efae:	3501      	adds	r5, #1
 800efb0:	e7ee      	b.n	800ef90 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800efb2:	2300      	movs	r3, #0
 800efb4:	461a      	mov	r2, r3
 800efb6:	4298      	cmp	r0, r3
 800efb8:	d114      	bne.n	800efe4 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 800efba:	1d25      	adds	r5, r4, #4
 800efbc:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800efc0:	1e48      	subs	r0, r1, #1
 800efc2:	b280      	uxth	r0, r0
 800efc4:	4291      	cmp	r1, r2
 800efc6:	dd24      	ble.n	800f012 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 800efc8:	4288      	cmp	r0, r1
 800efca:	d2fb      	bcs.n	800efc4 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 800efcc:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800efd0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800efd4:	3304      	adds	r3, #4
 800efd6:	428b      	cmp	r3, r1
 800efd8:	d018      	beq.n	800f00c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800efda:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800efde:	f843 6c04 	str.w	r6, [r3, #-4]
 800efe2:	e7f8      	b.n	800efd6 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 800efe4:	18e1      	adds	r1, r4, r3
 800efe6:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800efea:	b16d      	cbz	r5, 800f008 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 800efec:	429a      	cmp	r2, r3
 800efee:	d00a      	beq.n	800f006 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 800eff0:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800eff4:	4431      	add	r1, r6
 800eff6:	684e      	ldr	r6, [r1, #4]
 800eff8:	b291      	uxth	r1, r2
 800effa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800effe:	604e      	str	r6, [r1, #4]
 800f000:	18a1      	adds	r1, r4, r2
 800f002:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800f006:	3201      	adds	r2, #1
 800f008:	3301      	adds	r3, #1
 800f00a:	e7d4      	b.n	800efb6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800f00c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800f010:	e7d4      	b.n	800efbc <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800f012:	4b04      	ldr	r3, [pc, #16]	; (800f024 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 800f014:	6818      	ldr	r0, [r3, #0]
 800f016:	b110      	cbz	r0, 800f01e <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 800f018:	6803      	ldr	r3, [r0, #0]
 800f01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01c:	e7a1      	b.n	800ef62 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800f01e:	bd70      	pop	{r4, r5, r6, pc}
 800f020:	20009c34 	.word	0x20009c34
 800f024:	20009c30 	.word	0x20009c30

0800f028 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	4606      	mov	r6, r0
 800f02c:	460c      	mov	r4, r1
 800f02e:	b929      	cbnz	r1, 800f03c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800f030:	4b0c      	ldr	r3, [pc, #48]	; (800f064 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800f032:	2164      	movs	r1, #100	; 0x64
 800f034:	4a0c      	ldr	r2, [pc, #48]	; (800f068 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800f036:	480d      	ldr	r0, [pc, #52]	; (800f06c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800f038:	f00f f986 	bl	801e348 <__assert_func>
 800f03c:	2300      	movs	r3, #0
 800f03e:	4d0c      	ldr	r5, [pc, #48]	; (800f070 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800f040:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800f044:	6828      	ldr	r0, [r5, #0]
 800f046:	b110      	cbz	r0, 800f04e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800f048:	6803      	ldr	r3, [r0, #0]
 800f04a:	695b      	ldr	r3, [r3, #20]
 800f04c:	4798      	blx	r3
 800f04e:	602c      	str	r4, [r5, #0]
 800f050:	4620      	mov	r0, r4
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	4798      	blx	r3
 800f058:	6833      	ldr	r3, [r6, #0]
 800f05a:	4630      	mov	r0, r6
 800f05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f05e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f062:	4718      	bx	r3
 800f064:	08021ad8 	.word	0x08021ad8
 800f068:	08021bd0 	.word	0x08021bd0
 800f06c:	08021ae2 	.word	0x08021ae2
 800f070:	20009c30 	.word	0x20009c30

0800f074 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800f074:	b510      	push	{r4, lr}
 800f076:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f07a:	888a      	ldrh	r2, [r1, #4]
 800f07c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f080:	4422      	add	r2, r4
 800f082:	b212      	sxth	r2, r2
 800f084:	4293      	cmp	r3, r2
 800f086:	da15      	bge.n	800f0b4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f088:	8882      	ldrh	r2, [r0, #4]
 800f08a:	4413      	add	r3, r2
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	429c      	cmp	r4, r3
 800f090:	da10      	bge.n	800f0b4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f092:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f096:	88c9      	ldrh	r1, [r1, #6]
 800f098:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f09c:	4419      	add	r1, r3
 800f09e:	b209      	sxth	r1, r1
 800f0a0:	428a      	cmp	r2, r1
 800f0a2:	da07      	bge.n	800f0b4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f0a4:	88c0      	ldrh	r0, [r0, #6]
 800f0a6:	4410      	add	r0, r2
 800f0a8:	b200      	sxth	r0, r0
 800f0aa:	4283      	cmp	r3, r0
 800f0ac:	bfac      	ite	ge
 800f0ae:	2000      	movge	r0, #0
 800f0b0:	2001      	movlt	r0, #1
 800f0b2:	bd10      	pop	{r4, pc}
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e7fc      	b.n	800f0b2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f0b8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f0be:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f0c2:	42ac      	cmp	r4, r5
 800f0c4:	db18      	blt.n	800f0f8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f0c6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f0ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	db12      	blt.n	800f0f8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f0d2:	8886      	ldrh	r6, [r0, #4]
 800f0d4:	4435      	add	r5, r6
 800f0d6:	888e      	ldrh	r6, [r1, #4]
 800f0d8:	4434      	add	r4, r6
 800f0da:	b22d      	sxth	r5, r5
 800f0dc:	b224      	sxth	r4, r4
 800f0de:	42a5      	cmp	r5, r4
 800f0e0:	db0a      	blt.n	800f0f8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f0e2:	88c0      	ldrh	r0, [r0, #6]
 800f0e4:	4418      	add	r0, r3
 800f0e6:	88cb      	ldrh	r3, [r1, #6]
 800f0e8:	441a      	add	r2, r3
 800f0ea:	b200      	sxth	r0, r0
 800f0ec:	b212      	sxth	r2, r2
 800f0ee:	4290      	cmp	r0, r2
 800f0f0:	bfb4      	ite	lt
 800f0f2:	2000      	movlt	r0, #0
 800f0f4:	2001      	movge	r0, #1
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	e7fc      	b.n	800f0f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800f0fc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	4604      	mov	r4, r0
 800f100:	4608      	mov	r0, r1
 800f102:	460d      	mov	r5, r1
 800f104:	f7fd fa59 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f108:	b978      	cbnz	r0, 800f12a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f10a:	4620      	mov	r0, r4
 800f10c:	f7fd fa55 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f110:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f114:	b150      	cbz	r0, 800f12c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f116:	8026      	strh	r6, [r4, #0]
 800f118:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f11c:	8063      	strh	r3, [r4, #2]
 800f11e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f122:	80a3      	strh	r3, [r4, #4]
 800f124:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f128:	80e3      	strh	r3, [r4, #6]
 800f12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f12c:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f130:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f134:	42b1      	cmp	r1, r6
 800f136:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f13a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f13e:	460f      	mov	r7, r1
 800f140:	88ed      	ldrh	r5, [r5, #6]
 800f142:	bfa8      	it	ge
 800f144:	4637      	movge	r7, r6
 800f146:	4293      	cmp	r3, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	4466      	add	r6, ip
 800f14c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f150:	bfa8      	it	ge
 800f152:	4610      	movge	r0, r2
 800f154:	442a      	add	r2, r5
 800f156:	88e5      	ldrh	r5, [r4, #6]
 800f158:	4461      	add	r1, ip
 800f15a:	b236      	sxth	r6, r6
 800f15c:	8027      	strh	r7, [r4, #0]
 800f15e:	442b      	add	r3, r5
 800f160:	b209      	sxth	r1, r1
 800f162:	b212      	sxth	r2, r2
 800f164:	8060      	strh	r0, [r4, #2]
 800f166:	b21b      	sxth	r3, r3
 800f168:	428e      	cmp	r6, r1
 800f16a:	bfac      	ite	ge
 800f16c:	ebc7 0106 	rsbge	r1, r7, r6
 800f170:	ebc7 0101 	rsblt	r1, r7, r1
 800f174:	429a      	cmp	r2, r3
 800f176:	bfac      	ite	ge
 800f178:	ebc0 0202 	rsbge	r2, r0, r2
 800f17c:	ebc0 0203 	rsblt	r2, r0, r3
 800f180:	80a1      	strh	r1, [r4, #4]
 800f182:	80e2      	strh	r2, [r4, #6]
 800f184:	e7d1      	b.n	800f12a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800f188 <_ZN8touchgfx11Application11getInstanceEv>:
 800f188:	4b01      	ldr	r3, [pc, #4]	; (800f190 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800f18a:	6818      	ldr	r0, [r3, #0]
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20009c40 	.word	0x20009c40

0800f194 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	2200      	movs	r2, #0
 800f198:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 800f19c:	1d04      	adds	r4, r0, #4
 800f19e:	b295      	uxth	r5, r2
 800f1a0:	42ab      	cmp	r3, r5
 800f1a2:	d90e      	bls.n	800f1c2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 800f1a4:	f854 6b04 	ldr.w	r6, [r4], #4
 800f1a8:	4615      	mov	r5, r2
 800f1aa:	3201      	adds	r2, #1
 800f1ac:	428e      	cmp	r6, r1
 800f1ae:	d1f6      	bne.n	800f19e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 800f1b0:	4428      	add	r0, r5
 800f1b2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800f1b6:	2bff      	cmp	r3, #255	; 0xff
 800f1b8:	d002      	beq.n	800f1c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d106      	bne.n	800f1d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 800f1c8:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800f1cc:	4a08      	ldr	r2, [pc, #32]	; (800f1f0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 800f1ce:	4809      	ldr	r0, [pc, #36]	; (800f1f4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 800f1d0:	f00f f8ba 	bl	801e348 <__assert_func>
 800f1d4:	18c2      	adds	r2, r0, r3
 800f1d6:	2401      	movs	r4, #1
 800f1d8:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 800f1dc:	191a      	adds	r2, r3, r4
 800f1de:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 800f1e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f1e6:	6041      	str	r1, [r0, #4]
 800f1e8:	e7ea      	b.n	800f1c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 800f1ea:	bf00      	nop
 800f1ec:	08021b0c 	.word	0x08021b0c
 800f1f0:	08021c14 	.word	0x08021c14
 800f1f4:	08021ae2 	.word	0x08021ae2

0800f1f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 800f1f8:	b570      	push	{r4, r5, r6, lr}
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 800f200:	1d04      	adds	r4, r0, #4
 800f202:	b29a      	uxth	r2, r3
 800f204:	4296      	cmp	r6, r2
 800f206:	d90a      	bls.n	800f21e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 800f208:	f854 2b04 	ldr.w	r2, [r4], #4
 800f20c:	428a      	cmp	r2, r1
 800f20e:	d107      	bne.n	800f220 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 800f210:	18c5      	adds	r5, r0, r3
 800f212:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 800f216:	b11a      	cbz	r2, 800f220 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 800f218:	3a01      	subs	r2, #1
 800f21a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 800f21e:	bd70      	pop	{r4, r5, r6, pc}
 800f220:	3301      	adds	r3, #1
 800f222:	e7ee      	b.n	800f202 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0800f224 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800f224:	2300      	movs	r3, #0
 800f226:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800f22a:	30a8      	adds	r0, #168	; 0xa8
 800f22c:	f820 3c24 	strh.w	r3, [r0, #-36]
 800f230:	f802 3b01 	strb.w	r3, [r2], #1
 800f234:	4282      	cmp	r2, r0
 800f236:	d1fb      	bne.n	800f230 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800f238:	4770      	bx	lr

0800f23a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800f23a:	4603      	mov	r3, r0
 800f23c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800f240:	2200      	movs	r2, #0
 800f242:	801a      	strh	r2, [r3, #0]
 800f244:	3308      	adds	r3, #8
 800f246:	f823 2c06 	strh.w	r2, [r3, #-6]
 800f24a:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f24e:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f252:	428b      	cmp	r3, r1
 800f254:	d1f5      	bne.n	800f242 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800f256:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f25a:	4770      	bx	lr

0800f25c <_ZN8touchgfx11ApplicationC1Ev>:
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800f260:	2500      	movs	r5, #0
 800f262:	4604      	mov	r4, r0
 800f264:	30a8      	adds	r0, #168	; 0xa8
 800f266:	f840 3ca8 	str.w	r3, [r0, #-168]
 800f26a:	f820 5c24 	strh.w	r5, [r0, #-36]
 800f26e:	f7ff ffe4 	bl	800f23a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f272:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800f276:	f7ff ffe0 	bl	800f23a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f27a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800f27e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800f282:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800f286:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800f28a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800f28e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800f292:	490e      	ldr	r1, [pc, #56]	; (800f2cc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800f294:	480e      	ldr	r0, [pc, #56]	; (800f2d0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800f296:	f00e f9b3 	bl	801d600 <CRC_Lock>
 800f29a:	4e0e      	ldr	r6, [pc, #56]	; (800f2d4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800f29c:	4b0e      	ldr	r3, [pc, #56]	; (800f2d8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800f29e:	b158      	cbz	r0, 800f2b8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800f2a0:	801d      	strh	r5, [r3, #0]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	4a0d      	ldr	r2, [pc, #52]	; (800f2dc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	4a0d      	ldr	r2, [pc, #52]	; (800f2e0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800f2ac:	6033      	str	r3, [r6, #0]
 800f2ae:	6013      	str	r3, [r2, #0]
 800f2b0:	f7ff ffb8 	bl	800f224 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
 800f2b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2bc:	2002      	movs	r0, #2
 800f2be:	801a      	strh	r2, [r3, #0]
 800f2c0:	6030      	str	r0, [r6, #0]
 800f2c2:	f001 fa77 	bl	80107b4 <_ZN8touchgfx6Screen4drawEv>
 800f2c6:	e7ec      	b.n	800f2a2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800f2c8:	08021b94 	.word	0x08021b94
 800f2cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800f2d0:	f407a5c2 	.word	0xf407a5c2
 800f2d4:	20009c30 	.word	0x20009c30
 800f2d8:	20000018 	.word	0x20000018
 800f2dc:	20009c40 	.word	0x20009c40
 800f2e0:	20009c34 	.word	0x20009c34

0800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800f2e4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800f2e8:	428b      	cmp	r3, r1
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	d90e      	bls.n	800f30c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	428b      	cmp	r3, r1
 800f2f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800f2f8:	d908      	bls.n	800f30c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 800f2fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f2fe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	6062      	str	r2, [r4, #4]
 800f30c:	bd10      	pop	{r4, pc}
	...

0800f310 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800f310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f312:	466b      	mov	r3, sp
 800f314:	4604      	mov	r4, r0
 800f316:	e883 0006 	stmia.w	r3, {r1, r2}
 800f31a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800f31e:	2a07      	cmp	r2, #7
 800f320:	d906      	bls.n	800f330 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800f322:	4b09      	ldr	r3, [pc, #36]	; (800f348 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800f324:	f240 118f 	movw	r1, #399	; 0x18f
 800f328:	4a08      	ldr	r2, [pc, #32]	; (800f34c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800f32a:	4809      	ldr	r0, [pc, #36]	; (800f350 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800f32c:	f00f f80c 	bl	801e348 <__assert_func>
 800f330:	1c51      	adds	r1, r2, #1
 800f332:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800f336:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800f33a:	cb03      	ldmia	r3!, {r0, r1}
 800f33c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800f340:	6069      	str	r1, [r5, #4]
 800f342:	b003      	add	sp, #12
 800f344:	bd30      	pop	{r4, r5, pc}
 800f346:	bf00      	nop
 800f348:	08021b34 	.word	0x08021b34
 800f34c:	08021c59 	.word	0x08021c59
 800f350:	08021b63 	.word	0x08021b63

0800f354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800f354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f358:	b08d      	sub	sp, #52	; 0x34
 800f35a:	4683      	mov	fp, r0
 800f35c:	ac08      	add	r4, sp, #32
 800f35e:	4620      	mov	r0, r4
 800f360:	e884 0006 	stmia.w	r4, {r1, r2}
 800f364:	f7fd f929 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d16a      	bne.n	800f442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f36c:	9402      	str	r4, [sp, #8]
 800f36e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f372:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800f376:	2400      	movs	r4, #0
 800f378:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800f37c:	9301      	str	r3, [sp, #4]
 800f37e:	36a0      	adds	r6, #160	; 0xa0
 800f380:	42a5      	cmp	r5, r4
 800f382:	d00d      	beq.n	800f3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800f384:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800f388:	9802      	ldr	r0, [sp, #8]
 800f38a:	f7ff fe95 	bl	800f0b8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f38e:	b128      	cbz	r0, 800f39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800f390:	1e69      	subs	r1, r5, #1
 800f392:	9801      	ldr	r0, [sp, #4]
 800f394:	1b09      	subs	r1, r1, r4
 800f396:	b289      	uxth	r1, r1
 800f398:	f7ff ffa4 	bl	800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f39c:	3401      	adds	r4, #1
 800f39e:	e7ef      	b.n	800f380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f3a0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800f3a4:	1e7b      	subs	r3, r7, #1
 800f3a6:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800f3aa:	9703      	str	r7, [sp, #12]
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	2400      	movs	r4, #0
 800f3b0:	4655      	mov	r5, sl
 800f3b2:	9704      	str	r7, [sp, #16]
 800f3b4:	4626      	mov	r6, r4
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d078      	beq.n	800f4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800f3bc:	9902      	ldr	r1, [sp, #8]
 800f3be:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f3c2:	f7ff fe57 	bl	800f074 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f3c6:	b360      	cbz	r0, 800f422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f3c8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800f3cc:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800f3d0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800f3d4:	45e6      	cmp	lr, ip
 800f3d6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800f3da:	db35      	blt.n	800f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f3dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f3e0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f3e4:	4472      	add	r2, lr
 800f3e6:	4463      	add	r3, ip
 800f3e8:	b212      	sxth	r2, r2
 800f3ea:	b21b      	sxth	r3, r3
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	dc2b      	bgt.n	800f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f3f0:	fa1f f288 	uxth.w	r2, r8
 800f3f4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f3f8:	45c1      	cmp	r9, r8
 800f3fa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f3fe:	4413      	add	r3, r2
 800f400:	fa1f fc89 	uxth.w	ip, r9
 800f404:	b29b      	uxth	r3, r3
 800f406:	fa0f fe83 	sxth.w	lr, r3
 800f40a:	db0f      	blt.n	800f42c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800f40c:	eba3 030c 	sub.w	r3, r3, ip
 800f410:	1ac9      	subs	r1, r1, r3
 800f412:	b209      	sxth	r1, r1
 800f414:	2900      	cmp	r1, #0
 800f416:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f41a:	dd12      	ble.n	800f442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f41c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800f420:	4604      	mov	r4, r0
 800f422:	9b04      	ldr	r3, [sp, #16]
 800f424:	3d08      	subs	r5, #8
 800f426:	3b01      	subs	r3, #1
 800f428:	9304      	str	r3, [sp, #16]
 800f42a:	e7c4      	b.n	800f3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800f42c:	4461      	add	r1, ip
 800f42e:	b209      	sxth	r1, r1
 800f430:	4571      	cmp	r1, lr
 800f432:	dc3a      	bgt.n	800f4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f434:	eba2 020c 	sub.w	r2, r2, ip
 800f438:	b212      	sxth	r2, r2
 800f43a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f43e:	2a00      	cmp	r2, #0
 800f440:	dcee      	bgt.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f442:	b00d      	add	sp, #52	; 0x34
 800f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f448:	45c1      	cmp	r9, r8
 800f44a:	db2e      	blt.n	800f4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f44c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f450:	4499      	add	r9, r3
 800f452:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f456:	4498      	add	r8, r3
 800f458:	fa0f f989 	sxth.w	r9, r9
 800f45c:	fa0f f888 	sxth.w	r8, r8
 800f460:	45c1      	cmp	r9, r8
 800f462:	dc22      	bgt.n	800f4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f464:	fa1f f28c 	uxth.w	r2, ip
 800f468:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f46c:	45e6      	cmp	lr, ip
 800f46e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800f472:	4413      	add	r3, r2
 800f474:	fa1f f88e 	uxth.w	r8, lr
 800f478:	b29b      	uxth	r3, r3
 800f47a:	fa0f f983 	sxth.w	r9, r3
 800f47e:	db0a      	blt.n	800f496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800f480:	eba3 0308 	sub.w	r3, r3, r8
 800f484:	1ac9      	subs	r1, r1, r3
 800f486:	b209      	sxth	r1, r1
 800f488:	2900      	cmp	r1, #0
 800f48a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800f48e:	ddd8      	ble.n	800f442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f490:	f8ad 9020 	strh.w	r9, [sp, #32]
 800f494:	e7c4      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f496:	4441      	add	r1, r8
 800f498:	b209      	sxth	r1, r1
 800f49a:	4549      	cmp	r1, r9
 800f49c:	dc05      	bgt.n	800f4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f49e:	eba2 0208 	sub.w	r2, r2, r8
 800f4a2:	b212      	sxth	r2, r2
 800f4a4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800f4a8:	e7c9      	b.n	800f43e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	e7b9      	b.n	800f422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f4ae:	2c00      	cmp	r4, #0
 800f4b0:	f47f af7d 	bne.w	800f3ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800f4b4:	2e00      	cmp	r6, #0
 800f4b6:	f000 81dc 	beq.w	800f872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f4ba:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800f4be:	4655      	mov	r5, sl
 800f4c0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800f4c4:	b2b9      	uxth	r1, r7
 800f4c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f4ca:	b2b3      	uxth	r3, r6
 800f4cc:	9104      	str	r1, [sp, #16]
 800f4ce:	9804      	ldr	r0, [sp, #16]
 800f4d0:	441a      	add	r2, r3
 800f4d2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f4d6:	b292      	uxth	r2, r2
 800f4d8:	4401      	add	r1, r0
 800f4da:	fa0f f882 	sxth.w	r8, r2
 800f4de:	b289      	uxth	r1, r1
 800f4e0:	9105      	str	r1, [sp, #20]
 800f4e2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800f4e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d054      	beq.n	800f59a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800f4f0:	9902      	ldr	r1, [sp, #8]
 800f4f2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f4f6:	f7ff fdbd 	bl	800f074 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f4fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4fe:	b1d8      	cbz	r0, 800f538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f500:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800f504:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800f508:	4576      	cmp	r6, lr
 800f50a:	dc26      	bgt.n	800f55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f50c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800f510:	44f4      	add	ip, lr
 800f512:	fa0f fc8c 	sxth.w	ip, ip
 800f516:	45e0      	cmp	r8, ip
 800f518:	db1f      	blt.n	800f55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f51a:	428f      	cmp	r7, r1
 800f51c:	fa1f fc81 	uxth.w	ip, r1
 800f520:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800f524:	dc0f      	bgt.n	800f546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800f526:	9805      	ldr	r0, [sp, #20]
 800f528:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800f52c:	eba0 0c0c 	sub.w	ip, r0, ip
 800f530:	eba1 010c 	sub.w	r1, r1, ip
 800f534:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800f538:	4620      	mov	r0, r4
 800f53a:	9903      	ldr	r1, [sp, #12]
 800f53c:	3d08      	subs	r5, #8
 800f53e:	4604      	mov	r4, r0
 800f540:	3901      	subs	r1, #1
 800f542:	9103      	str	r1, [sp, #12]
 800f544:	e7cf      	b.n	800f4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800f546:	4461      	add	r1, ip
 800f548:	b209      	sxth	r1, r1
 800f54a:	4549      	cmp	r1, r9
 800f54c:	dcf5      	bgt.n	800f53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f54e:	9904      	ldr	r1, [sp, #16]
 800f550:	eba1 0c0c 	sub.w	ip, r1, ip
 800f554:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800f558:	e7ee      	b.n	800f538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f55a:	428f      	cmp	r7, r1
 800f55c:	dced      	bgt.n	800f53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f55e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800f562:	4461      	add	r1, ip
 800f564:	b209      	sxth	r1, r1
 800f566:	4589      	cmp	r9, r1
 800f568:	dbe7      	blt.n	800f53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f56a:	4576      	cmp	r6, lr
 800f56c:	fa1f fc8e 	uxth.w	ip, lr
 800f570:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800f574:	dc08      	bgt.n	800f588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800f576:	eba2 0c0c 	sub.w	ip, r2, ip
 800f57a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800f57e:	eba1 010c 	sub.w	r1, r1, ip
 800f582:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800f586:	e7d7      	b.n	800f538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f588:	4461      	add	r1, ip
 800f58a:	b209      	sxth	r1, r1
 800f58c:	4588      	cmp	r8, r1
 800f58e:	dbd4      	blt.n	800f53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f590:	eba3 0c0c 	sub.w	ip, r3, ip
 800f594:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800f598:	e7ce      	b.n	800f538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f59a:	2c00      	cmp	r4, #0
 800f59c:	f000 8169 	beq.w	800f872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f5a0:	9b00      	ldr	r3, [sp, #0]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	f000 8165 	beq.w	800f872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f5a8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800f5ac:	9802      	ldr	r0, [sp, #8]
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	f7ff fd82 	bl	800f0b8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f5b4:	b120      	cbz	r0, 800f5c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800f5b6:	f8bd 1000 	ldrh.w	r1, [sp]
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	f7ff fe92 	bl	800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f5c0:	9902      	ldr	r1, [sp, #8]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7ff fd56 	bl	800f074 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	f000 809b 	beq.w	800f704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800f5ce:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800f5d2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800f5d6:	fa1f f288 	uxth.w	r2, r8
 800f5da:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800f5de:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800f5e2:	19d5      	adds	r5, r2, r7
 800f5e4:	b2a1      	uxth	r1, r4
 800f5e6:	45a0      	cmp	r8, r4
 800f5e8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800f5ec:	fa1f f985 	uxth.w	r9, r5
 800f5f0:	440b      	add	r3, r1
 800f5f2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800f5f6:	fa0f f589 	sxth.w	r5, r9
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	9503      	str	r5, [sp, #12]
 800f5fe:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f602:	9507      	str	r5, [sp, #28]
 800f604:	f340 809d 	ble.w	800f742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800f608:	1a52      	subs	r2, r2, r1
 800f60a:	4584      	cmp	ip, r0
 800f60c:	fa0f fe83 	sxth.w	lr, r3
 800f610:	b292      	uxth	r2, r2
 800f612:	b215      	sxth	r5, r2
 800f614:	dd2f      	ble.n	800f676 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800f616:	9e00      	ldr	r6, [sp, #0]
 800f618:	fa1f fc8c 	uxth.w	ip, ip
 800f61c:	b280      	uxth	r0, r0
 800f61e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f622:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800f626:	9e03      	ldr	r6, [sp, #12]
 800f628:	ebac 0300 	sub.w	r3, ip, r0
 800f62c:	448c      	add	ip, r1
 800f62e:	eba6 060e 	sub.w	r6, r6, lr
 800f632:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800f636:	b29b      	uxth	r3, r3
 800f638:	4470      	add	r0, lr
 800f63a:	fa0f fc8c 	sxth.w	ip, ip
 800f63e:	b21c      	sxth	r4, r3
 800f640:	b200      	sxth	r0, r0
 800f642:	4366      	muls	r6, r4
 800f644:	ebac 0000 	sub.w	r0, ip, r0
 800f648:	4368      	muls	r0, r5
 800f64a:	4286      	cmp	r6, r0
 800f64c:	db09      	blt.n	800f662 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800f64e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800f652:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800f656:	4417      	add	r7, r2
 800f658:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f65c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f660:	e685      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f662:	440b      	add	r3, r1
 800f664:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800f668:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f66c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800f670:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f674:	e67b      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f676:	9e03      	ldr	r6, [sp, #12]
 800f678:	45b6      	cmp	lr, r6
 800f67a:	da28      	bge.n	800f6ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800f67c:	9b00      	ldr	r3, [sp, #0]
 800f67e:	eba6 060e 	sub.w	r6, r6, lr
 800f682:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800f686:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800f68a:	eb04 030c 	add.w	r3, r4, ip
 800f68e:	fa1f f883 	uxth.w	r8, r3
 800f692:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800f696:	4403      	add	r3, r0
 800f698:	fa0f f988 	sxth.w	r9, r8
 800f69c:	eba0 000c 	sub.w	r0, r0, ip
 800f6a0:	eba3 0308 	sub.w	r3, r3, r8
 800f6a4:	4368      	muls	r0, r5
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	fa0f f883 	sxth.w	r8, r3
 800f6ac:	fb08 f606 	mul.w	r6, r8, r6
 800f6b0:	42b0      	cmp	r0, r6
 800f6b2:	dc06      	bgt.n	800f6c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800f6b4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800f6b8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800f6bc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800f6c0:	e7c9      	b.n	800f656 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800f6c2:	4423      	add	r3, r4
 800f6c4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800f6c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f6cc:	e64f      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f6ce:	eba3 0309 	sub.w	r3, r3, r9
 800f6d2:	9807      	ldr	r0, [sp, #28]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	2806      	cmp	r0, #6
 800f6d8:	fa0f fc83 	sxth.w	ip, r3
 800f6dc:	d818      	bhi.n	800f710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800f6de:	4652      	mov	r2, sl
 800f6e0:	ab0a      	add	r3, sp, #40	; 0x28
 800f6e2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800f6e6:	6851      	ldr	r1, [r2, #4]
 800f6e8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800f6ec:	c303      	stmia	r3!, {r0, r1}
 800f6ee:	9b03      	ldr	r3, [sp, #12]
 800f6f0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800f6f4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800f6f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f6fa:	9801      	ldr	r0, [sp, #4]
 800f6fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f700:	f7ff fe06 	bl	800f310 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f704:	9b00      	ldr	r3, [sp, #0]
 800f706:	f1aa 0a08 	sub.w	sl, sl, #8
 800f70a:	3b01      	subs	r3, #1
 800f70c:	9300      	str	r3, [sp, #0]
 800f70e:	e747      	b.n	800f5a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800f710:	9800      	ldr	r0, [sp, #0]
 800f712:	45ac      	cmp	ip, r5
 800f714:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800f718:	db0c      	blt.n	800f734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800f71a:	4417      	add	r7, r2
 800f71c:	4458      	add	r0, fp
 800f71e:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f722:	b2bf      	uxth	r7, r7
 800f724:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800f728:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f72c:	440f      	add	r7, r1
 800f72e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800f732:	e61c      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f734:	4458      	add	r0, fp
 800f736:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800f73a:	443b      	add	r3, r7
 800f73c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f740:	e615      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f742:	fa1f f18c 	uxth.w	r1, ip
 800f746:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800f74a:	b282      	uxth	r2, r0
 800f74c:	4584      	cmp	ip, r0
 800f74e:	eb01 0e05 	add.w	lr, r1, r5
 800f752:	9204      	str	r2, [sp, #16]
 800f754:	fa1f fe8e 	uxth.w	lr, lr
 800f758:	9e04      	ldr	r6, [sp, #16]
 800f75a:	fa0f f28e 	sxth.w	r2, lr
 800f75e:	9205      	str	r2, [sp, #20]
 800f760:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800f764:	4432      	add	r2, r6
 800f766:	b292      	uxth	r2, r2
 800f768:	9206      	str	r2, [sp, #24]
 800f76a:	da26      	bge.n	800f7ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800f76c:	eba3 0309 	sub.w	r3, r3, r9
 800f770:	eba2 020e 	sub.w	r2, r2, lr
 800f774:	eba0 000c 	sub.w	r0, r0, ip
 800f778:	eba4 0408 	sub.w	r4, r4, r8
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	b292      	uxth	r2, r2
 800f780:	fa0f fa83 	sxth.w	sl, r3
 800f784:	b211      	sxth	r1, r2
 800f786:	fb0a f000 	mul.w	r0, sl, r0
 800f78a:	434c      	muls	r4, r1
 800f78c:	42a0      	cmp	r0, r4
 800f78e:	9800      	ldr	r0, [sp, #0]
 800f790:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800f794:	dc06      	bgt.n	800f7a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800f796:	4458      	add	r0, fp
 800f798:	9a05      	ldr	r2, [sp, #20]
 800f79a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800f79e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800f7a2:	e7ca      	b.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800f7a4:	eb0b 0300 	add.w	r3, fp, r0
 800f7a8:	9903      	ldr	r1, [sp, #12]
 800f7aa:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800f7ae:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800f7b2:	442a      	add	r2, r5
 800f7b4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f7b8:	e5d9      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f7ba:	9e04      	ldr	r6, [sp, #16]
 800f7bc:	9a03      	ldr	r2, [sp, #12]
 800f7be:	1b89      	subs	r1, r1, r6
 800f7c0:	b21e      	sxth	r6, r3
 800f7c2:	b289      	uxth	r1, r1
 800f7c4:	4296      	cmp	r6, r2
 800f7c6:	fa0f fc81 	sxth.w	ip, r1
 800f7ca:	dd25      	ble.n	800f818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800f7cc:	eba3 0309 	sub.w	r3, r3, r9
 800f7d0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800f7d4:	9e05      	ldr	r6, [sp, #20]
 800f7d6:	eba4 0408 	sub.w	r4, r4, r8
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	eba6 0902 	sub.w	r9, r6, r2
 800f7e0:	fb0c f404 	mul.w	r4, ip, r4
 800f7e4:	b218      	sxth	r0, r3
 800f7e6:	9a00      	ldr	r2, [sp, #0]
 800f7e8:	fb00 f909 	mul.w	r9, r0, r9
 800f7ec:	00d2      	lsls	r2, r2, #3
 800f7ee:	454c      	cmp	r4, r9
 800f7f0:	db03      	blt.n	800f7fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800f7f2:	445a      	add	r2, fp
 800f7f4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800f7f8:	e79f      	b.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800f7fa:	eb0b 0302 	add.w	r3, fp, r2
 800f7fe:	9a03      	ldr	r2, [sp, #12]
 800f800:	4429      	add	r1, r5
 800f802:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800f806:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800f80a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800f80e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f812:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f816:	e5aa      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f818:	9b06      	ldr	r3, [sp, #24]
 800f81a:	9c07      	ldr	r4, [sp, #28]
 800f81c:	eba3 020e 	sub.w	r2, r3, lr
 800f820:	2c06      	cmp	r4, #6
 800f822:	b292      	uxth	r2, r2
 800f824:	b213      	sxth	r3, r2
 800f826:	d80d      	bhi.n	800f844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800f828:	4651      	mov	r1, sl
 800f82a:	aa0a      	add	r2, sp, #40	; 0x28
 800f82c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800f830:	6849      	ldr	r1, [r1, #4]
 800f832:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800f836:	9b05      	ldr	r3, [sp, #20]
 800f838:	c203      	stmia	r2!, {r0, r1}
 800f83a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800f83e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800f842:	e759      	b.n	800f6f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800f844:	9c00      	ldr	r4, [sp, #0]
 800f846:	4563      	cmp	r3, ip
 800f848:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800f84c:	db0d      	blt.n	800f86a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800f84e:	4429      	add	r1, r5
 800f850:	9a04      	ldr	r2, [sp, #16]
 800f852:	445c      	add	r4, fp
 800f854:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f858:	b289      	uxth	r1, r1
 800f85a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800f85e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f862:	4411      	add	r1, r2
 800f864:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800f868:	e581      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f86a:	445c      	add	r4, fp
 800f86c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800f870:	e79f      	b.n	800f7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800f872:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800f876:	2f07      	cmp	r7, #7
 800f878:	d806      	bhi.n	800f888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800f87a:	ab08      	add	r3, sp, #32
 800f87c:	9801      	ldr	r0, [sp, #4]
 800f87e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f882:	f7ff fd45 	bl	800f310 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f886:	e5dc      	b.n	800f442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f888:	f107 39ff 	add.w	r9, r7, #4294967295
 800f88c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800f890:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800f894:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800f898:	f04f 35ff 	mov.w	r5, #4294967295
 800f89c:	2400      	movs	r4, #0
 800f89e:	9304      	str	r3, [sp, #16]
 800f8a0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800f8a4:	f109 32ff 	add.w	r2, r9, #4294967295
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	4690      	mov	r8, r2
 800f8ac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800f8b0:	9303      	str	r3, [sp, #12]
 800f8b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f8b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f8ba:	6818      	ldr	r0, [r3, #0]
 800f8bc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800f8c0:	9206      	str	r2, [sp, #24]
 800f8c2:	bf16      	itet	ne
 800f8c4:	9904      	ldrne	r1, [sp, #16]
 800f8c6:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800f8ca:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800f8ce:	9305      	str	r3, [sp, #20]
 800f8d0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800f8d4:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800f8d8:	fb16 f601 	smulbb	r6, r6, r1
 800f8dc:	6859      	ldr	r1, [r3, #4]
 800f8de:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f8e2:	4671      	mov	r1, lr
 800f8e4:	a80a      	add	r0, sp, #40	; 0x28
 800f8e6:	f7ff fc09 	bl	800f0fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f8ea:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800f8ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	9a00      	ldr	r2, [sp, #0]
 800f8f6:	fb11 f100 	smulbb	r1, r1, r0
 800f8fa:	2008      	movs	r0, #8
 800f8fc:	fb02 6603 	mla	r6, r2, r3, r6
 800f900:	1b8e      	subs	r6, r1, r6
 800f902:	fb91 f1f0 	sdiv	r1, r1, r0
 800f906:	42b1      	cmp	r1, r6
 800f908:	dc21      	bgt.n	800f94e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800f90a:	4556      	cmp	r6, sl
 800f90c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f910:	da03      	bge.n	800f91a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800f912:	b1e6      	cbz	r6, 800f94e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800f914:	46b2      	mov	sl, r6
 800f916:	4645      	mov	r5, r8
 800f918:	464c      	mov	r4, r9
 800f91a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f91e:	f118 0f02 	cmn.w	r8, #2
 800f922:	d1c8      	bne.n	800f8b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800f924:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f928:	f1a7 0708 	sub.w	r7, r7, #8
 800f92c:	4691      	mov	r9, r2
 800f92e:	d1b7      	bne.n	800f8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800f930:	9b01      	ldr	r3, [sp, #4]
 800f932:	b2a6      	uxth	r6, r4
 800f934:	00e4      	lsls	r4, r4, #3
 800f936:	1918      	adds	r0, r3, r4
 800f938:	1c6b      	adds	r3, r5, #1
 800f93a:	d10b      	bne.n	800f954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800f93c:	4601      	mov	r1, r0
 800f93e:	9802      	ldr	r0, [sp, #8]
 800f940:	f7ff fbdc 	bl	800f0fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f944:	4631      	mov	r1, r6
 800f946:	9801      	ldr	r0, [sp, #4]
 800f948:	f7ff fccc 	bl	800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f94c:	e50f      	b.n	800f36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f94e:	4645      	mov	r5, r8
 800f950:	464c      	mov	r4, r9
 800f952:	e7ed      	b.n	800f930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800f954:	9b01      	ldr	r3, [sp, #4]
 800f956:	00ed      	lsls	r5, r5, #3
 800f958:	445c      	add	r4, fp
 800f95a:	1959      	adds	r1, r3, r5
 800f95c:	445d      	add	r5, fp
 800f95e:	f7ff fbcd 	bl	800f0fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	cb03      	ldmia	r3!, {r0, r1}
 800f966:	9b02      	ldr	r3, [sp, #8]
 800f968:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800f96c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800f970:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800f974:	6861      	ldr	r1, [r4, #4]
 800f976:	c303      	stmia	r3!, {r0, r1}
 800f978:	e7e4      	b.n	800f944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800f97c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800f97c:	4b1d      	ldr	r3, [pc, #116]	; (800f9f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800f97e:	b530      	push	{r4, r5, lr}
 800f980:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f984:	b085      	sub	sp, #20
 800f986:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800f988:	460c      	mov	r4, r1
 800f98a:	2100      	movs	r1, #0
 800f98c:	4605      	mov	r5, r0
 800f98e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f992:	6820      	ldr	r0, [r4, #0]
 800f994:	9100      	str	r1, [sp, #0]
 800f996:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f99a:	ab02      	add	r3, sp, #8
 800f99c:	6861      	ldr	r1, [r4, #4]
 800f99e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f9a2:	c303      	stmia	r3!, {r0, r1}
 800f9a4:	4669      	mov	r1, sp
 800f9a6:	a802      	add	r0, sp, #8
 800f9a8:	f7fc fdc4 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 800f9ac:	ab02      	add	r3, sp, #8
 800f9ae:	cb03      	ldmia	r3!, {r0, r1}
 800f9b0:	4b12      	ldr	r3, [pc, #72]	; (800f9fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800f9b2:	6020      	str	r0, [r4, #0]
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	6061      	str	r1, [r4, #4]
 800f9b8:	b138      	cbz	r0, 800f9ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800f9ba:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800f9be:	b133      	cbz	r3, 800f9ce <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800f9c0:	6821      	ldr	r1, [r4, #0]
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	6862      	ldr	r2, [r4, #4]
 800f9c6:	f7ff fcc5 	bl	800f354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f9ca:	b005      	add	sp, #20
 800f9cc:	bd30      	pop	{r4, r5, pc}
 800f9ce:	6803      	ldr	r3, [r0, #0]
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	4798      	blx	r3
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800f9d8:	6818      	ldr	r0, [r3, #0]
 800f9da:	b118      	cbz	r0, 800f9e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800f9dc:	6803      	ldr	r3, [r0, #0]
 800f9de:	4621      	mov	r1, r4
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	4798      	blx	r3
 800f9e4:	4b07      	ldr	r3, [pc, #28]	; (800fa04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	6818      	ldr	r0, [r3, #0]
 800f9ea:	6803      	ldr	r3, [r0, #0]
 800f9ec:	695b      	ldr	r3, [r3, #20]
 800f9ee:	4798      	blx	r3
 800f9f0:	e7eb      	b.n	800f9ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800f9f2:	bf00      	nop
 800f9f4:	20009be8 	.word	0x20009be8
 800f9f8:	20009bea 	.word	0x20009bea
 800f9fc:	20009c30 	.word	0x20009c30
 800fa00:	20009c2c 	.word	0x20009c2c
 800fa04:	20009bf4 	.word	0x20009bf4

0800fa08 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	b09b      	sub	sp, #108	; 0x6c
 800fa10:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800fa14:	b129      	cbz	r1, 800fa22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800fa16:	2300      	movs	r3, #0
 800fa18:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800fa1c:	b01b      	add	sp, #108	; 0x6c
 800fa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa22:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7fc fdc7 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	b940      	cbnz	r0, 800fa42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800fa30:	4620      	mov	r0, r4
 800fa32:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fa36:	f7ff fc8d 	bl	800f354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fa3a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800fa3e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800fa42:	4ba6      	ldr	r3, [pc, #664]	; (800fcdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	b33b      	cbz	r3, 800fa98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fa48:	4da5      	ldr	r5, [pc, #660]	; (800fce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f7fc fdb5 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fa50:	4606      	mov	r6, r0
 800fa52:	bb08      	cbnz	r0, 800fa98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fa54:	4628      	mov	r0, r5
 800fa56:	f7ff f9b3 	bl	800edc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fa5a:	6829      	ldr	r1, [r5, #0]
 800fa5c:	686a      	ldr	r2, [r5, #4]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f7ff fc78 	bl	800f354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fa64:	802e      	strh	r6, [r5, #0]
 800fa66:	806e      	strh	r6, [r5, #2]
 800fa68:	80ae      	strh	r6, [r5, #4]
 800fa6a:	80ee      	strh	r6, [r5, #6]
 800fa6c:	4f9d      	ldr	r7, [pc, #628]	; (800fce4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800fa6e:	a809      	add	r0, sp, #36	; 0x24
 800fa70:	f7ff fbe3 	bl	800f23a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fa74:	883d      	ldrh	r5, [r7, #0]
 800fa76:	462e      	mov	r6, r5
 800fa78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fa7c:	42b3      	cmp	r3, r6
 800fa7e:	d910      	bls.n	800faa2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800fa80:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fa84:	3601      	adds	r6, #1
 800fa86:	a809      	add	r0, sp, #36	; 0x24
 800fa88:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800fa8c:	b2b6      	uxth	r6, r6
 800fa8e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800fa92:	f7ff fc3d 	bl	800f310 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fa96:	e7ef      	b.n	800fa78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800fa98:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1e5      	bne.n	800fa6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800faa0:	e7bc      	b.n	800fa1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800faa2:	462e      	mov	r6, r5
 800faa4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800faa8:	42b3      	cmp	r3, r6
 800faaa:	d90b      	bls.n	800fac4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800faac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fab0:	3601      	adds	r6, #1
 800fab2:	4620      	mov	r0, r4
 800fab4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800fab8:	b2b6      	uxth	r6, r6
 800faba:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800fabe:	f7ff fc49 	bl	800f354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fac2:	e7ef      	b.n	800faa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800fac4:	4a88      	ldr	r2, [pc, #544]	; (800fce8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800fac6:	6813      	ldr	r3, [r2, #0]
 800fac8:	4690      	mov	r8, r2
 800faca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800face:	2b01      	cmp	r3, #1
 800fad0:	f040 8093 	bne.w	800fbfa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 800fad4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800fad8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800fadc:	f04f 0900 	mov.w	r9, #0
 800fae0:	33aa      	adds	r3, #170	; 0xaa
 800fae2:	42a8      	cmp	r0, r5
 800fae4:	f103 0308 	add.w	r3, r3, #8
 800fae8:	dd0a      	ble.n	800fb00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800faea:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800faee:	3501      	adds	r5, #1
 800faf0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800faf4:	440a      	add	r2, r1
 800faf6:	b212      	sxth	r2, r2
 800faf8:	4591      	cmp	r9, r2
 800fafa:	bfb8      	it	lt
 800fafc:	4691      	movlt	r9, r2
 800fafe:	e7f0      	b.n	800fae2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800fb00:	4b7a      	ldr	r3, [pc, #488]	; (800fcec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800fb02:	4e7b      	ldr	r6, [pc, #492]	; (800fcf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800fb04:	881d      	ldrh	r5, [r3, #0]
 800fb06:	2300      	movs	r3, #0
 800fb08:	2d0f      	cmp	r5, #15
 800fb0a:	bf8c      	ite	hi
 800fb0c:	08ed      	lsrhi	r5, r5, #3
 800fb0e:	2501      	movls	r5, #1
 800fb10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fb14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb18:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800fb1c:	f8d8 0000 	ldr.w	r0, [r8]
 800fb20:	440b      	add	r3, r1
 800fb22:	6802      	ldr	r2, [r0, #0]
 800fb24:	b21b      	sxth	r3, r3
 800fb26:	4599      	cmp	r9, r3
 800fb28:	dd4a      	ble.n	800fbc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 800fb2a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800fb2e:	4798      	blx	r3
 800fb30:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800fb34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb38:	4413      	add	r3, r2
 800fb3a:	b21b      	sxth	r3, r3
 800fb3c:	195a      	adds	r2, r3, r5
 800fb3e:	4290      	cmp	r0, r2
 800fb40:	da07      	bge.n	800fb52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fb42:	4581      	cmp	r9, r0
 800fb44:	dd05      	ble.n	800fb52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fb46:	4298      	cmp	r0, r3
 800fb48:	da33      	bge.n	800fbb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dd31      	ble.n	800fbb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fb4e:	4648      	mov	r0, r9
 800fb50:	e004      	b.n	800fb5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800fb52:	4298      	cmp	r0, r3
 800fb54:	dbfb      	blt.n	800fb4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800fb56:	4548      	cmp	r0, r9
 800fb58:	bfa8      	it	ge
 800fb5a:	4648      	movge	r0, r9
 800fb5c:	f9b6 2000 	ldrsh.w	r2, [r6]
 800fb60:	2100      	movs	r1, #0
 800fb62:	1ac0      	subs	r0, r0, r3
 800fb64:	f8b7 a000 	ldrh.w	sl, [r7]
 800fb68:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fb6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb70:	f8ad 2018 	strh.w	r2, [sp, #24]
 800fb74:	f8ad 001a 	strh.w	r0, [sp, #26]
 800fb78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fb7c:	4553      	cmp	r3, sl
 800fb7e:	d9c9      	bls.n	800fb14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800fb80:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800fb84:	ab07      	add	r3, sp, #28
 800fb86:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800fb8a:	6851      	ldr	r1, [r2, #4]
 800fb8c:	c303      	stmia	r3!, {r0, r1}
 800fb8e:	a807      	add	r0, sp, #28
 800fb90:	a905      	add	r1, sp, #20
 800fb92:	f7fc fccf 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 800fb96:	a807      	add	r0, sp, #28
 800fb98:	f7fc fd0f 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fb9c:	b920      	cbnz	r0, 800fba8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	a907      	add	r1, sp, #28
 800fba2:	4620      	mov	r0, r4
 800fba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fba6:	4798      	blx	r3
 800fba8:	f10a 0a01 	add.w	sl, sl, #1
 800fbac:	fa1f fa8a 	uxth.w	sl, sl
 800fbb0:	e7e2      	b.n	800fb78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800fbb2:	f8d8 0000 	ldr.w	r0, [r8]
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	6803      	ldr	r3, [r0, #0]
 800fbba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbbc:	4798      	blx	r3
 800fbbe:	e7a9      	b.n	800fb14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800fbc0:	69d3      	ldr	r3, [r2, #28]
 800fbc2:	4798      	blx	r3
 800fbc4:	4b4b      	ldr	r3, [pc, #300]	; (800fcf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f43f af27 	beq.w	800fa1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	883d      	ldrh	r5, [r7, #0]
 800fbd2:	34ea      	adds	r4, #234	; 0xea
 800fbd4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800fbd8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fbdc:	42ab      	cmp	r3, r5
 800fbde:	f67f af1d 	bls.w	800fa1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fbe2:	ab1a      	add	r3, sp, #104	; 0x68
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fbea:	3501      	adds	r5, #1
 800fbec:	3b44      	subs	r3, #68	; 0x44
 800fbee:	b2ad      	uxth	r5, r5
 800fbf0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fbf4:	f7ff fb8c 	bl	800f310 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fbf8:	e7ee      	b.n	800fbd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	f040 813d 	bne.w	800fe7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 800fc00:	4b3d      	ldr	r3, [pc, #244]	; (800fcf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d02c      	beq.n	800fc62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 800fc08:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800fc0c:	883a      	ldrh	r2, [r7, #0]
 800fc0e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800fc12:	3201      	adds	r2, #1
 800fc14:	b292      	uxth	r2, r2
 800fc16:	2900      	cmp	r1, #0
 800fc18:	d0d4      	beq.n	800fbc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800fc1a:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800fc1e:	4610      	mov	r0, r2
 800fc20:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800fc24:	f04f 0a00 	mov.w	sl, #0
 800fc28:	441d      	add	r5, r3
 800fc2a:	b22d      	sxth	r5, r5
 800fc2c:	b283      	uxth	r3, r0
 800fc2e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800fc32:	4299      	cmp	r1, r3
 800fc34:	f240 80c4 	bls.w	800fdc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800fc38:	4426      	add	r6, r4
 800fc3a:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800fc3e:	4684      	mov	ip, r0
 800fc40:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800fc44:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800fc48:	4573      	cmp	r3, lr
 800fc4a:	f340 80a6 	ble.w	800fd9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800fc4e:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800fc52:	4475      	add	r5, lr
 800fc54:	b22d      	sxth	r5, r5
 800fc56:	429d      	cmp	r5, r3
 800fc58:	bfa8      	it	ge
 800fc5a:	461d      	movge	r5, r3
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	46e2      	mov	sl, ip
 800fc60:	e7e4      	b.n	800fc2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 800fc62:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800fc66:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800fc6a:	f1bb 0f00 	cmp.w	fp, #0
 800fc6e:	d0a9      	beq.n	800fbc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800fc70:	883b      	ldrh	r3, [r7, #0]
 800fc72:	2600      	movs	r6, #0
 800fc74:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800fc78:	3301      	adds	r3, #1
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	b299      	uxth	r1, r3
 800fc7e:	00f5      	lsls	r5, r6, #3
 800fc80:	458b      	cmp	fp, r1
 800fc82:	d93b      	bls.n	800fcfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800fc84:	4425      	add	r5, r4
 800fc86:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800fc8a:	469c      	mov	ip, r3
 800fc8c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800fc90:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800fc94:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800fc98:	4408      	add	r0, r1
 800fc9a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800fc9e:	4471      	add	r1, lr
 800fca0:	b200      	sxth	r0, r0
 800fca2:	b209      	sxth	r1, r1
 800fca4:	4288      	cmp	r0, r1
 800fca6:	da06      	bge.n	800fcb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 800fca8:	4586      	cmp	lr, r0
 800fcaa:	4672      	mov	r2, lr
 800fcac:	bfb8      	it	lt
 800fcae:	4602      	movlt	r2, r0
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4666      	mov	r6, ip
 800fcb4:	e7e2      	b.n	800fc7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 800fcb6:	d10b      	bne.n	800fcd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 800fcb8:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800fcbc:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800fcc0:	458c      	cmp	ip, r1
 800fcc2:	bfb4      	ite	lt
 800fcc4:	469c      	movlt	ip, r3
 800fcc6:	46b4      	movge	ip, r6
 800fcc8:	4572      	cmp	r2, lr
 800fcca:	bfb8      	it	lt
 800fccc:	4672      	movlt	r2, lr
 800fcce:	e7ef      	b.n	800fcb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800fcd0:	428a      	cmp	r2, r1
 800fcd2:	46b4      	mov	ip, r6
 800fcd4:	bfb8      	it	lt
 800fcd6:	460a      	movlt	r2, r1
 800fcd8:	e7ea      	b.n	800fcb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800fcda:	bf00      	nop
 800fcdc:	20009c2c 	.word	0x20009c2c
 800fce0:	20009c38 	.word	0x20009c38
 800fce4:	20000018 	.word	0x20000018
 800fce8:	20009bf4 	.word	0x20009bf4
 800fcec:	20009bea 	.word	0x20009bea
 800fcf0:	20009be8 	.word	0x20009be8
 800fcf4:	20009bf2 	.word	0x20009bf2
 800fcf8:	20009bec 	.word	0x20009bec
 800fcfc:	1961      	adds	r1, r4, r5
 800fcfe:	ab07      	add	r3, sp, #28
 800fd00:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800fd04:	6849      	ldr	r1, [r1, #4]
 800fd06:	c303      	stmia	r3!, {r0, r1}
 800fd08:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800fd0c:	a807      	add	r0, sp, #28
 800fd0e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800fd12:	2b13      	cmp	r3, #19
 800fd14:	440b      	add	r3, r1
 800fd16:	bfd8      	it	le
 800fd18:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800fd1c:	1a9b      	subs	r3, r3, r2
 800fd1e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fd22:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fd26:	f7ff f8a5 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fd2a:	a807      	add	r0, sp, #28
 800fd2c:	f7fc fc45 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d198      	bne.n	800fc66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800fd34:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800fd38:	4425      	add	r5, r4
 800fd3a:	f8d8 0000 	ldr.w	r0, [r8]
 800fd3e:	f1bc 0f14 	cmp.w	ip, #20
 800fd42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fd46:	f8d0 e000 	ldr.w	lr, [r0]
 800fd4a:	bfa8      	it	ge
 800fd4c:	f04f 0c14 	movge.w	ip, #20
 800fd50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fd54:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800fd58:	fa1f fc8c 	uxth.w	ip, ip
 800fd5c:	f8cd c000 	str.w	ip, [sp]
 800fd60:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 800fd64:	47d0      	blx	sl
 800fd66:	4682      	mov	sl, r0
 800fd68:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800fd6c:	a807      	add	r0, sp, #28
 800fd6e:	f7ff f827 	bl	800edc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	4620      	mov	r0, r4
 800fd76:	a907      	add	r1, sp, #28
 800fd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd7a:	4798      	blx	r3
 800fd7c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800fd80:	eba0 000a 	sub.w	r0, r0, sl
 800fd84:	b200      	sxth	r0, r0
 800fd86:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f47f af6b 	bne.w	800fc66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800fd90:	b2b1      	uxth	r1, r6
 800fd92:	4648      	mov	r0, r9
 800fd94:	f7ff faa6 	bl	800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fd98:	e765      	b.n	800fc66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800fd9a:	d10c      	bne.n	800fdb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 800fd9c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 800fda0:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 800fda4:	45b4      	cmp	ip, r6
 800fda6:	bfb4      	ite	lt
 800fda8:	4684      	movlt	ip, r0
 800fdaa:	46d4      	movge	ip, sl
 800fdac:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 800fdb0:	4433      	add	r3, r6
 800fdb2:	b21b      	sxth	r3, r3
 800fdb4:	e74f      	b.n	800fc56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 800fdb6:	4575      	cmp	r5, lr
 800fdb8:	46d4      	mov	ip, sl
 800fdba:	bfa8      	it	ge
 800fdbc:	4675      	movge	r5, lr
 800fdbe:	e74d      	b.n	800fc5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 800fdc0:	eb0b 0006 	add.w	r0, fp, r6
 800fdc4:	4426      	add	r6, r4
 800fdc6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 800fdca:	f1b9 0f13 	cmp.w	r9, #19
 800fdce:	bfdc      	itt	le
 800fdd0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 800fdd4:	444d      	addle	r5, r9
 800fdd6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800fdda:	bfd8      	it	le
 800fddc:	b22d      	sxthle	r5, r5
 800fdde:	f7fc fbec 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fde2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800fde6:	2800      	cmp	r0, #0
 800fde8:	f47f af15 	bne.w	800fc16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 800fdec:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 800fdf0:	fa1f f989 	uxth.w	r9, r9
 800fdf4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800fdf8:	eba5 050c 	sub.w	r5, r5, ip
 800fdfc:	fa1f f28c 	uxth.w	r2, ip
 800fe00:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 800fe04:	eb02 0009 	add.w	r0, r2, r9
 800fe08:	2d14      	cmp	r5, #20
 800fe0a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 800fe0e:	bfa8      	it	ge
 800fe10:	2514      	movge	r5, #20
 800fe12:	b200      	sxth	r0, r0
 800fe14:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fe18:	b289      	uxth	r1, r1
 800fe1a:	fa1f fe85 	uxth.w	lr, r5
 800fe1e:	eba0 000c 	sub.w	r0, r0, ip
 800fe22:	f8ad c01e 	strh.w	ip, [sp, #30]
 800fe26:	4586      	cmp	lr, r0
 800fe28:	f8d8 0000 	ldr.w	r0, [r8]
 800fe2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	bfb8      	it	lt
 800fe34:	46f1      	movlt	r9, lr
 800fe36:	6805      	ldr	r5, [r0, #0]
 800fe38:	f8cd 9000 	str.w	r9, [sp]
 800fe3c:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 800fe3e:	47a8      	blx	r5
 800fe40:	6823      	ldr	r3, [r4, #0]
 800fe42:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800fe46:	a907      	add	r1, sp, #28
 800fe48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	4798      	blx	r3
 800fe4e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800fe52:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 800fe56:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 800fe5a:	1a5b      	subs	r3, r3, r1
 800fe5c:	440a      	add	r2, r1
 800fe5e:	b21b      	sxth	r3, r3
 800fe60:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 800fe64:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f47f aecf 	bne.w	800fc0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 800fe6e:	fa1f f18a 	uxth.w	r1, sl
 800fe72:	4658      	mov	r0, fp
 800fe74:	f7ff fa36 	bl	800f2e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fe78:	e6c8      	b.n	800fc0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 800fe7a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fe7e:	42ab      	cmp	r3, r5
 800fe80:	f67f aea0 	bls.w	800fbc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800fe84:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800fe88:	ab07      	add	r3, sp, #28
 800fe8a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800fe8e:	6851      	ldr	r1, [r2, #4]
 800fe90:	c303      	stmia	r3!, {r0, r1}
 800fe92:	a807      	add	r0, sp, #28
 800fe94:	f7fc fb91 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe98:	b920      	cbnz	r0, 800fea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	a907      	add	r1, sp, #28
 800fe9e:	4620      	mov	r0, r4
 800fea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fea2:	4798      	blx	r3
 800fea4:	3501      	adds	r5, #1
 800fea6:	b2ad      	uxth	r5, r5
 800fea8:	e7e7      	b.n	800fe7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 800feaa:	bf00      	nop

0800feac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800feac:	4b03      	ldr	r3, [pc, #12]	; (800febc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800feae:	2200      	movs	r2, #0
 800feb0:	801a      	strh	r2, [r3, #0]
 800feb2:	805a      	strh	r2, [r3, #2]
 800feb4:	809a      	strh	r2, [r3, #4]
 800feb6:	80da      	strh	r2, [r3, #6]
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	20009c38 	.word	0x20009c38

0800fec0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	b099      	sub	sp, #100	; 0x64
 800fec6:	4607      	mov	r7, r0
 800fec8:	4614      	mov	r4, r2
 800feca:	461d      	mov	r5, r3
 800fecc:	a802      	add	r0, sp, #8
 800fece:	468a      	mov	sl, r1
 800fed0:	f000 fe36 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	4638      	mov	r0, r7
 800fed8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800fedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fede:	4798      	blx	r3
 800fee0:	462a      	mov	r2, r5
 800fee2:	2500      	movs	r5, #0
 800fee4:	4621      	mov	r1, r4
 800fee6:	4603      	mov	r3, r0
 800fee8:	a802      	add	r0, sp, #8
 800feea:	462c      	mov	r4, r5
 800feec:	46a9      	mov	r9, r5
 800feee:	46a8      	mov	r8, r5
 800fef0:	f000 fe6b 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800fef4:	2300      	movs	r3, #0
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fefc:	429c      	cmp	r4, r3
 800fefe:	d002      	beq.n	800ff06 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 800ff00:	455c      	cmp	r4, fp
 800ff02:	bf18      	it	ne
 800ff04:	4625      	movne	r5, r4
 800ff06:	ab01      	add	r3, sp, #4
 800ff08:	463a      	mov	r2, r7
 800ff0a:	4651      	mov	r1, sl
 800ff0c:	a802      	add	r0, sp, #8
 800ff0e:	f001 f957 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ff12:	4604      	mov	r4, r0
 800ff14:	b108      	cbz	r0, 800ff1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 800ff16:	280a      	cmp	r0, #10
 800ff18:	d10a      	bne.n	800ff30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 800ff1a:	45c1      	cmp	r9, r8
 800ff1c:	bf38      	it	cc
 800ff1e:	46c1      	movcc	r9, r8
 800ff20:	f04f 0800 	mov.w	r8, #0
 800ff24:	2c00      	cmp	r4, #0
 800ff26:	d1e5      	bne.n	800fef4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 800ff28:	4648      	mov	r0, r9
 800ff2a:	b019      	add	sp, #100	; 0x64
 800ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	9a01      	ldr	r2, [sp, #4]
 800ff32:	2a00      	cmp	r2, #0
 800ff34:	d0de      	beq.n	800fef4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 800ff36:	7b56      	ldrb	r6, [r2, #13]
 800ff38:	4629      	mov	r1, r5
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	0076      	lsls	r6, r6, #1
 800ff3e:	8894      	ldrh	r4, [r2, #4]
 800ff40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff42:	f406 7080 	and.w	r0, r6, #256	; 0x100
 800ff46:	7a96      	ldrb	r6, [r2, #10]
 800ff48:	4306      	orrs	r6, r0
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	4798      	blx	r3
 800ff4e:	4430      	add	r0, r6
 800ff50:	4480      	add	r8, r0
 800ff52:	fa1f f888 	uxth.w	r8, r8
 800ff56:	e7e5      	b.n	800ff24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0800ff58 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800ff58:	b508      	push	{r3, lr}
 800ff5a:	6803      	ldr	r3, [r0, #0]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	4798      	blx	r3
 800ff60:	b128      	cbz	r0, 800ff6e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800ff62:	7b43      	ldrb	r3, [r0, #13]
 800ff64:	7a80      	ldrb	r0, [r0, #10]
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff6c:	4318      	orrs	r0, r3
 800ff6e:	bd08      	pop	{r3, pc}

0800ff70 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ff70:	b40e      	push	{r1, r2, r3}
 800ff72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff74:	b098      	sub	sp, #96	; 0x60
 800ff76:	4605      	mov	r5, r0
 800ff78:	ab1d      	add	r3, sp, #116	; 0x74
 800ff7a:	a802      	add	r0, sp, #8
 800ff7c:	ae18      	add	r6, sp, #96	; 0x60
 800ff7e:	f853 4b04 	ldr.w	r4, [r3], #4
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	f000 fddc 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 800ff88:	682b      	ldr	r3, [r5, #0]
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff8e:	4798      	blx	r3
 800ff90:	4621      	mov	r1, r4
 800ff92:	2400      	movs	r4, #0
 800ff94:	4603      	mov	r3, r0
 800ff96:	9a00      	ldr	r2, [sp, #0]
 800ff98:	a802      	add	r0, sp, #8
 800ff9a:	f000 fe16 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800ff9e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 800ffa2:	462a      	mov	r2, r5
 800ffa4:	4633      	mov	r3, r6
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	a802      	add	r0, sp, #8
 800ffaa:	f001 f909 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ffae:	b300      	cbz	r0, 800fff2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800ffb0:	280a      	cmp	r0, #10
 800ffb2:	d01a      	beq.n	800ffea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 800ffb4:	9f01      	ldr	r7, [sp, #4]
 800ffb6:	b1c7      	cbz	r7, 800ffea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 800ffb8:	7b78      	ldrb	r0, [r7, #13]
 800ffba:	7a3b      	ldrb	r3, [r7, #8]
 800ffbc:	00c1      	lsls	r1, r0, #3
 800ffbe:	88aa      	ldrh	r2, [r5, #4]
 800ffc0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ffc4:	4319      	orrs	r1, r3
 800ffc6:	0643      	lsls	r3, r0, #25
 800ffc8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ffcc:	bf48      	it	mi
 800ffce:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800ffd2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800ffd6:	bf48      	it	mi
 800ffd8:	b219      	sxthmi	r1, r3
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	4303      	orrs	r3, r0
 800ffde:	4413      	add	r3, r2
 800ffe0:	1a5b      	subs	r3, r3, r1
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	bfc8      	it	gt
 800ffe8:	b21c      	sxthgt	r4, r3
 800ffea:	4633      	mov	r3, r6
 800ffec:	462a      	mov	r2, r5
 800ffee:	2100      	movs	r1, #0
 800fff0:	e7da      	b.n	800ffa8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 800fff2:	b2a0      	uxth	r0, r4
 800fff4:	b018      	add	sp, #96	; 0x60
 800fff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fffa:	b003      	add	sp, #12
 800fffc:	4770      	bx	lr

0800fffe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800fffe:	b40e      	push	{r1, r2, r3}
 8010000:	b530      	push	{r4, r5, lr}
 8010002:	b098      	sub	sp, #96	; 0x60
 8010004:	4604      	mov	r4, r0
 8010006:	ab1b      	add	r3, sp, #108	; 0x6c
 8010008:	a802      	add	r0, sp, #8
 801000a:	f853 5b04 	ldr.w	r5, [r3], #4
 801000e:	9301      	str	r3, [sp, #4]
 8010010:	f000 fd96 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	4620      	mov	r0, r4
 8010018:	2401      	movs	r4, #1
 801001a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801001c:	4798      	blx	r3
 801001e:	9a01      	ldr	r2, [sp, #4]
 8010020:	4603      	mov	r3, r0
 8010022:	4629      	mov	r1, r5
 8010024:	a802      	add	r0, sp, #8
 8010026:	f000 fdd0 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801002a:	a802      	add	r0, sp, #8
 801002c:	f001 f9c0 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010030:	b2a3      	uxth	r3, r4
 8010032:	b138      	cbz	r0, 8010044 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8010034:	280a      	cmp	r0, #10
 8010036:	a802      	add	r0, sp, #8
 8010038:	bf04      	itt	eq
 801003a:	3301      	addeq	r3, #1
 801003c:	b21c      	sxtheq	r4, r3
 801003e:	f001 f9b7 	bl	80113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010042:	e7f5      	b.n	8010030 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8010044:	4618      	mov	r0, r3
 8010046:	b018      	add	sp, #96	; 0x60
 8010048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801004c:	b003      	add	sp, #12
 801004e:	4770      	bx	lr

08010050 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8010050:	b40e      	push	{r1, r2, r3}
 8010052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010054:	b098      	sub	sp, #96	; 0x60
 8010056:	4604      	mov	r4, r0
 8010058:	26ff      	movs	r6, #255	; 0xff
 801005a:	ab1d      	add	r3, sp, #116	; 0x74
 801005c:	a802      	add	r0, sp, #8
 801005e:	f853 5b04 	ldr.w	r5, [r3], #4
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	f000 fd6c 	bl	8010b40 <_ZN8touchgfx12TextProviderC1Ev>
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	4620      	mov	r0, r4
 801006c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801006e:	4798      	blx	r3
 8010070:	4629      	mov	r1, r5
 8010072:	4603      	mov	r3, r0
 8010074:	9a00      	ldr	r2, [sp, #0]
 8010076:	a802      	add	r0, sp, #8
 8010078:	ad18      	add	r5, sp, #96	; 0x60
 801007a:	f000 fda6 	bl	8010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801007e:	2100      	movs	r1, #0
 8010080:	4622      	mov	r2, r4
 8010082:	a802      	add	r0, sp, #8
 8010084:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8010088:	462b      	mov	r3, r5
 801008a:	f001 f899 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801008e:	b1d8      	cbz	r0, 80100c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8010090:	280a      	cmp	r0, #10
 8010092:	d012      	beq.n	80100ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8010094:	9801      	ldr	r0, [sp, #4]
 8010096:	b180      	cbz	r0, 80100ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8010098:	7b47      	ldrb	r7, [r0, #13]
 801009a:	7922      	ldrb	r2, [r4, #4]
 801009c:	00fb      	lsls	r3, r7, #3
 801009e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80100a2:	7a03      	ldrb	r3, [r0, #8]
 80100a4:	430b      	orrs	r3, r1
 80100a6:	0679      	lsls	r1, r7, #25
 80100a8:	bf44      	itt	mi
 80100aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80100ae:	b21b      	sxthmi	r3, r3
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	429e      	cmp	r6, r3
 80100b6:	bf28      	it	cs
 80100b8:	461e      	movcs	r6, r3
 80100ba:	462b      	mov	r3, r5
 80100bc:	4622      	mov	r2, r4
 80100be:	2100      	movs	r1, #0
 80100c0:	a802      	add	r0, sp, #8
 80100c2:	f001 f87d 	bl	80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80100c6:	e7e2      	b.n	801008e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80100c8:	4630      	mov	r0, r6
 80100ca:	b018      	add	sp, #96	; 0x60
 80100cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100d0:	b003      	add	sp, #12
 80100d2:	4770      	bx	lr

080100d4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80100d4:	b513      	push	{r0, r1, r4, lr}
 80100d6:	1d01      	adds	r1, r0, #4
 80100d8:	4603      	mov	r3, r0
 80100da:	466a      	mov	r2, sp
 80100dc:	c903      	ldmia	r1, {r0, r1}
 80100de:	e882 0003 	stmia.w	r2, {r0, r1}
 80100e2:	2100      	movs	r1, #0
 80100e4:	4618      	mov	r0, r3
 80100e6:	9100      	str	r1, [sp, #0]
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	690c      	ldr	r4, [r1, #16]
 80100ec:	4611      	mov	r1, r2
 80100ee:	47a0      	blx	r4
 80100f0:	b002      	add	sp, #8
 80100f2:	bd10      	pop	{r4, pc}

080100f4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	680b      	ldr	r3, [r1, #0]
 80100f8:	460c      	mov	r4, r1
 80100fa:	4605      	mov	r5, r0
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	4798      	blx	r3
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	4620      	mov	r0, r4
 8010104:	4629      	mov	r1, r5
 8010106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010108:	4798      	blx	r3
 801010a:	4628      	mov	r0, r5
 801010c:	bd38      	pop	{r3, r4, r5, pc}

0801010e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801010e:	b410      	push	{r4}
 8010110:	880a      	ldrh	r2, [r1, #0]
 8010112:	8884      	ldrh	r4, [r0, #4]
 8010114:	4422      	add	r2, r4
 8010116:	800a      	strh	r2, [r1, #0]
 8010118:	884a      	ldrh	r2, [r1, #2]
 801011a:	88c4      	ldrh	r4, [r0, #6]
 801011c:	4422      	add	r2, r4
 801011e:	804a      	strh	r2, [r1, #2]
 8010120:	6940      	ldr	r0, [r0, #20]
 8010122:	b120      	cbz	r0, 801012e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012c:	4718      	bx	r3
 801012e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010132:	4770      	bx	lr

08010134 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8010134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010136:	460b      	mov	r3, r1
 8010138:	b085      	sub	sp, #20
 801013a:	4604      	mov	r4, r0
 801013c:	b901      	cbnz	r1, 8010140 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801013e:	b322      	cbz	r2, 801018a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8010140:	1d27      	adds	r7, r4, #4
 8010142:	466e      	mov	r6, sp
 8010144:	88e5      	ldrh	r5, [r4, #6]
 8010146:	e897 0003 	ldmia.w	r7, {r0, r1}
 801014a:	442a      	add	r2, r5
 801014c:	e886 0003 	stmia.w	r6, {r0, r1}
 8010150:	88a1      	ldrh	r1, [r4, #4]
 8010152:	4620      	mov	r0, r4
 8010154:	b215      	sxth	r5, r2
 8010156:	4419      	add	r1, r3
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	b209      	sxth	r1, r1
 801015c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015e:	4798      	blx	r3
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	4629      	mov	r1, r5
 8010164:	4620      	mov	r0, r4
 8010166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010168:	ad02      	add	r5, sp, #8
 801016a:	4798      	blx	r3
 801016c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010170:	e885 0003 	stmia.w	r5, {r0, r1}
 8010174:	6960      	ldr	r0, [r4, #20]
 8010176:	b150      	cbz	r0, 801018e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8010178:	6803      	ldr	r3, [r0, #0]
 801017a:	4631      	mov	r1, r6
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	4798      	blx	r3
 8010180:	6960      	ldr	r0, [r4, #20]
 8010182:	6803      	ldr	r3, [r0, #0]
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	4629      	mov	r1, r5
 8010188:	4798      	blx	r3
 801018a:	b005      	add	sp, #20
 801018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801018e:	f7fe fffb 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 8010192:	6803      	ldr	r3, [r0, #0]
 8010194:	4631      	mov	r1, r6
 8010196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010198:	4798      	blx	r3
 801019a:	f7fe fff5 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 801019e:	6803      	ldr	r3, [r0, #0]
 80101a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101a2:	e7f0      	b.n	8010186 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

080101a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80101a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101a6:	8882      	ldrh	r2, [r0, #4]
 80101a8:	4605      	mov	r5, r0
 80101aa:	880b      	ldrh	r3, [r1, #0]
 80101ac:	460c      	mov	r4, r1
 80101ae:	4413      	add	r3, r2
 80101b0:	800b      	strh	r3, [r1, #0]
 80101b2:	884b      	ldrh	r3, [r1, #2]
 80101b4:	88c2      	ldrh	r2, [r0, #6]
 80101b6:	4413      	add	r3, r2
 80101b8:	4602      	mov	r2, r0
 80101ba:	804b      	strh	r3, [r1, #2]
 80101bc:	466b      	mov	r3, sp
 80101be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80101c2:	6851      	ldr	r1, [r2, #4]
 80101c4:	c303      	stmia	r3!, {r0, r1}
 80101c6:	4621      	mov	r1, r4
 80101c8:	4668      	mov	r0, sp
 80101ca:	f7fc f9b3 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 80101ce:	466b      	mov	r3, sp
 80101d0:	cb03      	ldmia	r3!, {r0, r1}
 80101d2:	6020      	str	r0, [r4, #0]
 80101d4:	6061      	str	r1, [r4, #4]
 80101d6:	6968      	ldr	r0, [r5, #20]
 80101d8:	b128      	cbz	r0, 80101e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80101da:	6803      	ldr	r3, [r0, #0]
 80101dc:	691b      	ldr	r3, [r3, #16]
 80101de:	4621      	mov	r1, r4
 80101e0:	4798      	blx	r3
 80101e2:	b003      	add	sp, #12
 80101e4:	bd30      	pop	{r4, r5, pc}
 80101e6:	f7fe ffcf 	bl	800f188 <_ZN8touchgfx11Application11getInstanceEv>
 80101ea:	6803      	ldr	r3, [r0, #0]
 80101ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ee:	e7f6      	b.n	80101de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080101f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	8882      	ldrh	r2, [r0, #4]
 80101f4:	460c      	mov	r4, r1
 80101f6:	880b      	ldrh	r3, [r1, #0]
 80101f8:	4605      	mov	r5, r0
 80101fa:	4413      	add	r3, r2
 80101fc:	800b      	strh	r3, [r1, #0]
 80101fe:	884b      	ldrh	r3, [r1, #2]
 8010200:	88c2      	ldrh	r2, [r0, #6]
 8010202:	4413      	add	r3, r2
 8010204:	804b      	strh	r3, [r1, #2]
 8010206:	1d01      	adds	r1, r0, #4
 8010208:	4620      	mov	r0, r4
 801020a:	f7fc f993 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 801020e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	dd0b      	ble.n	801022e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010216:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801021a:	2b00      	cmp	r3, #0
 801021c:	dd07      	ble.n	801022e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801021e:	6968      	ldr	r0, [r5, #20]
 8010220:	b128      	cbz	r0, 801022e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010222:	6803      	ldr	r3, [r0, #0]
 8010224:	4621      	mov	r1, r4
 8010226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801022c:	4718      	bx	r3
 801022e:	bd70      	pop	{r4, r5, r6, pc}

08010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8010230:	b510      	push	{r4, lr}
 8010232:	2300      	movs	r3, #0
 8010234:	4604      	mov	r4, r0
 8010236:	4608      	mov	r0, r1
 8010238:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801023c:	8023      	strh	r3, [r4, #0]
 801023e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010242:	8063      	strh	r3, [r4, #2]
 8010244:	6803      	ldr	r3, [r0, #0]
 8010246:	80a1      	strh	r1, [r4, #4]
 8010248:	4621      	mov	r1, r4
 801024a:	80e2      	strh	r2, [r4, #6]
 801024c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801024e:	4798      	blx	r3
 8010250:	4620      	mov	r0, r4
 8010252:	bd10      	pop	{r4, pc}

08010254 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8010254:	b530      	push	{r4, r5, lr}
 8010256:	8083      	strh	r3, [r0, #4]
 8010258:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801025c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8010260:	7183      	strb	r3, [r0, #6]
 8010262:	79c3      	ldrb	r3, [r0, #7]
 8010264:	6101      	str	r1, [r0, #16]
 8010266:	f365 0306 	bfi	r3, r5, #0, #7
 801026a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801026e:	8282      	strh	r2, [r0, #20]
 8010270:	f365 13c7 	bfi	r3, r5, #7, #1
 8010274:	71c3      	strb	r3, [r0, #7]
 8010276:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801027a:	7203      	strb	r3, [r0, #8]
 801027c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010280:	7243      	strb	r3, [r0, #9]
 8010282:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010286:	8143      	strh	r3, [r0, #10]
 8010288:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801028c:	8183      	strh	r3, [r0, #12]
 801028e:	4b01      	ldr	r3, [pc, #4]	; (8010294 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	bd30      	pop	{r4, r5, pc}
 8010294:	08021d2c 	.word	0x08021d2c

08010298 <_ZNK8touchgfx9ConstFont4findEt>:
 8010298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029a:	6904      	ldr	r4, [r0, #16]
 801029c:	b3bc      	cbz	r4, 801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801029e:	88a3      	ldrh	r3, [r4, #4]
 80102a0:	8a82      	ldrh	r2, [r0, #20]
 80102a2:	1acb      	subs	r3, r1, r3
 80102a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80102a8:	d431      	bmi.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102aa:	4293      	cmp	r3, r2
 80102ac:	dd0c      	ble.n	80102c8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80102ae:	230e      	movs	r3, #14
 80102b0:	fb03 4302 	mla	r3, r3, r2, r4
 80102b4:	889b      	ldrh	r3, [r3, #4]
 80102b6:	1a5b      	subs	r3, r3, r1
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	429a      	cmp	r2, r3
 80102bc:	db27      	blt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	bfbc      	itt	lt
 80102c2:	2302      	movlt	r3, #2
 80102c4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80102c8:	2500      	movs	r5, #0
 80102ca:	260e      	movs	r6, #14
 80102cc:	4295      	cmp	r5, r2
 80102ce:	dc1e      	bgt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102d0:	fb06 4003 	mla	r0, r6, r3, r4
 80102d4:	8887      	ldrh	r7, [r0, #4]
 80102d6:	42b9      	cmp	r1, r7
 80102d8:	d01a      	beq.n	8010310 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80102da:	d20d      	bcs.n	80102f8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80102dc:	1e5a      	subs	r2, r3, #1
 80102de:	4295      	cmp	r5, r2
 80102e0:	dc15      	bgt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102e2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80102e6:	1a5b      	subs	r3, r3, r1
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	429a      	cmp	r2, r3
 80102ec:	db0f      	blt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102ee:	429d      	cmp	r5, r3
 80102f0:	ddec      	ble.n	80102cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80102f2:	1953      	adds	r3, r2, r5
 80102f4:	105b      	asrs	r3, r3, #1
 80102f6:	e7e9      	b.n	80102cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80102f8:	1c5d      	adds	r5, r3, #1
 80102fa:	42aa      	cmp	r2, r5
 80102fc:	db07      	blt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80102fe:	8a43      	ldrh	r3, [r0, #18]
 8010300:	1acb      	subs	r3, r1, r3
 8010302:	442b      	add	r3, r5
 8010304:	429d      	cmp	r5, r3
 8010306:	dc02      	bgt.n	801030e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010308:	429a      	cmp	r2, r3
 801030a:	dadf      	bge.n	80102cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801030c:	e7f1      	b.n	80102f2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801030e:	2000      	movs	r0, #0
 8010310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010312 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8010312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010314:	4604      	mov	r4, r0
 8010316:	4617      	mov	r7, r2
 8010318:	461e      	mov	r6, r3
 801031a:	b911      	cbnz	r1, 8010322 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801031c:	2500      	movs	r5, #0
 801031e:	4628      	mov	r0, r5
 8010320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010322:	290a      	cmp	r1, #10
 8010324:	d0fa      	beq.n	801031c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010326:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801032a:	4291      	cmp	r1, r2
 801032c:	d0f6      	beq.n	801031c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801032e:	f242 020b 	movw	r2, #8203	; 0x200b
 8010332:	4291      	cmp	r1, r2
 8010334:	d0f2      	beq.n	801031c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010336:	f7ff ffaf 	bl	8010298 <_ZNK8touchgfx9ConstFont4findEt>
 801033a:	4605      	mov	r5, r0
 801033c:	b950      	cbnz	r0, 8010354 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	4620      	mov	r0, r4
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	4798      	blx	r3
 8010346:	4601      	mov	r1, r0
 8010348:	4620      	mov	r0, r4
 801034a:	f7ff ffa5 	bl	8010298 <_ZNK8touchgfx9ConstFont4findEt>
 801034e:	4605      	mov	r5, r0
 8010350:	2800      	cmp	r0, #0
 8010352:	d0e3      	beq.n	801031c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	4629      	mov	r1, r5
 8010358:	4620      	mov	r0, r4
 801035a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801035c:	4798      	blx	r3
 801035e:	6038      	str	r0, [r7, #0]
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	4620      	mov	r0, r4
 8010364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010366:	4798      	blx	r3
 8010368:	7030      	strb	r0, [r6, #0]
 801036a:	e7d8      	b.n	801031e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801036c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801036c:	2000      	movs	r0, #0
 801036e:	4770      	bx	lr

08010370 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8010370:	2001      	movs	r0, #1
 8010372:	4770      	bx	lr

08010374 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8010374:	2002      	movs	r0, #2
 8010376:	4770      	bx	lr

08010378 <_ZN8touchgfx12GestureEventD1Ev>:
 8010378:	4770      	bx	lr

0801037a <_ZN8touchgfx9DragEventD1Ev>:
 801037a:	4770      	bx	lr

0801037c <_ZN8touchgfx10ClickEventD1Ev>:
 801037c:	4770      	bx	lr

0801037e <_ZN8touchgfx10ClickEventD0Ev>:
 801037e:	b510      	push	{r4, lr}
 8010380:	4604      	mov	r4, r0
 8010382:	210c      	movs	r1, #12
 8010384:	f00d fa43 	bl	801d80e <_ZdlPvj>
 8010388:	4620      	mov	r0, r4
 801038a:	bd10      	pop	{r4, pc}

0801038c <_ZN8touchgfx9DragEventD0Ev>:
 801038c:	b510      	push	{r4, lr}
 801038e:	4604      	mov	r4, r0
 8010390:	2110      	movs	r1, #16
 8010392:	f00d fa3c 	bl	801d80e <_ZdlPvj>
 8010396:	4620      	mov	r0, r4
 8010398:	bd10      	pop	{r4, pc}

0801039a <_ZN8touchgfx12GestureEventD0Ev>:
 801039a:	b510      	push	{r4, lr}
 801039c:	4604      	mov	r4, r0
 801039e:	210c      	movs	r1, #12
 80103a0:	f00d fa35 	bl	801d80e <_ZdlPvj>
 80103a4:	4620      	mov	r0, r4
 80103a6:	bd10      	pop	{r4, pc}

080103a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80103a8:	b530      	push	{r4, r5, lr}
 80103aa:	460d      	mov	r5, r1
 80103ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80103ae:	b087      	sub	sp, #28
 80103b0:	4604      	mov	r4, r0
 80103b2:	b301      	cbz	r1, 80103f6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80103b4:	a801      	add	r0, sp, #4
 80103b6:	f7ff ff3b 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80103ba:	892a      	ldrh	r2, [r5, #8]
 80103bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80103c0:	7928      	ldrb	r0, [r5, #4]
 80103c2:	1ad2      	subs	r2, r2, r3
 80103c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80103c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80103ca:	441a      	add	r2, r3
 80103cc:	896b      	ldrh	r3, [r5, #10]
 80103ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80103d2:	f88d 0010 	strb.w	r0, [sp, #16]
 80103d6:	1b5b      	subs	r3, r3, r5
 80103d8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80103da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80103dc:	442b      	add	r3, r5
 80103de:	4d07      	ldr	r5, [pc, #28]	; (80103fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80103e0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80103e4:	a903      	add	r1, sp, #12
 80103e6:	9503      	str	r5, [sp, #12]
 80103e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80103ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80103f0:	6803      	ldr	r3, [r0, #0]
 80103f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103f4:	4798      	blx	r3
 80103f6:	b007      	add	sp, #28
 80103f8:	bd30      	pop	{r4, r5, pc}
 80103fa:	bf00      	nop
 80103fc:	08021da8 	.word	0x08021da8

08010400 <_ZNK8touchgfx4Rect9intersectEss>:
 8010400:	b510      	push	{r4, lr}
 8010402:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010406:	428b      	cmp	r3, r1
 8010408:	dc10      	bgt.n	801042c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801040a:	8884      	ldrh	r4, [r0, #4]
 801040c:	4423      	add	r3, r4
 801040e:	b21b      	sxth	r3, r3
 8010410:	4299      	cmp	r1, r3
 8010412:	da0b      	bge.n	801042c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010414:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010418:	4293      	cmp	r3, r2
 801041a:	dc07      	bgt.n	801042c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801041c:	88c0      	ldrh	r0, [r0, #6]
 801041e:	4418      	add	r0, r3
 8010420:	b200      	sxth	r0, r0
 8010422:	4282      	cmp	r2, r0
 8010424:	bfac      	ite	ge
 8010426:	2000      	movge	r0, #0
 8010428:	2001      	movlt	r0, #1
 801042a:	bd10      	pop	{r4, pc}
 801042c:	2000      	movs	r0, #0
 801042e:	e7fc      	b.n	801042a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08010430 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8010430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010436:	b089      	sub	sp, #36	; 0x24
 8010438:	4605      	mov	r5, r0
 801043a:	2900      	cmp	r1, #0
 801043c:	d054      	beq.n	80104e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801043e:	4668      	mov	r0, sp
 8010440:	f7ff fef6 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010444:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8010446:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8010448:	4668      	mov	r0, sp
 801044a:	8922      	ldrh	r2, [r4, #8]
 801044c:	88e1      	ldrh	r1, [r4, #6]
 801044e:	443a      	add	r2, r7
 8010450:	4431      	add	r1, r6
 8010452:	b212      	sxth	r2, r2
 8010454:	b209      	sxth	r1, r1
 8010456:	f7ff ffd3 	bl	8010400 <_ZNK8touchgfx4Rect9intersectEss>
 801045a:	b1d0      	cbz	r0, 8010492 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801045c:	89a2      	ldrh	r2, [r4, #12]
 801045e:	4668      	mov	r0, sp
 8010460:	8961      	ldrh	r1, [r4, #10]
 8010462:	443a      	add	r2, r7
 8010464:	4431      	add	r1, r6
 8010466:	b212      	sxth	r2, r2
 8010468:	b209      	sxth	r1, r1
 801046a:	f7ff ffc9 	bl	8010400 <_ZNK8touchgfx4Rect9intersectEss>
 801046e:	4603      	mov	r3, r0
 8010470:	b978      	cbnz	r0, 8010492 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8010472:	4a1e      	ldr	r2, [pc, #120]	; (80104ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8010474:	a904      	add	r1, sp, #16
 8010476:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010478:	9204      	str	r2, [sp, #16]
 801047a:	2202      	movs	r2, #2
 801047c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010480:	f88d 2014 	strb.w	r2, [sp, #20]
 8010484:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010488:	f8ad 301a 	strh.w	r3, [sp, #26]
 801048c:	6803      	ldr	r3, [r0, #0]
 801048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010490:	4798      	blx	r3
 8010492:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8010494:	a802      	add	r0, sp, #8
 8010496:	f7ff fecb 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801049a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801049e:	88e0      	ldrh	r0, [r4, #6]
 80104a0:	8961      	ldrh	r1, [r4, #10]
 80104a2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80104a6:	1a80      	subs	r0, r0, r2
 80104a8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80104ac:	1a89      	subs	r1, r1, r2
 80104ae:	8923      	ldrh	r3, [r4, #8]
 80104b0:	4460      	add	r0, ip
 80104b2:	89a2      	ldrh	r2, [r4, #12]
 80104b4:	4461      	add	r1, ip
 80104b6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80104b8:	eba3 030e 	sub.w	r3, r3, lr
 80104bc:	eba2 020e 	sub.w	r2, r2, lr
 80104c0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80104c4:	7927      	ldrb	r7, [r4, #4]
 80104c6:	4433      	add	r3, r6
 80104c8:	4432      	add	r2, r6
 80104ca:	4c09      	ldr	r4, [pc, #36]	; (80104f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80104cc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80104ce:	f8ad 101a 	strh.w	r1, [sp, #26]
 80104d2:	a904      	add	r1, sp, #16
 80104d4:	9404      	str	r4, [sp, #16]
 80104d6:	f88d 7014 	strb.w	r7, [sp, #20]
 80104da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80104de:	f8ad 201c 	strh.w	r2, [sp, #28]
 80104e2:	6803      	ldr	r3, [r0, #0]
 80104e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104e6:	4798      	blx	r3
 80104e8:	b009      	add	sp, #36	; 0x24
 80104ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ec:	08021d80 	.word	0x08021d80
 80104f0:	08021d94 	.word	0x08021d94

080104f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80104f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80104fc:	b0a1      	sub	sp, #132	; 0x84
 80104fe:	4604      	mov	r4, r0
 8010500:	460d      	mov	r5, r1
 8010502:	790b      	ldrb	r3, [r1, #4]
 8010504:	f1b9 0f00 	cmp.w	r9, #0
 8010508:	d00f      	beq.n	801052a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801050a:	2b00      	cmp	r3, #0
 801050c:	f040 80a2 	bne.w	8010654 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8010510:	b021      	add	sp, #132	; 0x84
 8010512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010516:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801051a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801051e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8010522:	1d20      	adds	r0, r4, #4
 8010524:	f7fb ff54 	bl	800c3d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010528:	e094      	b.n	8010654 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1f0      	bne.n	8010510 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801052e:	4b5f      	ldr	r3, [pc, #380]	; (80106ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8010536:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801053a:	f1ba 0f03 	cmp.w	sl, #3
 801053e:	ddea      	ble.n	8010516 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8010540:	f1ba 0f0c 	cmp.w	sl, #12
 8010544:	f04f 0303 	mov.w	r3, #3
 8010548:	f04f 0600 	mov.w	r6, #0
 801054c:	4958      	ldr	r1, [pc, #352]	; (80106b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801054e:	bfd8      	it	le
 8010550:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8010554:	960a      	str	r6, [sp, #40]	; 0x28
 8010556:	bfd8      	it	le
 8010558:	fb92 f3f3 	sdivle	r3, r2, r3
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	4b55      	ldr	r3, [pc, #340]	; (80106b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8010560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010564:	4b54      	ldr	r3, [pc, #336]	; (80106b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8010566:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801056a:	2248      	movs	r2, #72	; 0x48
 801056c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010570:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8010574:	ab0e      	add	r3, sp, #56	; 0x38
 8010576:	4618      	mov	r0, r3
 8010578:	f00d ff64 	bl	801e444 <memcpy>
 801057c:	f04f 32ff 	mov.w	r2, #4294967295
 8010580:	f8cd a008 	str.w	sl, [sp, #8]
 8010584:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8010588:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801058c:	46b3      	mov	fp, r6
 801058e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010592:	b29b      	uxth	r3, r3
 8010594:	9303      	str	r3, [sp, #12]
 8010596:	2300      	movs	r3, #0
 8010598:	9a03      	ldr	r2, [sp, #12]
 801059a:	88ef      	ldrh	r7, [r5, #6]
 801059c:	a80a      	add	r0, sp, #40	; 0x28
 801059e:	9309      	str	r3, [sp, #36]	; 0x24
 80105a0:	9b07      	ldr	r3, [sp, #28]
 80105a2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80105a6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80105aa:	fb13 f302 	smulbb	r3, r3, r2
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	9304      	str	r3, [sp, #16]
 80105b2:	9b07      	ldr	r3, [sp, #28]
 80105b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	fb13 f302 	smulbb	r3, r3, r2
 80105be:	b29b      	uxth	r3, r3
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	9b04      	ldr	r3, [sp, #16]
 80105c4:	441f      	add	r7, r3
 80105c6:	9b05      	ldr	r3, [sp, #20]
 80105c8:	4498      	add	r8, r3
 80105ca:	b23f      	sxth	r7, r7
 80105cc:	fa0f f888 	sxth.w	r8, r8
 80105d0:	4639      	mov	r1, r7
 80105d2:	4642      	mov	r2, r8
 80105d4:	f7ff ff14 	bl	8010400 <_ZNK8touchgfx4Rect9intersectEss>
 80105d8:	b380      	cbz	r0, 801063c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80105da:	4639      	mov	r1, r7
 80105dc:	ab09      	add	r3, sp, #36	; 0x24
 80105de:	4642      	mov	r2, r8
 80105e0:	1d20      	adds	r0, r4, #4
 80105e2:	f7fb fef5 	bl	800c3d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80105e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105e8:	b341      	cbz	r1, 801063c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80105ea:	4549      	cmp	r1, r9
 80105ec:	d026      	beq.n	801063c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80105ee:	a80c      	add	r0, sp, #48	; 0x30
 80105f0:	f7ff fe1e 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80105f4:	2002      	movs	r0, #2
 80105f6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80105fa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80105fe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010602:	fb92 f2f0 	sdiv	r2, r2, r0
 8010606:	440a      	add	r2, r1
 8010608:	1a99      	subs	r1, r3, r2
 801060a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801060e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8010612:	fb93 f3f0 	sdiv	r3, r3, r0
 8010616:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801061a:	4403      	add	r3, r0
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	9a06      	ldr	r2, [sp, #24]
 8010620:	435b      	muls	r3, r3
 8010622:	fb01 3301 	mla	r3, r1, r1, r3
 8010626:	4293      	cmp	r3, r2
 8010628:	d208      	bcs.n	801063c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801062a:	9a04      	ldr	r2, [sp, #16]
 801062c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010630:	86a2      	strh	r2, [r4, #52]	; 0x34
 8010632:	9a05      	ldr	r2, [sp, #20]
 8010634:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8010638:	86e2      	strh	r2, [r4, #54]	; 0x36
 801063a:	9306      	str	r3, [sp, #24]
 801063c:	f10b 0b02 	add.w	fp, fp, #2
 8010640:	f1bb 0f08 	cmp.w	fp, #8
 8010644:	dda7      	ble.n	8010596 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8010646:	9b02      	ldr	r3, [sp, #8]
 8010648:	3601      	adds	r6, #1
 801064a:	4453      	add	r3, sl
 801064c:	9302      	str	r3, [sp, #8]
 801064e:	9b01      	ldr	r3, [sp, #4]
 8010650:	42b3      	cmp	r3, r6
 8010652:	d199      	bne.n	8010588 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8010654:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010656:	2900      	cmp	r1, #0
 8010658:	f43f af5a 	beq.w	8010510 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801065c:	a80c      	add	r0, sp, #48	; 0x30
 801065e:	2600      	movs	r6, #0
 8010660:	f7ff fde6 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010664:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010668:	88ea      	ldrh	r2, [r5, #6]
 801066a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801066e:	1ad2      	subs	r2, r2, r3
 8010670:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010672:	7929      	ldrb	r1, [r5, #4]
 8010674:	441a      	add	r2, r3
 8010676:	892b      	ldrh	r3, [r5, #8]
 8010678:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801067c:	a90e      	add	r1, sp, #56	; 0x38
 801067e:	1a1b      	subs	r3, r3, r0
 8010680:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8010682:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8010686:	4403      	add	r3, r0
 8010688:	480c      	ldr	r0, [pc, #48]	; (80106bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801068a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801068e:	900e      	str	r0, [sp, #56]	; 0x38
 8010690:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010692:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010696:	6803      	ldr	r3, [r0, #0]
 8010698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801069a:	4798      	blx	r3
 801069c:	792b      	ldrb	r3, [r5, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f43f af36 	beq.w	8010510 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80106a4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80106a8:	e732      	b.n	8010510 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80106aa:	bf00      	nop
 80106ac:	20009bf4 	.word	0x20009bf4
 80106b0:	080201b0 	.word	0x080201b0
 80106b4:	20009be8 	.word	0x20009be8
 80106b8:	20009bea 	.word	0x20009bea
 80106bc:	08021d80 	.word	0x08021d80

080106c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80106c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106c2:	4604      	mov	r4, r0
 80106c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80106c8:	3201      	adds	r2, #1
 80106ca:	d112      	bne.n	80106f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80106cc:	2500      	movs	r5, #0
 80106ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80106d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80106d6:	6803      	ldr	r3, [r0, #0]
 80106d8:	9500      	str	r5, [sp, #0]
 80106da:	466d      	mov	r5, sp
 80106dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80106e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80106e4:	4629      	mov	r1, r5
 80106e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e8:	4798      	blx	r3
 80106ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80106ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80106f2:	4620      	mov	r0, r4
 80106f4:	b003      	add	sp, #12
 80106f6:	bd30      	pop	{r4, r5, pc}

080106f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80106f8:	b513      	push	{r0, r1, r4, lr}
 80106fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80106fe:	4604      	mov	r4, r0
 8010700:	3301      	adds	r3, #1
 8010702:	d109      	bne.n	8010718 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010704:	4601      	mov	r1, r0
 8010706:	4668      	mov	r0, sp
 8010708:	f7ff fd92 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801070c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010710:	8423      	strh	r3, [r4, #32]
 8010712:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010716:	8463      	strh	r3, [r4, #34]	; 0x22
 8010718:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801071c:	b002      	add	sp, #8
 801071e:	bd10      	pop	{r4, pc}

08010720 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010720:	b513      	push	{r0, r1, r4, lr}
 8010722:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8010726:	4604      	mov	r4, r0
 8010728:	3301      	adds	r3, #1
 801072a:	d109      	bne.n	8010740 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801072c:	4601      	mov	r1, r0
 801072e:	4668      	mov	r0, sp
 8010730:	f7ff fd7e 	bl	8010230 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010734:	f8bd 3000 	ldrh.w	r3, [sp]
 8010738:	8423      	strh	r3, [r4, #32]
 801073a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801073e:	8463      	strh	r3, [r4, #34]	; 0x22
 8010740:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8010744:	b002      	add	sp, #8
 8010746:	bd10      	pop	{r4, pc}

08010748 <_ZN8touchgfx6ScreenC1Ev>:
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	4b16      	ldr	r3, [pc, #88]	; (80107a4 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801074c:	4605      	mov	r5, r0
 801074e:	4a16      	ldr	r2, [pc, #88]	; (80107a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8010750:	2101      	movs	r1, #1
 8010752:	f845 3b04 	str.w	r3, [r5], #4
 8010756:	2300      	movs	r3, #0
 8010758:	6042      	str	r2, [r0, #4]
 801075a:	4604      	mov	r4, r0
 801075c:	8103      	strh	r3, [r0, #8]
 801075e:	8143      	strh	r3, [r0, #10]
 8010760:	8183      	strh	r3, [r0, #12]
 8010762:	81c3      	strh	r3, [r0, #14]
 8010764:	8203      	strh	r3, [r0, #16]
 8010766:	8243      	strh	r3, [r0, #18]
 8010768:	8283      	strh	r3, [r0, #20]
 801076a:	82c3      	strh	r3, [r0, #22]
 801076c:	6203      	str	r3, [r0, #32]
 801076e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8010772:	6343      	str	r3, [r0, #52]	; 0x34
 8010774:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8010778:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801077c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010780:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8010784:	4b09      	ldr	r3, [pc, #36]	; (80107ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8010786:	4628      	mov	r0, r5
 8010788:	f9b3 6000 	ldrsh.w	r6, [r3]
 801078c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801078e:	4a08      	ldr	r2, [pc, #32]	; (80107b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8010790:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010794:	4798      	blx	r3
 8010796:	6863      	ldr	r3, [r4, #4]
 8010798:	4628      	mov	r0, r5
 801079a:	4631      	mov	r1, r6
 801079c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079e:	4798      	blx	r3
 80107a0:	4620      	mov	r0, r4
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	08021dbc 	.word	0x08021dbc
 80107a8:	080210b0 	.word	0x080210b0
 80107ac:	20009bea 	.word	0x20009bea
 80107b0:	20009be8 	.word	0x20009be8

080107b4 <_ZN8touchgfx6Screen4drawEv>:
 80107b4:	4b09      	ldr	r3, [pc, #36]	; (80107dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80107b6:	b507      	push	{r0, r1, r2, lr}
 80107b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107bc:	2100      	movs	r1, #0
 80107be:	4b08      	ldr	r3, [pc, #32]	; (80107e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80107c0:	9100      	str	r1, [sp, #0]
 80107c2:	4669      	mov	r1, sp
 80107c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80107cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107d0:	6803      	ldr	r3, [r0, #0]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	4798      	blx	r3
 80107d6:	b003      	add	sp, #12
 80107d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80107dc:	20009be8 	.word	0x20009be8
 80107e0:	20009bea 	.word	0x20009bea

080107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80107e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80107ec:	b089      	sub	sp, #36	; 0x24
 80107ee:	4680      	mov	r8, r0
 80107f0:	460c      	mov	r4, r1
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	4615      	mov	r5, r2
 80107f6:	dd0e      	ble.n	8010816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80107f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dd0a      	ble.n	8010816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010800:	4628      	mov	r0, r5
 8010802:	f7ff ff5d 	bl	80106c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010806:	4621      	mov	r1, r4
 8010808:	f7fe fc34 	bl	800f074 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801080c:	69eb      	ldr	r3, [r5, #28]
 801080e:	b928      	cbnz	r0, 801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010810:	461d      	mov	r5, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1f4      	bne.n	8010800 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8010816:	b009      	add	sp, #36	; 0x24
 8010818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081c:	ae04      	add	r6, sp, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	f000 80b5 	beq.w	801098e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010824:	682b      	ldr	r3, [r5, #0]
 8010826:	4629      	mov	r1, r5
 8010828:	a802      	add	r0, sp, #8
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	4798      	blx	r3
 801082e:	4628      	mov	r0, r5
 8010830:	f7ff ff62 	bl	80106f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010834:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010838:	4407      	add	r7, r0
 801083a:	4628      	mov	r0, r5
 801083c:	f7ff ff70 	bl	8010720 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010840:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010844:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010848:	b23f      	sxth	r7, r7
 801084a:	4418      	add	r0, r3
 801084c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010850:	4621      	mov	r1, r4
 8010852:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010856:	f8ad 0012 	strh.w	r0, [sp, #18]
 801085a:	4630      	mov	r0, r6
 801085c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010860:	f8ad 7010 	strh.w	r7, [sp, #16]
 8010864:	f7fb fe66 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 8010868:	4628      	mov	r0, r5
 801086a:	f7ff ff29 	bl	80106c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801086e:	ab06      	add	r3, sp, #24
 8010870:	4602      	mov	r2, r0
 8010872:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010876:	e883 0003 	stmia.w	r3, {r0, r1}
 801087a:	4611      	mov	r1, r2
 801087c:	4618      	mov	r0, r3
 801087e:	f7fb fe59 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 8010882:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010886:	f9b4 1000 	ldrsh.w	r1, [r4]
 801088a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801088e:	4299      	cmp	r1, r3
 8010890:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8010894:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8010898:	d10b      	bne.n	80108b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801089a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801089e:	4552      	cmp	r2, sl
 80108a0:	d107      	bne.n	80108b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80108a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80108a6:	455a      	cmp	r2, fp
 80108a8:	d103      	bne.n	80108b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80108aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80108ae:	454a      	cmp	r2, r9
 80108b0:	d06d      	beq.n	801098e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80108b2:	f1bb 0f00 	cmp.w	fp, #0
 80108b6:	dd65      	ble.n	8010984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80108b8:	f1b9 0f00 	cmp.w	r9, #0
 80108bc:	dd62      	ble.n	8010984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80108be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80108c2:	fa1f f08a 	uxth.w	r0, sl
 80108c6:	4552      	cmp	r2, sl
 80108c8:	9000      	str	r0, [sp, #0]
 80108ca:	da12      	bge.n	80108f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80108cc:	9301      	str	r3, [sp, #4]
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80108d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80108d8:	1a9a      	subs	r2, r3, r2
 80108da:	f8ad 1010 	strh.w	r1, [sp, #16]
 80108de:	4631      	mov	r1, r6
 80108e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80108e4:	4640      	mov	r0, r8
 80108e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80108ea:	69ea      	ldr	r2, [r5, #28]
 80108ec:	f7ff ff7a 	bl	80107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80108f0:	9b01      	ldr	r3, [sp, #4]
 80108f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80108f6:	b29f      	uxth	r7, r3
 80108f8:	429a      	cmp	r2, r3
 80108fa:	da0d      	bge.n	8010918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80108fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010900:	1aba      	subs	r2, r7, r2
 8010902:	f8ad a012 	strh.w	sl, [sp, #18]
 8010906:	4631      	mov	r1, r6
 8010908:	f8ad 2014 	strh.w	r2, [sp, #20]
 801090c:	4640      	mov	r0, r8
 801090e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010912:	69ea      	ldr	r2, [r5, #28]
 8010914:	f7ff ff66 	bl	80107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010918:	8822      	ldrh	r2, [r4, #0]
 801091a:	445f      	add	r7, fp
 801091c:	88a3      	ldrh	r3, [r4, #4]
 801091e:	b2bf      	uxth	r7, r7
 8010920:	4413      	add	r3, r2
 8010922:	b23a      	sxth	r2, r7
 8010924:	b29b      	uxth	r3, r3
 8010926:	b219      	sxth	r1, r3
 8010928:	4291      	cmp	r1, r2
 801092a:	dd0d      	ble.n	8010948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801092c:	1bdb      	subs	r3, r3, r7
 801092e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010932:	f8ad a012 	strh.w	sl, [sp, #18]
 8010936:	4631      	mov	r1, r6
 8010938:	f8ad 3014 	strh.w	r3, [sp, #20]
 801093c:	4640      	mov	r0, r8
 801093e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010942:	69ea      	ldr	r2, [r5, #28]
 8010944:	f7ff ff4e 	bl	80107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010948:	88e2      	ldrh	r2, [r4, #6]
 801094a:	8863      	ldrh	r3, [r4, #2]
 801094c:	4413      	add	r3, r2
 801094e:	9a00      	ldr	r2, [sp, #0]
 8010950:	444a      	add	r2, r9
 8010952:	b29b      	uxth	r3, r3
 8010954:	fa1f f982 	uxth.w	r9, r2
 8010958:	b219      	sxth	r1, r3
 801095a:	fa0f f289 	sxth.w	r2, r9
 801095e:	428a      	cmp	r2, r1
 8010960:	da15      	bge.n	801098e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010962:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010966:	eba3 0309 	sub.w	r3, r3, r9
 801096a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801096e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010972:	4631      	mov	r1, r6
 8010974:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010978:	f8ad 2012 	strh.w	r2, [sp, #18]
 801097c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010980:	69ea      	ldr	r2, [r5, #28]
 8010982:	e001      	b.n	8010988 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8010984:	69ea      	ldr	r2, [r5, #28]
 8010986:	4621      	mov	r1, r4
 8010988:	4640      	mov	r0, r8
 801098a:	f7ff ff2b 	bl	80107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801098e:	4628      	mov	r0, r5
 8010990:	f7ff fe96 	bl	80106c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010994:	6861      	ldr	r1, [r4, #4]
 8010996:	4602      	mov	r2, r0
 8010998:	4633      	mov	r3, r6
 801099a:	6820      	ldr	r0, [r4, #0]
 801099c:	c303      	stmia	r3!, {r0, r1}
 801099e:	4611      	mov	r1, r2
 80109a0:	4630      	mov	r0, r6
 80109a2:	f7fb fdc7 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 80109a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f77f af33 	ble.w	8010816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80109b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f77f af2e 	ble.w	8010816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7ff fe9c 	bl	80106f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80109c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80109c4:	1a18      	subs	r0, r3, r0
 80109c6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80109ca:	4628      	mov	r0, r5
 80109cc:	f7ff fea8 	bl	8010720 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80109d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80109d4:	4631      	mov	r1, r6
 80109d6:	1a18      	subs	r0, r3, r0
 80109d8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80109dc:	4628      	mov	r0, r5
 80109de:	682b      	ldr	r3, [r5, #0]
 80109e0:	689b      	ldr	r3, [r3, #8]
 80109e2:	4798      	blx	r3
 80109e4:	e717      	b.n	8010816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080109e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80109e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109e8:	2300      	movs	r3, #0
 80109ea:	aa02      	add	r2, sp, #8
 80109ec:	4604      	mov	r4, r0
 80109ee:	3004      	adds	r0, #4
 80109f0:	f842 3d04 	str.w	r3, [r2, #-4]!
 80109f4:	460d      	mov	r5, r1
 80109f6:	f7fb fe75 	bl	800c6e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80109fa:	9a01      	ldr	r2, [sp, #4]
 80109fc:	b11a      	cbz	r2, 8010a06 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80109fe:	4629      	mov	r1, r5
 8010a00:	4620      	mov	r0, r4
 8010a02:	f7ff feef 	bl	80107e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010a06:	b003      	add	sp, #12
 8010a08:	bd30      	pop	{r4, r5, pc}

08010a0a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	4604      	mov	r4, r0
 8010a10:	460d      	mov	r5, r1
 8010a12:	466b      	mov	r3, sp
 8010a14:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010a18:	6851      	ldr	r1, [r2, #4]
 8010a1a:	c303      	stmia	r3!, {r0, r1}
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	4668      	mov	r0, sp
 8010a20:	f7fb fd88 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 8010a24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010a28:	4669      	mov	r1, sp
 8010a2a:	b123      	cbz	r3, 8010a36 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f7ff ffda 	bl	80109e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010a32:	b003      	add	sp, #12
 8010a34:	bd30      	pop	{r4, r5, pc}
 8010a36:	1d20      	adds	r0, r4, #4
 8010a38:	f7fb fe1b 	bl	800c672 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010a3c:	e7f9      	b.n	8010a32 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08010a3e <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010a3e:	460b      	mov	r3, r1
 8010a40:	680a      	ldr	r2, [r1, #0]
 8010a42:	1d01      	adds	r1, r0, #4
 8010a44:	6992      	ldr	r2, [r2, #24]
 8010a46:	4618      	mov	r0, r3
 8010a48:	4710      	bx	r2
	...

08010a4c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 8010a4c:	b510      	push	{r4, lr}
 8010a4e:	4298      	cmp	r0, r3
 8010a50:	eb01 0402 	add.w	r4, r1, r2
 8010a54:	b224      	sxth	r4, r4
 8010a56:	d232      	bcs.n	8010abe <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x72>
 8010a58:	b38b      	cbz	r3, 8010abe <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x72>
 8010a5a:	ee07 0a90 	vmov	s15, r0
 8010a5e:	eddf 4a19 	vldr	s9, [pc, #100]	; 8010ac4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 8010a62:	eddf 5a19 	vldr	s11, [pc, #100]	; 8010ac8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x7c>
 8010a66:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8010a6a:	ee07 3a90 	vmov	s15, r3
 8010a6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010a72:	ee07 2a90 	vmov	s15, r2
 8010a76:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a7e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010a82:	ee07 1a90 	vmov	s15, r1
 8010a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010a8e:	eee7 5a24 	vfma.f32	s11, s14, s9
 8010a92:	ee27 5a07 	vmul.f32	s10, s14, s14
 8010a96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010a9a:	eee5 6a25 	vfma.f32	s13, s10, s11
 8010a9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aaa:	bfcc      	ite	gt
 8010aac:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8010ab0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8010ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ab8:	ee17 3a90 	vmov	r3, s15
 8010abc:	b21c      	sxth	r4, r3
 8010abe:	4620      	mov	r0, r4
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop
 8010ac4:	402ce6b0 	.word	0x402ce6b0
 8010ac8:	3fd9cd60 	.word	0x3fd9cd60

08010acc <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst>:
 8010acc:	b513      	push	{r0, r1, r4, lr}
 8010ace:	4298      	cmp	r0, r3
 8010ad0:	eb01 0402 	add.w	r4, r1, r2
 8010ad4:	e9cd 1200 	strd	r1, r2, [sp]
 8010ad8:	b224      	sxth	r4, r4
 8010ada:	d22c      	bcs.n	8010b36 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x6a>
 8010adc:	b35b      	cbz	r3, 8010b36 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x6a>
 8010ade:	ee07 0a90 	vmov	s15, r0
 8010ae2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010ae6:	ee07 3a90 	vmov	s15, r3
 8010aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010af2:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010b3c <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x70>
 8010af6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010afa:	f00c feb1 	bl	801d860 <sinf>
 8010afe:	9a01      	ldr	r2, [sp, #4]
 8010b00:	9900      	ldr	r1, [sp, #0]
 8010b02:	ee07 2a90 	vmov	s15, r2
 8010b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b0a:	ee07 1a90 	vmov	s15, r1
 8010b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b12:	eee7 7a00 	vfma.f32	s15, s14, s0
 8010b16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b22:	bfcc      	ite	gt
 8010b24:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8010b28:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8010b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b30:	ee17 3a90 	vmov	r3, s15
 8010b34:	b21c      	sxth	r4, r3
 8010b36:	4620      	mov	r0, r4
 8010b38:	b002      	add	sp, #8
 8010b3a:	bd10      	pop	{r4, pc}
 8010b3c:	3fc90fdb 	.word	0x3fc90fdb

08010b40 <_ZN8touchgfx12TextProviderC1Ev>:
 8010b40:	2300      	movs	r3, #0
 8010b42:	2201      	movs	r2, #1
 8010b44:	b510      	push	{r4, lr}
 8010b46:	4604      	mov	r4, r0
 8010b48:	60c3      	str	r3, [r0, #12]
 8010b4a:	7403      	strb	r3, [r0, #16]
 8010b4c:	82c3      	strh	r3, [r0, #22]
 8010b4e:	8303      	strh	r3, [r0, #24]
 8010b50:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8010b52:	8603      	strh	r3, [r0, #48]	; 0x30
 8010b54:	86c3      	strh	r3, [r0, #54]	; 0x36
 8010b56:	8703      	strh	r3, [r0, #56]	; 0x38
 8010b58:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010b5a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8010b5e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8010b62:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8010b66:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8010b6a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8010b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010b72:	f7f8 fb03 	bl	800917c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010b76:	4620      	mov	r0, r4
 8010b78:	bd10      	pop	{r4, pc}

08010b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010b7a:	b530      	push	{r4, r5, lr}
 8010b7c:	2500      	movs	r5, #0
 8010b7e:	2401      	movs	r4, #1
 8010b80:	6843      	ldr	r3, [r0, #4]
 8010b82:	b913      	cbnz	r3, 8010b8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010b84:	6803      	ldr	r3, [r0, #0]
 8010b86:	b1f3      	cbz	r3, 8010bc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8010b88:	6043      	str	r3, [r0, #4]
 8010b8a:	7c03      	ldrb	r3, [r0, #16]
 8010b8c:	b143      	cbz	r3, 8010ba0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010b8e:	68c3      	ldr	r3, [r0, #12]
 8010b90:	b12b      	cbz	r3, 8010b9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010b92:	881a      	ldrh	r2, [r3, #0]
 8010b94:	b11a      	cbz	r2, 8010b9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010b96:	1c9a      	adds	r2, r3, #2
 8010b98:	60c2      	str	r2, [r0, #12]
 8010b9a:	8818      	ldrh	r0, [r3, #0]
 8010b9c:	bd30      	pop	{r4, r5, pc}
 8010b9e:	7405      	strb	r5, [r0, #16]
 8010ba0:	6843      	ldr	r3, [r0, #4]
 8010ba2:	8819      	ldrh	r1, [r3, #0]
 8010ba4:	b179      	cbz	r1, 8010bc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8010ba6:	1c9a      	adds	r2, r3, #2
 8010ba8:	2902      	cmp	r1, #2
 8010baa:	6042      	str	r2, [r0, #4]
 8010bac:	d1f5      	bne.n	8010b9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010bae:	6883      	ldr	r3, [r0, #8]
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	6082      	str	r2, [r0, #8]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	60c3      	str	r3, [r0, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d0e1      	beq.n	8010b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d0de      	beq.n	8010b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010bc2:	7404      	strb	r4, [r0, #16]
 8010bc4:	e7dc      	b.n	8010b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	e7e8      	b.n	8010b9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010bca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8010bca:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010bcc:	2300      	movs	r3, #0
 8010bce:	6082      	str	r2, [r0, #8]
 8010bd0:	6001      	str	r1, [r0, #0]
 8010bd2:	6043      	str	r3, [r0, #4]
 8010bd4:	60c3      	str	r3, [r0, #12]
 8010bd6:	7403      	strb	r3, [r0, #16]
 8010bd8:	8603      	strh	r3, [r0, #48]	; 0x30
 8010bda:	8303      	strh	r3, [r0, #24]
 8010bdc:	8703      	strh	r3, [r0, #56]	; 0x38
 8010bde:	b410      	push	{r4}
 8010be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010be4:	f7f8 baca 	b.w	800917c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08010be8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bea:	4605      	mov	r5, r0
 8010bec:	4608      	mov	r0, r1
 8010bee:	b1f1      	cbz	r1, 8010c2e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8010bf0:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	f101 0708 	add.w	r7, r1, #8
 8010bfa:	4622      	mov	r2, r4
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	3308      	adds	r3, #8
 8010c00:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010c04:	4626      	mov	r6, r4
 8010c06:	42bb      	cmp	r3, r7
 8010c08:	c603      	stmia	r6!, {r0, r1}
 8010c0a:	4634      	mov	r4, r6
 8010c0c:	d1f6      	bne.n	8010bfc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010c0e:	6818      	ldr	r0, [r3, #0]
 8010c10:	6030      	str	r0, [r6, #0]
 8010c12:	4610      	mov	r0, r2
 8010c14:	889b      	ldrh	r3, [r3, #4]
 8010c16:	80b3      	strh	r3, [r6, #4]
 8010c18:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8010c1c:	015b      	lsls	r3, r3, #5
 8010c1e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010c22:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8010c26:	430b      	orrs	r3, r1
 8010c28:	425b      	negs	r3, r3
 8010c2a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8010c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	460c      	mov	r4, r1
 8010c34:	6811      	ldr	r1, [r2, #0]
 8010c36:	4610      	mov	r0, r2
 8010c38:	68cd      	ldr	r5, [r1, #12]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	47a8      	blx	r5
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	bf08      	it	eq
 8010c42:	4620      	moveq	r0, r4
 8010c44:	bd38      	pop	{r3, r4, r5, pc}
	...

08010c48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4615      	mov	r5, r2
 8010c4e:	4608      	mov	r0, r1
 8010c50:	b93a      	cbnz	r2, 8010c62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8010c52:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8010c56:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8010c5a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8010c5e:	4628      	mov	r0, r5
 8010c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c62:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010c66:	8893      	ldrh	r3, [r2, #4]
 8010c68:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8010c6c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8010c70:	79ee      	ldrb	r6, [r5, #7]
 8010c72:	4316      	orrs	r6, r2
 8010c74:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8010c78:	189a      	adds	r2, r3, r2
 8010c7a:	b2b7      	uxth	r7, r6
 8010c7c:	b291      	uxth	r1, r2
 8010c7e:	291d      	cmp	r1, #29
 8010c80:	f200 8084 	bhi.w	8010d8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010c84:	2201      	movs	r2, #1
 8010c86:	10f6      	asrs	r6, r6, #3
 8010c88:	408a      	lsls	r2, r1
 8010c8a:	4978      	ldr	r1, [pc, #480]	; (8010e6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8010c8c:	420a      	tst	r2, r1
 8010c8e:	d12e      	bne.n	8010cee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8010c90:	f412 7f60 	tst.w	r2, #896	; 0x380
 8010c94:	d07a      	beq.n	8010d8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010c96:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8010c9a:	462b      	mov	r3, r5
 8010c9c:	f105 0e08 	add.w	lr, r5, #8
 8010ca0:	4615      	mov	r5, r2
 8010ca2:	6818      	ldr	r0, [r3, #0]
 8010ca4:	3308      	adds	r3, #8
 8010ca6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010caa:	4694      	mov	ip, r2
 8010cac:	4573      	cmp	r3, lr
 8010cae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010cb2:	4662      	mov	r2, ip
 8010cb4:	d1f5      	bne.n	8010ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	f8cc 0000 	str.w	r0, [ip]
 8010cbc:	889b      	ldrh	r3, [r3, #4]
 8010cbe:	f8ac 3004 	strh.w	r3, [ip, #4]
 8010cc2:	b2b3      	uxth	r3, r6
 8010cc4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8010cc8:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8010ccc:	1aca      	subs	r2, r1, r3
 8010cce:	1bcf      	subs	r7, r1, r7
 8010cd0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8010cd4:	b292      	uxth	r2, r2
 8010cd6:	1afb      	subs	r3, r7, r3
 8010cd8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8010cdc:	10d2      	asrs	r2, r2, #3
 8010cde:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8010ce2:	4302      	orrs	r2, r0
 8010ce4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8010ce8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8010cec:	e7b7      	b.n	8010c5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010cee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010cf0:	b92b      	cbnz	r3, 8010cfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8010cf2:	4b5f      	ldr	r3, [pc, #380]	; (8010e70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8010cf4:	21c0      	movs	r1, #192	; 0xc0
 8010cf6:	4a5f      	ldr	r2, [pc, #380]	; (8010e74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8010cf8:	485f      	ldr	r0, [pc, #380]	; (8010e78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8010cfa:	f00d fb25 	bl	801e348 <__assert_func>
 8010cfe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8010d00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010d04:	8b59      	ldrh	r1, [r3, #26]
 8010d06:	f640 6333 	movw	r3, #3635	; 0xe33
 8010d0a:	4299      	cmp	r1, r3
 8010d0c:	d110      	bne.n	8010d30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8010d0e:	6803      	ldr	r3, [r0, #0]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	4798      	blx	r3
 8010d14:	7b41      	ldrb	r1, [r0, #13]
 8010d16:	00cb      	lsls	r3, r1, #3
 8010d18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010d1c:	7a03      	ldrb	r3, [r0, #8]
 8010d1e:	0648      	lsls	r0, r1, #25
 8010d20:	ea43 0302 	orr.w	r3, r3, r2
 8010d24:	bf44      	itt	mi
 8010d26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010d2a:	b21b      	sxthmi	r3, r3
 8010d2c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010d30:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8010d34:	462a      	mov	r2, r5
 8010d36:	f105 0c08 	add.w	ip, r5, #8
 8010d3a:	443b      	add	r3, r7
 8010d3c:	4433      	add	r3, r6
 8010d3e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	4635      	mov	r5, r6
 8010d46:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010d4a:	6810      	ldr	r0, [r2, #0]
 8010d4c:	3208      	adds	r2, #8
 8010d4e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010d52:	4637      	mov	r7, r6
 8010d54:	4562      	cmp	r2, ip
 8010d56:	c703      	stmia	r7!, {r0, r1}
 8010d58:	463e      	mov	r6, r7
 8010d5a:	d1f6      	bne.n	8010d4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8010d5c:	6810      	ldr	r0, [r2, #0]
 8010d5e:	6038      	str	r0, [r7, #0]
 8010d60:	8892      	ldrh	r2, [r2, #4]
 8010d62:	80ba      	strh	r2, [r7, #4]
 8010d64:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8010d68:	10db      	asrs	r3, r3, #3
 8010d6a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8010d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010d76:	4313      	orrs	r3, r2
 8010d78:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8010d7c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8010d80:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8010d84:	1a9b      	subs	r3, r3, r2
 8010d86:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8010d8a:	e768      	b.n	8010c5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010d8c:	f023 0204 	bic.w	r2, r3, #4
 8010d90:	f640 611b 	movw	r1, #3611	; 0xe1b
 8010d94:	428a      	cmp	r2, r1
 8010d96:	d003      	beq.n	8010da0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8010d98:	f640 621d 	movw	r2, #3613	; 0xe1d
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d120      	bne.n	8010de2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8010da0:	3b01      	subs	r3, #1
 8010da2:	4602      	mov	r2, r0
 8010da4:	4629      	mov	r1, r5
 8010da6:	4620      	mov	r0, r4
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	f7ff ff41 	bl	8010c30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010dae:	7b41      	ldrb	r1, [r0, #13]
 8010db0:	00cb      	lsls	r3, r1, #3
 8010db2:	0649      	lsls	r1, r1, #25
 8010db4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010db8:	7a03      	ldrb	r3, [r0, #8]
 8010dba:	ea43 0302 	orr.w	r3, r3, r2
 8010dbe:	bf44      	itt	mi
 8010dc0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010dc4:	b21b      	sxthmi	r3, r3
 8010dc6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010dca:	7b6b      	ldrb	r3, [r5, #13]
 8010dcc:	7aaa      	ldrb	r2, [r5, #10]
 8010dce:	005b      	lsls	r3, r3, #1
 8010dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	115a      	asrs	r2, r3, #5
 8010dd8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8010ddc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8010de0:	e035      	b.n	8010e4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8010de2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8010de6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8010dea:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8010dee:	7a2a      	ldrb	r2, [r5, #8]
 8010df0:	ea42 0201 	orr.w	r2, r2, r1
 8010df4:	f640 6109 	movw	r1, #3593	; 0xe09
 8010df8:	bf1c      	itt	ne
 8010dfa:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8010dfe:	b212      	sxthne	r2, r2
 8010e00:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8010e04:	f023 0210 	bic.w	r2, r3, #16
 8010e08:	428a      	cmp	r2, r1
 8010e0a:	d003      	beq.n	8010e14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8010e0c:	f640 6213 	movw	r2, #3603	; 0xe13
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d129      	bne.n	8010e68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8010e14:	7b6e      	ldrb	r6, [r5, #13]
 8010e16:	4629      	mov	r1, r5
 8010e18:	0076      	lsls	r6, r6, #1
 8010e1a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8010e1e:	7aae      	ldrb	r6, [r5, #10]
 8010e20:	4316      	orrs	r6, r2
 8010e22:	f640 6213 	movw	r2, #3603	; 0xe13
 8010e26:	4293      	cmp	r3, r2
 8010e28:	4602      	mov	r2, r0
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	bf16      	itet	ne
 8010e2e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8010e32:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8010e36:	b29b      	uxthne	r3, r3
 8010e38:	f7ff fefa 	bl	8010c30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010e3c:	7b43      	ldrb	r3, [r0, #13]
 8010e3e:	7a82      	ldrb	r2, [r0, #10]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e46:	4313      	orrs	r3, r2
 8010e48:	1af6      	subs	r6, r6, r3
 8010e4a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8010e4e:	7b69      	ldrb	r1, [r5, #13]
 8010e50:	00cb      	lsls	r3, r1, #3
 8010e52:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010e56:	7a2b      	ldrb	r3, [r5, #8]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	064a      	lsls	r2, r1, #25
 8010e5c:	bf44      	itt	mi
 8010e5e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010e62:	b21b      	sxthmi	r3, r3
 8010e64:	1bdb      	subs	r3, r3, r7
 8010e66:	e73f      	b.n	8010ce8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	e7b7      	b.n	8010ddc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8010e6c:	3fc00079 	.word	0x3fc00079
 8010e70:	08021de8 	.word	0x08021de8
 8010e74:	0802205a 	.word	0x0802205a
 8010e78:	08021df1 	.word	0x08021df1

08010e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8010e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e80:	4604      	mov	r4, r0
 8010e82:	b942      	cbnz	r2, 8010e96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8010e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e88:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8010e8c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8010e90:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8010e94:	e046      	b.n	8010f24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8010e96:	7b51      	ldrb	r1, [r2, #13]
 8010e98:	8893      	ldrh	r3, [r2, #4]
 8010e9a:	010f      	lsls	r7, r1, #4
 8010e9c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8010ea0:	79d7      	ldrb	r7, [r2, #7]
 8010ea2:	4307      	orrs	r7, r0
 8010ea4:	2f04      	cmp	r7, #4
 8010ea6:	b2bd      	uxth	r5, r7
 8010ea8:	bfcc      	ite	gt
 8010eaa:	08bf      	lsrgt	r7, r7, #2
 8010eac:	2701      	movle	r7, #1
 8010eae:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8010eb2:	f200 80ab 	bhi.w	801100c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8010eb6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8010eba:	4283      	cmp	r3, r0
 8010ebc:	d216      	bcs.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010ebe:	f240 605b 	movw	r0, #1627	; 0x65b
 8010ec2:	4283      	cmp	r3, r0
 8010ec4:	d859      	bhi.n	8010f7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8010ec6:	f240 6057 	movw	r0, #1623	; 0x657
 8010eca:	4283      	cmp	r3, r0
 8010ecc:	d20e      	bcs.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010ece:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8010ed2:	d24a      	bcs.n	8010f6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8010ed4:	f240 604e 	movw	r0, #1614	; 0x64e
 8010ed8:	4283      	cmp	r3, r0
 8010eda:	d207      	bcs.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010edc:	f240 601a 	movw	r0, #1562	; 0x61a
 8010ee0:	4283      	cmp	r3, r0
 8010ee2:	d02a      	beq.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010ee4:	d821      	bhi.n	8010f2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8010ee6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8010eea:	d35b      	bcc.n	8010fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010eec:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8010ef0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8010ef4:	f040 80d0 	bne.w	8011098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8010ef8:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8010efc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010f00:	f040 80ca 	bne.w	8011098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8010f04:	00cb      	lsls	r3, r1, #3
 8010f06:	0649      	lsls	r1, r1, #25
 8010f08:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010f0c:	7a13      	ldrb	r3, [r2, #8]
 8010f0e:	ea43 0300 	orr.w	r3, r3, r0
 8010f12:	bf44      	itt	mi
 8010f14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010f18:	b21b      	sxthmi	r3, r3
 8010f1a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010f1e:	1b5d      	subs	r5, r3, r5
 8010f20:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8010f24:	4610      	mov	r0, r2
 8010f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f2a:	f240 604b 	movw	r0, #1611	; 0x64b
 8010f2e:	4283      	cmp	r3, r0
 8010f30:	d338      	bcc.n	8010fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010f32:	f240 604c 	movw	r0, #1612	; 0x64c
 8010f36:	4283      	cmp	r3, r0
 8010f38:	d9d8      	bls.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010f3a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8010f3e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8010f42:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010f46:	f040 80f2 	bne.w	801112e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8010f4a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8010f4e:	f040 80ee 	bne.w	801112e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8010f52:	00cb      	lsls	r3, r1, #3
 8010f54:	064e      	lsls	r6, r1, #25
 8010f56:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010f5a:	7a13      	ldrb	r3, [r2, #8]
 8010f5c:	ea43 0300 	orr.w	r3, r3, r0
 8010f60:	bf44      	itt	mi
 8010f62:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010f66:	b21b      	sxthmi	r3, r3
 8010f68:	e7d9      	b.n	8010f1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8010f6a:	f240 6054 	movw	r0, #1620	; 0x654
 8010f6e:	4283      	cmp	r3, r0
 8010f70:	d8e3      	bhi.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010f72:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8010f76:	d9e0      	bls.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010f78:	e7b8      	b.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010f7a:	f240 6074 	movw	r0, #1652	; 0x674
 8010f7e:	4283      	cmp	r3, r0
 8010f80:	d0b4      	beq.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010f82:	d82d      	bhi.n	8010fe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8010f84:	f240 605e 	movw	r0, #1630	; 0x65e
 8010f88:	4283      	cmp	r3, r0
 8010f8a:	d804      	bhi.n	8010f96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8010f8c:	f240 605d 	movw	r0, #1629	; 0x65d
 8010f90:	4283      	cmp	r3, r0
 8010f92:	d3d2      	bcc.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010f94:	e7aa      	b.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010f96:	f240 605f 	movw	r0, #1631	; 0x65f
 8010f9a:	4283      	cmp	r3, r0
 8010f9c:	d0cd      	beq.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010f9e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8010fa2:	d0a3      	beq.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010fa4:	00cb      	lsls	r3, r1, #3
 8010fa6:	0649      	lsls	r1, r1, #25
 8010fa8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010fac:	7a13      	ldrb	r3, [r2, #8]
 8010fae:	ea43 0300 	orr.w	r3, r3, r0
 8010fb2:	bf44      	itt	mi
 8010fb4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010fb8:	b21b      	sxthmi	r3, r3
 8010fba:	1b5d      	subs	r5, r3, r5
 8010fbc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010fc0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8010fc4:	7b53      	ldrb	r3, [r2, #13]
 8010fc6:	015b      	lsls	r3, r3, #5
 8010fc8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010fcc:	7993      	ldrb	r3, [r2, #6]
 8010fce:	430b      	orrs	r3, r1
 8010fd0:	2105      	movs	r1, #5
 8010fd2:	005b      	lsls	r3, r3, #1
 8010fd4:	fb93 f3f1 	sdiv	r3, r3, r1
 8010fd8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8010fdc:	440b      	add	r3, r1
 8010fde:	e757      	b.n	8010e90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8010fe0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8010fe4:	4283      	cmp	r3, r0
 8010fe6:	d809      	bhi.n	8010ffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8010fe8:	f240 60df 	movw	r0, #1759	; 0x6df
 8010fec:	4283      	cmp	r3, r0
 8010fee:	f4bf af7d 	bcs.w	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010ff2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8010ff6:	2b05      	cmp	r3, #5
 8010ff8:	d8d4      	bhi.n	8010fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010ffa:	e777      	b.n	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010ffc:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8011000:	4283      	cmp	r3, r0
 8011002:	d09a      	beq.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011004:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8011008:	4283      	cmp	r3, r0
 801100a:	e7ca      	b.n	8010fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801100c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8011010:	d22b      	bcs.n	801106a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8011012:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8011016:	4283      	cmp	r3, r0
 8011018:	d28f      	bcs.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801101a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801101e:	4283      	cmp	r3, r0
 8011020:	d816      	bhi.n	8011050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8011022:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8011026:	4283      	cmp	r3, r0
 8011028:	f4bf af60 	bcs.w	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801102c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8011030:	4283      	cmp	r3, r0
 8011032:	d80a      	bhi.n	801104a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8011034:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8011038:	4283      	cmp	r3, r0
 801103a:	f4bf af57 	bcs.w	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801103e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8011042:	4283      	cmp	r3, r0
 8011044:	f43f af79 	beq.w	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011048:	e7ac      	b.n	8010fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801104a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801104e:	e7f8      	b.n	8011042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8011050:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8011054:	4283      	cmp	r3, r0
 8011056:	d802      	bhi.n	801105e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8011058:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801105c:	e798      	b.n	8010f90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801105e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8011062:	4283      	cmp	r3, r0
 8011064:	f47f af42 	bne.w	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011068:	e767      	b.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801106a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801106e:	4283      	cmp	r3, r0
 8011070:	f43f af63 	beq.w	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011074:	d802      	bhi.n	801107c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8011076:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801107a:	e7f2      	b.n	8011062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801107c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8011080:	4283      	cmp	r3, r0
 8011082:	d805      	bhi.n	8011090 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8011084:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8011088:	4283      	cmp	r3, r0
 801108a:	f4ff af2f 	bcc.w	8010eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801108e:	e754      	b.n	8010f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011090:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8011094:	4283      	cmp	r3, r0
 8011096:	e7af      	b.n	8010ff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8011098:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801109c:	4617      	mov	r7, r2
 801109e:	f102 0808 	add.w	r8, r2, #8
 80110a2:	4666      	mov	r6, ip
 80110a4:	6838      	ldr	r0, [r7, #0]
 80110a6:	3708      	adds	r7, #8
 80110a8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80110ac:	46e6      	mov	lr, ip
 80110ae:	4547      	cmp	r7, r8
 80110b0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80110b4:	46f4      	mov	ip, lr
 80110b6:	d1f5      	bne.n	80110a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80110b8:	6838      	ldr	r0, [r7, #0]
 80110ba:	f8ce 0000 	str.w	r0, [lr]
 80110be:	88b9      	ldrh	r1, [r7, #4]
 80110c0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80110c4:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80110c8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80110cc:	d009      	beq.n	80110e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80110ce:	7b51      	ldrb	r1, [r2, #13]
 80110d0:	7992      	ldrb	r2, [r2, #6]
 80110d2:	0149      	lsls	r1, r1, #5
 80110d4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80110d8:	4311      	orrs	r1, r2
 80110da:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80110de:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80110e2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80110e6:	d00d      	beq.n	8011104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80110e8:	442b      	add	r3, r5
 80110ea:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80110f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80110f8:	10db      	asrs	r3, r3, #3
 80110fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110fe:	4313      	orrs	r3, r2
 8011100:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8011104:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8011108:	00cb      	lsls	r3, r1, #3
 801110a:	064f      	lsls	r7, r1, #25
 801110c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011110:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011114:	ea43 0302 	orr.w	r3, r3, r2
 8011118:	bf44      	itt	mi
 801111a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801111e:	b21b      	sxthmi	r3, r3
 8011120:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8011124:	1b5d      	subs	r5, r3, r5
 8011126:	4632      	mov	r2, r6
 8011128:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801112c:	e6fa      	b.n	8010f24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801112e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8011132:	4694      	mov	ip, r2
 8011134:	f102 0908 	add.w	r9, r2, #8
 8011138:	4676      	mov	r6, lr
 801113a:	f8dc 0000 	ldr.w	r0, [ip]
 801113e:	f10c 0c08 	add.w	ip, ip, #8
 8011142:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8011146:	46f0      	mov	r8, lr
 8011148:	45cc      	cmp	ip, r9
 801114a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801114e:	46c6      	mov	lr, r8
 8011150:	d1f3      	bne.n	801113a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8011152:	f8dc 0000 	ldr.w	r0, [ip]
 8011156:	f8c8 0000 	str.w	r0, [r8]
 801115a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801115e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011162:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8011166:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801116a:	d009      	beq.n	8011180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801116c:	7b51      	ldrb	r1, [r2, #13]
 801116e:	7992      	ldrb	r2, [r2, #6]
 8011170:	0149      	lsls	r1, r1, #5
 8011172:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011176:	4311      	orrs	r1, r2
 8011178:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801117c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8011180:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011184:	d00d      	beq.n	80111a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8011186:	1bdb      	subs	r3, r3, r7
 8011188:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801118c:	b29b      	uxth	r3, r3
 801118e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011192:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8011196:	10db      	asrs	r3, r3, #3
 8011198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801119c:	4313      	orrs	r3, r2
 801119e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80111a2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80111a6:	00cb      	lsls	r3, r1, #3
 80111a8:	0648      	lsls	r0, r1, #25
 80111aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80111ae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80111b2:	ea43 0302 	orr.w	r3, r3, r2
 80111b6:	bf44      	itt	mi
 80111b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80111bc:	b21b      	sxthmi	r3, r3
 80111be:	e7b1      	b.n	8011124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80111c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c4:	461e      	mov	r6, r3
 80111c6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80111c8:	4604      	mov	r4, r0
 80111ca:	4617      	mov	r7, r2
 80111cc:	b92b      	cbnz	r3, 80111da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80111ce:	4b25      	ldr	r3, [pc, #148]	; (8011264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80111d0:	21c0      	movs	r1, #192	; 0xc0
 80111d2:	4a25      	ldr	r2, [pc, #148]	; (8011268 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80111d4:	4825      	ldr	r0, [pc, #148]	; (801126c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80111d6:	f00d f8b7 	bl	801e348 <__assert_func>
 80111da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80111dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80111e0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80111e4:	f7f7 ff24 	bl	8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80111e8:	4605      	mov	r5, r0
 80111ea:	b918      	cbnz	r0, 80111f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80111ec:	6030      	str	r0, [r6, #0]
 80111ee:	4628      	mov	r0, r5
 80111f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	4601      	mov	r1, r0
 80111f8:	4638      	mov	r0, r7
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	4798      	blx	r3
 80111fe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8011202:	4602      	mov	r2, r0
 8011204:	6030      	str	r0, [r6, #0]
 8011206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801120a:	d213      	bcs.n	8011234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801120c:	4643      	mov	r3, r8
 801120e:	4639      	mov	r1, r7
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff fe33 	bl	8010e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8011216:	6030      	str	r0, [r6, #0]
 8011218:	6833      	ldr	r3, [r6, #0]
 801121a:	b143      	cbz	r3, 801122e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801121c:	7b5a      	ldrb	r2, [r3, #13]
 801121e:	7a9b      	ldrb	r3, [r3, #10]
 8011220:	0052      	lsls	r2, r2, #1
 8011222:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011226:	4313      	orrs	r3, r2
 8011228:	bf0c      	ite	eq
 801122a:	2301      	moveq	r3, #1
 801122c:	2300      	movne	r3, #0
 801122e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8011232:	e7dc      	b.n	80111ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8011234:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011238:	b29b      	uxth	r3, r3
 801123a:	2b7f      	cmp	r3, #127	; 0x7f
 801123c:	d804      	bhi.n	8011248 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801123e:	4639      	mov	r1, r7
 8011240:	4620      	mov	r0, r4
 8011242:	f7ff fd01 	bl	8010c48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011246:	e7e6      	b.n	8011216 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011248:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0e3      	beq.n	8011218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011250:	f640 1302 	movw	r3, #2306	; 0x902
 8011254:	429d      	cmp	r5, r3
 8011256:	d1df      	bne.n	8011218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011258:	4601      	mov	r1, r0
 801125a:	4620      	mov	r0, r4
 801125c:	f7ff fcc4 	bl	8010be8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011260:	e7d9      	b.n	8011216 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011262:	bf00      	nop
 8011264:	08021de8 	.word	0x08021de8
 8011268:	0802205a 	.word	0x0802205a
 801126c:	08021df1 	.word	0x08021df1

08011270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8011270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011274:	461e      	mov	r6, r3
 8011276:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011278:	4604      	mov	r4, r0
 801127a:	4617      	mov	r7, r2
 801127c:	b92b      	cbnz	r3, 801128a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801127e:	4b26      	ldr	r3, [pc, #152]	; (8011318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8011280:	21c0      	movs	r1, #192	; 0xc0
 8011282:	4a26      	ldr	r2, [pc, #152]	; (801131c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8011284:	4826      	ldr	r0, [pc, #152]	; (8011320 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8011286:	f00d f85f 	bl	801e348 <__assert_func>
 801128a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801128c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011290:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8011294:	f7f7 fecc 	bl	8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011298:	4605      	mov	r5, r0
 801129a:	b918      	cbnz	r0, 80112a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801129c:	6030      	str	r0, [r6, #0]
 801129e:	4628      	mov	r0, r5
 80112a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	4601      	mov	r1, r0
 80112a8:	4638      	mov	r0, r7
 80112aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80112ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80112b2:	47c8      	blx	r9
 80112b4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80112b8:	4602      	mov	r2, r0
 80112ba:	6030      	str	r0, [r6, #0]
 80112bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80112c0:	d213      	bcs.n	80112ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80112c2:	4643      	mov	r3, r8
 80112c4:	4639      	mov	r1, r7
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7ff fdd8 	bl	8010e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80112cc:	6030      	str	r0, [r6, #0]
 80112ce:	6833      	ldr	r3, [r6, #0]
 80112d0:	b143      	cbz	r3, 80112e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80112d2:	7b5a      	ldrb	r2, [r3, #13]
 80112d4:	7a9b      	ldrb	r3, [r3, #10]
 80112d6:	0052      	lsls	r2, r2, #1
 80112d8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80112dc:	4313      	orrs	r3, r2
 80112de:	bf0c      	ite	eq
 80112e0:	2301      	moveq	r3, #1
 80112e2:	2300      	movne	r3, #0
 80112e4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80112e8:	e7d9      	b.n	801129e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80112ea:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80112ee:	b29b      	uxth	r3, r3
 80112f0:	2b7f      	cmp	r3, #127	; 0x7f
 80112f2:	d804      	bhi.n	80112fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80112f4:	4639      	mov	r1, r7
 80112f6:	4620      	mov	r0, r4
 80112f8:	f7ff fca6 	bl	8010c48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80112fc:	e7e6      	b.n	80112cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80112fe:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0e3      	beq.n	80112ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8011306:	f640 1302 	movw	r3, #2306	; 0x902
 801130a:	429d      	cmp	r5, r3
 801130c:	d1df      	bne.n	80112ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801130e:	4601      	mov	r1, r0
 8011310:	4620      	mov	r0, r4
 8011312:	f7ff fc69 	bl	8010be8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011316:	e7d9      	b.n	80112cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8011318:	08021de8 	.word	0x08021de8
 801131c:	0802205a 	.word	0x0802205a
 8011320:	08021df1 	.word	0x08021df1

08011324 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8011324:	b510      	push	{r4, lr}
 8011326:	4604      	mov	r4, r0
 8011328:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801132a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801132c:	b9d9      	cbnz	r1, 8011366 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801132e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011330:	2b0a      	cmp	r3, #10
 8011332:	d036      	beq.n	80113a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8011334:	4620      	mov	r0, r4
 8011336:	f7ff fc20 	bl	8010b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801133a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801133c:	2b09      	cmp	r3, #9
 801133e:	d906      	bls.n	801134e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8011340:	4b18      	ldr	r3, [pc, #96]	; (80113a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8011342:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011346:	4a18      	ldr	r2, [pc, #96]	; (80113a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8011348:	4818      	ldr	r0, [pc, #96]	; (80113ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801134a:	f00c fffd 	bl	801e348 <__assert_func>
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	8622      	strh	r2, [r4, #48]	; 0x30
 8011352:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8011354:	4413      	add	r3, r2
 8011356:	b29b      	uxth	r3, r3
 8011358:	2b09      	cmp	r3, #9
 801135a:	bf88      	it	hi
 801135c:	3b0a      	subhi	r3, #10
 801135e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011362:	8358      	strh	r0, [r3, #26]
 8011364:	e7e3      	b.n	801132e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8011366:	2b0a      	cmp	r3, #10
 8011368:	d01b      	beq.n	80113a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801136a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801136c:	3901      	subs	r1, #1
 801136e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8011372:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8011374:	8721      	strh	r1, [r4, #56]	; 0x38
 8011376:	1c51      	adds	r1, r2, #1
 8011378:	b289      	uxth	r1, r1
 801137a:	2901      	cmp	r1, #1
 801137c:	bf8a      	itet	hi
 801137e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011382:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8011384:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8011386:	2b09      	cmp	r3, #9
 8011388:	d8da      	bhi.n	8011340 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801138a:	1c5a      	adds	r2, r3, #1
 801138c:	8622      	strh	r2, [r4, #48]	; 0x30
 801138e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8011390:	4413      	add	r3, r2
 8011392:	b29b      	uxth	r3, r3
 8011394:	2b09      	cmp	r3, #9
 8011396:	bf88      	it	hi
 8011398:	3b0a      	subhi	r3, #10
 801139a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801139e:	8358      	strh	r0, [r3, #26]
 80113a0:	e7c2      	b.n	8011328 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80113a2:	bd10      	pop	{r4, pc}
 80113a4:	08021e1d 	.word	0x08021e1d
 80113a8:	080221b0 	.word	0x080221b0
 80113ac:	08021df1 	.word	0x08021df1

080113b0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80113b0:	b538      	push	{r3, r4, r5, lr}
 80113b2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80113b4:	4604      	mov	r4, r0
 80113b6:	b92a      	cbnz	r2, 80113c4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80113b8:	4b13      	ldr	r3, [pc, #76]	; (8011408 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80113ba:	21d5      	movs	r1, #213	; 0xd5
 80113bc:	4a13      	ldr	r2, [pc, #76]	; (801140c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80113be:	4814      	ldr	r0, [pc, #80]	; (8011410 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80113c0:	f00c ffc2 	bl	801e348 <__assert_func>
 80113c4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80113c6:	3a01      	subs	r2, #1
 80113c8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80113cc:	8b4d      	ldrh	r5, [r1, #26]
 80113ce:	8602      	strh	r2, [r0, #48]	; 0x30
 80113d0:	1c5a      	adds	r2, r3, #1
 80113d2:	b292      	uxth	r2, r2
 80113d4:	2a09      	cmp	r2, #9
 80113d6:	bf8a      	itet	hi
 80113d8:	3b09      	subhi	r3, #9
 80113da:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 80113dc:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 80113de:	f7ff ffa1 	bl	8011324 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80113e2:	8b23      	ldrh	r3, [r4, #24]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	bf9c      	itt	ls
 80113e8:	3301      	addls	r3, #1
 80113ea:	8323      	strhls	r3, [r4, #24]
 80113ec:	8ae3      	ldrh	r3, [r4, #22]
 80113ee:	b90b      	cbnz	r3, 80113f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80113f0:	2302      	movs	r3, #2
 80113f2:	82e3      	strh	r3, [r4, #22]
 80113f4:	8ae3      	ldrh	r3, [r4, #22]
 80113f6:	4628      	mov	r0, r5
 80113f8:	3b01      	subs	r3, #1
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	82e3      	strh	r3, [r4, #22]
 80113fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011402:	8265      	strh	r5, [r4, #18]
 8011404:	bd38      	pop	{r3, r4, r5, pc}
 8011406:	bf00      	nop
 8011408:	08021de8 	.word	0x08021de8
 801140c:	08022105 	.word	0x08022105
 8011410:	08021df1 	.word	0x08021df1

08011414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011414:	428a      	cmp	r2, r1
 8011416:	b538      	push	{r3, r4, r5, lr}
 8011418:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801141a:	d90c      	bls.n	8011436 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801141c:	b92c      	cbnz	r4, 801142a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801141e:	4b1c      	ldr	r3, [pc, #112]	; (8011490 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8011420:	21e1      	movs	r1, #225	; 0xe1
 8011422:	4a1c      	ldr	r2, [pc, #112]	; (8011494 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8011424:	481c      	ldr	r0, [pc, #112]	; (8011498 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8011426:	f00c ff8f 	bl	801e348 <__assert_func>
 801142a:	3c01      	subs	r4, #1
 801142c:	4b1b      	ldr	r3, [pc, #108]	; (801149c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801142e:	4a1c      	ldr	r2, [pc, #112]	; (80114a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8011430:	21c5      	movs	r1, #197	; 0xc5
 8011432:	8604      	strh	r4, [r0, #48]	; 0x30
 8011434:	e7f6      	b.n	8011424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8011436:	428c      	cmp	r4, r1
 8011438:	d203      	bcs.n	8011442 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801143a:	4b1a      	ldr	r3, [pc, #104]	; (80114a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801143c:	21cb      	movs	r1, #203	; 0xcb
 801143e:	4a1a      	ldr	r2, [pc, #104]	; (80114a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8011440:	e7f0      	b.n	8011424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8011442:	1a64      	subs	r4, r4, r1
 8011444:	250a      	movs	r5, #10
 8011446:	8604      	strh	r4, [r0, #48]	; 0x30
 8011448:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801144a:	4421      	add	r1, r4
 801144c:	b289      	uxth	r1, r1
 801144e:	2909      	cmp	r1, #9
 8011450:	bf88      	it	hi
 8011452:	390a      	subhi	r1, #10
 8011454:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8011456:	b1ba      	cbz	r2, 8011488 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8011458:	3a01      	subs	r2, #1
 801145a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801145c:	b292      	uxth	r2, r2
 801145e:	2909      	cmp	r1, #9
 8011460:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011464:	d903      	bls.n	801146e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8011466:	4b11      	ldr	r3, [pc, #68]	; (80114ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8011468:	21e6      	movs	r1, #230	; 0xe6
 801146a:	4a11      	ldr	r2, [pc, #68]	; (80114b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801146c:	e7da      	b.n	8011424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801146e:	3101      	adds	r1, #1
 8011470:	8601      	strh	r1, [r0, #48]	; 0x30
 8011472:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8011474:	b901      	cbnz	r1, 8011478 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8011476:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8011478:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801147a:	3901      	subs	r1, #1
 801147c:	b289      	uxth	r1, r1
 801147e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8011480:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011484:	834c      	strh	r4, [r1, #26]
 8011486:	e7e6      	b.n	8011456 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8011488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801148c:	f7ff bf4a 	b.w	8011324 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011490:	08021de8 	.word	0x08021de8
 8011494:	08021ede 	.word	0x08021ede
 8011498:	08021df1 	.word	0x08021df1
 801149c:	08021e29 	.word	0x08021e29
 80114a0:	08021f88 	.word	0x08021f88
 80114a4:	08021e37 	.word	0x08021e37
 80114a8:	0802225f 	.word	0x0802225f
 80114ac:	08021e43 	.word	0x08021e43
 80114b0:	08021e56 	.word	0x08021e56

080114b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80114b4:	3a01      	subs	r2, #1
 80114b6:	b570      	push	{r4, r5, r6, lr}
 80114b8:	b292      	uxth	r2, r2
 80114ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80114be:	42b2      	cmp	r2, r6
 80114c0:	d019      	beq.n	80114f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80114c2:	8b04      	ldrh	r4, [r0, #24]
 80114c4:	f831 5b02 	ldrh.w	r5, [r1], #2
 80114c8:	4294      	cmp	r4, r2
 80114ca:	d805      	bhi.n	80114d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80114cc:	4b19      	ldr	r3, [pc, #100]	; (8011534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80114ce:	4a1a      	ldr	r2, [pc, #104]	; (8011538 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80114d0:	21c5      	movs	r1, #197	; 0xc5
 80114d2:	481a      	ldr	r0, [pc, #104]	; (801153c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80114d4:	f00c ff38 	bl	801e348 <__assert_func>
 80114d8:	8ac4      	ldrh	r4, [r0, #22]
 80114da:	4414      	add	r4, r2
 80114dc:	3a01      	subs	r2, #1
 80114de:	b2a4      	uxth	r4, r4
 80114e0:	b292      	uxth	r2, r2
 80114e2:	2c01      	cmp	r4, #1
 80114e4:	bf88      	it	hi
 80114e6:	3c02      	subhi	r4, #2
 80114e8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80114ec:	8a64      	ldrh	r4, [r4, #18]
 80114ee:	42ac      	cmp	r4, r5
 80114f0:	d0e5      	beq.n	80114be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80114f2:	2000      	movs	r0, #0
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80114fa:	2400      	movs	r4, #0
 80114fc:	4413      	add	r3, r2
 80114fe:	b2a2      	uxth	r2, r4
 8011500:	429a      	cmp	r2, r3
 8011502:	da14      	bge.n	801152e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8011504:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8011506:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801150a:	4296      	cmp	r6, r2
 801150c:	d802      	bhi.n	8011514 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801150e:	4b09      	ldr	r3, [pc, #36]	; (8011534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8011510:	4a0b      	ldr	r2, [pc, #44]	; (8011540 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8011512:	e7dd      	b.n	80114d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8011514:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8011516:	3401      	adds	r4, #1
 8011518:	4432      	add	r2, r6
 801151a:	b292      	uxth	r2, r2
 801151c:	2a09      	cmp	r2, #9
 801151e:	bf88      	it	hi
 8011520:	3a0a      	subhi	r2, #10
 8011522:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011526:	8b52      	ldrh	r2, [r2, #26]
 8011528:	42aa      	cmp	r2, r5
 801152a:	d0e8      	beq.n	80114fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801152c:	e7e1      	b.n	80114f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801152e:	2001      	movs	r0, #1
 8011530:	e7e0      	b.n	80114f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8011532:	bf00      	nop
 8011534:	08021e29 	.word	0x08021e29
 8011538:	080222e3 	.word	0x080222e3
 801153c:	08021df1 	.word	0x08021df1
 8011540:	08021f88 	.word	0x08021f88

08011544 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011548:	4605      	mov	r5, r0
 801154a:	4616      	mov	r6, r2
 801154c:	1c8c      	adds	r4, r1, #2
 801154e:	8809      	ldrh	r1, [r1, #0]
 8011550:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8011554:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8011558:	42b3      	cmp	r3, r6
 801155a:	d124      	bne.n	80115a6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801155c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8011560:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8011564:	f001 070f 	and.w	r7, r1, #15
 8011568:	4652      	mov	r2, sl
 801156a:	f8cd 8000 	str.w	r8, [sp]
 801156e:	464b      	mov	r3, r9
 8011570:	4621      	mov	r1, r4
 8011572:	4628      	mov	r0, r5
 8011574:	f7ff ff9e 	bl	80114b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8011578:	4683      	mov	fp, r0
 801157a:	b168      	cbz	r0, 8011598 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801157c:	eb0a 0109 	add.w	r1, sl, r9
 8011580:	463a      	mov	r2, r7
 8011582:	4628      	mov	r0, r5
 8011584:	4441      	add	r1, r8
 8011586:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801158a:	4649      	mov	r1, r9
 801158c:	f7ff ff42 	bl	8011414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8011590:	4658      	mov	r0, fp
 8011592:	b003      	add	sp, #12
 8011594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011598:	eb07 010a 	add.w	r1, r7, sl
 801159c:	4449      	add	r1, r9
 801159e:	4441      	add	r1, r8
 80115a0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80115a4:	e7d2      	b.n	801154c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80115a6:	f04f 0b00 	mov.w	fp, #0
 80115aa:	e7f1      	b.n	8011590 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080115ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	8810      	ldrh	r0, [r2, #0]
 80115b0:	4298      	cmp	r0, r3
 80115b2:	d817      	bhi.n	80115e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115b4:	1e48      	subs	r0, r1, #1
 80115b6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80115ba:	4298      	cmp	r0, r3
 80115bc:	d312      	bcc.n	80115e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115be:	2400      	movs	r4, #0
 80115c0:	428c      	cmp	r4, r1
 80115c2:	d20f      	bcs.n	80115e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115c4:	1860      	adds	r0, r4, r1
 80115c6:	1040      	asrs	r0, r0, #1
 80115c8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80115cc:	0085      	lsls	r5, r0, #2
 80115ce:	42b3      	cmp	r3, r6
 80115d0:	d902      	bls.n	80115d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80115d2:	3001      	adds	r0, #1
 80115d4:	b284      	uxth	r4, r0
 80115d6:	e7f3      	b.n	80115c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80115d8:	d201      	bcs.n	80115de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80115da:	b281      	uxth	r1, r0
 80115dc:	e7f0      	b.n	80115c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80115de:	442a      	add	r2, r5
 80115e0:	8850      	ldrh	r0, [r2, #2]
 80115e2:	bd70      	pop	{r4, r5, r6, pc}
 80115e4:	2000      	movs	r0, #0
 80115e6:	e7fc      	b.n	80115e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080115e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80115ee:	4604      	mov	r4, r0
 80115f0:	260b      	movs	r6, #11
 80115f2:	886f      	ldrh	r7, [r5, #2]
 80115f4:	087f      	lsrs	r7, r7, #1
 80115f6:	3e01      	subs	r6, #1
 80115f8:	d01b      	beq.n	8011632 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80115fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80115fc:	b92b      	cbnz	r3, 801160a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80115fe:	4b0e      	ldr	r3, [pc, #56]	; (8011638 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8011600:	21c0      	movs	r1, #192	; 0xc0
 8011602:	4a0e      	ldr	r2, [pc, #56]	; (801163c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8011604:	480e      	ldr	r0, [pc, #56]	; (8011640 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8011606:	f00c fe9f 	bl	801e348 <__assert_func>
 801160a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801160c:	462a      	mov	r2, r5
 801160e:	4639      	mov	r1, r7
 8011610:	4620      	mov	r0, r4
 8011612:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011616:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801161a:	4643      	mov	r3, r8
 801161c:	f7ff ffc6 	bl	80115ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8011620:	b138      	cbz	r0, 8011632 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8011622:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011626:	4642      	mov	r2, r8
 8011628:	4620      	mov	r0, r4
 801162a:	f7ff ff8b 	bl	8011544 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801162e:	2800      	cmp	r0, #0
 8011630:	d1e1      	bne.n	80115f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8011632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011636:	bf00      	nop
 8011638:	08021de8 	.word	0x08021de8
 801163c:	0802205a 	.word	0x0802205a
 8011640:	08021df1 	.word	0x08021df1

08011644 <_ZN8touchgfx8ceil28_4El>:
 8011644:	f110 030f 	adds.w	r3, r0, #15
 8011648:	d401      	bmi.n	801164e <_ZN8touchgfx8ceil28_4El+0xa>
 801164a:	1118      	asrs	r0, r3, #4
 801164c:	4770      	bx	lr
 801164e:	2210      	movs	r2, #16
 8011650:	f1c0 0001 	rsb	r0, r0, #1
 8011654:	fb93 f3f2 	sdiv	r3, r3, r2
 8011658:	f010 000f 	ands.w	r0, r0, #15
 801165c:	bf18      	it	ne
 801165e:	2001      	movne	r0, #1
 8011660:	1a18      	subs	r0, r3, r0
 8011662:	4770      	bx	lr

08011664 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8011664:	2900      	cmp	r1, #0
 8011666:	b538      	push	{r3, r4, r5, lr}
 8011668:	dc05      	bgt.n	8011676 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801166a:	4b0f      	ldr	r3, [pc, #60]	; (80116a8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801166c:	21fa      	movs	r1, #250	; 0xfa
 801166e:	4a0f      	ldr	r2, [pc, #60]	; (80116ac <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8011670:	480f      	ldr	r0, [pc, #60]	; (80116b0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8011672:	f00c fe69 	bl	801e348 <__assert_func>
 8011676:	2800      	cmp	r0, #0
 8011678:	db06      	blt.n	8011688 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801167a:	fb90 f4f1 	sdiv	r4, r0, r1
 801167e:	fb01 0114 	mls	r1, r1, r4, r0
 8011682:	6014      	str	r4, [r2, #0]
 8011684:	6019      	str	r1, [r3, #0]
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	4240      	negs	r0, r0
 801168a:	fb90 f4f1 	sdiv	r4, r0, r1
 801168e:	4265      	negs	r5, r4
 8011690:	fb01 0014 	mls	r0, r1, r4, r0
 8011694:	6015      	str	r5, [r2, #0]
 8011696:	6018      	str	r0, [r3, #0]
 8011698:	2800      	cmp	r0, #0
 801169a:	d0f4      	beq.n	8011686 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801169c:	6810      	ldr	r0, [r2, #0]
 801169e:	3801      	subs	r0, #1
 80116a0:	6010      	str	r0, [r2, #0]
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	1a09      	subs	r1, r1, r0
 80116a6:	e7ed      	b.n	8011684 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 80116a8:	080223b4 	.word	0x080223b4
 80116ac:	080223f3 	.word	0x080223f3
 80116b0:	080223c4 	.word	0x080223c4

080116b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	694a      	ldr	r2, [r1, #20]
 80116b8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80116ba:	684b      	ldr	r3, [r1, #4]
 80116bc:	1b54      	subs	r4, r2, r5
 80116be:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80116c0:	f000 8106 	beq.w	80118d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80116c4:	1b9b      	subs	r3, r3, r6
 80116c6:	d003      	beq.n	80116d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80116c8:	4363      	muls	r3, r4
 80116ca:	2210      	movs	r2, #16
 80116cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80116d0:	680c      	ldr	r4, [r1, #0]
 80116d2:	698a      	ldr	r2, [r1, #24]
 80116d4:	1b65      	subs	r5, r4, r5
 80116d6:	f000 80fd 	beq.w	80118d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80116da:	1b92      	subs	r2, r2, r6
 80116dc:	d003      	beq.n	80116e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80116de:	436a      	muls	r2, r5
 80116e0:	2410      	movs	r4, #16
 80116e2:	fb92 f2f4 	sdiv	r2, r2, r4
 80116e6:	1a9b      	subs	r3, r3, r2
 80116e8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8011910 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80116ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116f0:	460a      	mov	r2, r1
 80116f2:	ee07 3a90 	vmov	s15, r3
 80116f6:	f100 040c 	add.w	r4, r0, #12
 80116fa:	4603      	mov	r3, r0
 80116fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011700:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011704:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8011708:	eeb1 6a43 	vneg.f32	s12, s6
 801170c:	edd2 7a02 	vldr	s15, [r2, #8]
 8011710:	3214      	adds	r2, #20
 8011712:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011716:	ece3 6a01 	vstmia	r3!, {s13}
 801171a:	429c      	cmp	r4, r3
 801171c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8011720:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011724:	edc3 7a02 	vstr	s15, [r3, #8]
 8011728:	ed52 7a01 	vldr	s15, [r2, #-4]
 801172c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011730:	edc3 7a05 	vstr	s15, [r3, #20]
 8011734:	d1ea      	bne.n	801170c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8011736:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011738:	698b      	ldr	r3, [r1, #24]
 801173a:	edd0 4a02 	vldr	s9, [r0, #8]
 801173e:	1a9b      	subs	r3, r3, r2
 8011740:	edd0 3a00 	vldr	s7, [r0]
 8011744:	edd0 6a01 	vldr	s13, [r0, #4]
 8011748:	ee07 3a90 	vmov	s15, r3
 801174c:	684b      	ldr	r3, [r1, #4]
 801174e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8011752:	ed90 5a05 	vldr	s10, [r0, #20]
 8011756:	1a9b      	subs	r3, r3, r2
 8011758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801175c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8011760:	ed90 2a03 	vldr	s4, [r0, #12]
 8011764:	ee07 3a10 	vmov	s14, r3
 8011768:	edd0 5a04 	vldr	s11, [r0, #16]
 801176c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011770:	ed90 1a07 	vldr	s2, [r0, #28]
 8011774:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011778:	edd0 2a06 	vldr	s5, [r0, #24]
 801177c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011780:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8011784:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011788:	ee32 5a45 	vsub.f32	s10, s4, s10
 801178c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011790:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011794:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8011798:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801179a:	694a      	ldr	r2, [r1, #20]
 801179c:	1b13      	subs	r3, r2, r4
 801179e:	ee07 3a10 	vmov	s14, r3
 80117a2:	680b      	ldr	r3, [r1, #0]
 80117a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117a8:	1b1b      	subs	r3, r3, r4
 80117aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80117ae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80117b2:	ee07 3a10 	vmov	s14, r3
 80117b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80117be:	eee6 4a87 	vfma.f32	s9, s13, s14
 80117c2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80117c6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80117ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80117cc:	698b      	ldr	r3, [r1, #24]
 80117ce:	1a9b      	subs	r3, r3, r2
 80117d0:	ee06 3a90 	vmov	s13, r3
 80117d4:	684b      	ldr	r3, [r1, #4]
 80117d6:	1a9b      	subs	r3, r3, r2
 80117d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80117dc:	ee07 3a10 	vmov	s14, r3
 80117e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80117e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117e8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80117ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80117f0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80117f4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80117f8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80117fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80117fe:	694a      	ldr	r2, [r1, #20]
 8011800:	1b13      	subs	r3, r2, r4
 8011802:	ee07 3a10 	vmov	s14, r3
 8011806:	680b      	ldr	r3, [r1, #0]
 8011808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801180c:	1b1b      	subs	r3, r3, r4
 801180e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011812:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8011816:	ee07 3a10 	vmov	s14, r3
 801181a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801181e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011822:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011826:	edd0 5a08 	vldr	s11, [r0, #32]
 801182a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801182e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8011832:	ee25 5a06 	vmul.f32	s10, s10, s12
 8011836:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801183a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801183c:	698b      	ldr	r3, [r1, #24]
 801183e:	1a9b      	subs	r3, r3, r2
 8011840:	ee07 3a10 	vmov	s14, r3
 8011844:	684b      	ldr	r3, [r1, #4]
 8011846:	1a9b      	subs	r3, r3, r2
 8011848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801184c:	ee01 3a90 	vmov	s3, r3
 8011850:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011854:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011858:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801185c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8011860:	eea1 7a21 	vfma.f32	s14, s2, s3
 8011864:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011868:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801186c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801186e:	694a      	ldr	r2, [r1, #20]
 8011870:	1b13      	subs	r3, r2, r4
 8011872:	ee03 3a10 	vmov	s6, r3
 8011876:	680b      	ldr	r3, [r1, #0]
 8011878:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801187c:	1b1b      	subs	r3, r3, r4
 801187e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011882:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011886:	ee03 3a10 	vmov	s6, r3
 801188a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801188e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8011892:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011896:	ee25 6a86 	vmul.f32	s12, s11, s12
 801189a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801189e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80118a2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80118a6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	dd13      	ble.n	80118d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80118b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118b4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80118b8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80118ba:	eee3 7a87 	vfma.f32	s15, s7, s14
 80118be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c6:	dd15      	ble.n	80118f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80118c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118cc:	6403      	str	r3, [r0, #64]	; 0x40
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
 80118d0:	4623      	mov	r3, r4
 80118d2:	e6fd      	b.n	80116d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80118d4:	462a      	mov	r2, r5
 80118d6:	e706      	b.n	80116e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80118d8:	d502      	bpl.n	80118e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80118da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80118de:	e7e9      	b.n	80118b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80118e0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80118e4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80118e8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80118ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f0:	dade      	bge.n	80118b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80118f2:	e7f2      	b.n	80118da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80118f4:	d502      	bpl.n	80118fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80118f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80118fa:	e7e7      	b.n	80118cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80118fc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8011900:	eee3 4a86 	vfma.f32	s9, s7, s12
 8011904:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	dadc      	bge.n	80118c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801190e:	e7f2      	b.n	80118f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8011910:	3d800000 	.word	0x3d800000

08011914 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8011914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	f04f 0814 	mov.w	r8, #20
 801191c:	4604      	mov	r4, r0
 801191e:	4617      	mov	r7, r2
 8011920:	460d      	mov	r5, r1
 8011922:	fb08 f903 	mul.w	r9, r8, r3
 8011926:	461e      	mov	r6, r3
 8011928:	eb02 0a09 	add.w	sl, r2, r9
 801192c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011930:	f7ff fe88 	bl	8011644 <_ZN8touchgfx8ceil28_4El>
 8011934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011936:	6160      	str	r0, [r4, #20]
 8011938:	fb08 f803 	mul.w	r8, r8, r3
 801193c:	9001      	str	r0, [sp, #4]
 801193e:	eb07 0b08 	add.w	fp, r7, r8
 8011942:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011946:	f7ff fe7d 	bl	8011644 <_ZN8touchgfx8ceil28_4El>
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	1a80      	subs	r0, r0, r2
 801194e:	61a0      	str	r0, [r4, #24]
 8011950:	2800      	cmp	r0, #0
 8011952:	f000 8088 	beq.w	8011a66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8011956:	f857 3009 	ldr.w	r3, [r7, r9]
 801195a:	f857 c008 	ldr.w	ip, [r7, r8]
 801195e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011962:	ebac 0c03 	sub.w	ip, ip, r3
 8011966:	f8da 1004 	ldr.w	r1, [sl, #4]
 801196a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801196e:	1a40      	subs	r0, r0, r1
 8011970:	fb0b f202 	mul.w	r2, fp, r2
 8011974:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8011978:	fb0c 2211 	mls	r2, ip, r1, r2
 801197c:	4641      	mov	r1, r8
 801197e:	fb00 2003 	mla	r0, r0, r3, r2
 8011982:	f104 0310 	add.w	r3, r4, #16
 8011986:	4622      	mov	r2, r4
 8011988:	3801      	subs	r0, #1
 801198a:	4440      	add	r0, r8
 801198c:	f7ff fe6a 	bl	8011664 <_ZN8touchgfx11floorDivModEllRlS0_>
 8011990:	f104 0308 	add.w	r3, r4, #8
 8011994:	1d22      	adds	r2, r4, #4
 8011996:	4641      	mov	r1, r8
 8011998:	4658      	mov	r0, fp
 801199a:	f7ff fe63 	bl	8011664 <_ZN8touchgfx11floorDivModEllRlS0_>
 801199e:	f8c4 800c 	str.w	r8, [r4, #12]
 80119a2:	6962      	ldr	r2, [r4, #20]
 80119a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80119a8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8011a70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80119ac:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80119b6:	ee07 3a10 	vmov	s14, r3
 80119ba:	f857 3009 	ldr.w	r3, [r7, r9]
 80119be:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80119c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119c6:	ee07 3a90 	vmov	s15, r3
 80119ca:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80119ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80119d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80119da:	edd3 6a00 	vldr	s13, [r3]
 80119de:	eee6 6a07 	vfma.f32	s13, s12, s14
 80119e2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80119e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80119ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80119ee:	edd4 6a01 	vldr	s13, [r4, #4]
 80119f2:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80119f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80119fa:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80119fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011a02:	ed84 6a08 	vstr	s12, [r4, #32]
 8011a06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011a08:	6262      	str	r2, [r4, #36]	; 0x24
 8011a0a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8011a0e:	ed93 6a03 	vldr	s12, [r3, #12]
 8011a12:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011a16:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011a1a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011a1e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8011a22:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011a26:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8011a2a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011a2e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8011a32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8011a34:	6322      	str	r2, [r4, #48]	; 0x30
 8011a36:	ed93 6a06 	vldr	s12, [r3, #24]
 8011a3a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8011a3e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011a42:	eeb0 7a46 	vmov.f32	s14, s12
 8011a46:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8011a4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011a4e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8011a52:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8011a56:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8011a5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011a5e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8011a62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a64:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011a66:	4620      	mov	r0, r4
 8011a68:	b003      	add	sp, #12
 8011a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6e:	bf00      	nop
 8011a70:	3d800000 	.word	0x3d800000

08011a74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8011a74:	4b01      	ldr	r3, [pc, #4]	; (8011a7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8011a76:	6018      	str	r0, [r3, #0]
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	20009c54 	.word	0x20009c54

08011a80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8011a80:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8011a82:	881a      	ldrh	r2, [r3, #0]
 8011a84:	4282      	cmp	r2, r0
 8011a86:	d807      	bhi.n	8011a98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8011a88:	4b05      	ldr	r3, [pc, #20]	; (8011aa0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	4298      	cmp	r0, r3
 8011a90:	bfac      	ite	ge
 8011a92:	2000      	movge	r0, #0
 8011a94:	2001      	movlt	r0, #1
 8011a96:	4770      	bx	lr
 8011a98:	2000      	movs	r0, #0
 8011a9a:	4770      	bx	lr
 8011a9c:	20009c74 	.word	0x20009c74
 8011aa0:	20009c78 	.word	0x20009c78

08011aa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8011aa4:	b508      	push	{r3, lr}
 8011aa6:	4601      	mov	r1, r0
 8011aa8:	f7ff ffea 	bl	8011a80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8011aac:	b118      	cbz	r0, 8011ab6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8011aae:	4b02      	ldr	r3, [pc, #8]	; (8011ab8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8011ab6:	bd08      	pop	{r3, pc}
 8011ab8:	20009c58 	.word	0x20009c58

08011abc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	4d28      	ldr	r5, [pc, #160]	; (8011b64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8011ac2:	682b      	ldr	r3, [r5, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d04a      	beq.n	8011b5e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8011ac8:	4a27      	ldr	r2, [pc, #156]	; (8011b68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011aca:	4e28      	ldr	r6, [pc, #160]	; (8011b6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8011acc:	8810      	ldrh	r0, [r2, #0]
 8011ace:	f8b6 8000 	ldrh.w	r8, [r6]
 8011ad2:	4c27      	ldr	r4, [pc, #156]	; (8011b70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011ad4:	4440      	add	r0, r8
 8011ad6:	4f27      	ldr	r7, [pc, #156]	; (8011b74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8011ad8:	1c41      	adds	r1, r0, #1
 8011ada:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8011ade:	f021 0101 	bic.w	r1, r1, #1
 8011ae2:	eb03 020e 	add.w	r2, r3, lr
 8011ae6:	0409      	lsls	r1, r1, #16
 8011ae8:	6022      	str	r2, [r4, #0]
 8011aea:	0c09      	lsrs	r1, r1, #16
 8011aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011af0:	eb0e 010c 	add.w	r1, lr, ip
 8011af4:	185a      	adds	r2, r3, r1
 8011af6:	603a      	str	r2, [r7, #0]
 8011af8:	220e      	movs	r2, #14
 8011afa:	fb02 f208 	mul.w	r2, r2, r8
 8011afe:	3203      	adds	r2, #3
 8011b00:	f022 0203 	bic.w	r2, r2, #3
 8011b04:	4411      	add	r1, r2
 8011b06:	440b      	add	r3, r1
 8011b08:	491b      	ldr	r1, [pc, #108]	; (8011b78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8011b0a:	600b      	str	r3, [r1, #0]
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	491b      	ldr	r1, [pc, #108]	; (8011b7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8011b10:	800b      	strh	r3, [r1, #0]
 8011b12:	491b      	ldr	r1, [pc, #108]	; (8011b80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8011b14:	6809      	ldr	r1, [r1, #0]
 8011b16:	eba1 010e 	sub.w	r1, r1, lr
 8011b1a:	eba1 010c 	sub.w	r1, r1, ip
 8011b1e:	469c      	mov	ip, r3
 8011b20:	1a8a      	subs	r2, r1, r2
 8011b22:	4918      	ldr	r1, [pc, #96]	; (8011b84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8011b24:	600a      	str	r2, [r1, #0]
 8011b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b2a:	4a17      	ldr	r2, [pc, #92]	; (8011b88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8011b2c:	8013      	strh	r3, [r2, #0]
 8011b2e:	4283      	cmp	r3, r0
 8011b30:	d10d      	bne.n	8011b4e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8011b32:	8835      	ldrh	r5, [r6, #0]
 8011b34:	2300      	movs	r3, #0
 8011b36:	6838      	ldr	r0, [r7, #0]
 8011b38:	240e      	movs	r4, #14
 8011b3a:	429d      	cmp	r5, r3
 8011b3c:	d90f      	bls.n	8011b5e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8011b3e:	fb04 0203 	mla	r2, r4, r3, r0
 8011b42:	3301      	adds	r3, #1
 8011b44:	7b11      	ldrb	r1, [r2, #12]
 8011b46:	f36f 1145 	bfc	r1, #5, #1
 8011b4a:	7311      	strb	r1, [r2, #12]
 8011b4c:	e7f5      	b.n	8011b3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8011b4e:	682a      	ldr	r2, [r5, #0]
 8011b50:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8011b54:	6822      	ldr	r2, [r4, #0]
 8011b56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	e7e7      	b.n	8011b2e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8011b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b62:	bf00      	nop
 8011b64:	20009c58 	.word	0x20009c58
 8011b68:	20009c74 	.word	0x20009c74
 8011b6c:	20009c78 	.word	0x20009c78
 8011b70:	20009c6c 	.word	0x20009c6c
 8011b74:	20009c5c 	.word	0x20009c5c
 8011b78:	20009c64 	.word	0x20009c64
 8011b7c:	20009c76 	.word	0x20009c76
 8011b80:	20009c60 	.word	0x20009c60
 8011b84:	20009c70 	.word	0x20009c70
 8011b88:	20009c68 	.word	0x20009c68

08011b8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8011b8c:	4b10      	ldr	r3, [pc, #64]	; (8011bd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	b9db      	cbnz	r3, 8011bcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011b94:	b1d1      	cbz	r1, 8011bcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011b96:	4b0f      	ldr	r3, [pc, #60]	; (8011bd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8011b98:	240e      	movs	r4, #14
 8011b9a:	801a      	strh	r2, [r3, #0]
 8011b9c:	b292      	uxth	r2, r2
 8011b9e:	4b0e      	ldr	r3, [pc, #56]	; (8011bd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8011ba0:	881b      	ldrh	r3, [r3, #0]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	4362      	muls	r2, r4
 8011ba6:	2406      	movs	r4, #6
 8011ba8:	fb04 2203 	mla	r2, r4, r3, r2
 8011bac:	428a      	cmp	r2, r1
 8011bae:	d305      	bcc.n	8011bbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8011bb0:	4b0a      	ldr	r3, [pc, #40]	; (8011bdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8011bb2:	2137      	movs	r1, #55	; 0x37
 8011bb4:	4a0a      	ldr	r2, [pc, #40]	; (8011be0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8011bb6:	480b      	ldr	r0, [pc, #44]	; (8011be4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8011bb8:	f00c fbc6 	bl	801e348 <__assert_func>
 8011bbc:	4b0a      	ldr	r3, [pc, #40]	; (8011be8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8011bbe:	6019      	str	r1, [r3, #0]
 8011bc0:	4b0a      	ldr	r3, [pc, #40]	; (8011bec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8011bc2:	6018      	str	r0, [r3, #0]
 8011bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bc8:	f7ff bf78 	b.w	8011abc <_ZN8touchgfx6Bitmap10clearCacheEv>
 8011bcc:	bd10      	pop	{r4, pc}
 8011bce:	bf00      	nop
 8011bd0:	20009c64 	.word	0x20009c64
 8011bd4:	20009c78 	.word	0x20009c78
 8011bd8:	20009c74 	.word	0x20009c74
 8011bdc:	08022491 	.word	0x08022491
 8011be0:	08022526 	.word	0x08022526
 8011be4:	0802246c 	.word	0x0802246c
 8011be8:	20009c60 	.word	0x20009c60
 8011bec:	20009c58 	.word	0x20009c58

08011bf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8011bf0:	b470      	push	{r4, r5, r6}
 8011bf2:	4c07      	ldr	r4, [pc, #28]	; (8011c10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	9a03      	ldr	r2, [sp, #12]
 8011bfa:	6826      	ldr	r6, [r4, #0]
 8011bfc:	b936      	cbnz	r6, 8011c0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8011bfe:	6025      	str	r5, [r4, #0]
 8011c00:	4c04      	ldr	r4, [pc, #16]	; (8011c14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8011c02:	8021      	strh	r1, [r4, #0]
 8011c04:	4619      	mov	r1, r3
 8011c06:	bc70      	pop	{r4, r5, r6}
 8011c08:	f7ff bfc0 	b.w	8011b8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011c0c:	bc70      	pop	{r4, r5, r6}
 8011c0e:	4770      	bx	lr
 8011c10:	20009c7c 	.word	0x20009c7c
 8011c14:	20009c74 	.word	0x20009c74

08011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011c18:	b508      	push	{r3, lr}
 8011c1a:	4b14      	ldr	r3, [pc, #80]	; (8011c6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	b931      	cbnz	r1, 8011c2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8011c20:	4b13      	ldr	r3, [pc, #76]	; (8011c70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8011c22:	f240 3187 	movw	r1, #903	; 0x387
 8011c26:	4a13      	ldr	r2, [pc, #76]	; (8011c74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8011c28:	4813      	ldr	r0, [pc, #76]	; (8011c78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011c2a:	f00c fb8d 	bl	801e348 <__assert_func>
 8011c2e:	4a13      	ldr	r2, [pc, #76]	; (8011c7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8011c30:	8803      	ldrh	r3, [r0, #0]
 8011c32:	8812      	ldrh	r2, [r2, #0]
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d204      	bcs.n	8011c42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8011c38:	2214      	movs	r2, #20
 8011c3a:	fb02 1303 	mla	r3, r2, r3, r1
 8011c3e:	8918      	ldrh	r0, [r3, #8]
 8011c40:	bd08      	pop	{r3, pc}
 8011c42:	490f      	ldr	r1, [pc, #60]	; (8011c80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011c44:	8809      	ldrh	r1, [r1, #0]
 8011c46:	4411      	add	r1, r2
 8011c48:	428b      	cmp	r3, r1
 8011c4a:	da06      	bge.n	8011c5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8011c4c:	1a9b      	subs	r3, r3, r2
 8011c4e:	4a0d      	ldr	r2, [pc, #52]	; (8011c84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8011c50:	210e      	movs	r1, #14
 8011c52:	6812      	ldr	r2, [r2, #0]
 8011c54:	fb01 2303 	mla	r3, r1, r3, r2
 8011c58:	e7f1      	b.n	8011c3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8011c5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	bf0a      	itet	eq
 8011c62:	4b09      	ldreq	r3, [pc, #36]	; (8011c88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8011c64:	2000      	movne	r0, #0
 8011c66:	8818      	ldrheq	r0, [r3, #0]
 8011c68:	e7ea      	b.n	8011c40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8011c6a:	bf00      	nop
 8011c6c:	20009c7c 	.word	0x20009c7c
 8011c70:	080224ea 	.word	0x080224ea
 8011c74:	080225d3 	.word	0x080225d3
 8011c78:	0802246c 	.word	0x0802246c
 8011c7c:	20009c74 	.word	0x20009c74
 8011c80:	20009c78 	.word	0x20009c78
 8011c84:	20009c5c 	.word	0x20009c5c
 8011c88:	20009be8 	.word	0x20009be8

08011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8011c8c:	b508      	push	{r3, lr}
 8011c8e:	4b14      	ldr	r3, [pc, #80]	; (8011ce0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8011c90:	6819      	ldr	r1, [r3, #0]
 8011c92:	b931      	cbnz	r1, 8011ca2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8011c94:	4b13      	ldr	r3, [pc, #76]	; (8011ce4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8011c96:	f240 319b 	movw	r1, #923	; 0x39b
 8011c9a:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8011c9c:	4813      	ldr	r0, [pc, #76]	; (8011cec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8011c9e:	f00c fb53 	bl	801e348 <__assert_func>
 8011ca2:	4a13      	ldr	r2, [pc, #76]	; (8011cf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8011ca4:	8803      	ldrh	r3, [r0, #0]
 8011ca6:	8812      	ldrh	r2, [r2, #0]
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d204      	bcs.n	8011cb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8011cac:	2214      	movs	r2, #20
 8011cae:	fb02 1303 	mla	r3, r2, r3, r1
 8011cb2:	8958      	ldrh	r0, [r3, #10]
 8011cb4:	bd08      	pop	{r3, pc}
 8011cb6:	490f      	ldr	r1, [pc, #60]	; (8011cf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8011cb8:	8809      	ldrh	r1, [r1, #0]
 8011cba:	4411      	add	r1, r2
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	da06      	bge.n	8011cce <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8011cc0:	1a9b      	subs	r3, r3, r2
 8011cc2:	4a0d      	ldr	r2, [pc, #52]	; (8011cf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8011cc4:	210e      	movs	r1, #14
 8011cc6:	6812      	ldr	r2, [r2, #0]
 8011cc8:	fb01 2303 	mla	r3, r1, r3, r2
 8011ccc:	e7f1      	b.n	8011cb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8011cce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	bf0a      	itet	eq
 8011cd6:	4b09      	ldreq	r3, [pc, #36]	; (8011cfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8011cd8:	2000      	movne	r0, #0
 8011cda:	8818      	ldrheq	r0, [r3, #0]
 8011cdc:	e7ea      	b.n	8011cb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8011cde:	bf00      	nop
 8011ce0:	20009c7c 	.word	0x20009c7c
 8011ce4:	080224ea 	.word	0x080224ea
 8011ce8:	080225ff 	.word	0x080225ff
 8011cec:	0802246c 	.word	0x0802246c
 8011cf0:	20009c74 	.word	0x20009c74
 8011cf4:	20009c78 	.word	0x20009c78
 8011cf8:	20009c5c 	.word	0x20009c5c
 8011cfc:	20009bea 	.word	0x20009bea

08011d00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8011d00:	4b23      	ldr	r3, [pc, #140]	; (8011d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011d02:	b510      	push	{r4, lr}
 8011d04:	681c      	ldr	r4, [r3, #0]
 8011d06:	b934      	cbnz	r4, 8011d16 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8011d08:	4b22      	ldr	r3, [pc, #136]	; (8011d94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8011d0a:	f240 31af 	movw	r1, #943	; 0x3af
 8011d0e:	4a22      	ldr	r2, [pc, #136]	; (8011d98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8011d10:	4822      	ldr	r0, [pc, #136]	; (8011d9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8011d12:	f00c fb19 	bl	801e348 <__assert_func>
 8011d16:	4a22      	ldr	r2, [pc, #136]	; (8011da0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8011d18:	880b      	ldrh	r3, [r1, #0]
 8011d1a:	8812      	ldrh	r2, [r2, #0]
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d211      	bcs.n	8011d44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8011d20:	2214      	movs	r2, #20
 8011d22:	fb02 4303 	mla	r3, r2, r3, r4
 8011d26:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8011d2a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8011d2e:	8a1a      	ldrh	r2, [r3, #16]
 8011d30:	8a5b      	ldrh	r3, [r3, #18]
 8011d32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011d36:	8004      	strh	r4, [r0, #0]
 8011d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d3c:	8041      	strh	r1, [r0, #2]
 8011d3e:	8082      	strh	r2, [r0, #4]
 8011d40:	80c3      	strh	r3, [r0, #6]
 8011d42:	e00e      	b.n	8011d62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011d44:	4917      	ldr	r1, [pc, #92]	; (8011da4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8011d46:	8809      	ldrh	r1, [r1, #0]
 8011d48:	4411      	add	r1, r2
 8011d4a:	428b      	cmp	r3, r1
 8011d4c:	da0a      	bge.n	8011d64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	4a15      	ldr	r2, [pc, #84]	; (8011da8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8011d52:	210e      	movs	r1, #14
 8011d54:	6812      	ldr	r2, [r2, #0]
 8011d56:	fb01 2303 	mla	r3, r1, r3, r2
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	6002      	str	r2, [r0, #0]
 8011d5e:	685a      	ldr	r2, [r3, #4]
 8011d60:	6042      	str	r2, [r0, #4]
 8011d62:	bd10      	pop	{r4, pc}
 8011d64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d10b      	bne.n	8011d84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8011d6c:	4b0f      	ldr	r3, [pc, #60]	; (8011dac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8011d6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011d72:	4b0f      	ldr	r3, [pc, #60]	; (8011db0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8011d74:	8081      	strh	r1, [r0, #4]
 8011d76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	80c2      	strh	r2, [r0, #6]
 8011d7e:	8003      	strh	r3, [r0, #0]
 8011d80:	8043      	strh	r3, [r0, #2]
 8011d82:	e7ee      	b.n	8011d62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011d84:	2300      	movs	r3, #0
 8011d86:	8003      	strh	r3, [r0, #0]
 8011d88:	8043      	strh	r3, [r0, #2]
 8011d8a:	8083      	strh	r3, [r0, #4]
 8011d8c:	e7d8      	b.n	8011d40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8011d8e:	bf00      	nop
 8011d90:	20009c7c 	.word	0x20009c7c
 8011d94:	080224ea 	.word	0x080224ea
 8011d98:	0802256c 	.word	0x0802256c
 8011d9c:	0802246c 	.word	0x0802246c
 8011da0:	20009c74 	.word	0x20009c74
 8011da4:	20009c78 	.word	0x20009c78
 8011da8:	20009c5c 	.word	0x20009c5c
 8011dac:	20009be8 	.word	0x20009be8
 8011db0:	20009bea 	.word	0x20009bea

08011db4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8011db4:	4b18      	ldr	r3, [pc, #96]	; (8011e18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	b34b      	cbz	r3, 8011e0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8011dba:	4a18      	ldr	r2, [pc, #96]	; (8011e1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8011dbc:	8800      	ldrh	r0, [r0, #0]
 8011dbe:	8812      	ldrh	r2, [r2, #0]
 8011dc0:	4290      	cmp	r0, r2
 8011dc2:	d211      	bcs.n	8011de8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8011dc4:	2214      	movs	r2, #20
 8011dc6:	fb02 3300 	mla	r3, r2, r0, r3
 8011dca:	8a1a      	ldrh	r2, [r3, #16]
 8011dcc:	8919      	ldrh	r1, [r3, #8]
 8011dce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011dd2:	428a      	cmp	r2, r1
 8011dd4:	db1d      	blt.n	8011e12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8011dd6:	8a58      	ldrh	r0, [r3, #18]
 8011dd8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011ddc:	895b      	ldrh	r3, [r3, #10]
 8011dde:	4298      	cmp	r0, r3
 8011de0:	bfac      	ite	ge
 8011de2:	2000      	movge	r0, #0
 8011de4:	2001      	movlt	r0, #1
 8011de6:	4770      	bx	lr
 8011de8:	4b0d      	ldr	r3, [pc, #52]	; (8011e20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	4413      	add	r3, r2
 8011dee:	4298      	cmp	r0, r3
 8011df0:	da0d      	bge.n	8011e0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8011df2:	4b0c      	ldr	r3, [pc, #48]	; (8011e24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8011df4:	1a80      	subs	r0, r0, r2
 8011df6:	220e      	movs	r2, #14
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	fb02 3300 	mla	r3, r2, r0, r3
 8011dfe:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8011e02:	891a      	ldrh	r2, [r3, #8]
 8011e04:	4291      	cmp	r1, r2
 8011e06:	db04      	blt.n	8011e12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8011e08:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8011e0c:	e7e6      	b.n	8011ddc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8011e0e:	2000      	movs	r0, #0
 8011e10:	4770      	bx	lr
 8011e12:	2001      	movs	r0, #1
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	20009c7c 	.word	0x20009c7c
 8011e1c:	20009c74 	.word	0x20009c74
 8011e20:	20009c78 	.word	0x20009c78
 8011e24:	20009c5c 	.word	0x20009c5c

08011e28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8011e28:	b508      	push	{r3, lr}
 8011e2a:	4b12      	ldr	r3, [pc, #72]	; (8011e74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8011e2c:	6819      	ldr	r1, [r3, #0]
 8011e2e:	b931      	cbnz	r1, 8011e3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8011e30:	4b11      	ldr	r3, [pc, #68]	; (8011e78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8011e32:	f240 31d3 	movw	r1, #979	; 0x3d3
 8011e36:	4a11      	ldr	r2, [pc, #68]	; (8011e7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011e38:	4811      	ldr	r0, [pc, #68]	; (8011e80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8011e3a:	f00c fa85 	bl	801e348 <__assert_func>
 8011e3e:	8803      	ldrh	r3, [r0, #0]
 8011e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d012      	beq.n	8011e6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8011e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d103      	bne.n	8011e58 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8011e50:	4b0c      	ldr	r3, [pc, #48]	; (8011e84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011e56:	bd08      	pop	{r3, pc}
 8011e58:	4a0b      	ldr	r2, [pc, #44]	; (8011e88 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8011e5a:	6812      	ldr	r2, [r2, #0]
 8011e5c:	b11a      	cbz	r2, 8011e66 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8011e5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d1f7      	bne.n	8011e56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011e66:	2214      	movs	r2, #20
 8011e68:	4353      	muls	r3, r2
 8011e6a:	58c8      	ldr	r0, [r1, r3]
 8011e6c:	e7f3      	b.n	8011e56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011e6e:	2000      	movs	r0, #0
 8011e70:	e7f1      	b.n	8011e56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011e72:	bf00      	nop
 8011e74:	20009c7c 	.word	0x20009c7c
 8011e78:	080224ea 	.word	0x080224ea
 8011e7c:	080225a2 	.word	0x080225a2
 8011e80:	0802246c 	.word	0x0802246c
 8011e84:	20009bf4 	.word	0x20009bf4
 8011e88:	20009c58 	.word	0x20009c58

08011e8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8011e8c:	8802      	ldrh	r2, [r0, #0]
 8011e8e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d845      	bhi.n	8011f22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8011e96:	4b24      	ldr	r3, [pc, #144]	; (8011f28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011e98:	8818      	ldrh	r0, [r3, #0]
 8011e9a:	4282      	cmp	r2, r0
 8011e9c:	d221      	bcs.n	8011ee2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8011e9e:	4b23      	ldr	r3, [pc, #140]	; (8011f2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8011ea0:	6819      	ldr	r1, [r3, #0]
 8011ea2:	2314      	movs	r3, #20
 8011ea4:	fb03 1302 	mla	r3, r3, r2, r1
 8011ea8:	6858      	ldr	r0, [r3, #4]
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d03a      	beq.n	8011f24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8011eae:	4920      	ldr	r1, [pc, #128]	; (8011f30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011eb0:	6809      	ldr	r1, [r1, #0]
 8011eb2:	2900      	cmp	r1, #0
 8011eb4:	d036      	beq.n	8011f24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8011eb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011eba:	2900      	cmp	r1, #0
 8011ebc:	d032      	beq.n	8011f24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8011ebe:	891a      	ldrh	r2, [r3, #8]
 8011ec0:	8958      	ldrh	r0, [r3, #10]
 8011ec2:	4350      	muls	r0, r2
 8011ec4:	7c5a      	ldrb	r2, [r3, #17]
 8011ec6:	7cdb      	ldrb	r3, [r3, #19]
 8011ec8:	0952      	lsrs	r2, r2, #5
 8011eca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011ece:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011ed2:	2b0b      	cmp	r3, #11
 8011ed4:	bf18      	it	ne
 8011ed6:	0040      	lslne	r0, r0, #1
 8011ed8:	3003      	adds	r0, #3
 8011eda:	f020 0003 	bic.w	r0, r0, #3
 8011ede:	4408      	add	r0, r1
 8011ee0:	4770      	bx	lr
 8011ee2:	4b14      	ldr	r3, [pc, #80]	; (8011f34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	4403      	add	r3, r0
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	da1a      	bge.n	8011f22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8011eec:	4b12      	ldr	r3, [pc, #72]	; (8011f38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8011eee:	1a10      	subs	r0, r2, r0
 8011ef0:	210e      	movs	r1, #14
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	fb01 3000 	mla	r0, r1, r0, r3
 8011ef8:	7b03      	ldrb	r3, [r0, #12]
 8011efa:	f003 031f 	and.w	r3, r3, #31
 8011efe:	2b0b      	cmp	r3, #11
 8011f00:	d10b      	bne.n	8011f1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8011f02:	8903      	ldrh	r3, [r0, #8]
 8011f04:	8940      	ldrh	r0, [r0, #10]
 8011f06:	4358      	muls	r0, r3
 8011f08:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011f0a:	3003      	adds	r0, #3
 8011f0c:	6819      	ldr	r1, [r3, #0]
 8011f0e:	f020 0303 	bic.w	r3, r0, #3
 8011f12:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8011f16:	4418      	add	r0, r3
 8011f18:	4770      	bx	lr
 8011f1a:	2b0d      	cmp	r3, #13
 8011f1c:	d101      	bne.n	8011f22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8011f1e:	300d      	adds	r0, #13
 8011f20:	4770      	bx	lr
 8011f22:	2000      	movs	r0, #0
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	20009c74 	.word	0x20009c74
 8011f2c:	20009c7c 	.word	0x20009c7c
 8011f30:	20009c58 	.word	0x20009c58
 8011f34:	20009c78 	.word	0x20009c78
 8011f38:	20009c5c 	.word	0x20009c5c

08011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011f3c:	4b19      	ldr	r3, [pc, #100]	; (8011fa4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8011f3e:	6819      	ldr	r1, [r3, #0]
 8011f40:	8803      	ldrh	r3, [r0, #0]
 8011f42:	b1e9      	cbz	r1, 8011f80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8011f44:	4a18      	ldr	r2, [pc, #96]	; (8011fa8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8011f46:	8812      	ldrh	r2, [r2, #0]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d90a      	bls.n	8011f62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8011f4c:	2214      	movs	r2, #20
 8011f4e:	fb02 1303 	mla	r3, r2, r3, r1
 8011f52:	7c58      	ldrb	r0, [r3, #17]
 8011f54:	0942      	lsrs	r2, r0, #5
 8011f56:	7cd8      	ldrb	r0, [r3, #19]
 8011f58:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8011f5c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8011f60:	4770      	bx	lr
 8011f62:	4912      	ldr	r1, [pc, #72]	; (8011fac <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8011f64:	8809      	ldrh	r1, [r1, #0]
 8011f66:	4411      	add	r1, r2
 8011f68:	428b      	cmp	r3, r1
 8011f6a:	da09      	bge.n	8011f80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8011f6c:	1a9b      	subs	r3, r3, r2
 8011f6e:	4a10      	ldr	r2, [pc, #64]	; (8011fb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8011f70:	210e      	movs	r1, #14
 8011f72:	6812      	ldr	r2, [r2, #0]
 8011f74:	fb01 2303 	mla	r3, r1, r3, r2
 8011f78:	7b18      	ldrb	r0, [r3, #12]
 8011f7a:	f000 001f 	and.w	r0, r0, #31
 8011f7e:	4770      	bx	lr
 8011f80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d10a      	bne.n	8011f9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8011f88:	4b0a      	ldr	r3, [pc, #40]	; (8011fb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011f90:	b10a      	cbz	r2, 8011f96 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8011f92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011f94:	b900      	cbnz	r0, 8011f98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8011f96:	6898      	ldr	r0, [r3, #8]
 8011f98:	6803      	ldr	r3, [r0, #0]
 8011f9a:	6a1b      	ldr	r3, [r3, #32]
 8011f9c:	4718      	bx	r3
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	20009c7c 	.word	0x20009c7c
 8011fa8:	20009c74 	.word	0x20009c74
 8011fac:	20009c78 	.word	0x20009c78
 8011fb0:	20009c5c 	.word	0x20009c5c
 8011fb4:	20009bf4 	.word	0x20009bf4

08011fb8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8011fb8:	2010      	movs	r0, #16
 8011fba:	4770      	bx	lr

08011fbc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	4770      	bx	lr

08011fc0 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8011fc0:	00d2      	lsls	r2, r2, #3
 8011fc2:	0209      	lsls	r1, r1, #8
 8011fc4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8011fc8:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8011fcc:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8011fd0:	4310      	orrs	r0, r2
 8011fd2:	4770      	bx	lr

08011fd4 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8011fd4:	0a09      	lsrs	r1, r1, #8
 8011fd6:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8011fda:	4770      	bx	lr

08011fdc <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8011fdc:	08c9      	lsrs	r1, r1, #3
 8011fde:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8011fe2:	4770      	bx	lr

08011fe4 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8011fe4:	00c9      	lsls	r1, r1, #3
 8011fe6:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8011fea:	4770      	bx	lr

08011fec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011fec:	2bff      	cmp	r3, #255	; 0xff
 8011fee:	d050      	beq.n	8012092 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8011ff0:	2a0b      	cmp	r2, #11
 8011ff2:	d04a      	beq.n	801208a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011ff4:	d80e      	bhi.n	8012014 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8011ff6:	2a03      	cmp	r2, #3
 8011ff8:	d03f      	beq.n	801207a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8011ffa:	d804      	bhi.n	8012006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8011ffc:	2a01      	cmp	r2, #1
 8011ffe:	d03e      	beq.n	801207e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8012000:	d93f      	bls.n	8012082 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8012002:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012004:	4770      	bx	lr
 8012006:	2a09      	cmp	r2, #9
 8012008:	d03f      	beq.n	801208a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801200a:	d83c      	bhi.n	8012086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801200c:	2a08      	cmp	r2, #8
 801200e:	d03a      	beq.n	8012086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8012010:	2000      	movs	r0, #0
 8012012:	4770      	bx	lr
 8012014:	2a2f      	cmp	r2, #47	; 0x2f
 8012016:	d024      	beq.n	8012062 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8012018:	d80d      	bhi.n	8012036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801201a:	2a2d      	cmp	r2, #45	; 0x2d
 801201c:	d014      	beq.n	8012048 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801201e:	d826      	bhi.n	801206e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012020:	2a2c      	cmp	r2, #44	; 0x2c
 8012022:	d1f5      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012024:	684b      	ldr	r3, [r1, #4]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d018      	beq.n	801205e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801202c:	d323      	bcc.n	8012076 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801202e:	2b02      	cmp	r3, #2
 8012030:	d1ee      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012032:	6880      	ldr	r0, [r0, #8]
 8012034:	4770      	bx	lr
 8012036:	2a31      	cmp	r2, #49	; 0x31
 8012038:	d004      	beq.n	8012044 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801203a:	d328      	bcc.n	801208e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801203c:	2a32      	cmp	r2, #50	; 0x32
 801203e:	d026      	beq.n	801208e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012040:	2a33      	cmp	r2, #51	; 0x33
 8012042:	d1e5      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012044:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012046:	4770      	bx	lr
 8012048:	684b      	ldr	r3, [r1, #4]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2b01      	cmp	r3, #1
 801204e:	d004      	beq.n	801205a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012050:	d30b      	bcc.n	801206a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012052:	2b02      	cmp	r3, #2
 8012054:	d1dc      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012056:	6900      	ldr	r0, [r0, #16]
 8012058:	4770      	bx	lr
 801205a:	6a00      	ldr	r0, [r0, #32]
 801205c:	4770      	bx	lr
 801205e:	6980      	ldr	r0, [r0, #24]
 8012060:	4770      	bx	lr
 8012062:	684b      	ldr	r3, [r1, #4]
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1d2      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801206a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801206c:	4770      	bx	lr
 801206e:	684b      	ldr	r3, [r1, #4]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1cc      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012076:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012078:	4770      	bx	lr
 801207a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801207c:	4770      	bx	lr
 801207e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012080:	4770      	bx	lr
 8012082:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012084:	4770      	bx	lr
 8012086:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8012088:	4770      	bx	lr
 801208a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801208c:	4770      	bx	lr
 801208e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012090:	4770      	bx	lr
 8012092:	2a0b      	cmp	r2, #11
 8012094:	d049      	beq.n	801212a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012096:	d80e      	bhi.n	80120b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8012098:	2a03      	cmp	r2, #3
 801209a:	d040      	beq.n	801211e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801209c:	d804      	bhi.n	80120a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801209e:	2a01      	cmp	r2, #1
 80120a0:	d03f      	beq.n	8012122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80120a2:	d940      	bls.n	8012126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80120a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80120a6:	4770      	bx	lr
 80120a8:	2a09      	cmp	r2, #9
 80120aa:	d03e      	beq.n	801212a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80120ac:	d801      	bhi.n	80120b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80120ae:	2a08      	cmp	r2, #8
 80120b0:	d1ae      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80120b2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80120b4:	4770      	bx	lr
 80120b6:	2a2f      	cmp	r2, #47	; 0x2f
 80120b8:	d024      	beq.n	8012104 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80120ba:	d80d      	bhi.n	80120d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80120bc:	2a2d      	cmp	r2, #45	; 0x2d
 80120be:	d014      	beq.n	80120ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80120c0:	d826      	bhi.n	8012110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80120c2:	2a2c      	cmp	r2, #44	; 0x2c
 80120c4:	d1a4      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80120c6:	684b      	ldr	r3, [r1, #4]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d018      	beq.n	8012100 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80120ce:	d324      	bcc.n	801211a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80120d0:	2b02      	cmp	r3, #2
 80120d2:	d19d      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80120d4:	68c0      	ldr	r0, [r0, #12]
 80120d6:	4770      	bx	lr
 80120d8:	2a31      	cmp	r2, #49	; 0x31
 80120da:	d004      	beq.n	80120e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80120dc:	d327      	bcc.n	801212e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80120de:	2a32      	cmp	r2, #50	; 0x32
 80120e0:	d025      	beq.n	801212e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80120e2:	2a33      	cmp	r2, #51	; 0x33
 80120e4:	d194      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80120e6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80120e8:	4770      	bx	lr
 80120ea:	684b      	ldr	r3, [r1, #4]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d004      	beq.n	80120fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80120f2:	d30b      	bcc.n	801210c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d18b      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80120f8:	6940      	ldr	r0, [r0, #20]
 80120fa:	4770      	bx	lr
 80120fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80120fe:	4770      	bx	lr
 8012100:	69c0      	ldr	r0, [r0, #28]
 8012102:	4770      	bx	lr
 8012104:	684b      	ldr	r3, [r1, #4]
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d181      	bne.n	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801210c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801210e:	4770      	bx	lr
 8012110:	684b      	ldr	r3, [r1, #4]
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	f47f af7b 	bne.w	8012010 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801211a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801211c:	4770      	bx	lr
 801211e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012120:	4770      	bx	lr
 8012122:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012124:	4770      	bx	lr
 8012126:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012128:	4770      	bx	lr
 801212a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801212c:	4770      	bx	lr
 801212e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8012130:	4770      	bx	lr

08012132 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012136:	b087      	sub	sp, #28
 8012138:	9815      	ldr	r0, [sp, #84]	; 0x54
 801213a:	9205      	str	r2, [sp, #20]
 801213c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012140:	9101      	str	r1, [sp, #4]
 8012142:	9202      	str	r2, [sp, #8]
 8012144:	6841      	ldr	r1, [r0, #4]
 8012146:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801214a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801214e:	fb01 2404 	mla	r4, r1, r4, r2
 8012152:	6802      	ldr	r2, [r0, #0]
 8012154:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012158:	f8de 2000 	ldr.w	r2, [lr]
 801215c:	9203      	str	r2, [sp, #12]
 801215e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012162:	3204      	adds	r2, #4
 8012164:	9204      	str	r2, [sp, #16]
 8012166:	9a02      	ldr	r2, [sp, #8]
 8012168:	43d6      	mvns	r6, r2
 801216a:	b2f6      	uxtb	r6, r6
 801216c:	9a01      	ldr	r2, [sp, #4]
 801216e:	2a00      	cmp	r2, #0
 8012170:	dc03      	bgt.n	801217a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8012172:	9a05      	ldr	r2, [sp, #20]
 8012174:	2a00      	cmp	r2, #0
 8012176:	f340 8129 	ble.w	80123cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801217a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801217c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8012180:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012186:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801218a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801218e:	2b00      	cmp	r3, #0
 8012190:	dd0e      	ble.n	80121b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012192:	1408      	asrs	r0, r1, #16
 8012194:	d405      	bmi.n	80121a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012196:	4560      	cmp	r0, ip
 8012198:	da03      	bge.n	80121a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801219a:	1410      	asrs	r0, r2, #16
 801219c:	d401      	bmi.n	80121a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801219e:	42b8      	cmp	r0, r7
 80121a0:	db07      	blt.n	80121b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80121a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80121a4:	3b01      	subs	r3, #1
 80121a6:	3402      	adds	r4, #2
 80121a8:	4401      	add	r1, r0
 80121aa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80121ac:	4402      	add	r2, r0
 80121ae:	e7ee      	b.n	801218e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80121b0:	d071      	beq.n	8012296 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80121b2:	1e58      	subs	r0, r3, #1
 80121b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80121b6:	fb05 1500 	mla	r5, r5, r0, r1
 80121ba:	142d      	asrs	r5, r5, #16
 80121bc:	d45f      	bmi.n	801227e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80121be:	4565      	cmp	r5, ip
 80121c0:	da5d      	bge.n	801227e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80121c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80121c4:	fb05 2000 	mla	r0, r5, r0, r2
 80121c8:	1400      	asrs	r0, r0, #16
 80121ca:	d458      	bmi.n	801227e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80121cc:	42b8      	cmp	r0, r7
 80121ce:	da56      	bge.n	801227e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80121d0:	4699      	mov	r9, r3
 80121d2:	46a2      	mov	sl, r4
 80121d4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80121d8:	f1b9 0f00 	cmp.w	r9, #0
 80121dc:	dd57      	ble.n	801228e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80121de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80121e2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80121e6:	9803      	ldr	r0, [sp, #12]
 80121e8:	140d      	asrs	r5, r1, #16
 80121ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80121ee:	fb07 000c 	mla	r0, r7, ip, r0
 80121f2:	5d40      	ldrb	r0, [r0, r5]
 80121f4:	9d04      	ldr	r5, [sp, #16]
 80121f6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80121fa:	f8ba 5000 	ldrh.w	r5, [sl]
 80121fe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8012202:	122f      	asrs	r7, r5, #8
 8012204:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8012208:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801220c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012210:	00ed      	lsls	r5, r5, #3
 8012212:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8012216:	fb17 f706 	smulbb	r7, r7, r6
 801221a:	b2ed      	uxtb	r5, r5
 801221c:	fb18 f806 	smulbb	r8, r8, r6
 8012220:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8012224:	10c7      	asrs	r7, r0, #3
 8012226:	fb15 f506 	smulbb	r5, r5, r6
 801222a:	00c0      	lsls	r0, r0, #3
 801222c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8012230:	fa1f fc8c 	uxth.w	ip, ip
 8012234:	b2c0      	uxtb	r0, r0
 8012236:	fb07 870b 	mla	r7, r7, fp, r8
 801223a:	fb00 500b 	mla	r0, r0, fp, r5
 801223e:	f10c 0501 	add.w	r5, ip, #1
 8012242:	b2bf      	uxth	r7, r7
 8012244:	b280      	uxth	r0, r0
 8012246:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801224a:	f107 0801 	add.w	r8, r7, #1
 801224e:	1c45      	adds	r5, r0, #1
 8012250:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8012254:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012258:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801225c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801225e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8012262:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8012266:	4401      	add	r1, r0
 8012268:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801226c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801226e:	ea4c 0c05 	orr.w	ip, ip, r5
 8012272:	4402      	add	r2, r0
 8012274:	ea4c 0c08 	orr.w	ip, ip, r8
 8012278:	f82a cb02 	strh.w	ip, [sl], #2
 801227c:	e7ac      	b.n	80121d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801227e:	f04f 0800 	mov.w	r8, #0
 8012282:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8012286:	eb03 0008 	add.w	r0, r3, r8
 801228a:	2800      	cmp	r0, #0
 801228c:	dc41      	bgt.n	8012312 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801228e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012292:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012296:	9b01      	ldr	r3, [sp, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	f340 8097 	ble.w	80123cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801229e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80122a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80122ac:	eef0 6a62 	vmov.f32	s13, s5
 80122b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80122b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80122b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80122bc:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80122c0:	eef0 6a43 	vmov.f32	s13, s6
 80122c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80122c8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80122cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80122d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80122d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80122d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80122dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80122e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80122e4:	ee12 2a90 	vmov	r2, s5
 80122e8:	eef0 2a47 	vmov.f32	s5, s14
 80122ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80122f0:	ee13 2a10 	vmov	r2, s6
 80122f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80122f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122f8:	eeb0 3a67 	vmov.f32	s6, s15
 80122fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8012300:	9314      	str	r3, [sp, #80]	; 0x50
 8012302:	9b01      	ldr	r3, [sp, #4]
 8012304:	9a05      	ldr	r2, [sp, #20]
 8012306:	3b01      	subs	r3, #1
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801230c:	bf08      	it	eq
 801230e:	4613      	moveq	r3, r2
 8012310:	e72c      	b.n	801216c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8012312:	140f      	asrs	r7, r1, #16
 8012314:	d453      	bmi.n	80123be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8012316:	f8de 5008 	ldr.w	r5, [lr, #8]
 801231a:	42bd      	cmp	r5, r7
 801231c:	dd4f      	ble.n	80123be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801231e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8012322:	d44c      	bmi.n	80123be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8012324:	f8de 000c 	ldr.w	r0, [lr, #12]
 8012328:	4560      	cmp	r0, ip
 801232a:	dd48      	ble.n	80123be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801232c:	9803      	ldr	r0, [sp, #12]
 801232e:	b22d      	sxth	r5, r5
 8012330:	fb0c 0505 	mla	r5, ip, r5, r0
 8012334:	5de8      	ldrb	r0, [r5, r7]
 8012336:	9d04      	ldr	r5, [sp, #16]
 8012338:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801233c:	f06f 0501 	mvn.w	r5, #1
 8012340:	fb05 fb08 	mul.w	fp, r5, r8
 8012344:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8012348:	f834 500b 	ldrh.w	r5, [r4, fp]
 801234c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012350:	122f      	asrs	r7, r5, #8
 8012352:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8012356:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801235a:	00ed      	lsls	r5, r5, #3
 801235c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8012360:	fb17 f706 	smulbb	r7, r7, r6
 8012364:	b2ed      	uxtb	r5, r5
 8012366:	fb19 f906 	smulbb	r9, r9, r6
 801236a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801236e:	10c7      	asrs	r7, r0, #3
 8012370:	fb15 f506 	smulbb	r5, r5, r6
 8012374:	00c0      	lsls	r0, r0, #3
 8012376:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801237a:	fa1f fc8c 	uxth.w	ip, ip
 801237e:	b2c0      	uxtb	r0, r0
 8012380:	fb07 970a 	mla	r7, r7, sl, r9
 8012384:	fb00 500a 	mla	r0, r0, sl, r5
 8012388:	f10c 0501 	add.w	r5, ip, #1
 801238c:	b2bf      	uxth	r7, r7
 801238e:	b280      	uxth	r0, r0
 8012390:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8012394:	f107 0901 	add.w	r9, r7, #1
 8012398:	1c45      	adds	r5, r0, #1
 801239a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801239e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80123a2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80123a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80123aa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80123ae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80123b2:	ea4c 0c05 	orr.w	ip, ip, r5
 80123b6:	ea4c 0c09 	orr.w	ip, ip, r9
 80123ba:	f824 c00b 	strh.w	ip, [r4, fp]
 80123be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80123c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80123c4:	4401      	add	r1, r0
 80123c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80123c8:	4402      	add	r2, r0
 80123ca:	e75c      	b.n	8012286 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80123cc:	b007      	add	sp, #28
 80123ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80123d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d6:	b085      	sub	sp, #20
 80123d8:	4693      	mov	fp, r2
 80123da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80123e0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80123e2:	6870      	ldr	r0, [r6, #4]
 80123e4:	9100      	str	r1, [sp, #0]
 80123e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80123ea:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80123ee:	fb00 2404 	mla	r4, r0, r4, r2
 80123f2:	6832      	ldr	r2, [r6, #0]
 80123f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80123f8:	682a      	ldr	r2, [r5, #0]
 80123fa:	9201      	str	r2, [sp, #4]
 80123fc:	686a      	ldr	r2, [r5, #4]
 80123fe:	3204      	adds	r2, #4
 8012400:	9202      	str	r2, [sp, #8]
 8012402:	9a00      	ldr	r2, [sp, #0]
 8012404:	2a00      	cmp	r2, #0
 8012406:	dc03      	bgt.n	8012410 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8012408:	f1bb 0f00 	cmp.w	fp, #0
 801240c:	f340 80a0 	ble.w	8012550 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8012410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012412:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8012416:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801241a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801241c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8012420:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012424:	2b00      	cmp	r3, #0
 8012426:	dd0c      	ble.n	8012442 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012428:	1406      	asrs	r6, r0, #16
 801242a:	d405      	bmi.n	8012438 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801242c:	454e      	cmp	r6, r9
 801242e:	da03      	bge.n	8012438 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8012430:	1416      	asrs	r6, r2, #16
 8012432:	d401      	bmi.n	8012438 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8012434:	4546      	cmp	r6, r8
 8012436:	db05      	blt.n	8012444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012438:	4470      	add	r0, lr
 801243a:	4462      	add	r2, ip
 801243c:	3b01      	subs	r3, #1
 801243e:	3402      	adds	r4, #2
 8012440:	e7f0      	b.n	8012424 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8012442:	d00f      	beq.n	8012464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8012444:	1e5e      	subs	r6, r3, #1
 8012446:	fb0e 0706 	mla	r7, lr, r6, r0
 801244a:	143f      	asrs	r7, r7, #16
 801244c:	d541      	bpl.n	80124d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801244e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8012452:	4698      	mov	r8, r3
 8012454:	9603      	str	r6, [sp, #12]
 8012456:	f1b8 0f00 	cmp.w	r8, #0
 801245a:	dc59      	bgt.n	8012510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801245c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012460:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012464:	9b00      	ldr	r3, [sp, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	dd72      	ble.n	8012550 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801246a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801246e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012470:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012474:	eeb0 6a62 	vmov.f32	s12, s5
 8012478:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801247c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012480:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012484:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012488:	eeb0 6a43 	vmov.f32	s12, s6
 801248c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012490:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012494:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012498:	ee61 7a27 	vmul.f32	s15, s2, s15
 801249c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80124a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80124a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80124a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80124ac:	ee12 2a90 	vmov	r2, s5
 80124b0:	eef0 2a47 	vmov.f32	s5, s14
 80124b4:	fb92 fef3 	sdiv	lr, r2, r3
 80124b8:	ee13 2a10 	vmov	r2, s6
 80124bc:	eeb0 3a67 	vmov.f32	s6, s15
 80124c0:	fb92 fcf3 	sdiv	ip, r2, r3
 80124c4:	9b00      	ldr	r3, [sp, #0]
 80124c6:	3b01      	subs	r3, #1
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124cc:	bf08      	it	eq
 80124ce:	465b      	moveq	r3, fp
 80124d0:	e797      	b.n	8012402 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80124d2:	454f      	cmp	r7, r9
 80124d4:	dabb      	bge.n	801244e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80124d6:	fb0c 2606 	mla	r6, ip, r6, r2
 80124da:	1436      	asrs	r6, r6, #16
 80124dc:	d4b7      	bmi.n	801244e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80124de:	4546      	cmp	r6, r8
 80124e0:	dab5      	bge.n	801244e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80124e2:	461e      	mov	r6, r3
 80124e4:	46a0      	mov	r8, r4
 80124e6:	2e00      	cmp	r6, #0
 80124e8:	ddb8      	ble.n	801245c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80124ea:	1417      	asrs	r7, r2, #16
 80124ec:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80124f0:	9901      	ldr	r1, [sp, #4]
 80124f2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80124f6:	4462      	add	r2, ip
 80124f8:	4470      	add	r0, lr
 80124fa:	fb0a 1707 	mla	r7, sl, r7, r1
 80124fe:	9902      	ldr	r1, [sp, #8]
 8012500:	3e01      	subs	r6, #1
 8012502:	f817 7009 	ldrb.w	r7, [r7, r9]
 8012506:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801250a:	f828 7b02 	strh.w	r7, [r8], #2
 801250e:	e7ea      	b.n	80124e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8012510:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012514:	d417      	bmi.n	8012546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8012516:	68ae      	ldr	r6, [r5, #8]
 8012518:	454e      	cmp	r6, r9
 801251a:	dd14      	ble.n	8012546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801251c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8012520:	d411      	bmi.n	8012546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8012522:	68ef      	ldr	r7, [r5, #12]
 8012524:	4557      	cmp	r7, sl
 8012526:	dd0e      	ble.n	8012546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8012528:	9f01      	ldr	r7, [sp, #4]
 801252a:	b236      	sxth	r6, r6
 801252c:	f06f 0101 	mvn.w	r1, #1
 8012530:	fb0a 7606 	mla	r6, sl, r6, r7
 8012534:	9f02      	ldr	r7, [sp, #8]
 8012536:	f816 6009 	ldrb.w	r6, [r6, r9]
 801253a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801253e:	fb01 f608 	mul.w	r6, r1, r8
 8012542:	9903      	ldr	r1, [sp, #12]
 8012544:	538f      	strh	r7, [r1, r6]
 8012546:	4470      	add	r0, lr
 8012548:	4462      	add	r2, ip
 801254a:	f108 38ff 	add.w	r8, r8, #4294967295
 801254e:	e782      	b.n	8012456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8012550:	b005      	add	sp, #20
 8012552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012556 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255a:	b087      	sub	sp, #28
 801255c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801255e:	9205      	str	r2, [sp, #20]
 8012560:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012564:	9102      	str	r1, [sp, #8]
 8012566:	9203      	str	r2, [sp, #12]
 8012568:	6861      	ldr	r1, [r4, #4]
 801256a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801256e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8012572:	fb01 2000 	mla	r0, r1, r0, r2
 8012576:	6822      	ldr	r2, [r4, #0]
 8012578:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801257c:	9200      	str	r2, [sp, #0]
 801257e:	f8dc 2000 	ldr.w	r2, [ip]
 8012582:	9204      	str	r2, [sp, #16]
 8012584:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012588:	3204      	adds	r2, #4
 801258a:	9201      	str	r2, [sp, #4]
 801258c:	9a03      	ldr	r2, [sp, #12]
 801258e:	43d5      	mvns	r5, r2
 8012590:	b2ed      	uxtb	r5, r5
 8012592:	9a02      	ldr	r2, [sp, #8]
 8012594:	2a00      	cmp	r2, #0
 8012596:	dc03      	bgt.n	80125a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012598:	9a05      	ldr	r2, [sp, #20]
 801259a:	2a00      	cmp	r2, #0
 801259c:	f340 812c 	ble.w	80127f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80125a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80125a2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80125a6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80125aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80125b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	dd10      	ble.n	80125da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80125b8:	140c      	asrs	r4, r1, #16
 80125ba:	d405      	bmi.n	80125c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80125bc:	4574      	cmp	r4, lr
 80125be:	da03      	bge.n	80125c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80125c0:	1414      	asrs	r4, r2, #16
 80125c2:	d401      	bmi.n	80125c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80125c4:	42bc      	cmp	r4, r7
 80125c6:	db09      	blt.n	80125dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80125c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80125ca:	3b01      	subs	r3, #1
 80125cc:	9800      	ldr	r0, [sp, #0]
 80125ce:	4421      	add	r1, r4
 80125d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80125d2:	3002      	adds	r0, #2
 80125d4:	4422      	add	r2, r4
 80125d6:	9000      	str	r0, [sp, #0]
 80125d8:	e7ec      	b.n	80125b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80125da:	d071      	beq.n	80126c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80125dc:	1e5c      	subs	r4, r3, #1
 80125de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80125e0:	fb06 1604 	mla	r6, r6, r4, r1
 80125e4:	1436      	asrs	r6, r6, #16
 80125e6:	d45d      	bmi.n	80126a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80125e8:	4576      	cmp	r6, lr
 80125ea:	da5b      	bge.n	80126a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80125ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80125ee:	fb06 2404 	mla	r4, r6, r4, r2
 80125f2:	1424      	asrs	r4, r4, #16
 80125f4:	d456      	bmi.n	80126a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80125f6:	42bc      	cmp	r4, r7
 80125f8:	da54      	bge.n	80126a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80125fa:	4698      	mov	r8, r3
 80125fc:	f8dd 9000 	ldr.w	r9, [sp]
 8012600:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8012604:	f1b8 0f00 	cmp.w	r8, #0
 8012608:	dd54      	ble.n	80126b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801260a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801260e:	1414      	asrs	r4, r2, #16
 8012610:	9804      	ldr	r0, [sp, #16]
 8012612:	140e      	asrs	r6, r1, #16
 8012614:	f108 38ff 	add.w	r8, r8, #4294967295
 8012618:	fb07 0404 	mla	r4, r7, r4, r0
 801261c:	9801      	ldr	r0, [sp, #4]
 801261e:	f814 e006 	ldrb.w	lr, [r4, r6]
 8012622:	f8b9 4000 	ldrh.w	r4, [r9]
 8012626:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801262a:	1227      	asrs	r7, r4, #8
 801262c:	eb00 0b0e 	add.w	fp, r0, lr
 8012630:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8012634:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012638:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801263a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801263e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012642:	4401      	add	r1, r0
 8012644:	fb16 f60a 	smulbb	r6, r6, sl
 8012648:	9814      	ldr	r0, [sp, #80]	; 0x50
 801264a:	fb1b fb0a 	smulbb	fp, fp, sl
 801264e:	fb07 6705 	mla	r7, r7, r5, r6
 8012652:	10e6      	asrs	r6, r4, #3
 8012654:	00e4      	lsls	r4, r4, #3
 8012656:	4402      	add	r2, r0
 8012658:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801265c:	b2bf      	uxth	r7, r7
 801265e:	b2e4      	uxtb	r4, r4
 8012660:	fb06 b605 	mla	r6, r6, r5, fp
 8012664:	fb14 f405 	smulbb	r4, r4, r5
 8012668:	b2b6      	uxth	r6, r6
 801266a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801266e:	1c7c      	adds	r4, r7, #1
 8012670:	f106 0b01 	add.w	fp, r6, #1
 8012674:	fa1f fe8e 	uxth.w	lr, lr
 8012678:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801267c:	f10e 0401 	add.w	r4, lr, #1
 8012680:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8012684:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012688:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801268c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012690:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8012694:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012698:	4327      	orrs	r7, r4
 801269a:	ea47 070b 	orr.w	r7, r7, fp
 801269e:	f829 7b02 	strh.w	r7, [r9], #2
 80126a2:	e7af      	b.n	8012604 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80126a4:	f04f 0e00 	mov.w	lr, #0
 80126a8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80126ac:	eb03 040e 	add.w	r4, r3, lr
 80126b0:	2c00      	cmp	r4, #0
 80126b2:	dc43      	bgt.n	801273c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80126b4:	9a00      	ldr	r2, [sp, #0]
 80126b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	9b02      	ldr	r3, [sp, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f340 8098 	ble.w	80127f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80126c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80126d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80126d6:	eef0 6a62 	vmov.f32	s13, s5
 80126da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80126de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80126e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80126e6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80126ea:	eef0 6a43 	vmov.f32	s13, s6
 80126ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80126f2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80126f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80126fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80126fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012702:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012706:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801270a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801270e:	ee12 2a90 	vmov	r2, s5
 8012712:	eef0 2a47 	vmov.f32	s5, s14
 8012716:	fb92 f3f3 	sdiv	r3, r2, r3
 801271a:	ee13 2a10 	vmov	r2, s6
 801271e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012722:	eeb0 3a67 	vmov.f32	s6, s15
 8012726:	fb92 f3f3 	sdiv	r3, r2, r3
 801272a:	9314      	str	r3, [sp, #80]	; 0x50
 801272c:	9b02      	ldr	r3, [sp, #8]
 801272e:	9a05      	ldr	r2, [sp, #20]
 8012730:	3b01      	subs	r3, #1
 8012732:	9302      	str	r3, [sp, #8]
 8012734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012736:	bf08      	it	eq
 8012738:	4613      	moveq	r3, r2
 801273a:	e72a      	b.n	8012592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801273c:	140f      	asrs	r7, r1, #16
 801273e:	d454      	bmi.n	80127ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8012740:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012744:	42be      	cmp	r6, r7
 8012746:	dd50      	ble.n	80127ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8012748:	ea5f 4822 	movs.w	r8, r2, asr #16
 801274c:	d44d      	bmi.n	80127ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801274e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8012752:	4544      	cmp	r4, r8
 8012754:	dd49      	ble.n	80127ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8012756:	9c04      	ldr	r4, [sp, #16]
 8012758:	b236      	sxth	r6, r6
 801275a:	f06f 0001 	mvn.w	r0, #1
 801275e:	fb08 4606 	mla	r6, r8, r6, r4
 8012762:	9c01      	ldr	r4, [sp, #4]
 8012764:	fb00 fa0e 	mul.w	sl, r0, lr
 8012768:	9800      	ldr	r0, [sp, #0]
 801276a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801276e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8012772:	eb04 0b08 	add.w	fp, r4, r8
 8012776:	f830 400a 	ldrh.w	r4, [r0, sl]
 801277a:	9801      	ldr	r0, [sp, #4]
 801277c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8012780:	1227      	asrs	r7, r4, #8
 8012782:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012786:	fb16 f609 	smulbb	r6, r6, r9
 801278a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801278e:	f810 8008 	ldrb.w	r8, [r0, r8]
 8012792:	fb1b fb09 	smulbb	fp, fp, r9
 8012796:	fb07 6705 	mla	r7, r7, r5, r6
 801279a:	10e6      	asrs	r6, r4, #3
 801279c:	00e4      	lsls	r4, r4, #3
 801279e:	9800      	ldr	r0, [sp, #0]
 80127a0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80127a4:	b2bf      	uxth	r7, r7
 80127a6:	b2e4      	uxtb	r4, r4
 80127a8:	fb06 b605 	mla	r6, r6, r5, fp
 80127ac:	fb14 f405 	smulbb	r4, r4, r5
 80127b0:	b2b6      	uxth	r6, r6
 80127b2:	fb08 4809 	mla	r8, r8, r9, r4
 80127b6:	1c7c      	adds	r4, r7, #1
 80127b8:	f106 0b01 	add.w	fp, r6, #1
 80127bc:	fa1f f888 	uxth.w	r8, r8
 80127c0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80127c4:	f108 0401 	add.w	r4, r8, #1
 80127c8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80127cc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80127d0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80127d4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80127d8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80127dc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80127e0:	4327      	orrs	r7, r4
 80127e2:	ea47 070b 	orr.w	r7, r7, fp
 80127e6:	f820 700a 	strh.w	r7, [r0, sl]
 80127ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80127ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80127f0:	4401      	add	r1, r0
 80127f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80127f4:	4402      	add	r2, r0
 80127f6:	e759      	b.n	80126ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80127f8:	b007      	add	sp, #28
 80127fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012804:	b085      	sub	sp, #20
 8012806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801280a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801280c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801280e:	9203      	str	r2, [sp, #12]
 8012810:	6870      	ldr	r0, [r6, #4]
 8012812:	686f      	ldr	r7, [r5, #4]
 8012814:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8012818:	3704      	adds	r7, #4
 801281a:	9101      	str	r1, [sp, #4]
 801281c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012820:	fb00 2404 	mla	r4, r0, r4, r2
 8012824:	6832      	ldr	r2, [r6, #0]
 8012826:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801282a:	682a      	ldr	r2, [r5, #0]
 801282c:	9202      	str	r2, [sp, #8]
 801282e:	9a01      	ldr	r2, [sp, #4]
 8012830:	2a00      	cmp	r2, #0
 8012832:	dc03      	bgt.n	801283c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012834:	9a03      	ldr	r2, [sp, #12]
 8012836:	2a00      	cmp	r2, #0
 8012838:	f340 80cc 	ble.w	80129d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801283c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801283e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8012842:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012846:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012848:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801284c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012850:	2b00      	cmp	r3, #0
 8012852:	dd0d      	ble.n	8012870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012854:	1406      	asrs	r6, r0, #16
 8012856:	d405      	bmi.n	8012864 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012858:	454e      	cmp	r6, r9
 801285a:	da03      	bge.n	8012864 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801285c:	1416      	asrs	r6, r2, #16
 801285e:	d401      	bmi.n	8012864 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012860:	4546      	cmp	r6, r8
 8012862:	db06      	blt.n	8012872 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012864:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012866:	4460      	add	r0, ip
 8012868:	3b01      	subs	r3, #1
 801286a:	3402      	adds	r4, #2
 801286c:	4432      	add	r2, r6
 801286e:	e7ef      	b.n	8012850 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012870:	d00f      	beq.n	8012892 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8012872:	1e5e      	subs	r6, r3, #1
 8012874:	fb0c 0e06 	mla	lr, ip, r6, r0
 8012878:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801287c:	d543      	bpl.n	8012906 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801287e:	4698      	mov	r8, r3
 8012880:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8012884:	f1b8 0f00 	cmp.w	r8, #0
 8012888:	dc71      	bgt.n	801296e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801288a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801288e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012892:	9b01      	ldr	r3, [sp, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	f340 809d 	ble.w	80129d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801289a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801289e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80128a4:	eeb0 6a62 	vmov.f32	s12, s5
 80128a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80128ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80128b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80128b4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80128b8:	eeb0 6a43 	vmov.f32	s12, s6
 80128bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80128c0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80128c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80128c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80128cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80128d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80128d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80128d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80128dc:	ee12 2a90 	vmov	r2, s5
 80128e0:	eef0 2a47 	vmov.f32	s5, s14
 80128e4:	fb92 fcf3 	sdiv	ip, r2, r3
 80128e8:	ee13 2a10 	vmov	r2, s6
 80128ec:	eeb0 3a67 	vmov.f32	s6, s15
 80128f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80128f4:	9312      	str	r3, [sp, #72]	; 0x48
 80128f6:	9b01      	ldr	r3, [sp, #4]
 80128f8:	9a03      	ldr	r2, [sp, #12]
 80128fa:	3b01      	subs	r3, #1
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012900:	bf08      	it	eq
 8012902:	4613      	moveq	r3, r2
 8012904:	e793      	b.n	801282e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012906:	45ce      	cmp	lr, r9
 8012908:	dab9      	bge.n	801287e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801290a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801290c:	fb01 2606 	mla	r6, r1, r6, r2
 8012910:	1436      	asrs	r6, r6, #16
 8012912:	d4b4      	bmi.n	801287e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012914:	4546      	cmp	r6, r8
 8012916:	dab2      	bge.n	801287e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012918:	4698      	mov	r8, r3
 801291a:	46a2      	mov	sl, r4
 801291c:	f1b8 0f00 	cmp.w	r8, #0
 8012920:	ddb3      	ble.n	801288a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8012922:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8012926:	1416      	asrs	r6, r2, #16
 8012928:	9902      	ldr	r1, [sp, #8]
 801292a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801292e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012932:	4460      	add	r0, ip
 8012934:	fb09 1606 	mla	r6, r9, r6, r1
 8012938:	4928      	ldr	r1, [pc, #160]	; (80129dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801293a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801293e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8012942:	eb07 0b0e 	add.w	fp, r7, lr
 8012946:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801294a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801294e:	00f6      	lsls	r6, r6, #3
 8012950:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8012954:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012956:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801295a:	440a      	add	r2, r1
 801295c:	ea49 0606 	orr.w	r6, r9, r6
 8012960:	f817 900e 	ldrb.w	r9, [r7, lr]
 8012964:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8012968:	f82a 6b02 	strh.w	r6, [sl], #2
 801296c:	e7d6      	b.n	801291c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801296e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012972:	d429      	bmi.n	80129c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8012974:	68ae      	ldr	r6, [r5, #8]
 8012976:	454e      	cmp	r6, r9
 8012978:	dd26      	ble.n	80129c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801297a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801297e:	d423      	bmi.n	80129c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8012980:	68e9      	ldr	r1, [r5, #12]
 8012982:	4559      	cmp	r1, fp
 8012984:	dd20      	ble.n	80129c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8012986:	fa0f fe86 	sxth.w	lr, r6
 801298a:	9902      	ldr	r1, [sp, #8]
 801298c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8012990:	f06f 0101 	mvn.w	r1, #1
 8012994:	f81e e009 	ldrb.w	lr, [lr, r9]
 8012998:	fb01 f908 	mul.w	r9, r1, r8
 801299c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80129a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80129a4:	eb07 060e 	add.w	r6, r7, lr
 80129a8:	f896 b002 	ldrb.w	fp, [r6, #2]
 80129ac:	7876      	ldrb	r6, [r6, #1]
 80129ae:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80129b2:	00f6      	lsls	r6, r6, #3
 80129b4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80129b8:	ea4b 0606 	orr.w	r6, fp, r6
 80129bc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80129c0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80129c4:	f82a 6009 	strh.w	r6, [sl, r9]
 80129c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80129ca:	4460      	add	r0, ip
 80129cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80129d0:	440a      	add	r2, r1
 80129d2:	e757      	b.n	8012884 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80129d4:	b005      	add	sp, #20
 80129d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129da:	bf00      	nop
 80129dc:	fffff800 	.word	0xfffff800

080129e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	b087      	sub	sp, #28
 80129e6:	468b      	mov	fp, r1
 80129e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ec:	9815      	ldr	r0, [sp, #84]	; 0x54
 80129ee:	9204      	str	r2, [sp, #16]
 80129f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80129f4:	6841      	ldr	r1, [r0, #4]
 80129f6:	9205      	str	r2, [sp, #20]
 80129f8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80129fc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8012a00:	fb01 2404 	mla	r4, r1, r4, r2
 8012a04:	6802      	ldr	r2, [r0, #0]
 8012a06:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012a0a:	f8dc 2000 	ldr.w	r2, [ip]
 8012a0e:	9201      	str	r2, [sp, #4]
 8012a10:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012a14:	3204      	adds	r2, #4
 8012a16:	9202      	str	r2, [sp, #8]
 8012a18:	f1bb 0f00 	cmp.w	fp, #0
 8012a1c:	dc03      	bgt.n	8012a26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8012a1e:	9a04      	ldr	r2, [sp, #16]
 8012a20:	2a00      	cmp	r2, #0
 8012a22:	f340 8138 	ble.w	8012c96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8012a26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a28:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8012a2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a32:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8012a36:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	dd0e      	ble.n	8012a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012a3e:	1402      	asrs	r2, r0, #16
 8012a40:	d405      	bmi.n	8012a4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012a42:	42ba      	cmp	r2, r7
 8012a44:	da03      	bge.n	8012a4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012a46:	140a      	asrs	r2, r1, #16
 8012a48:	d401      	bmi.n	8012a4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012a4a:	42b2      	cmp	r2, r6
 8012a4c:	db07      	blt.n	8012a5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a50:	3b01      	subs	r3, #1
 8012a52:	3402      	adds	r4, #2
 8012a54:	4410      	add	r0, r2
 8012a56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a58:	4411      	add	r1, r2
 8012a5a:	e7ee      	b.n	8012a3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8012a5c:	d019      	beq.n	8012a92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8012a5e:	1e5a      	subs	r2, r3, #1
 8012a60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012a62:	fb05 0502 	mla	r5, r5, r2, r0
 8012a66:	142d      	asrs	r5, r5, #16
 8012a68:	d409      	bmi.n	8012a7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8012a6a:	42bd      	cmp	r5, r7
 8012a6c:	da07      	bge.n	8012a7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8012a6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012a70:	fb05 1202 	mla	r2, r5, r2, r1
 8012a74:	1412      	asrs	r2, r2, #16
 8012a76:	d402      	bmi.n	8012a7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8012a78:	42b2      	cmp	r2, r6
 8012a7a:	f2c0 80ac 	blt.w	8012bd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8012a7e:	f04f 0e00 	mov.w	lr, #0
 8012a82:	eb03 020e 	add.w	r2, r3, lr
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	dc3e      	bgt.n	8012b08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8012a8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012a92:	f1bb 0f00 	cmp.w	fp, #0
 8012a96:	f340 80fe 	ble.w	8012c96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8012a9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012aa0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012aa4:	f1bb 0b01 	subs.w	fp, fp, #1
 8012aa8:	eeb0 6a62 	vmov.f32	s12, s5
 8012aac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012ab0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012ab4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012ab8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012abc:	eeb0 6a43 	vmov.f32	s12, s6
 8012ac0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012ac4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012ac8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012acc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012ad0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012ad4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012ad8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012adc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012ae0:	ee12 2a90 	vmov	r2, s5
 8012ae4:	eef0 2a47 	vmov.f32	s5, s14
 8012ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8012aec:	ee13 2a10 	vmov	r2, s6
 8012af0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012af4:	eeb0 3a67 	vmov.f32	s6, s15
 8012af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8012afc:	9a04      	ldr	r2, [sp, #16]
 8012afe:	9314      	str	r3, [sp, #80]	; 0x50
 8012b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b02:	bf08      	it	eq
 8012b04:	4613      	moveq	r3, r2
 8012b06:	e787      	b.n	8012a18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8012b08:	1406      	asrs	r6, r0, #16
 8012b0a:	d45d      	bmi.n	8012bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012b0c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8012b10:	42b5      	cmp	r5, r6
 8012b12:	dd59      	ble.n	8012bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012b14:	140f      	asrs	r7, r1, #16
 8012b16:	d457      	bmi.n	8012bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012b18:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012b1c:	42ba      	cmp	r2, r7
 8012b1e:	dd53      	ble.n	8012bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012b20:	9a01      	ldr	r2, [sp, #4]
 8012b22:	b22d      	sxth	r5, r5
 8012b24:	fb07 2505 	mla	r5, r7, r5, r2
 8012b28:	5daa      	ldrb	r2, [r5, r6]
 8012b2a:	9d02      	ldr	r5, [sp, #8]
 8012b2c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012b30:	0e2e      	lsrs	r6, r5, #24
 8012b32:	d049      	beq.n	8012bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8012b34:	f06f 0201 	mvn.w	r2, #1
 8012b38:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012b3c:	fb02 f20e 	mul.w	r2, r2, lr
 8012b40:	f834 8002 	ldrh.w	r8, [r4, r2]
 8012b44:	9203      	str	r2, [sp, #12]
 8012b46:	9a05      	ldr	r2, [sp, #20]
 8012b48:	ea4f 2728 	mov.w	r7, r8, asr #8
 8012b4c:	4356      	muls	r6, r2
 8012b4e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012b52:	1c72      	adds	r2, r6, #1
 8012b54:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8012b58:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012b5c:	b2ed      	uxtb	r5, r5
 8012b5e:	1212      	asrs	r2, r2, #8
 8012b60:	fa1f f982 	uxth.w	r9, r2
 8012b64:	43d2      	mvns	r2, r2
 8012b66:	fb16 f609 	smulbb	r6, r6, r9
 8012b6a:	b2d2      	uxtb	r2, r2
 8012b6c:	fb15 f509 	smulbb	r5, r5, r9
 8012b70:	fb07 6702 	mla	r7, r7, r2, r6
 8012b74:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8012b78:	fb1a fa09 	smulbb	sl, sl, r9
 8012b7c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012b80:	b2bf      	uxth	r7, r7
 8012b82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012b86:	fa5f f888 	uxtb.w	r8, r8
 8012b8a:	fb06 a602 	mla	r6, r6, r2, sl
 8012b8e:	fb08 5502 	mla	r5, r8, r2, r5
 8012b92:	1c7a      	adds	r2, r7, #1
 8012b94:	b2b6      	uxth	r6, r6
 8012b96:	b2ad      	uxth	r5, r5
 8012b98:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012b9c:	9a03      	ldr	r2, [sp, #12]
 8012b9e:	f105 0a01 	add.w	sl, r5, #1
 8012ba2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012ba6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012baa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012bae:	ea47 070a 	orr.w	r7, r7, sl
 8012bb2:	f106 0a01 	add.w	sl, r6, #1
 8012bb6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012bba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012bbe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012bc2:	ea47 070a 	orr.w	r7, r7, sl
 8012bc6:	52a7      	strh	r7, [r4, r2]
 8012bc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012bca:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012bce:	4410      	add	r0, r2
 8012bd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012bd2:	4411      	add	r1, r2
 8012bd4:	e755      	b.n	8012a82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8012bd6:	f04f 0800 	mov.w	r8, #0
 8012bda:	eba3 0208 	sub.w	r2, r3, r8
 8012bde:	2a00      	cmp	r2, #0
 8012be0:	f77f af53 	ble.w	8012a8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8012be4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8012be8:	140a      	asrs	r2, r1, #16
 8012bea:	9f01      	ldr	r7, [sp, #4]
 8012bec:	1405      	asrs	r5, r0, #16
 8012bee:	fb06 7202 	mla	r2, r6, r2, r7
 8012bf2:	5d52      	ldrb	r2, [r2, r5]
 8012bf4:	9d02      	ldr	r5, [sp, #8]
 8012bf6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012bfa:	0e2e      	lsrs	r6, r5, #24
 8012bfc:	d044      	beq.n	8012c88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8012bfe:	9a05      	ldr	r2, [sp, #20]
 8012c00:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012c04:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8012c08:	4356      	muls	r6, r2
 8012c0a:	ea4f 272e 	mov.w	r7, lr, asr #8
 8012c0e:	1c72      	adds	r2, r6, #1
 8012c10:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012c14:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8012c18:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012c1c:	b2ed      	uxtb	r5, r5
 8012c1e:	1212      	asrs	r2, r2, #8
 8012c20:	fa1f f982 	uxth.w	r9, r2
 8012c24:	43d2      	mvns	r2, r2
 8012c26:	fb16 f609 	smulbb	r6, r6, r9
 8012c2a:	b2d2      	uxtb	r2, r2
 8012c2c:	fb15 f509 	smulbb	r5, r5, r9
 8012c30:	fb07 6702 	mla	r7, r7, r2, r6
 8012c34:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012c38:	fb1a fa09 	smulbb	sl, sl, r9
 8012c3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012c40:	b2bf      	uxth	r7, r7
 8012c42:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012c46:	fa5f fe8e 	uxtb.w	lr, lr
 8012c4a:	fb06 a602 	mla	r6, r6, r2, sl
 8012c4e:	fb0e 5502 	mla	r5, lr, r2, r5
 8012c52:	1c7a      	adds	r2, r7, #1
 8012c54:	b2b6      	uxth	r6, r6
 8012c56:	b2ad      	uxth	r5, r5
 8012c58:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012c5c:	f105 0a01 	add.w	sl, r5, #1
 8012c60:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012c64:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012c68:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012c6c:	ea47 070a 	orr.w	r7, r7, sl
 8012c70:	f106 0a01 	add.w	sl, r6, #1
 8012c74:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012c78:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012c7c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012c80:	ea47 070a 	orr.w	r7, r7, sl
 8012c84:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8012c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012c8a:	f108 0801 	add.w	r8, r8, #1
 8012c8e:	4410      	add	r0, r2
 8012c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c92:	4411      	add	r1, r2
 8012c94:	e7a1      	b.n	8012bda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8012c96:	b007      	add	sp, #28
 8012c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	b085      	sub	sp, #20
 8012ca2:	468b      	mov	fp, r1
 8012ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012ca8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012caa:	9203      	str	r2, [sp, #12]
 8012cac:	6841      	ldr	r1, [r0, #4]
 8012cae:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8012cb2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012cb6:	fb01 2404 	mla	r4, r1, r4, r2
 8012cba:	6802      	ldr	r2, [r0, #0]
 8012cbc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012cc0:	f8de 2000 	ldr.w	r2, [lr]
 8012cc4:	9200      	str	r2, [sp, #0]
 8012cc6:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012cca:	3204      	adds	r2, #4
 8012ccc:	9201      	str	r2, [sp, #4]
 8012cce:	f1bb 0f00 	cmp.w	fp, #0
 8012cd2:	dc03      	bgt.n	8012cdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8012cd4:	9a03      	ldr	r2, [sp, #12]
 8012cd6:	2a00      	cmp	r2, #0
 8012cd8:	f340 8153 	ble.w	8012f82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8012cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012cde:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8012ce2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ce8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8012cec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	dd0e      	ble.n	8012d12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012cf4:	1408      	asrs	r0, r1, #16
 8012cf6:	d405      	bmi.n	8012d04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8012cf8:	42b8      	cmp	r0, r7
 8012cfa:	da03      	bge.n	8012d04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8012cfc:	1410      	asrs	r0, r2, #16
 8012cfe:	d401      	bmi.n	8012d04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8012d00:	42b0      	cmp	r0, r6
 8012d02:	db07      	blt.n	8012d14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012d04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012d06:	3b01      	subs	r3, #1
 8012d08:	3402      	adds	r4, #2
 8012d0a:	4401      	add	r1, r0
 8012d0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012d0e:	4402      	add	r2, r0
 8012d10:	e7ee      	b.n	8012cf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8012d12:	d017      	beq.n	8012d44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8012d14:	1e58      	subs	r0, r3, #1
 8012d16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012d18:	fb05 1500 	mla	r5, r5, r0, r1
 8012d1c:	142d      	asrs	r5, r5, #16
 8012d1e:	d409      	bmi.n	8012d34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012d20:	42bd      	cmp	r5, r7
 8012d22:	da07      	bge.n	8012d34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012d24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012d26:	fb05 2000 	mla	r0, r5, r0, r2
 8012d2a:	1400      	asrs	r0, r0, #16
 8012d2c:	d402      	bmi.n	8012d34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012d2e:	42b0      	cmp	r0, r6
 8012d30:	f2c0 80bc 	blt.w	8012eac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8012d34:	2600      	movs	r6, #0
 8012d36:	1998      	adds	r0, r3, r6
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	dc3e      	bgt.n	8012dba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8012d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012d44:	f1bb 0f00 	cmp.w	fp, #0
 8012d48:	f340 811b 	ble.w	8012f82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8012d4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d56:	f1bb 0b01 	subs.w	fp, fp, #1
 8012d5a:	eeb0 6a62 	vmov.f32	s12, s5
 8012d5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012d62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012d6e:	eeb0 6a43 	vmov.f32	s12, s6
 8012d72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012d7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d92:	ee12 2a90 	vmov	r2, s5
 8012d96:	eef0 2a47 	vmov.f32	s5, s14
 8012d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d9e:	ee13 2a10 	vmov	r2, s6
 8012da2:	9311      	str	r3, [sp, #68]	; 0x44
 8012da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012da6:	eeb0 3a67 	vmov.f32	s6, s15
 8012daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8012dae:	9a03      	ldr	r2, [sp, #12]
 8012db0:	9312      	str	r3, [sp, #72]	; 0x48
 8012db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012db4:	bf08      	it	eq
 8012db6:	4613      	moveq	r3, r2
 8012db8:	e789      	b.n	8012cce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8012dba:	140f      	asrs	r7, r1, #16
 8012dbc:	d45e      	bmi.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012dbe:	f8de 5008 	ldr.w	r5, [lr, #8]
 8012dc2:	42bd      	cmp	r5, r7
 8012dc4:	dd5a      	ble.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012dc6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8012dca:	d457      	bmi.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012dcc:	f8de 000c 	ldr.w	r0, [lr, #12]
 8012dd0:	4560      	cmp	r0, ip
 8012dd2:	dd53      	ble.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012dd4:	9800      	ldr	r0, [sp, #0]
 8012dd6:	b22d      	sxth	r5, r5
 8012dd8:	fb0c 0505 	mla	r5, ip, r5, r0
 8012ddc:	5de8      	ldrb	r0, [r5, r7]
 8012dde:	9d01      	ldr	r5, [sp, #4]
 8012de0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012de4:	0e07      	lsrs	r7, r0, #24
 8012de6:	2fff      	cmp	r7, #255	; 0xff
 8012de8:	d04e      	beq.n	8012e88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8012dea:	b2fd      	uxtb	r5, r7
 8012dec:	2f00      	cmp	r7, #0
 8012dee:	d045      	beq.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012df0:	f06f 0701 	mvn.w	r7, #1
 8012df4:	fa1f f985 	uxth.w	r9, r5
 8012df8:	43ed      	mvns	r5, r5
 8012dfa:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8012dfe:	4377      	muls	r7, r6
 8012e00:	fb1a fa09 	smulbb	sl, sl, r9
 8012e04:	b2ed      	uxtb	r5, r5
 8012e06:	f834 8007 	ldrh.w	r8, [r4, r7]
 8012e0a:	9702      	str	r7, [sp, #8]
 8012e0c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012e10:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8012e14:	fb17 f709 	smulbb	r7, r7, r9
 8012e18:	b2c0      	uxtb	r0, r0
 8012e1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012e1e:	fb10 f009 	smulbb	r0, r0, r9
 8012e22:	fb0c 7c05 	mla	ip, ip, r5, r7
 8012e26:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8012e2a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012e2e:	fa1f fc8c 	uxth.w	ip, ip
 8012e32:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8012e36:	fa5f f888 	uxtb.w	r8, r8
 8012e3a:	fb07 a705 	mla	r7, r7, r5, sl
 8012e3e:	fb08 0005 	mla	r0, r8, r5, r0
 8012e42:	f10c 0501 	add.w	r5, ip, #1
 8012e46:	b2bf      	uxth	r7, r7
 8012e48:	b280      	uxth	r0, r0
 8012e4a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8012e4e:	f100 0a01 	add.w	sl, r0, #1
 8012e52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012e56:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8012e5a:	9802      	ldr	r0, [sp, #8]
 8012e5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012e60:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012e64:	f107 0a01 	add.w	sl, r7, #1
 8012e68:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8012e6c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012e70:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012e74:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012e78:	f824 c000 	strh.w	ip, [r4, r0]
 8012e7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012e7e:	3e01      	subs	r6, #1
 8012e80:	4401      	add	r1, r0
 8012e82:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012e84:	4402      	add	r2, r0
 8012e86:	e756      	b.n	8012d36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8012e88:	f06f 0501 	mvn.w	r5, #1
 8012e8c:	fb05 f706 	mul.w	r7, r5, r6
 8012e90:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8012e94:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8012e98:	0945      	lsrs	r5, r0, #5
 8012e9a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012e9e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012ea2:	ea4c 0505 	orr.w	r5, ip, r5
 8012ea6:	4305      	orrs	r5, r0
 8012ea8:	53e5      	strh	r5, [r4, r7]
 8012eaa:	e7e7      	b.n	8012e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8012eac:	f04f 0800 	mov.w	r8, #0
 8012eb0:	eba3 0008 	sub.w	r0, r3, r8
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	f77f af41 	ble.w	8012d3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8012eba:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8012ebe:	1410      	asrs	r0, r2, #16
 8012ec0:	9f00      	ldr	r7, [sp, #0]
 8012ec2:	140d      	asrs	r5, r1, #16
 8012ec4:	fb06 7000 	mla	r0, r6, r0, r7
 8012ec8:	5d40      	ldrb	r0, [r0, r5]
 8012eca:	9d01      	ldr	r5, [sp, #4]
 8012ecc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012ed0:	0e06      	lsrs	r6, r0, #24
 8012ed2:	2eff      	cmp	r6, #255	; 0xff
 8012ed4:	d048      	beq.n	8012f68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8012ed6:	b2f5      	uxtb	r5, r6
 8012ed8:	2e00      	cmp	r6, #0
 8012eda:	d03e      	beq.n	8012f5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8012edc:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8012ee0:	fa1f f985 	uxth.w	r9, r5
 8012ee4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012ee8:	43ed      	mvns	r5, r5
 8012eea:	ea4f 272c 	mov.w	r7, ip, asr #8
 8012eee:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8012ef2:	fb16 f609 	smulbb	r6, r6, r9
 8012ef6:	b2ed      	uxtb	r5, r5
 8012ef8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012efc:	b2c0      	uxtb	r0, r0
 8012efe:	fb1a fa09 	smulbb	sl, sl, r9
 8012f02:	fb07 6705 	mla	r7, r7, r5, r6
 8012f06:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8012f0a:	fb10 f009 	smulbb	r0, r0, r9
 8012f0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012f12:	b2bf      	uxth	r7, r7
 8012f14:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012f18:	fa5f fc8c 	uxtb.w	ip, ip
 8012f1c:	fb06 a605 	mla	r6, r6, r5, sl
 8012f20:	fb0c 0005 	mla	r0, ip, r5, r0
 8012f24:	1c7d      	adds	r5, r7, #1
 8012f26:	b2b6      	uxth	r6, r6
 8012f28:	b280      	uxth	r0, r0
 8012f2a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8012f2e:	f100 0a01 	add.w	sl, r0, #1
 8012f32:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012f36:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8012f3a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012f3e:	ea47 070a 	orr.w	r7, r7, sl
 8012f42:	f106 0a01 	add.w	sl, r6, #1
 8012f46:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012f4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012f4e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012f52:	ea47 070a 	orr.w	r7, r7, sl
 8012f56:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8012f5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012f5c:	f108 0801 	add.w	r8, r8, #1
 8012f60:	4401      	add	r1, r0
 8012f62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012f64:	4402      	add	r2, r0
 8012f66:	e7a3      	b.n	8012eb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8012f68:	4d07      	ldr	r5, [pc, #28]	; (8012f88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8012f6a:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8012f6e:	0945      	lsrs	r5, r0, #5
 8012f70:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012f74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012f78:	4335      	orrs	r5, r6
 8012f7a:	4305      	orrs	r5, r0
 8012f7c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8012f80:	e7eb      	b.n	8012f5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8012f82:	b005      	add	sp, #20
 8012f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f88:	fffff800 	.word	0xfffff800

08012f8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	b087      	sub	sp, #28
 8012f92:	468b      	mov	fp, r1
 8012f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012f9a:	9204      	str	r2, [sp, #16]
 8012f9c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012fa0:	6861      	ldr	r1, [r4, #4]
 8012fa2:	9205      	str	r2, [sp, #20]
 8012fa4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8012fa8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8012fac:	fb01 2000 	mla	r0, r1, r0, r2
 8012fb0:	6822      	ldr	r2, [r4, #0]
 8012fb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8012fb6:	f8de 2000 	ldr.w	r2, [lr]
 8012fba:	9201      	str	r2, [sp, #4]
 8012fbc:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012fc0:	9202      	str	r2, [sp, #8]
 8012fc2:	f1bb 0f00 	cmp.w	fp, #0
 8012fc6:	dc03      	bgt.n	8012fd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8012fc8:	9a04      	ldr	r2, [sp, #16]
 8012fca:	2a00      	cmp	r2, #0
 8012fcc:	f340 8142 	ble.w	8013254 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8012fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fd2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8012fd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012fda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fdc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8012fe0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	dd0e      	ble.n	8013006 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8012fe8:	140c      	asrs	r4, r1, #16
 8012fea:	d405      	bmi.n	8012ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012fec:	42bc      	cmp	r4, r7
 8012fee:	da03      	bge.n	8012ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012ff0:	1414      	asrs	r4, r2, #16
 8012ff2:	d401      	bmi.n	8012ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012ff4:	42b4      	cmp	r4, r6
 8012ff6:	db07      	blt.n	8013008 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012ff8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	3002      	adds	r0, #2
 8012ffe:	4421      	add	r1, r4
 8013000:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013002:	4422      	add	r2, r4
 8013004:	e7ee      	b.n	8012fe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8013006:	d019      	beq.n	801303c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8013008:	1e5c      	subs	r4, r3, #1
 801300a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801300c:	fb05 1504 	mla	r5, r5, r4, r1
 8013010:	142d      	asrs	r5, r5, #16
 8013012:	d409      	bmi.n	8013028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013014:	42bd      	cmp	r5, r7
 8013016:	da07      	bge.n	8013028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013018:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801301a:	fb05 2404 	mla	r4, r5, r4, r2
 801301e:	1424      	asrs	r4, r4, #16
 8013020:	d402      	bmi.n	8013028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013022:	42b4      	cmp	r4, r6
 8013024:	f2c0 80b1 	blt.w	801318a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8013028:	f04f 0800 	mov.w	r8, #0
 801302c:	eb03 0408 	add.w	r4, r3, r8
 8013030:	2c00      	cmp	r4, #0
 8013032:	dc3e      	bgt.n	80130b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013038:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801303c:	f1bb 0f00 	cmp.w	fp, #0
 8013040:	f340 8108 	ble.w	8013254 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8013044:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801304a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801304e:	f1bb 0b01 	subs.w	fp, fp, #1
 8013052:	eeb0 6a62 	vmov.f32	s12, s5
 8013056:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801305a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801305e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013062:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013066:	eeb0 6a43 	vmov.f32	s12, s6
 801306a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801306e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013072:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013076:	ee61 7a27 	vmul.f32	s15, s2, s15
 801307a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801307e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013086:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801308a:	ee12 2a90 	vmov	r2, s5
 801308e:	eef0 2a47 	vmov.f32	s5, s14
 8013092:	fb92 f3f3 	sdiv	r3, r2, r3
 8013096:	ee13 2a10 	vmov	r2, s6
 801309a:	9313      	str	r3, [sp, #76]	; 0x4c
 801309c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801309e:	eeb0 3a67 	vmov.f32	s6, s15
 80130a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80130a6:	9a04      	ldr	r2, [sp, #16]
 80130a8:	9314      	str	r3, [sp, #80]	; 0x50
 80130aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80130ac:	bf08      	it	eq
 80130ae:	4613      	moveq	r3, r2
 80130b0:	e787      	b.n	8012fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80130b2:	140e      	asrs	r6, r1, #16
 80130b4:	d462      	bmi.n	801317c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80130b6:	f8de 5008 	ldr.w	r5, [lr, #8]
 80130ba:	42b5      	cmp	r5, r6
 80130bc:	dd5e      	ble.n	801317c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80130be:	1417      	asrs	r7, r2, #16
 80130c0:	d45c      	bmi.n	801317c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80130c2:	f8de 400c 	ldr.w	r4, [lr, #12]
 80130c6:	42bc      	cmp	r4, r7
 80130c8:	dd58      	ble.n	801317c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80130ca:	b22d      	sxth	r5, r5
 80130cc:	9c02      	ldr	r4, [sp, #8]
 80130ce:	fb07 6505 	mla	r5, r7, r5, r6
 80130d2:	5d66      	ldrb	r6, [r4, r5]
 80130d4:	2e00      	cmp	r6, #0
 80130d6:	d051      	beq.n	801317c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80130d8:	9c01      	ldr	r4, [sp, #4]
 80130da:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80130de:	f06f 0401 	mvn.w	r4, #1
 80130e2:	fb04 f408 	mul.w	r4, r4, r8
 80130e6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80130ea:	5b05      	ldrh	r5, [r0, r4]
 80130ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80130f0:	9403      	str	r4, [sp, #12]
 80130f2:	9c05      	ldr	r4, [sp, #20]
 80130f4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80130f8:	4366      	muls	r6, r4
 80130fa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80130fe:	1c74      	adds	r4, r6, #1
 8013100:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8013104:	122e      	asrs	r6, r5, #8
 8013106:	1224      	asrs	r4, r4, #8
 8013108:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801310c:	00ed      	lsls	r5, r5, #3
 801310e:	b2a7      	uxth	r7, r4
 8013110:	43e4      	mvns	r4, r4
 8013112:	b2ed      	uxtb	r5, r5
 8013114:	b2e4      	uxtb	r4, r4
 8013116:	fb16 f604 	smulbb	r6, r6, r4
 801311a:	fb15 f504 	smulbb	r5, r5, r4
 801311e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013122:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8013126:	fb1a fa04 	smulbb	sl, sl, r4
 801312a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801312e:	fa1f fc8c 	uxth.w	ip, ip
 8013132:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013136:	fa5f f989 	uxtb.w	r9, r9
 801313a:	fb06 a607 	mla	r6, r6, r7, sl
 801313e:	f10c 0401 	add.w	r4, ip, #1
 8013142:	fb09 5507 	mla	r5, r9, r7, r5
 8013146:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801314a:	9c03      	ldr	r4, [sp, #12]
 801314c:	b2ad      	uxth	r5, r5
 801314e:	b2b6      	uxth	r6, r6
 8013150:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013154:	f105 0a01 	add.w	sl, r5, #1
 8013158:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801315c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013160:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013164:	f106 0a01 	add.w	sl, r6, #1
 8013168:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801316c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013170:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013174:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013178:	f820 c004 	strh.w	ip, [r0, r4]
 801317c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801317e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013182:	4421      	add	r1, r4
 8013184:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013186:	4422      	add	r2, r4
 8013188:	e750      	b.n	801302c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801318a:	f04f 0900 	mov.w	r9, #0
 801318e:	eba3 0409 	sub.w	r4, r3, r9
 8013192:	2c00      	cmp	r4, #0
 8013194:	f77f af4e 	ble.w	8013034 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8013198:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801319c:	140d      	asrs	r5, r1, #16
 801319e:	1414      	asrs	r4, r2, #16
 80131a0:	fb06 5404 	mla	r4, r6, r4, r5
 80131a4:	9d02      	ldr	r5, [sp, #8]
 80131a6:	5d2e      	ldrb	r6, [r5, r4]
 80131a8:	2e00      	cmp	r6, #0
 80131aa:	d04c      	beq.n	8013246 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80131ac:	9d01      	ldr	r5, [sp, #4]
 80131ae:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80131b2:	9c05      	ldr	r4, [sp, #20]
 80131b4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80131b8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80131bc:	4366      	muls	r6, r4
 80131be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80131c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80131c6:	1c74      	adds	r4, r6, #1
 80131c8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80131cc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80131d0:	122e      	asrs	r6, r5, #8
 80131d2:	1224      	asrs	r4, r4, #8
 80131d4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80131d8:	00ed      	lsls	r5, r5, #3
 80131da:	b2a7      	uxth	r7, r4
 80131dc:	43e4      	mvns	r4, r4
 80131de:	b2ed      	uxtb	r5, r5
 80131e0:	b2e4      	uxtb	r4, r4
 80131e2:	fb16 f604 	smulbb	r6, r6, r4
 80131e6:	fb15 f504 	smulbb	r5, r5, r4
 80131ea:	fb0c 6c07 	mla	ip, ip, r7, r6
 80131ee:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80131f2:	fb1a fa04 	smulbb	sl, sl, r4
 80131f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80131fa:	fa1f fc8c 	uxth.w	ip, ip
 80131fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013202:	fa5f f888 	uxtb.w	r8, r8
 8013206:	fb06 a607 	mla	r6, r6, r7, sl
 801320a:	f10c 0401 	add.w	r4, ip, #1
 801320e:	fb08 5507 	mla	r5, r8, r7, r5
 8013212:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8013216:	b2ad      	uxth	r5, r5
 8013218:	b2b6      	uxth	r6, r6
 801321a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801321e:	f105 0a01 	add.w	sl, r5, #1
 8013222:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013226:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801322a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801322e:	f106 0a01 	add.w	sl, r6, #1
 8013232:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013236:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801323a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801323e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013242:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8013246:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013248:	f109 0901 	add.w	r9, r9, #1
 801324c:	4421      	add	r1, r4
 801324e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013250:	4422      	add	r2, r4
 8013252:	e79c      	b.n	801318e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8013254:	b007      	add	sp, #28
 8013256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801325a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801325a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801325e:	b085      	sub	sp, #20
 8013260:	468b      	mov	fp, r1
 8013262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013266:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013268:	9203      	str	r2, [sp, #12]
 801326a:	6861      	ldr	r1, [r4, #4]
 801326c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013270:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8013274:	fb01 2000 	mla	r0, r1, r0, r2
 8013278:	6822      	ldr	r2, [r4, #0]
 801327a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801327e:	f8d8 2000 	ldr.w	r2, [r8]
 8013282:	9200      	str	r2, [sp, #0]
 8013284:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013288:	9201      	str	r2, [sp, #4]
 801328a:	f1bb 0f00 	cmp.w	fp, #0
 801328e:	dc03      	bgt.n	8013298 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013290:	9a03      	ldr	r2, [sp, #12]
 8013292:	2a00      	cmp	r2, #0
 8013294:	f340 8146 	ble.w	8013524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8013298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801329a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801329e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80132a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80132a4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80132a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	dd0e      	ble.n	80132ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80132b0:	140c      	asrs	r4, r1, #16
 80132b2:	d405      	bmi.n	80132c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80132b4:	42bc      	cmp	r4, r7
 80132b6:	da03      	bge.n	80132c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80132b8:	1414      	asrs	r4, r2, #16
 80132ba:	d401      	bmi.n	80132c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80132bc:	42b4      	cmp	r4, r6
 80132be:	db07      	blt.n	80132d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80132c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80132c2:	3b01      	subs	r3, #1
 80132c4:	3002      	adds	r0, #2
 80132c6:	4421      	add	r1, r4
 80132c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80132ca:	4422      	add	r2, r4
 80132cc:	e7ee      	b.n	80132ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80132ce:	d017      	beq.n	8013300 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80132d0:	1e5c      	subs	r4, r3, #1
 80132d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80132d4:	fb05 1504 	mla	r5, r5, r4, r1
 80132d8:	142d      	asrs	r5, r5, #16
 80132da:	d409      	bmi.n	80132f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80132dc:	42bd      	cmp	r5, r7
 80132de:	da07      	bge.n	80132f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80132e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80132e2:	fb05 2404 	mla	r4, r5, r4, r2
 80132e6:	1424      	asrs	r4, r4, #16
 80132e8:	d402      	bmi.n	80132f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80132ea:	42b4      	cmp	r4, r6
 80132ec:	f2c0 80b3 	blt.w	8013456 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80132f0:	2600      	movs	r6, #0
 80132f2:	199c      	adds	r4, r3, r6
 80132f4:	2c00      	cmp	r4, #0
 80132f6:	dc3e      	bgt.n	8013376 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80132f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013300:	f1bb 0f00 	cmp.w	fp, #0
 8013304:	f340 810e 	ble.w	8013524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8013308:	ee30 0a04 	vadd.f32	s0, s0, s8
 801330c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801330e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013312:	f1bb 0b01 	subs.w	fp, fp, #1
 8013316:	eeb0 6a62 	vmov.f32	s12, s5
 801331a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801331e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013322:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013326:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801332a:	eeb0 6a43 	vmov.f32	s12, s6
 801332e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013332:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013336:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801333a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801333e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013342:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013346:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801334a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801334e:	ee12 2a90 	vmov	r2, s5
 8013352:	eef0 2a47 	vmov.f32	s5, s14
 8013356:	fb92 f3f3 	sdiv	r3, r2, r3
 801335a:	ee13 2a10 	vmov	r2, s6
 801335e:	9311      	str	r3, [sp, #68]	; 0x44
 8013360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013362:	eeb0 3a67 	vmov.f32	s6, s15
 8013366:	fb92 f3f3 	sdiv	r3, r2, r3
 801336a:	9a03      	ldr	r2, [sp, #12]
 801336c:	9312      	str	r3, [sp, #72]	; 0x48
 801336e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013370:	bf08      	it	eq
 8013372:	4613      	moveq	r3, r2
 8013374:	e789      	b.n	801328a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8013376:	140f      	asrs	r7, r1, #16
 8013378:	d45f      	bmi.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801337a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801337e:	42bd      	cmp	r5, r7
 8013380:	dd5b      	ble.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8013382:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8013386:	d458      	bmi.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8013388:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801338c:	4564      	cmp	r4, ip
 801338e:	dd54      	ble.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8013390:	b22d      	sxth	r5, r5
 8013392:	9c01      	ldr	r4, [sp, #4]
 8013394:	fb0c 7505 	mla	r5, ip, r5, r7
 8013398:	5d64      	ldrb	r4, [r4, r5]
 801339a:	2cff      	cmp	r4, #255	; 0xff
 801339c:	d053      	beq.n	8013446 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801339e:	2c00      	cmp	r4, #0
 80133a0:	d04b      	beq.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80133a2:	9f00      	ldr	r7, [sp, #0]
 80133a4:	fa1f fc84 	uxth.w	ip, r4
 80133a8:	43e4      	mvns	r4, r4
 80133aa:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80133ae:	f06f 0501 	mvn.w	r5, #1
 80133b2:	b2e4      	uxtb	r4, r4
 80133b4:	4375      	muls	r5, r6
 80133b6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80133ba:	9502      	str	r5, [sp, #8]
 80133bc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80133c0:	5b45      	ldrh	r5, [r0, r5]
 80133c2:	122f      	asrs	r7, r5, #8
 80133c4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80133c8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80133cc:	00ed      	lsls	r5, r5, #3
 80133ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80133d2:	fb17 f704 	smulbb	r7, r7, r4
 80133d6:	b2ed      	uxtb	r5, r5
 80133d8:	fb1a fa04 	smulbb	sl, sl, r4
 80133dc:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80133e0:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80133e4:	fb15 f504 	smulbb	r5, r5, r4
 80133e8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80133ec:	fa1f fe8e 	uxth.w	lr, lr
 80133f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80133f4:	fa5f f989 	uxtb.w	r9, r9
 80133f8:	fb07 a70c 	mla	r7, r7, ip, sl
 80133fc:	f10e 0401 	add.w	r4, lr, #1
 8013400:	fb09 550c 	mla	r5, r9, ip, r5
 8013404:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8013408:	9c02      	ldr	r4, [sp, #8]
 801340a:	b2ad      	uxth	r5, r5
 801340c:	b2bf      	uxth	r7, r7
 801340e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8013412:	f105 0a01 	add.w	sl, r5, #1
 8013416:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801341a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801341e:	ea4e 0e0a 	orr.w	lr, lr, sl
 8013422:	f107 0a01 	add.w	sl, r7, #1
 8013426:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801342a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801342e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013432:	ea4e 0e0a 	orr.w	lr, lr, sl
 8013436:	f820 e004 	strh.w	lr, [r0, r4]
 801343a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801343c:	3e01      	subs	r6, #1
 801343e:	4421      	add	r1, r4
 8013440:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013442:	4422      	add	r2, r4
 8013444:	e755      	b.n	80132f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013446:	9c00      	ldr	r4, [sp, #0]
 8013448:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801344c:	f06f 0401 	mvn.w	r4, #1
 8013450:	4374      	muls	r4, r6
 8013452:	5305      	strh	r5, [r0, r4]
 8013454:	e7f1      	b.n	801343a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8013456:	f04f 0900 	mov.w	r9, #0
 801345a:	eba3 0409 	sub.w	r4, r3, r9
 801345e:	2c00      	cmp	r4, #0
 8013460:	f77f af4a 	ble.w	80132f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013464:	1414      	asrs	r4, r2, #16
 8013466:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801346a:	140d      	asrs	r5, r1, #16
 801346c:	fb06 5504 	mla	r5, r6, r4, r5
 8013470:	9c01      	ldr	r4, [sp, #4]
 8013472:	5d64      	ldrb	r4, [r4, r5]
 8013474:	2cff      	cmp	r4, #255	; 0xff
 8013476:	d04f      	beq.n	8013518 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8013478:	2c00      	cmp	r4, #0
 801347a:	d046      	beq.n	801350a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801347c:	9e00      	ldr	r6, [sp, #0]
 801347e:	b2a7      	uxth	r7, r4
 8013480:	43e4      	mvns	r4, r4
 8013482:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8013486:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801348a:	b2e4      	uxtb	r4, r4
 801348c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013490:	122e      	asrs	r6, r5, #8
 8013492:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8013496:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801349a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801349e:	00ed      	lsls	r5, r5, #3
 80134a0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80134a4:	fb16 f604 	smulbb	r6, r6, r4
 80134a8:	b2ed      	uxtb	r5, r5
 80134aa:	fb1a fa04 	smulbb	sl, sl, r4
 80134ae:	fb0c 6c07 	mla	ip, ip, r7, r6
 80134b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80134b6:	fb15 f504 	smulbb	r5, r5, r4
 80134ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80134be:	fa1f fc8c 	uxth.w	ip, ip
 80134c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80134c6:	fa5f fe8e 	uxtb.w	lr, lr
 80134ca:	fb06 a607 	mla	r6, r6, r7, sl
 80134ce:	f10c 0401 	add.w	r4, ip, #1
 80134d2:	fb0e 5507 	mla	r5, lr, r7, r5
 80134d6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80134da:	b2ad      	uxth	r5, r5
 80134dc:	b2b6      	uxth	r6, r6
 80134de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80134e2:	f105 0a01 	add.w	sl, r5, #1
 80134e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80134ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80134ee:	ea4c 0c0a 	orr.w	ip, ip, sl
 80134f2:	f106 0a01 	add.w	sl, r6, #1
 80134f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80134fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80134fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013502:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013506:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801350a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801350c:	f109 0901 	add.w	r9, r9, #1
 8013510:	4421      	add	r1, r4
 8013512:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013514:	4422      	add	r2, r4
 8013516:	e7a0      	b.n	801345a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8013518:	9c00      	ldr	r4, [sp, #0]
 801351a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801351e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8013522:	e7f2      	b.n	801350a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013524:	b005      	add	sp, #20
 8013526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801352a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801352a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352e:	b085      	sub	sp, #20
 8013530:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013532:	9203      	str	r2, [sp, #12]
 8013534:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8013538:	9100      	str	r1, [sp, #0]
 801353a:	9201      	str	r2, [sp, #4]
 801353c:	6841      	ldr	r1, [r0, #4]
 801353e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8013542:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013546:	fb01 2404 	mla	r4, r1, r4, r2
 801354a:	6802      	ldr	r2, [r0, #0]
 801354c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013550:	f8de 2000 	ldr.w	r2, [lr]
 8013554:	9202      	str	r2, [sp, #8]
 8013556:	9a01      	ldr	r2, [sp, #4]
 8013558:	43d6      	mvns	r6, r2
 801355a:	b2f6      	uxtb	r6, r6
 801355c:	9a00      	ldr	r2, [sp, #0]
 801355e:	2a00      	cmp	r2, #0
 8013560:	dc03      	bgt.n	801356a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8013562:	9a03      	ldr	r2, [sp, #12]
 8013564:	2a00      	cmp	r2, #0
 8013566:	f340 8124 	ble.w	80137b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801356a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801356c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8013570:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013576:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801357a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801357e:	2b00      	cmp	r3, #0
 8013580:	dd0e      	ble.n	80135a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013582:	1408      	asrs	r0, r1, #16
 8013584:	d405      	bmi.n	8013592 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013586:	4560      	cmp	r0, ip
 8013588:	da03      	bge.n	8013592 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801358a:	1410      	asrs	r0, r2, #16
 801358c:	d401      	bmi.n	8013592 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801358e:	42b8      	cmp	r0, r7
 8013590:	db07      	blt.n	80135a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013594:	3b01      	subs	r3, #1
 8013596:	3402      	adds	r4, #2
 8013598:	4401      	add	r1, r0
 801359a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801359c:	4402      	add	r2, r0
 801359e:	e7ee      	b.n	801357e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80135a0:	d06e      	beq.n	8013680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80135a2:	1e58      	subs	r0, r3, #1
 80135a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80135a6:	fb05 1500 	mla	r5, r5, r0, r1
 80135aa:	142d      	asrs	r5, r5, #16
 80135ac:	d45c      	bmi.n	8013668 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80135ae:	4565      	cmp	r5, ip
 80135b0:	da5a      	bge.n	8013668 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80135b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80135b4:	fb05 2000 	mla	r0, r5, r0, r2
 80135b8:	1400      	asrs	r0, r0, #16
 80135ba:	d455      	bmi.n	8013668 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80135bc:	42b8      	cmp	r0, r7
 80135be:	da53      	bge.n	8013668 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80135c0:	4699      	mov	r9, r3
 80135c2:	46a2      	mov	sl, r4
 80135c4:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80135c8:	f1b9 0f00 	cmp.w	r9, #0
 80135cc:	dd54      	ble.n	8013678 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80135ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80135d2:	140d      	asrs	r5, r1, #16
 80135d4:	1410      	asrs	r0, r2, #16
 80135d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80135da:	fb07 5000 	mla	r0, r7, r0, r5
 80135de:	9d02      	ldr	r5, [sp, #8]
 80135e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80135e4:	f8ba 5000 	ldrh.w	r5, [sl]
 80135e8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80135ec:	122f      	asrs	r7, r5, #8
 80135ee:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80135f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80135f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80135fa:	00ed      	lsls	r5, r5, #3
 80135fc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8013600:	fb17 f706 	smulbb	r7, r7, r6
 8013604:	b2ed      	uxtb	r5, r5
 8013606:	fb18 f806 	smulbb	r8, r8, r6
 801360a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801360e:	10c7      	asrs	r7, r0, #3
 8013610:	fb15 f506 	smulbb	r5, r5, r6
 8013614:	00c0      	lsls	r0, r0, #3
 8013616:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801361a:	fa1f fc8c 	uxth.w	ip, ip
 801361e:	b2c0      	uxtb	r0, r0
 8013620:	fb07 870b 	mla	r7, r7, fp, r8
 8013624:	fb00 500b 	mla	r0, r0, fp, r5
 8013628:	f10c 0501 	add.w	r5, ip, #1
 801362c:	b2bf      	uxth	r7, r7
 801362e:	b280      	uxth	r0, r0
 8013630:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013634:	f107 0801 	add.w	r8, r7, #1
 8013638:	1c45      	adds	r5, r0, #1
 801363a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801363e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013642:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8013646:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013648:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801364c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013650:	4401      	add	r1, r0
 8013652:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8013656:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013658:	ea4c 0c05 	orr.w	ip, ip, r5
 801365c:	4402      	add	r2, r0
 801365e:	ea4c 0c08 	orr.w	ip, ip, r8
 8013662:	f82a cb02 	strh.w	ip, [sl], #2
 8013666:	e7af      	b.n	80135c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013668:	f04f 0800 	mov.w	r8, #0
 801366c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8013670:	eb03 0008 	add.w	r0, r3, r8
 8013674:	2800      	cmp	r0, #0
 8013676:	dc41      	bgt.n	80136fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8013678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801367c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013680:	9b00      	ldr	r3, [sp, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	f340 8095 	ble.w	80137b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8013688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801368c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801368e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013692:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013696:	eef0 6a62 	vmov.f32	s13, s5
 801369a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801369e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80136a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136a6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80136aa:	eef0 6a43 	vmov.f32	s13, s6
 80136ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136b2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80136b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80136ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80136be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80136c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80136c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80136ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80136ce:	ee12 2a90 	vmov	r2, s5
 80136d2:	eef0 2a47 	vmov.f32	s5, s14
 80136d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80136da:	ee13 2a10 	vmov	r2, s6
 80136de:	9311      	str	r3, [sp, #68]	; 0x44
 80136e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136e2:	eeb0 3a67 	vmov.f32	s6, s15
 80136e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80136ea:	9312      	str	r3, [sp, #72]	; 0x48
 80136ec:	9b00      	ldr	r3, [sp, #0]
 80136ee:	9a03      	ldr	r2, [sp, #12]
 80136f0:	3b01      	subs	r3, #1
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136f6:	bf08      	it	eq
 80136f8:	4613      	moveq	r3, r2
 80136fa:	e72f      	b.n	801355c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80136fc:	140f      	asrs	r7, r1, #16
 80136fe:	d451      	bmi.n	80137a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8013700:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013704:	42bd      	cmp	r5, r7
 8013706:	dd4d      	ble.n	80137a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8013708:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801370c:	d44a      	bmi.n	80137a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801370e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013712:	4560      	cmp	r0, ip
 8013714:	dd46      	ble.n	80137a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8013716:	b22d      	sxth	r5, r5
 8013718:	9802      	ldr	r0, [sp, #8]
 801371a:	fb0c 7505 	mla	r5, ip, r5, r7
 801371e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8013722:	f06f 0501 	mvn.w	r5, #1
 8013726:	fb05 fb08 	mul.w	fp, r5, r8
 801372a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801372e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8013732:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013736:	122f      	asrs	r7, r5, #8
 8013738:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801373c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013740:	00ed      	lsls	r5, r5, #3
 8013742:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013746:	fb17 f706 	smulbb	r7, r7, r6
 801374a:	b2ed      	uxtb	r5, r5
 801374c:	fb19 f906 	smulbb	r9, r9, r6
 8013750:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8013754:	10c7      	asrs	r7, r0, #3
 8013756:	fb15 f506 	smulbb	r5, r5, r6
 801375a:	00c0      	lsls	r0, r0, #3
 801375c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8013760:	fa1f fc8c 	uxth.w	ip, ip
 8013764:	b2c0      	uxtb	r0, r0
 8013766:	fb07 970a 	mla	r7, r7, sl, r9
 801376a:	fb00 500a 	mla	r0, r0, sl, r5
 801376e:	f10c 0501 	add.w	r5, ip, #1
 8013772:	b2bf      	uxth	r7, r7
 8013774:	b280      	uxth	r0, r0
 8013776:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801377a:	f107 0901 	add.w	r9, r7, #1
 801377e:	1c45      	adds	r5, r0, #1
 8013780:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8013784:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013788:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801378c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8013790:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013794:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8013798:	ea4c 0c05 	orr.w	ip, ip, r5
 801379c:	ea4c 0c09 	orr.w	ip, ip, r9
 80137a0:	f824 c00b 	strh.w	ip, [r4, fp]
 80137a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80137a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80137aa:	4401      	add	r1, r0
 80137ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80137ae:	4402      	add	r2, r0
 80137b0:	e75e      	b.n	8013670 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80137b2:	b005      	add	sp, #20
 80137b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80137b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137bc:	b085      	sub	sp, #20
 80137be:	4693      	mov	fp, r2
 80137c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80137c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80137c8:	6870      	ldr	r0, [r6, #4]
 80137ca:	9101      	str	r1, [sp, #4]
 80137cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80137d0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80137d4:	fb00 2404 	mla	r4, r0, r4, r2
 80137d8:	6832      	ldr	r2, [r6, #0]
 80137da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80137de:	682a      	ldr	r2, [r5, #0]
 80137e0:	9202      	str	r2, [sp, #8]
 80137e2:	9a01      	ldr	r2, [sp, #4]
 80137e4:	2a00      	cmp	r2, #0
 80137e6:	dc03      	bgt.n	80137f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80137e8:	f1bb 0f00 	cmp.w	fp, #0
 80137ec:	f340 809a 	ble.w	8013924 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80137f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80137f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80137fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137fc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013800:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013804:	2b00      	cmp	r3, #0
 8013806:	dd0c      	ble.n	8013822 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013808:	1406      	asrs	r6, r0, #16
 801380a:	d405      	bmi.n	8013818 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801380c:	454e      	cmp	r6, r9
 801380e:	da03      	bge.n	8013818 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8013810:	1416      	asrs	r6, r2, #16
 8013812:	d401      	bmi.n	8013818 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8013814:	4546      	cmp	r6, r8
 8013816:	db05      	blt.n	8013824 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013818:	4470      	add	r0, lr
 801381a:	4462      	add	r2, ip
 801381c:	3b01      	subs	r3, #1
 801381e:	3402      	adds	r4, #2
 8013820:	e7f0      	b.n	8013804 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013822:	d00f      	beq.n	8013844 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8013824:	1e5e      	subs	r6, r3, #1
 8013826:	fb0e 0706 	mla	r7, lr, r6, r0
 801382a:	143f      	asrs	r7, r7, #16
 801382c:	d541      	bpl.n	80138b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801382e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8013832:	4698      	mov	r8, r3
 8013834:	9603      	str	r6, [sp, #12]
 8013836:	f1b8 0f00 	cmp.w	r8, #0
 801383a:	dc56      	bgt.n	80138ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801383c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013840:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013844:	9b01      	ldr	r3, [sp, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	dd6c      	ble.n	8013924 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801384a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801384e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013850:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013854:	eeb0 6a62 	vmov.f32	s12, s5
 8013858:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801385c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013860:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013864:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013868:	eeb0 6a43 	vmov.f32	s12, s6
 801386c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013870:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013874:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013878:	ee61 7a27 	vmul.f32	s15, s2, s15
 801387c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013880:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013884:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013888:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801388c:	ee12 2a90 	vmov	r2, s5
 8013890:	eef0 2a47 	vmov.f32	s5, s14
 8013894:	fb92 fef3 	sdiv	lr, r2, r3
 8013898:	ee13 2a10 	vmov	r2, s6
 801389c:	eeb0 3a67 	vmov.f32	s6, s15
 80138a0:	fb92 fcf3 	sdiv	ip, r2, r3
 80138a4:	9b01      	ldr	r3, [sp, #4]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138ac:	bf08      	it	eq
 80138ae:	465b      	moveq	r3, fp
 80138b0:	e797      	b.n	80137e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80138b2:	454f      	cmp	r7, r9
 80138b4:	dabb      	bge.n	801382e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80138b6:	fb0c 2606 	mla	r6, ip, r6, r2
 80138ba:	1436      	asrs	r6, r6, #16
 80138bc:	d4b7      	bmi.n	801382e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80138be:	4546      	cmp	r6, r8
 80138c0:	dab5      	bge.n	801382e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80138c2:	461e      	mov	r6, r3
 80138c4:	46a0      	mov	r8, r4
 80138c6:	2e00      	cmp	r6, #0
 80138c8:	ddb8      	ble.n	801383c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80138ca:	1417      	asrs	r7, r2, #16
 80138cc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80138d0:	ea4f 4920 	mov.w	r9, r0, asr #16
 80138d4:	9902      	ldr	r1, [sp, #8]
 80138d6:	4470      	add	r0, lr
 80138d8:	4462      	add	r2, ip
 80138da:	fb0a 9707 	mla	r7, sl, r7, r9
 80138de:	3e01      	subs	r6, #1
 80138e0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80138e4:	f828 7b02 	strh.w	r7, [r8], #2
 80138e8:	e7ed      	b.n	80138c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80138ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 80138ee:	d414      	bmi.n	801391a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80138f0:	68ae      	ldr	r6, [r5, #8]
 80138f2:	454e      	cmp	r6, r9
 80138f4:	dd11      	ble.n	801391a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80138f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80138fa:	d40e      	bmi.n	801391a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80138fc:	68ef      	ldr	r7, [r5, #12]
 80138fe:	4557      	cmp	r7, sl
 8013900:	dd0b      	ble.n	801391a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8013902:	b236      	sxth	r6, r6
 8013904:	f06f 0101 	mvn.w	r1, #1
 8013908:	9f02      	ldr	r7, [sp, #8]
 801390a:	fb0a 9606 	mla	r6, sl, r6, r9
 801390e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8013912:	fb01 f608 	mul.w	r6, r1, r8
 8013916:	9903      	ldr	r1, [sp, #12]
 8013918:	538f      	strh	r7, [r1, r6]
 801391a:	4470      	add	r0, lr
 801391c:	4462      	add	r2, ip
 801391e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013922:	e788      	b.n	8013836 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013924:	b005      	add	sp, #20
 8013926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801392a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801392a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392e:	b085      	sub	sp, #20
 8013930:	468b      	mov	fp, r1
 8013932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013936:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013938:	9202      	str	r2, [sp, #8]
 801393a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801393e:	6841      	ldr	r1, [r0, #4]
 8013940:	9203      	str	r2, [sp, #12]
 8013942:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013946:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801394a:	fb01 2404 	mla	r4, r1, r4, r2
 801394e:	6802      	ldr	r2, [r0, #0]
 8013950:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013954:	f8d8 2000 	ldr.w	r2, [r8]
 8013958:	9200      	str	r2, [sp, #0]
 801395a:	f1bb 0f00 	cmp.w	fp, #0
 801395e:	dc03      	bgt.n	8013968 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013960:	9a02      	ldr	r2, [sp, #8]
 8013962:	2a00      	cmp	r2, #0
 8013964:	f340 8134 	ble.w	8013bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8013968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801396a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801396e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013974:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8013978:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801397c:	2b00      	cmp	r3, #0
 801397e:	dd0e      	ble.n	801399e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8013980:	1402      	asrs	r2, r0, #16
 8013982:	d405      	bmi.n	8013990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013984:	42ba      	cmp	r2, r7
 8013986:	da03      	bge.n	8013990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013988:	140a      	asrs	r2, r1, #16
 801398a:	d401      	bmi.n	8013990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801398c:	42b2      	cmp	r2, r6
 801398e:	db07      	blt.n	80139a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013990:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013992:	3b01      	subs	r3, #1
 8013994:	3402      	adds	r4, #2
 8013996:	4410      	add	r0, r2
 8013998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801399a:	4411      	add	r1, r2
 801399c:	e7ee      	b.n	801397c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801399e:	d019      	beq.n	80139d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80139a0:	1e5a      	subs	r2, r3, #1
 80139a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80139a4:	fb05 0502 	mla	r5, r5, r2, r0
 80139a8:	142d      	asrs	r5, r5, #16
 80139aa:	d409      	bmi.n	80139c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80139ac:	42bd      	cmp	r5, r7
 80139ae:	da07      	bge.n	80139c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80139b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80139b2:	fb05 1202 	mla	r2, r5, r2, r1
 80139b6:	1412      	asrs	r2, r2, #16
 80139b8:	d402      	bmi.n	80139c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80139ba:	42b2      	cmp	r2, r6
 80139bc:	f2c0 80aa 	blt.w	8013b14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80139c0:	f04f 0c00 	mov.w	ip, #0
 80139c4:	eb03 020c 	add.w	r2, r3, ip
 80139c8:	2a00      	cmp	r2, #0
 80139ca:	dc3e      	bgt.n	8013a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80139cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80139d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80139d4:	f1bb 0f00 	cmp.w	fp, #0
 80139d8:	f340 80fa 	ble.w	8013bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80139dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80139e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80139e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80139ea:	eeb0 6a62 	vmov.f32	s12, s5
 80139ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139fa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80139fe:	eeb0 6a43 	vmov.f32	s12, s6
 8013a02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013a06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013a0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013a0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013a12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013a16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013a1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013a1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013a22:	ee12 2a90 	vmov	r2, s5
 8013a26:	eef0 2a47 	vmov.f32	s5, s14
 8013a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a2e:	ee13 2a10 	vmov	r2, s6
 8013a32:	9311      	str	r3, [sp, #68]	; 0x44
 8013a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a36:	eeb0 3a67 	vmov.f32	s6, s15
 8013a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a3e:	9a02      	ldr	r2, [sp, #8]
 8013a40:	9312      	str	r3, [sp, #72]	; 0x48
 8013a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a44:	bf08      	it	eq
 8013a46:	4613      	moveq	r3, r2
 8013a48:	e787      	b.n	801395a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8013a4a:	1406      	asrs	r6, r0, #16
 8013a4c:	d45b      	bmi.n	8013b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013a4e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013a52:	42b5      	cmp	r5, r6
 8013a54:	dd57      	ble.n	8013b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013a56:	140f      	asrs	r7, r1, #16
 8013a58:	d455      	bmi.n	8013b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013a5a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8013a5e:	42ba      	cmp	r2, r7
 8013a60:	dd51      	ble.n	8013b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013a62:	b22d      	sxth	r5, r5
 8013a64:	9a00      	ldr	r2, [sp, #0]
 8013a66:	fb07 6505 	mla	r5, r7, r5, r6
 8013a6a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8013a6e:	0e2e      	lsrs	r6, r5, #24
 8013a70:	d049      	beq.n	8013b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013a72:	f06f 0201 	mvn.w	r2, #1
 8013a76:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013a7a:	fb02 f20c 	mul.w	r2, r2, ip
 8013a7e:	f834 e002 	ldrh.w	lr, [r4, r2]
 8013a82:	9201      	str	r2, [sp, #4]
 8013a84:	9a03      	ldr	r2, [sp, #12]
 8013a86:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013a8a:	4356      	muls	r6, r2
 8013a8c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013a90:	1c72      	adds	r2, r6, #1
 8013a92:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013a96:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013a9a:	b2ed      	uxtb	r5, r5
 8013a9c:	1212      	asrs	r2, r2, #8
 8013a9e:	fa1f f982 	uxth.w	r9, r2
 8013aa2:	43d2      	mvns	r2, r2
 8013aa4:	fb16 f609 	smulbb	r6, r6, r9
 8013aa8:	b2d2      	uxtb	r2, r2
 8013aaa:	fb15 f509 	smulbb	r5, r5, r9
 8013aae:	fb07 6702 	mla	r7, r7, r2, r6
 8013ab2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013ab6:	fb1a fa09 	smulbb	sl, sl, r9
 8013aba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013abe:	b2bf      	uxth	r7, r7
 8013ac0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013ac4:	fa5f fe8e 	uxtb.w	lr, lr
 8013ac8:	fb06 a602 	mla	r6, r6, r2, sl
 8013acc:	fb0e 5502 	mla	r5, lr, r2, r5
 8013ad0:	1c7a      	adds	r2, r7, #1
 8013ad2:	b2b6      	uxth	r6, r6
 8013ad4:	b2ad      	uxth	r5, r5
 8013ad6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013ada:	9a01      	ldr	r2, [sp, #4]
 8013adc:	f105 0a01 	add.w	sl, r5, #1
 8013ae0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013ae4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013ae8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013aec:	ea47 070a 	orr.w	r7, r7, sl
 8013af0:	f106 0a01 	add.w	sl, r6, #1
 8013af4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013af8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013afc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013b00:	ea47 070a 	orr.w	r7, r7, sl
 8013b04:	52a7      	strh	r7, [r4, r2]
 8013b06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b0c:	4410      	add	r0, r2
 8013b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b10:	4411      	add	r1, r2
 8013b12:	e757      	b.n	80139c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8013b14:	f04f 0e00 	mov.w	lr, #0
 8013b18:	eba3 020e 	sub.w	r2, r3, lr
 8013b1c:	2a00      	cmp	r2, #0
 8013b1e:	f77f af55 	ble.w	80139cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013b22:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8013b26:	1405      	asrs	r5, r0, #16
 8013b28:	140a      	asrs	r2, r1, #16
 8013b2a:	fb06 5202 	mla	r2, r6, r2, r5
 8013b2e:	9d00      	ldr	r5, [sp, #0]
 8013b30:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013b34:	0e2e      	lsrs	r6, r5, #24
 8013b36:	d044      	beq.n	8013bc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8013b38:	9a03      	ldr	r2, [sp, #12]
 8013b3a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013b3e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8013b42:	4356      	muls	r6, r2
 8013b44:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013b48:	1c72      	adds	r2, r6, #1
 8013b4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013b4e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013b52:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013b56:	b2ed      	uxtb	r5, r5
 8013b58:	1212      	asrs	r2, r2, #8
 8013b5a:	fa1f f982 	uxth.w	r9, r2
 8013b5e:	43d2      	mvns	r2, r2
 8013b60:	fb16 f609 	smulbb	r6, r6, r9
 8013b64:	b2d2      	uxtb	r2, r2
 8013b66:	fb15 f509 	smulbb	r5, r5, r9
 8013b6a:	fb07 6702 	mla	r7, r7, r2, r6
 8013b6e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8013b72:	fb1a fa09 	smulbb	sl, sl, r9
 8013b76:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013b7a:	b2bf      	uxth	r7, r7
 8013b7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013b80:	fa5f fc8c 	uxtb.w	ip, ip
 8013b84:	fb06 a602 	mla	r6, r6, r2, sl
 8013b88:	fb0c 5502 	mla	r5, ip, r2, r5
 8013b8c:	1c7a      	adds	r2, r7, #1
 8013b8e:	b2b6      	uxth	r6, r6
 8013b90:	b2ad      	uxth	r5, r5
 8013b92:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013b96:	f105 0a01 	add.w	sl, r5, #1
 8013b9a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013b9e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013ba2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013ba6:	ea47 070a 	orr.w	r7, r7, sl
 8013baa:	f106 0a01 	add.w	sl, r6, #1
 8013bae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013bb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013bb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013bba:	ea47 070a 	orr.w	r7, r7, sl
 8013bbe:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8013bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013bc4:	f10e 0e01 	add.w	lr, lr, #1
 8013bc8:	4410      	add	r0, r2
 8013bca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bcc:	4411      	add	r1, r2
 8013bce:	e7a3      	b.n	8013b18 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8013bd0:	b005      	add	sp, #20
 8013bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013bd8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bdc:	b085      	sub	sp, #20
 8013bde:	468b      	mov	fp, r1
 8013be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013be4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013be6:	9203      	str	r2, [sp, #12]
 8013be8:	6861      	ldr	r1, [r4, #4]
 8013bea:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8013bee:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8013bf2:	fb01 2000 	mla	r0, r1, r0, r2
 8013bf6:	6822      	ldr	r2, [r4, #0]
 8013bf8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8013bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8013c00:	9200      	str	r2, [sp, #0]
 8013c02:	f1bb 0f00 	cmp.w	fp, #0
 8013c06:	dc03      	bgt.n	8013c10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8013c08:	9a03      	ldr	r2, [sp, #12]
 8013c0a:	2a00      	cmp	r2, #0
 8013c0c:	f340 8154 	ble.w	8013eb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8013c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c12:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8013c16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013c1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c1c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8013c20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	dd0e      	ble.n	8013c46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013c28:	140c      	asrs	r4, r1, #16
 8013c2a:	d405      	bmi.n	8013c38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8013c2c:	42bc      	cmp	r4, r7
 8013c2e:	da03      	bge.n	8013c38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8013c30:	1414      	asrs	r4, r2, #16
 8013c32:	d401      	bmi.n	8013c38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8013c34:	42b4      	cmp	r4, r6
 8013c36:	db07      	blt.n	8013c48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013c38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013c3a:	3b01      	subs	r3, #1
 8013c3c:	3002      	adds	r0, #2
 8013c3e:	4421      	add	r1, r4
 8013c40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013c42:	4422      	add	r2, r4
 8013c44:	e7ee      	b.n	8013c24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013c46:	d017      	beq.n	8013c78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013c48:	1e5c      	subs	r4, r3, #1
 8013c4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013c4c:	fb05 1504 	mla	r5, r5, r4, r1
 8013c50:	142d      	asrs	r5, r5, #16
 8013c52:	d409      	bmi.n	8013c68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8013c54:	42bd      	cmp	r5, r7
 8013c56:	da07      	bge.n	8013c68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8013c58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013c5a:	fb05 2404 	mla	r4, r5, r4, r2
 8013c5e:	1424      	asrs	r4, r4, #16
 8013c60:	d402      	bmi.n	8013c68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8013c62:	42b4      	cmp	r4, r6
 8013c64:	f2c0 80c0 	blt.w	8013de8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8013c68:	2700      	movs	r7, #0
 8013c6a:	19dc      	adds	r4, r3, r7
 8013c6c:	2c00      	cmp	r4, #0
 8013c6e:	dc3e      	bgt.n	8013cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8013c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013c78:	f1bb 0f00 	cmp.w	fp, #0
 8013c7c:	f340 811c 	ble.w	8013eb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8013c80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013c8a:	f1bb 0b01 	subs.w	fp, fp, #1
 8013c8e:	eeb0 6a62 	vmov.f32	s12, s5
 8013c92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013c96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013c9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013ca2:	eeb0 6a43 	vmov.f32	s12, s6
 8013ca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013caa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013cae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013cb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013cb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013cba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013cbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013cc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013cc6:	ee12 2a90 	vmov	r2, s5
 8013cca:	eef0 2a47 	vmov.f32	s5, s14
 8013cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cd2:	ee13 2a10 	vmov	r2, s6
 8013cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8013cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013cda:	eeb0 3a67 	vmov.f32	s6, s15
 8013cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ce2:	9a03      	ldr	r2, [sp, #12]
 8013ce4:	9312      	str	r3, [sp, #72]	; 0x48
 8013ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ce8:	bf08      	it	eq
 8013cea:	4613      	moveq	r3, r2
 8013cec:	e789      	b.n	8013c02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8013cee:	140e      	asrs	r6, r1, #16
 8013cf0:	d461      	bmi.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013cf2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8013cf6:	42b5      	cmp	r5, r6
 8013cf8:	dd5d      	ble.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013cfa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8013cfe:	d45a      	bmi.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013d00:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8013d04:	4564      	cmp	r4, ip
 8013d06:	dd56      	ble.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013d08:	b22d      	sxth	r5, r5
 8013d0a:	9c00      	ldr	r4, [sp, #0]
 8013d0c:	fb0c 6505 	mla	r5, ip, r5, r6
 8013d10:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013d14:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8013d18:	d04d      	beq.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013d1a:	0a26      	lsrs	r6, r4, #8
 8013d1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013d20:	fa5f f58e 	uxtb.w	r5, lr
 8013d24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8013d28:	9601      	str	r6, [sp, #4]
 8013d2a:	d04a      	beq.n	8013dc2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8013d2c:	f06f 0601 	mvn.w	r6, #1
 8013d30:	fa1f fa85 	uxth.w	sl, r5
 8013d34:	fa5f fc8c 	uxtb.w	ip, ip
 8013d38:	43ed      	mvns	r5, r5
 8013d3a:	437e      	muls	r6, r7
 8013d3c:	b2e4      	uxtb	r4, r4
 8013d3e:	fb1c fc0a 	smulbb	ip, ip, sl
 8013d42:	b2ed      	uxtb	r5, r5
 8013d44:	f830 8006 	ldrh.w	r8, [r0, r6]
 8013d48:	fb14 f40a 	smulbb	r4, r4, sl
 8013d4c:	9602      	str	r6, [sp, #8]
 8013d4e:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8013d52:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8013d56:	fb16 f60a 	smulbb	r6, r6, sl
 8013d5a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8013d5e:	fb0e cc05 	mla	ip, lr, r5, ip
 8013d62:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8013d66:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013d6a:	fa1f fc8c 	uxth.w	ip, ip
 8013d6e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8013d72:	fa5f f888 	uxtb.w	r8, r8
 8013d76:	fb0e 6e05 	mla	lr, lr, r5, r6
 8013d7a:	fb08 4405 	mla	r4, r8, r5, r4
 8013d7e:	f10c 0501 	add.w	r5, ip, #1
 8013d82:	fa1f fe8e 	uxth.w	lr, lr
 8013d86:	b2a4      	uxth	r4, r4
 8013d88:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013d8c:	1c66      	adds	r6, r4, #1
 8013d8e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013d92:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8013d96:	9c02      	ldr	r4, [sp, #8]
 8013d98:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013d9c:	ea4c 0c06 	orr.w	ip, ip, r6
 8013da0:	f10e 0601 	add.w	r6, lr, #1
 8013da4:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8013da8:	0976      	lsrs	r6, r6, #5
 8013daa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013dae:	ea4c 0c06 	orr.w	ip, ip, r6
 8013db2:	f820 c004 	strh.w	ip, [r0, r4]
 8013db6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013db8:	3f01      	subs	r7, #1
 8013dba:	4421      	add	r1, r4
 8013dbc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013dbe:	4422      	add	r2, r4
 8013dc0:	e753      	b.n	8013c6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8013dc2:	4e3f      	ldr	r6, [pc, #252]	; (8013ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8013dc4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8013dc8:	f06f 0501 	mvn.w	r5, #1
 8013dcc:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8013dd0:	437d      	muls	r5, r7
 8013dd2:	ea4c 0c04 	orr.w	ip, ip, r4
 8013dd6:	9c01      	ldr	r4, [sp, #4]
 8013dd8:	00e6      	lsls	r6, r4, #3
 8013dda:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8013dde:	ea4c 0c04 	orr.w	ip, ip, r4
 8013de2:	f820 c005 	strh.w	ip, [r0, r5]
 8013de6:	e7e6      	b.n	8013db6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8013de8:	f04f 0800 	mov.w	r8, #0
 8013dec:	eba3 0408 	sub.w	r4, r3, r8
 8013df0:	2c00      	cmp	r4, #0
 8013df2:	f77f af3d 	ble.w	8013c70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013df6:	140d      	asrs	r5, r1, #16
 8013df8:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8013dfc:	1414      	asrs	r4, r2, #16
 8013dfe:	fb06 5404 	mla	r4, r6, r4, r5
 8013e02:	9d00      	ldr	r5, [sp, #0]
 8013e04:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8013e08:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8013e0c:	d042      	beq.n	8013e94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013e0e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8013e12:	fa5f f58c 	uxtb.w	r5, ip
 8013e16:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8013e1a:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8013e1e:	d040      	beq.n	8013ea2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8013e20:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 8013e24:	fa1f fa85 	uxth.w	sl, r5
 8013e28:	b2ff      	uxtb	r7, r7
 8013e2a:	43ed      	mvns	r5, r5
 8013e2c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013e30:	fb17 f70a 	smulbb	r7, r7, sl
 8013e34:	b2ed      	uxtb	r5, r5
 8013e36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013e3a:	b2e4      	uxtb	r4, r4
 8013e3c:	b2f6      	uxtb	r6, r6
 8013e3e:	fb0c 7705 	mla	r7, ip, r5, r7
 8013e42:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8013e46:	fb14 f40a 	smulbb	r4, r4, sl
 8013e4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013e4e:	b2bf      	uxth	r7, r7
 8013e50:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8013e54:	fb16 f60a 	smulbb	r6, r6, sl
 8013e58:	fa5f fe8e 	uxtb.w	lr, lr
 8013e5c:	fb0e 4405 	mla	r4, lr, r5, r4
 8013e60:	fb0c 6c05 	mla	ip, ip, r5, r6
 8013e64:	1c7d      	adds	r5, r7, #1
 8013e66:	b2a4      	uxth	r4, r4
 8013e68:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8013e6c:	1c66      	adds	r6, r4, #1
 8013e6e:	fa1f fc8c 	uxth.w	ip, ip
 8013e72:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013e76:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8013e7a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013e7e:	4337      	orrs	r7, r6
 8013e80:	f10c 0601 	add.w	r6, ip, #1
 8013e84:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8013e88:	0976      	lsrs	r6, r6, #5
 8013e8a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013e8e:	4337      	orrs	r7, r6
 8013e90:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8013e94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013e96:	f108 0801 	add.w	r8, r8, #1
 8013e9a:	4421      	add	r1, r4
 8013e9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013e9e:	4422      	add	r2, r4
 8013ea0:	e7a4      	b.n	8013dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8013ea2:	4d07      	ldr	r5, [pc, #28]	; (8013ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8013ea4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8013ea8:	00f6      	lsls	r6, r6, #3
 8013eaa:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8013eae:	4327      	orrs	r7, r4
 8013eb0:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8013eb4:	4327      	orrs	r7, r4
 8013eb6:	e7eb      	b.n	8013e90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8013eb8:	b005      	add	sp, #20
 8013eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebe:	bf00      	nop
 8013ec0:	fffff800 	.word	0xfffff800

08013ec4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec8:	b087      	sub	sp, #28
 8013eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ece:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013ed0:	9204      	str	r2, [sp, #16]
 8013ed2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013ed6:	9101      	str	r1, [sp, #4]
 8013ed8:	9205      	str	r2, [sp, #20]
 8013eda:	6841      	ldr	r1, [r0, #4]
 8013edc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ee0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013ee4:	fb01 2404 	mla	r4, r1, r4, r2
 8013ee8:	6802      	ldr	r2, [r0, #0]
 8013eea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013eee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013ef2:	3201      	adds	r2, #1
 8013ef4:	f022 0201 	bic.w	r2, r2, #1
 8013ef8:	9202      	str	r2, [sp, #8]
 8013efa:	f8d8 2000 	ldr.w	r2, [r8]
 8013efe:	9203      	str	r2, [sp, #12]
 8013f00:	9a01      	ldr	r2, [sp, #4]
 8013f02:	2a00      	cmp	r2, #0
 8013f04:	dc03      	bgt.n	8013f0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8013f06:	9a04      	ldr	r2, [sp, #16]
 8013f08:	2a00      	cmp	r2, #0
 8013f0a:	f340 814d 	ble.w	80141a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8013f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013f10:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8013f14:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013f18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f1a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8013f1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	dd0e      	ble.n	8013f44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013f26:	1402      	asrs	r2, r0, #16
 8013f28:	d405      	bmi.n	8013f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f2a:	42ba      	cmp	r2, r7
 8013f2c:	da03      	bge.n	8013f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f2e:	140a      	asrs	r2, r1, #16
 8013f30:	d401      	bmi.n	8013f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f32:	42b2      	cmp	r2, r6
 8013f34:	db07      	blt.n	8013f46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8013f36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f38:	3b01      	subs	r3, #1
 8013f3a:	3402      	adds	r4, #2
 8013f3c:	4410      	add	r0, r2
 8013f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f40:	4411      	add	r1, r2
 8013f42:	e7ee      	b.n	8013f22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8013f44:	d019      	beq.n	8013f7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8013f46:	1e5a      	subs	r2, r3, #1
 8013f48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013f4a:	fb05 0502 	mla	r5, r5, r2, r0
 8013f4e:	142d      	asrs	r5, r5, #16
 8013f50:	d409      	bmi.n	8013f66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013f52:	42bd      	cmp	r5, r7
 8013f54:	da07      	bge.n	8013f66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013f56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013f58:	fb05 1202 	mla	r2, r5, r2, r1
 8013f5c:	1412      	asrs	r2, r2, #16
 8013f5e:	d402      	bmi.n	8013f66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013f60:	42b2      	cmp	r2, r6
 8013f62:	f2c0 80b7 	blt.w	80140d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8013f66:	f04f 0c00 	mov.w	ip, #0
 8013f6a:	eb03 020c 	add.w	r2, r3, ip
 8013f6e:	2a00      	cmp	r2, #0
 8013f70:	dc3f      	bgt.n	8013ff2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8013f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013f7a:	9b01      	ldr	r3, [sp, #4]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f340 8113 	ble.w	80141a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8013f82:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013f8c:	eeb0 6a62 	vmov.f32	s12, s5
 8013f90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013f94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013f98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013f9c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013fa0:	eeb0 6a43 	vmov.f32	s12, s6
 8013fa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013fa8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013fac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013fb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013fb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013fb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013fbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013fc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013fc4:	ee12 2a90 	vmov	r2, s5
 8013fc8:	eef0 2a47 	vmov.f32	s5, s14
 8013fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fd0:	ee13 2a10 	vmov	r2, s6
 8013fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8013fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fd8:	eeb0 3a67 	vmov.f32	s6, s15
 8013fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8013fe2:	9b01      	ldr	r3, [sp, #4]
 8013fe4:	9a04      	ldr	r2, [sp, #16]
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	9301      	str	r3, [sp, #4]
 8013fea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fec:	bf08      	it	eq
 8013fee:	4613      	moveq	r3, r2
 8013ff0:	e786      	b.n	8013f00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013ff2:	1405      	asrs	r5, r0, #16
 8013ff4:	d467      	bmi.n	80140c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8013ff6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013ffa:	42aa      	cmp	r2, r5
 8013ffc:	dd63      	ble.n	80140c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8013ffe:	140e      	asrs	r6, r1, #16
 8014000:	d461      	bmi.n	80140c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8014002:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014006:	42b2      	cmp	r2, r6
 8014008:	dd5d      	ble.n	80140c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801400a:	9a02      	ldr	r2, [sp, #8]
 801400c:	fb06 5502 	mla	r5, r6, r2, r5
 8014010:	9e03      	ldr	r6, [sp, #12]
 8014012:	086a      	lsrs	r2, r5, #1
 8014014:	5cb2      	ldrb	r2, [r6, r2]
 8014016:	07ee      	lsls	r6, r5, #31
 8014018:	bf54      	ite	pl
 801401a:	f002 020f 	andpl.w	r2, r2, #15
 801401e:	1112      	asrmi	r2, r2, #4
 8014020:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014024:	b2d2      	uxtb	r2, r2
 8014026:	2a00      	cmp	r2, #0
 8014028:	d04d      	beq.n	80140c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801402a:	f06f 0601 	mvn.w	r6, #1
 801402e:	4d60      	ldr	r5, [pc, #384]	; (80141b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8014030:	fb06 fb0c 	mul.w	fp, r6, ip
 8014034:	9e05      	ldr	r6, [sp, #20]
 8014036:	682d      	ldr	r5, [r5, #0]
 8014038:	4372      	muls	r2, r6
 801403a:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801403e:	0a2f      	lsrs	r7, r5, #8
 8014040:	1c56      	adds	r6, r2, #1
 8014042:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8014046:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801404a:	00ed      	lsls	r5, r5, #3
 801404c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014050:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014054:	ea4f 262e 	mov.w	r6, lr, asr #8
 8014058:	1212      	asrs	r2, r2, #8
 801405a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801405e:	b2ed      	uxtb	r5, r5
 8014060:	fa1f fa82 	uxth.w	sl, r2
 8014064:	43d2      	mvns	r2, r2
 8014066:	fb17 f70a 	smulbb	r7, r7, sl
 801406a:	b2d2      	uxtb	r2, r2
 801406c:	fb19 f90a 	smulbb	r9, r9, sl
 8014070:	fb06 7602 	mla	r6, r6, r2, r7
 8014074:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8014078:	fb15 f50a 	smulbb	r5, r5, sl
 801407c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014080:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014084:	b2b6      	uxth	r6, r6
 8014086:	fa5f fe8e 	uxtb.w	lr, lr
 801408a:	fb07 9702 	mla	r7, r7, r2, r9
 801408e:	fb0e 5502 	mla	r5, lr, r2, r5
 8014092:	b2bf      	uxth	r7, r7
 8014094:	b2ad      	uxth	r5, r5
 8014096:	f107 0901 	add.w	r9, r7, #1
 801409a:	f105 0e01 	add.w	lr, r5, #1
 801409e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80140a2:	f106 0901 	add.w	r9, r6, #1
 80140a6:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 80140aa:	097f      	lsrs	r7, r7, #5
 80140ac:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80140b0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80140b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80140b8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80140bc:	4337      	orrs	r7, r6
 80140be:	ea47 070e 	orr.w	r7, r7, lr
 80140c2:	f824 700b 	strh.w	r7, [r4, fp]
 80140c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80140c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80140cc:	4410      	add	r0, r2
 80140ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80140d0:	4411      	add	r1, r2
 80140d2:	e74a      	b.n	8013f6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80140d4:	f04f 0e00 	mov.w	lr, #0
 80140d8:	eba3 020e 	sub.w	r2, r3, lr
 80140dc:	2a00      	cmp	r2, #0
 80140de:	f77f af48 	ble.w	8013f72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80140e2:	1402      	asrs	r2, r0, #16
 80140e4:	9e02      	ldr	r6, [sp, #8]
 80140e6:	140d      	asrs	r5, r1, #16
 80140e8:	fb06 2505 	mla	r5, r6, r5, r2
 80140ec:	9e03      	ldr	r6, [sp, #12]
 80140ee:	086a      	lsrs	r2, r5, #1
 80140f0:	07ed      	lsls	r5, r5, #31
 80140f2:	5cb2      	ldrb	r2, [r6, r2]
 80140f4:	bf54      	ite	pl
 80140f6:	f002 020f 	andpl.w	r2, r2, #15
 80140fa:	1112      	asrmi	r2, r2, #4
 80140fc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014100:	b2d2      	uxtb	r2, r2
 8014102:	2a00      	cmp	r2, #0
 8014104:	d049      	beq.n	801419a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8014106:	9e05      	ldr	r6, [sp, #20]
 8014108:	4d29      	ldr	r5, [pc, #164]	; (80141b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801410a:	4372      	muls	r2, r6
 801410c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8014110:	682d      	ldr	r5, [r5, #0]
 8014112:	1c56      	adds	r6, r2, #1
 8014114:	0a2f      	lsrs	r7, r5, #8
 8014116:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801411a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801411e:	ea4f 262c 	mov.w	r6, ip, asr #8
 8014122:	1212      	asrs	r2, r2, #8
 8014124:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8014128:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801412c:	fa1f fa82 	uxth.w	sl, r2
 8014130:	43d2      	mvns	r2, r2
 8014132:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014136:	00ed      	lsls	r5, r5, #3
 8014138:	fb17 f70a 	smulbb	r7, r7, sl
 801413c:	b2d2      	uxtb	r2, r2
 801413e:	fb19 f90a 	smulbb	r9, r9, sl
 8014142:	b2ed      	uxtb	r5, r5
 8014144:	fb06 7602 	mla	r6, r6, r2, r7
 8014148:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801414c:	fb15 f50a 	smulbb	r5, r5, sl
 8014150:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014154:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014158:	b2b6      	uxth	r6, r6
 801415a:	fa5f fc8c 	uxtb.w	ip, ip
 801415e:	fb07 9702 	mla	r7, r7, r2, r9
 8014162:	f106 0b01 	add.w	fp, r6, #1
 8014166:	fb0c 5502 	mla	r5, ip, r2, r5
 801416a:	b2bf      	uxth	r7, r7
 801416c:	b2ad      	uxth	r5, r5
 801416e:	f107 0901 	add.w	r9, r7, #1
 8014172:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8014176:	f105 0c01 	add.w	ip, r5, #1
 801417a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801417e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8014182:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8014186:	097f      	lsrs	r7, r7, #5
 8014188:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801418c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8014190:	4337      	orrs	r7, r6
 8014192:	ea47 070c 	orr.w	r7, r7, ip
 8014196:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801419a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801419c:	f10e 0e01 	add.w	lr, lr, #1
 80141a0:	4410      	add	r0, r2
 80141a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80141a4:	4411      	add	r1, r2
 80141a6:	e797      	b.n	80140d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80141a8:	b007      	add	sp, #28
 80141aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ae:	bf00      	nop
 80141b0:	20009bfc 	.word	0x20009bfc

080141b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	b087      	sub	sp, #28
 80141ba:	468b      	mov	fp, r1
 80141bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80141c0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80141c2:	9205      	str	r2, [sp, #20]
 80141c4:	6841      	ldr	r1, [r0, #4]
 80141c6:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80141ca:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80141ce:	fb01 2404 	mla	r4, r1, r4, r2
 80141d2:	6802      	ldr	r2, [r0, #0]
 80141d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80141d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80141dc:	3201      	adds	r2, #1
 80141de:	f022 0201 	bic.w	r2, r2, #1
 80141e2:	9201      	str	r2, [sp, #4]
 80141e4:	f8d8 2000 	ldr.w	r2, [r8]
 80141e8:	9202      	str	r2, [sp, #8]
 80141ea:	f1bb 0f00 	cmp.w	fp, #0
 80141ee:	dc03      	bgt.n	80141f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80141f0:	9a05      	ldr	r2, [sp, #20]
 80141f2:	2a00      	cmp	r2, #0
 80141f4:	f340 8158 	ble.w	80144a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80141f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141fa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80141fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014202:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014204:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8014208:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801420c:	2b00      	cmp	r3, #0
 801420e:	dd0e      	ble.n	801422e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8014210:	1402      	asrs	r2, r0, #16
 8014212:	d405      	bmi.n	8014220 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014214:	42ba      	cmp	r2, r7
 8014216:	da03      	bge.n	8014220 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014218:	140a      	asrs	r2, r1, #16
 801421a:	d401      	bmi.n	8014220 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801421c:	42b2      	cmp	r2, r6
 801421e:	db07      	blt.n	8014230 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014222:	3b01      	subs	r3, #1
 8014224:	3402      	adds	r4, #2
 8014226:	4410      	add	r0, r2
 8014228:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801422a:	4411      	add	r1, r2
 801422c:	e7ee      	b.n	801420c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801422e:	d017      	beq.n	8014260 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8014230:	1e5a      	subs	r2, r3, #1
 8014232:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014234:	fb05 0502 	mla	r5, r5, r2, r0
 8014238:	142d      	asrs	r5, r5, #16
 801423a:	d409      	bmi.n	8014250 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801423c:	42bd      	cmp	r5, r7
 801423e:	da07      	bge.n	8014250 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014240:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014242:	fb05 1202 	mla	r2, r5, r2, r1
 8014246:	1412      	asrs	r2, r2, #16
 8014248:	d402      	bmi.n	8014250 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801424a:	42b2      	cmp	r2, r6
 801424c:	f2c0 80c0 	blt.w	80143d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8014250:	2600      	movs	r6, #0
 8014252:	199a      	adds	r2, r3, r6
 8014254:	2a00      	cmp	r2, #0
 8014256:	dc3e      	bgt.n	80142d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801425c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014260:	f1bb 0f00 	cmp.w	fp, #0
 8014264:	f340 8120 	ble.w	80144a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8014268:	ee30 0a04 	vadd.f32	s0, s0, s8
 801426c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801426e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014272:	f1bb 0b01 	subs.w	fp, fp, #1
 8014276:	eeb0 6a62 	vmov.f32	s12, s5
 801427a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801427e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014282:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014286:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801428a:	eeb0 6a43 	vmov.f32	s12, s6
 801428e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014292:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014296:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801429a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801429e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80142a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80142a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80142aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80142ae:	ee12 2a90 	vmov	r2, s5
 80142b2:	eef0 2a47 	vmov.f32	s5, s14
 80142b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80142ba:	ee13 2a10 	vmov	r2, s6
 80142be:	9313      	str	r3, [sp, #76]	; 0x4c
 80142c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142c2:	eeb0 3a67 	vmov.f32	s6, s15
 80142c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80142ca:	9a05      	ldr	r2, [sp, #20]
 80142cc:	9314      	str	r3, [sp, #80]	; 0x50
 80142ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142d0:	bf08      	it	eq
 80142d2:	4613      	moveq	r3, r2
 80142d4:	e789      	b.n	80141ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80142d6:	1405      	asrs	r5, r0, #16
 80142d8:	d467      	bmi.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80142da:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80142de:	42aa      	cmp	r2, r5
 80142e0:	dd63      	ble.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80142e2:	140f      	asrs	r7, r1, #16
 80142e4:	d461      	bmi.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80142e6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80142ea:	42ba      	cmp	r2, r7
 80142ec:	dd5d      	ble.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80142ee:	9a01      	ldr	r2, [sp, #4]
 80142f0:	fb07 5502 	mla	r5, r7, r2, r5
 80142f4:	9f02      	ldr	r7, [sp, #8]
 80142f6:	086a      	lsrs	r2, r5, #1
 80142f8:	5cba      	ldrb	r2, [r7, r2]
 80142fa:	07ef      	lsls	r7, r5, #31
 80142fc:	bf54      	ite	pl
 80142fe:	f002 020f 	andpl.w	r2, r2, #15
 8014302:	1112      	asrmi	r2, r2, #4
 8014304:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014308:	b2d2      	uxtb	r2, r2
 801430a:	2a00      	cmp	r2, #0
 801430c:	d04d      	beq.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801430e:	4d68      	ldr	r5, [pc, #416]	; (80144b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014310:	2aff      	cmp	r2, #255	; 0xff
 8014312:	682f      	ldr	r7, [r5, #0]
 8014314:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 8014318:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801431c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014320:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 8014324:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8014328:	9503      	str	r5, [sp, #12]
 801432a:	b2ff      	uxtb	r7, r7
 801432c:	d043      	beq.n	80143b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801432e:	f06f 0501 	mvn.w	r5, #1
 8014332:	fa1f fa82 	uxth.w	sl, r2
 8014336:	43d2      	mvns	r2, r2
 8014338:	fb19 f90a 	smulbb	r9, r9, sl
 801433c:	4375      	muls	r5, r6
 801433e:	fb17 f70a 	smulbb	r7, r7, sl
 8014342:	b2d2      	uxtb	r2, r2
 8014344:	f834 e005 	ldrh.w	lr, [r4, r5]
 8014348:	9504      	str	r5, [sp, #16]
 801434a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801434e:	9d03      	ldr	r5, [sp, #12]
 8014350:	fb15 f50a 	smulbb	r5, r5, sl
 8014354:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014358:	fb0c 9c02 	mla	ip, ip, r2, r9
 801435c:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8014360:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014364:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014368:	fa1f fc8c 	uxth.w	ip, ip
 801436c:	fa5f fe8e 	uxtb.w	lr, lr
 8014370:	fb09 5502 	mla	r5, r9, r2, r5
 8014374:	fb0e 7702 	mla	r7, lr, r2, r7
 8014378:	b2ad      	uxth	r5, r5
 801437a:	b2bf      	uxth	r7, r7
 801437c:	f105 0901 	add.w	r9, r5, #1
 8014380:	1c7a      	adds	r2, r7, #1
 8014382:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8014386:	f10c 0901 	add.w	r9, ip, #1
 801438a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801438e:	9a04      	ldr	r2, [sp, #16]
 8014390:	096d      	lsrs	r5, r5, #5
 8014392:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8014396:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801439a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801439e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80143a2:	ea45 050c 	orr.w	r5, r5, ip
 80143a6:	433d      	orrs	r5, r7
 80143a8:	52a5      	strh	r5, [r4, r2]
 80143aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80143ac:	3e01      	subs	r6, #1
 80143ae:	4410      	add	r0, r2
 80143b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80143b2:	4411      	add	r1, r2
 80143b4:	e74d      	b.n	8014252 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80143b6:	f06f 0201 	mvn.w	r2, #1
 80143ba:	fb02 fe06 	mul.w	lr, r2, r6
 80143be:	9a03      	ldr	r2, [sp, #12]
 80143c0:	00d5      	lsls	r5, r2, #3
 80143c2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80143c6:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 80143ca:	f824 500e 	strh.w	r5, [r4, lr]
 80143ce:	e7ec      	b.n	80143aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80143d0:	f04f 0e00 	mov.w	lr, #0
 80143d4:	eba3 020e 	sub.w	r2, r3, lr
 80143d8:	2a00      	cmp	r2, #0
 80143da:	f77f af3d 	ble.w	8014258 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80143de:	1402      	asrs	r2, r0, #16
 80143e0:	9e01      	ldr	r6, [sp, #4]
 80143e2:	140d      	asrs	r5, r1, #16
 80143e4:	fb06 2505 	mla	r5, r6, r5, r2
 80143e8:	9e02      	ldr	r6, [sp, #8]
 80143ea:	086a      	lsrs	r2, r5, #1
 80143ec:	07ed      	lsls	r5, r5, #31
 80143ee:	5cb2      	ldrb	r2, [r6, r2]
 80143f0:	bf54      	ite	pl
 80143f2:	f002 020f 	andpl.w	r2, r2, #15
 80143f6:	1112      	asrmi	r2, r2, #4
 80143f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80143fc:	b2d2      	uxtb	r2, r2
 80143fe:	2a00      	cmp	r2, #0
 8014400:	d045      	beq.n	801448e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8014402:	4d2b      	ldr	r5, [pc, #172]	; (80144b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014404:	2aff      	cmp	r2, #255	; 0xff
 8014406:	682e      	ldr	r6, [r5, #0]
 8014408:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801440c:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 8014410:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 8014414:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8014418:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801441c:	b2f6      	uxtb	r6, r6
 801441e:	d03d      	beq.n	801449c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8014420:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8014424:	fa1f fa82 	uxth.w	sl, r2
 8014428:	43d2      	mvns	r2, r2
 801442a:	fb19 f90a 	smulbb	r9, r9, sl
 801442e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014432:	fb15 f50a 	smulbb	r5, r5, sl
 8014436:	b2d2      	uxtb	r2, r2
 8014438:	fb16 f60a 	smulbb	r6, r6, sl
 801443c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014440:	fb07 9702 	mla	r7, r7, r2, r9
 8014444:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8014448:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801444c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014450:	b2bf      	uxth	r7, r7
 8014452:	fa5f fc8c 	uxtb.w	ip, ip
 8014456:	fb09 5502 	mla	r5, r9, r2, r5
 801445a:	fb0c 6602 	mla	r6, ip, r2, r6
 801445e:	b2ad      	uxth	r5, r5
 8014460:	b2b6      	uxth	r6, r6
 8014462:	f105 0901 	add.w	r9, r5, #1
 8014466:	1c72      	adds	r2, r6, #1
 8014468:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801446c:	f107 0901 	add.w	r9, r7, #1
 8014470:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8014474:	096d      	lsrs	r5, r5, #5
 8014476:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801447a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801447e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014482:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014486:	433d      	orrs	r5, r7
 8014488:	4335      	orrs	r5, r6
 801448a:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801448e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014490:	f10e 0e01 	add.w	lr, lr, #1
 8014494:	4410      	add	r0, r2
 8014496:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014498:	4411      	add	r1, r2
 801449a:	e79b      	b.n	80143d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801449c:	00ed      	lsls	r5, r5, #3
 801449e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80144a2:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 80144a6:	e7f0      	b.n	801448a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80144a8:	b007      	add	sp, #28
 80144aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ae:	bf00      	nop
 80144b0:	20009bfc 	.word	0x20009bfc

080144b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80144b4:	4770      	bx	lr

080144b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80144b6:	4770      	bx	lr

080144b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80144b8:	4770      	bx	lr

080144ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80144ba:	4770      	bx	lr

080144bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80144bc:	4770      	bx	lr

080144be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80144be:	4770      	bx	lr

080144c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80144c0:	4770      	bx	lr

080144c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80144c2:	4770      	bx	lr

080144c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80144c4:	4770      	bx	lr

080144c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80144c6:	4770      	bx	lr

080144c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80144c8:	4770      	bx	lr

080144ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80144ca:	4770      	bx	lr

080144cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80144cc:	4770      	bx	lr

080144ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80144ce:	4770      	bx	lr

080144d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80144d0:	4770      	bx	lr

080144d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80144d2:	4770      	bx	lr

080144d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80144d4:	4770      	bx	lr

080144d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80144d6:	4770      	bx	lr

080144d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80144d8:	4770      	bx	lr

080144da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80144da:	4770      	bx	lr

080144dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80144dc:	4770      	bx	lr

080144de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80144de:	4770      	bx	lr

080144e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80144e0:	4770      	bx	lr

080144e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80144e2:	4770      	bx	lr

080144e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80144e4:	4770      	bx	lr

080144e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80144e6:	4770      	bx	lr

080144e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80144e8:	4770      	bx	lr

080144ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80144ea:	4770      	bx	lr

080144ec <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80144ec:	b508      	push	{r3, lr}
 80144ee:	4b06      	ldr	r3, [pc, #24]	; (8014508 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80144f0:	8818      	ldrh	r0, [r3, #0]
 80144f2:	b928      	cbnz	r0, 8014500 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80144f4:	4b05      	ldr	r3, [pc, #20]	; (801450c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80144f6:	2154      	movs	r1, #84	; 0x54
 80144f8:	4a05      	ldr	r2, [pc, #20]	; (8014510 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80144fa:	4806      	ldr	r0, [pc, #24]	; (8014514 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80144fc:	f009 ff24 	bl	801e348 <__assert_func>
 8014500:	0040      	lsls	r0, r0, #1
 8014502:	b280      	uxth	r0, r0
 8014504:	bd08      	pop	{r3, pc}
 8014506:	bf00      	nop
 8014508:	20009bee 	.word	0x20009bee
 801450c:	080229f9 	.word	0x080229f9
 8014510:	08022f83 	.word	0x08022f83
 8014514:	08022a3b 	.word	0x08022a3b

08014518 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8014518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801451c:	b08b      	sub	sp, #44	; 0x2c
 801451e:	460f      	mov	r7, r1
 8014520:	4616      	mov	r6, r2
 8014522:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8014526:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801452a:	f1bb 0f00 	cmp.w	fp, #0
 801452e:	d046      	beq.n	80145be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8014530:	6810      	ldr	r0, [r2, #0]
 8014532:	ad06      	add	r5, sp, #24
 8014534:	6851      	ldr	r1, [r2, #4]
 8014536:	c503      	stmia	r5!, {r0, r1}
 8014538:	6818      	ldr	r0, [r3, #0]
 801453a:	ad08      	add	r5, sp, #32
 801453c:	6859      	ldr	r1, [r3, #4]
 801453e:	c503      	stmia	r5!, {r0, r1}
 8014540:	a806      	add	r0, sp, #24
 8014542:	f7fa fc97 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014546:	4631      	mov	r1, r6
 8014548:	a808      	add	r0, sp, #32
 801454a:	f7fa fc7b 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801454e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014552:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014556:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801455a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801455e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8014562:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8014566:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801456a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801456e:	4f5d      	ldr	r7, [pc, #372]	; (80146e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8014570:	440a      	add	r2, r1
 8014572:	6838      	ldr	r0, [r7, #0]
 8014574:	46b9      	mov	r9, r7
 8014576:	f8ad 2020 	strh.w	r2, [sp, #32]
 801457a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801457e:	4413      	add	r3, r2
 8014580:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014584:	6803      	ldr	r3, [r0, #0]
 8014586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014588:	4798      	blx	r3
 801458a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801458e:	d019      	beq.n	80145c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8014590:	f010 0f04 	tst.w	r0, #4
 8014594:	d01a      	beq.n	80145cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8014596:	f8d9 0000 	ldr.w	r0, [r9]
 801459a:	b2ad      	uxth	r5, r5
 801459c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80145a0:	6801      	ldr	r1, [r0, #0]
 80145a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80145a6:	9501      	str	r5, [sp, #4]
 80145a8:	e9cd b403 	strd	fp, r4, [sp, #12]
 80145ac:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80145b0:	9402      	str	r4, [sp, #8]
 80145b2:	fa1f f488 	uxth.w	r4, r8
 80145b6:	9400      	str	r4, [sp, #0]
 80145b8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80145ba:	4631      	mov	r1, r6
 80145bc:	47a0      	blx	r4
 80145be:	b00b      	add	sp, #44	; 0x2c
 80145c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c4:	b914      	cbnz	r4, 80145cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80145c6:	f010 0f01 	tst.w	r0, #1
 80145ca:	e7e3      	b.n	8014594 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80145cc:	f8d9 0000 	ldr.w	r0, [r9]
 80145d0:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80145d4:	6803      	ldr	r3, [r0, #0]
 80145d6:	6a1b      	ldr	r3, [r3, #32]
 80145d8:	4798      	blx	r3
 80145da:	4b43      	ldr	r3, [pc, #268]	; (80146e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 80145dc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80145e0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80145e4:	881a      	ldrh	r2, [r3, #0]
 80145e6:	469a      	mov	sl, r3
 80145e8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80145ec:	fb05 f502 	mul.w	r5, r5, r2
 80145f0:	fb02 1404 	mla	r4, r2, r4, r1
 80145f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80145f8:	d058      	beq.n	80146ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 80145fa:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80145fe:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8014602:	fa1f f28b 	uxth.w	r2, fp
 8014606:	469e      	mov	lr, r3
 8014608:	fa1f f989 	uxth.w	r9, r9
 801460c:	42ac      	cmp	r4, r5
 801460e:	d263      	bcs.n	80146d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8014610:	eb04 0a07 	add.w	sl, r4, r7
 8014614:	4554      	cmp	r4, sl
 8014616:	d23c      	bcs.n	8014692 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8014618:	8821      	ldrh	r1, [r4, #0]
 801461a:	f836 3b02 	ldrh.w	r3, [r6], #2
 801461e:	1208      	asrs	r0, r1, #8
 8014620:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8014624:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8014628:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801462c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014630:	00c9      	lsls	r1, r1, #3
 8014632:	fb10 f009 	smulbb	r0, r0, r9
 8014636:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801463a:	b2c9      	uxtb	r1, r1
 801463c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8014640:	10d8      	asrs	r0, r3, #3
 8014642:	fb11 f109 	smulbb	r1, r1, r9
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	fa1f fc8c 	uxth.w	ip, ip
 801464c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8014650:	fb1b fb09 	smulbb	fp, fp, r9
 8014654:	b2db      	uxtb	r3, r3
 8014656:	fb03 1302 	mla	r3, r3, r2, r1
 801465a:	f10c 0101 	add.w	r1, ip, #1
 801465e:	fb00 b002 	mla	r0, r0, r2, fp
 8014662:	b29b      	uxth	r3, r3
 8014664:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8014668:	1c59      	adds	r1, r3, #1
 801466a:	b280      	uxth	r0, r0
 801466c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014670:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8014674:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8014678:	ea4c 0c03 	orr.w	ip, ip, r3
 801467c:	1c43      	adds	r3, r0, #1
 801467e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8014682:	0940      	lsrs	r0, r0, #5
 8014684:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8014688:	ea4c 0c00 	orr.w	ip, ip, r0
 801468c:	f824 cb02 	strh.w	ip, [r4], #2
 8014690:	e7c0      	b.n	8014614 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8014692:	f8be 3000 	ldrh.w	r3, [lr]
 8014696:	eba3 0308 	sub.w	r3, r3, r8
 801469a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801469e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80146a2:	eba3 0308 	sub.w	r3, r3, r8
 80146a6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80146aa:	e7af      	b.n	801460c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80146ac:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80146b0:	f8d9 0000 	ldr.w	r0, [r9]
 80146b4:	42ac      	cmp	r4, r5
 80146b6:	6803      	ldr	r3, [r0, #0]
 80146b8:	d20e      	bcs.n	80146d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 80146ba:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 80146be:	4632      	mov	r2, r6
 80146c0:	463b      	mov	r3, r7
 80146c2:	4621      	mov	r1, r4
 80146c4:	47c0      	blx	r8
 80146c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80146ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80146ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80146d2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80146d6:	e7eb      	b.n	80146b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 80146d8:	4b02      	ldr	r3, [pc, #8]	; (80146e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 80146da:	6818      	ldr	r0, [r3, #0]
 80146dc:	6803      	ldr	r3, [r0, #0]
 80146de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e0:	4798      	blx	r3
 80146e2:	e76c      	b.n	80145be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80146e4:	20009bf4 	.word	0x20009bf4
 80146e8:	20009bee 	.word	0x20009bee

080146ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80146ec:	b510      	push	{r4, lr}
 80146ee:	4604      	mov	r4, r0
 80146f0:	2104      	movs	r1, #4
 80146f2:	f009 f88c 	bl	801d80e <_ZdlPvj>
 80146f6:	4620      	mov	r0, r4
 80146f8:	bd10      	pop	{r4, pc}

080146fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80146fa:	b510      	push	{r4, lr}
 80146fc:	4604      	mov	r4, r0
 80146fe:	2104      	movs	r1, #4
 8014700:	f009 f885 	bl	801d80e <_ZdlPvj>
 8014704:	4620      	mov	r0, r4
 8014706:	bd10      	pop	{r4, pc}

08014708 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014708:	b510      	push	{r4, lr}
 801470a:	4604      	mov	r4, r0
 801470c:	2104      	movs	r1, #4
 801470e:	f009 f87e 	bl	801d80e <_ZdlPvj>
 8014712:	4620      	mov	r0, r4
 8014714:	bd10      	pop	{r4, pc}

08014716 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8014716:	b510      	push	{r4, lr}
 8014718:	4604      	mov	r4, r0
 801471a:	2104      	movs	r1, #4
 801471c:	f009 f877 	bl	801d80e <_ZdlPvj>
 8014720:	4620      	mov	r0, r4
 8014722:	bd10      	pop	{r4, pc}

08014724 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014724:	b510      	push	{r4, lr}
 8014726:	4604      	mov	r4, r0
 8014728:	2104      	movs	r1, #4
 801472a:	f009 f870 	bl	801d80e <_ZdlPvj>
 801472e:	4620      	mov	r0, r4
 8014730:	bd10      	pop	{r4, pc}

08014732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014732:	b510      	push	{r4, lr}
 8014734:	4604      	mov	r4, r0
 8014736:	2104      	movs	r1, #4
 8014738:	f009 f869 	bl	801d80e <_ZdlPvj>
 801473c:	4620      	mov	r0, r4
 801473e:	bd10      	pop	{r4, pc}

08014740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014740:	b510      	push	{r4, lr}
 8014742:	4604      	mov	r4, r0
 8014744:	2104      	movs	r1, #4
 8014746:	f009 f862 	bl	801d80e <_ZdlPvj>
 801474a:	4620      	mov	r0, r4
 801474c:	bd10      	pop	{r4, pc}

0801474e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801474e:	b510      	push	{r4, lr}
 8014750:	4604      	mov	r4, r0
 8014752:	2104      	movs	r1, #4
 8014754:	f009 f85b 	bl	801d80e <_ZdlPvj>
 8014758:	4620      	mov	r0, r4
 801475a:	bd10      	pop	{r4, pc}

0801475c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801475c:	b510      	push	{r4, lr}
 801475e:	4604      	mov	r4, r0
 8014760:	2104      	movs	r1, #4
 8014762:	f009 f854 	bl	801d80e <_ZdlPvj>
 8014766:	4620      	mov	r0, r4
 8014768:	bd10      	pop	{r4, pc}

0801476a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801476a:	b510      	push	{r4, lr}
 801476c:	4604      	mov	r4, r0
 801476e:	2104      	movs	r1, #4
 8014770:	f009 f84d 	bl	801d80e <_ZdlPvj>
 8014774:	4620      	mov	r0, r4
 8014776:	bd10      	pop	{r4, pc}

08014778 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014778:	b510      	push	{r4, lr}
 801477a:	4604      	mov	r4, r0
 801477c:	2104      	movs	r1, #4
 801477e:	f009 f846 	bl	801d80e <_ZdlPvj>
 8014782:	4620      	mov	r0, r4
 8014784:	bd10      	pop	{r4, pc}

08014786 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014786:	b510      	push	{r4, lr}
 8014788:	4604      	mov	r4, r0
 801478a:	2104      	movs	r1, #4
 801478c:	f009 f83f 	bl	801d80e <_ZdlPvj>
 8014790:	4620      	mov	r0, r4
 8014792:	bd10      	pop	{r4, pc}

08014794 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014794:	b510      	push	{r4, lr}
 8014796:	4604      	mov	r4, r0
 8014798:	2104      	movs	r1, #4
 801479a:	f009 f838 	bl	801d80e <_ZdlPvj>
 801479e:	4620      	mov	r0, r4
 80147a0:	bd10      	pop	{r4, pc}

080147a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80147a2:	b510      	push	{r4, lr}
 80147a4:	4604      	mov	r4, r0
 80147a6:	2104      	movs	r1, #4
 80147a8:	f009 f831 	bl	801d80e <_ZdlPvj>
 80147ac:	4620      	mov	r0, r4
 80147ae:	bd10      	pop	{r4, pc}

080147b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80147b0:	b510      	push	{r4, lr}
 80147b2:	4604      	mov	r4, r0
 80147b4:	2104      	movs	r1, #4
 80147b6:	f009 f82a 	bl	801d80e <_ZdlPvj>
 80147ba:	4620      	mov	r0, r4
 80147bc:	bd10      	pop	{r4, pc}

080147be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80147be:	b510      	push	{r4, lr}
 80147c0:	4604      	mov	r4, r0
 80147c2:	2104      	movs	r1, #4
 80147c4:	f009 f823 	bl	801d80e <_ZdlPvj>
 80147c8:	4620      	mov	r0, r4
 80147ca:	bd10      	pop	{r4, pc}

080147cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80147cc:	b510      	push	{r4, lr}
 80147ce:	4604      	mov	r4, r0
 80147d0:	2104      	movs	r1, #4
 80147d2:	f009 f81c 	bl	801d80e <_ZdlPvj>
 80147d6:	4620      	mov	r0, r4
 80147d8:	bd10      	pop	{r4, pc}

080147da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80147da:	b510      	push	{r4, lr}
 80147dc:	4604      	mov	r4, r0
 80147de:	2104      	movs	r1, #4
 80147e0:	f009 f815 	bl	801d80e <_ZdlPvj>
 80147e4:	4620      	mov	r0, r4
 80147e6:	bd10      	pop	{r4, pc}

080147e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80147e8:	b510      	push	{r4, lr}
 80147ea:	4604      	mov	r4, r0
 80147ec:	2104      	movs	r1, #4
 80147ee:	f009 f80e 	bl	801d80e <_ZdlPvj>
 80147f2:	4620      	mov	r0, r4
 80147f4:	bd10      	pop	{r4, pc}

080147f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80147f6:	b510      	push	{r4, lr}
 80147f8:	4604      	mov	r4, r0
 80147fa:	2104      	movs	r1, #4
 80147fc:	f009 f807 	bl	801d80e <_ZdlPvj>
 8014800:	4620      	mov	r0, r4
 8014802:	bd10      	pop	{r4, pc}

08014804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014804:	b510      	push	{r4, lr}
 8014806:	4604      	mov	r4, r0
 8014808:	2104      	movs	r1, #4
 801480a:	f009 f800 	bl	801d80e <_ZdlPvj>
 801480e:	4620      	mov	r0, r4
 8014810:	bd10      	pop	{r4, pc}

08014812 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014812:	b510      	push	{r4, lr}
 8014814:	4604      	mov	r4, r0
 8014816:	2104      	movs	r1, #4
 8014818:	f008 fff9 	bl	801d80e <_ZdlPvj>
 801481c:	4620      	mov	r0, r4
 801481e:	bd10      	pop	{r4, pc}

08014820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014820:	b510      	push	{r4, lr}
 8014822:	4604      	mov	r4, r0
 8014824:	2104      	movs	r1, #4
 8014826:	f008 fff2 	bl	801d80e <_ZdlPvj>
 801482a:	4620      	mov	r0, r4
 801482c:	bd10      	pop	{r4, pc}

0801482e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801482e:	b510      	push	{r4, lr}
 8014830:	4604      	mov	r4, r0
 8014832:	2104      	movs	r1, #4
 8014834:	f008 ffeb 	bl	801d80e <_ZdlPvj>
 8014838:	4620      	mov	r0, r4
 801483a:	bd10      	pop	{r4, pc}

0801483c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801483c:	b510      	push	{r4, lr}
 801483e:	4604      	mov	r4, r0
 8014840:	2104      	movs	r1, #4
 8014842:	f008 ffe4 	bl	801d80e <_ZdlPvj>
 8014846:	4620      	mov	r0, r4
 8014848:	bd10      	pop	{r4, pc}

0801484a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801484a:	b510      	push	{r4, lr}
 801484c:	4604      	mov	r4, r0
 801484e:	2104      	movs	r1, #4
 8014850:	f008 ffdd 	bl	801d80e <_ZdlPvj>
 8014854:	4620      	mov	r0, r4
 8014856:	bd10      	pop	{r4, pc}

08014858 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8014858:	b510      	push	{r4, lr}
 801485a:	4604      	mov	r4, r0
 801485c:	2104      	movs	r1, #4
 801485e:	f008 ffd6 	bl	801d80e <_ZdlPvj>
 8014862:	4620      	mov	r0, r4
 8014864:	bd10      	pop	{r4, pc}

08014866 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014866:	b510      	push	{r4, lr}
 8014868:	4604      	mov	r4, r0
 801486a:	2104      	movs	r1, #4
 801486c:	f008 ffcf 	bl	801d80e <_ZdlPvj>
 8014870:	4620      	mov	r0, r4
 8014872:	bd10      	pop	{r4, pc}

08014874 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014878:	460d      	mov	r5, r1
 801487a:	b087      	sub	sp, #28
 801487c:	4614      	mov	r4, r2
 801487e:	4698      	mov	r8, r3
 8014880:	b333      	cbz	r3, 80148d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8014882:	4608      	mov	r0, r1
 8014884:	f7f7 fe99 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8014888:	bb10      	cbnz	r0, 80148d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801488a:	6828      	ldr	r0, [r5, #0]
 801488c:	ab04      	add	r3, sp, #16
 801488e:	6869      	ldr	r1, [r5, #4]
 8014890:	4e72      	ldr	r6, [pc, #456]	; (8014a5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8014892:	c303      	stmia	r3!, {r0, r1}
 8014894:	a804      	add	r0, sp, #16
 8014896:	f7fa faed 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801489a:	6830      	ldr	r0, [r6, #0]
 801489c:	6803      	ldr	r3, [r0, #0]
 801489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a0:	4798      	blx	r3
 80148a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80148a6:	d016      	beq.n	80148d6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80148a8:	f010 0f08 	tst.w	r0, #8
 80148ac:	d016      	beq.n	80148dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 80148ae:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 80148b2:	6830      	ldr	r0, [r6, #0]
 80148b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80148b8:	6801      	ldr	r1, [r0, #0]
 80148ba:	9501      	str	r5, [sp, #4]
 80148bc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80148c0:	f8cd 8008 	str.w	r8, [sp, #8]
 80148c4:	9500      	str	r5, [sp, #0]
 80148c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80148ca:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 80148cc:	4621      	mov	r1, r4
 80148ce:	47a8      	blx	r5
 80148d0:	b007      	add	sp, #28
 80148d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d6:	f010 0f02 	tst.w	r0, #2
 80148da:	e7e7      	b.n	80148ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 80148dc:	6830      	ldr	r0, [r6, #0]
 80148de:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80148e2:	6803      	ldr	r3, [r0, #0]
 80148e4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80148e8:	6a1b      	ldr	r3, [r3, #32]
 80148ea:	4798      	blx	r3
 80148ec:	495c      	ldr	r1, [pc, #368]	; (8014a60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 80148ee:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80148f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80148f6:	880b      	ldrh	r3, [r1, #0]
 80148f8:	468e      	mov	lr, r1
 80148fa:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80148fe:	fb03 c202 	mla	r2, r3, r2, ip
 8014902:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8014906:	fb07 f203 	mul.w	r2, r7, r3
 801490a:	d053      	beq.n	80149b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801490c:	fa1f f388 	uxth.w	r3, r8
 8014910:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 8014914:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8014918:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801491c:	00e4      	lsls	r4, r4, #3
 801491e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014922:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8014926:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801492a:	b2e4      	uxtb	r4, r4
 801492c:	fb09 f903 	mul.w	r9, r9, r3
 8014930:	fb08 f803 	mul.w	r8, r8, r3
 8014934:	006d      	lsls	r5, r5, #1
 8014936:	4363      	muls	r3, r4
 8014938:	b2bc      	uxth	r4, r7
 801493a:	4288      	cmp	r0, r1
 801493c:	f080 8088 	bcs.w	8014a50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8014940:	eb00 0a05 	add.w	sl, r0, r5
 8014944:	4550      	cmp	r0, sl
 8014946:	d22f      	bcs.n	80149a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8014948:	8802      	ldrh	r2, [r0, #0]
 801494a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801494e:	10d7      	asrs	r7, r2, #3
 8014950:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014954:	00d2      	lsls	r2, r2, #3
 8014956:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801495a:	fb1c fc04 	smulbb	ip, ip, r4
 801495e:	b2d2      	uxtb	r2, r2
 8014960:	fb17 f704 	smulbb	r7, r7, r4
 8014964:	fb12 f204 	smulbb	r2, r2, r4
 8014968:	44c4      	add	ip, r8
 801496a:	444f      	add	r7, r9
 801496c:	fa1f fc8c 	uxth.w	ip, ip
 8014970:	441a      	add	r2, r3
 8014972:	b2bf      	uxth	r7, r7
 8014974:	b292      	uxth	r2, r2
 8014976:	f10c 0b01 	add.w	fp, ip, #1
 801497a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801497e:	f102 0b01 	add.w	fp, r2, #1
 8014982:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8014986:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801498a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801498e:	ea4c 0202 	orr.w	r2, ip, r2
 8014992:	f107 0c01 	add.w	ip, r7, #1
 8014996:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801499a:	097f      	lsrs	r7, r7, #5
 801499c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80149a0:	433a      	orrs	r2, r7
 80149a2:	f820 2b02 	strh.w	r2, [r0], #2
 80149a6:	e7cd      	b.n	8014944 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 80149a8:	f8be 2000 	ldrh.w	r2, [lr]
 80149ac:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 80149b0:	4410      	add	r0, r2
 80149b2:	e7c2      	b.n	801493a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 80149b4:	07db      	lsls	r3, r3, #31
 80149b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80149ba:	d50e      	bpl.n	80149da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 80149bc:	006d      	lsls	r5, r5, #1
 80149be:	4290      	cmp	r0, r2
 80149c0:	d246      	bcs.n	8014a50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80149c2:	1943      	adds	r3, r0, r5
 80149c4:	4298      	cmp	r0, r3
 80149c6:	d202      	bcs.n	80149ce <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 80149c8:	f820 4b02 	strh.w	r4, [r0], #2
 80149cc:	e7fa      	b.n	80149c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 80149ce:	f8be 3000 	ldrh.w	r3, [lr]
 80149d2:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 80149d6:	4418      	add	r0, r3
 80149d8:	e7f1      	b.n	80149be <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 80149da:	0787      	lsls	r7, r0, #30
 80149dc:	462b      	mov	r3, r5
 80149de:	d00a      	beq.n	80149f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 80149e0:	4603      	mov	r3, r0
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d205      	bcs.n	80149f2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 80149e6:	801c      	strh	r4, [r3, #0]
 80149e8:	f8be 1000 	ldrh.w	r1, [lr]
 80149ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80149f0:	e7f7      	b.n	80149e2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 80149f2:	3002      	adds	r0, #2
 80149f4:	1e6b      	subs	r3, r5, #1
 80149f6:	07dd      	lsls	r5, r3, #31
 80149f8:	d50d      	bpl.n	8014a16 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 80149fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149fe:	3901      	subs	r1, #1
 8014a00:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014a04:	4291      	cmp	r1, r2
 8014a06:	d205      	bcs.n	8014a14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8014a08:	800c      	strh	r4, [r1, #0]
 8014a0a:	f8be 5000 	ldrh.w	r5, [lr]
 8014a0e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8014a12:	e7f7      	b.n	8014a04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8014a14:	3b01      	subs	r3, #1
 8014a16:	b1db      	cbz	r3, 8014a50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8014a18:	b2a1      	uxth	r1, r4
 8014a1a:	105b      	asrs	r3, r3, #1
 8014a1c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8014a20:	009b      	lsls	r3, r3, #2
 8014a22:	4290      	cmp	r0, r2
 8014a24:	d214      	bcs.n	8014a50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8014a26:	0781      	lsls	r1, r0, #30
 8014a28:	d006      	beq.n	8014a38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 8014a2a:	4b0e      	ldr	r3, [pc, #56]	; (8014a64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8014a2c:	f44f 7162 	mov.w	r1, #904	; 0x388
 8014a30:	4a0d      	ldr	r2, [pc, #52]	; (8014a68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8014a32:	480e      	ldr	r0, [pc, #56]	; (8014a6c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8014a34:	f009 fc88 	bl	801e348 <__assert_func>
 8014a38:	18c5      	adds	r5, r0, r3
 8014a3a:	4601      	mov	r1, r0
 8014a3c:	42a9      	cmp	r1, r5
 8014a3e:	d202      	bcs.n	8014a46 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8014a40:	f841 4b04 	str.w	r4, [r1], #4
 8014a44:	e7fa      	b.n	8014a3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 8014a46:	f8be 1000 	ldrh.w	r1, [lr]
 8014a4a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8014a4e:	e7e8      	b.n	8014a22 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8014a50:	6830      	ldr	r0, [r6, #0]
 8014a52:	6803      	ldr	r3, [r0, #0]
 8014a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a56:	4798      	blx	r3
 8014a58:	e73a      	b.n	80148d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8014a5a:	bf00      	nop
 8014a5c:	20009bf4 	.word	0x20009bf4
 8014a60:	20009bee 	.word	0x20009bee
 8014a64:	08022998 	.word	0x08022998
 8014a68:	08023150 	.word	0x08023150
 8014a6c:	080229c7 	.word	0x080229c7

08014a70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	4f97      	ldr	r7, [pc, #604]	; (8014cd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8014a76:	4616      	mov	r6, r2
 8014a78:	b08f      	sub	sp, #60	; 0x3c
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	683a      	ldr	r2, [r7, #0]
 8014a7e:	4689      	mov	r9, r1
 8014a80:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8014a84:	2a02      	cmp	r2, #2
 8014a86:	d106      	bne.n	8014a96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8014a88:	4b93      	ldr	r3, [pc, #588]	; (8014cd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8014a8a:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8014a8e:	4a93      	ldr	r2, [pc, #588]	; (8014cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014a90:	4893      	ldr	r0, [pc, #588]	; (8014ce0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8014a92:	f009 fc59 	bl	801e348 <__assert_func>
 8014a96:	ad0e      	add	r5, sp, #56	; 0x38
 8014a98:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f7fd fa4d 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014aa2:	6823      	ldr	r3, [r4, #0]
 8014aa4:	4680      	mov	r8, r0
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	6a1b      	ldr	r3, [r3, #32]
 8014aaa:	4798      	blx	r3
 8014aac:	4580      	cmp	r8, r0
 8014aae:	d004      	beq.n	8014aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8014ab0:	4b8c      	ldr	r3, [pc, #560]	; (8014ce4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8014ab2:	f240 21ca 	movw	r1, #714	; 0x2ca
 8014ab6:	4a89      	ldr	r2, [pc, #548]	; (8014cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014ab8:	e7ea      	b.n	8014a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014aba:	4628      	mov	r0, r5
 8014abc:	f7fd f9b4 	bl	8011e28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014ac0:	4680      	mov	r8, r0
 8014ac2:	b920      	cbnz	r0, 8014ace <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8014ac4:	4b88      	ldr	r3, [pc, #544]	; (8014ce8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8014ac6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8014aca:	4a84      	ldr	r2, [pc, #528]	; (8014cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014acc:	e7e0      	b.n	8014a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014ace:	6830      	ldr	r0, [r6, #0]
 8014ad0:	ab06      	add	r3, sp, #24
 8014ad2:	6871      	ldr	r1, [r6, #4]
 8014ad4:	f10d 0b20 	add.w	fp, sp, #32
 8014ad8:	f9b6 a000 	ldrsh.w	sl, [r6]
 8014adc:	c303      	stmia	r3!, {r0, r1}
 8014ade:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014ae2:	ab08      	add	r3, sp, #32
 8014ae4:	f8d9 0000 	ldr.w	r0, [r9]
 8014ae8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014aec:	c303      	stmia	r3!, {r0, r1}
 8014aee:	4628      	mov	r0, r5
 8014af0:	f7fd f892 	bl	8011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014af4:	4606      	mov	r6, r0
 8014af6:	4628      	mov	r0, r5
 8014af8:	4d7c      	ldr	r5, [pc, #496]	; (8014cec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014afa:	f7fd f8c7 	bl	8011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014afe:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8014b02:	a806      	add	r0, sp, #24
 8014b04:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014b08:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014b0c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8014b10:	f7fa f9b0 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014b14:	4658      	mov	r0, fp
 8014b16:	f7fa f9ad 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014b1a:	a80a      	add	r0, sp, #40	; 0x28
 8014b1c:	f7fa f9aa 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014b20:	4b73      	ldr	r3, [pc, #460]	; (8014cf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8014b22:	2100      	movs	r1, #0
 8014b24:	f9b5 2000 	ldrsh.w	r2, [r5]
 8014b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b2c:	4658      	mov	r0, fp
 8014b2e:	910c      	str	r1, [sp, #48]	; 0x30
 8014b30:	a90c      	add	r1, sp, #48	; 0x30
 8014b32:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014b36:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014b3a:	f7f7 fcfb 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 8014b3e:	4658      	mov	r0, fp
 8014b40:	f7f7 fd3b 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8014b44:	2800      	cmp	r0, #0
 8014b46:	f040 809a 	bne.w	8014c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014b4a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8014b4e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014b52:	4288      	cmp	r0, r1
 8014b54:	db38      	blt.n	8014bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b56:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8014b5a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	db32      	blt.n	8014bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b62:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8014b66:	4430      	add	r0, r6
 8014b68:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8014b6c:	4431      	add	r1, r6
 8014b6e:	b200      	sxth	r0, r0
 8014b70:	b209      	sxth	r1, r1
 8014b72:	4288      	cmp	r0, r1
 8014b74:	dc28      	bgt.n	8014bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b76:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014b7a:	440a      	add	r2, r1
 8014b7c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8014b80:	440b      	add	r3, r1
 8014b82:	b212      	sxth	r2, r2
 8014b84:	b21b      	sxth	r3, r3
 8014b86:	429a      	cmp	r2, r3
 8014b88:	dc1e      	bgt.n	8014bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b8a:	6823      	ldr	r3, [r4, #0]
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b90:	4798      	blx	r3
 8014b92:	4682      	mov	sl, r0
 8014b94:	6838      	ldr	r0, [r7, #0]
 8014b96:	6803      	ldr	r3, [r0, #0]
 8014b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b9a:	4798      	blx	r3
 8014b9c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8014ba0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014ba4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8014ba8:	1a5b      	subs	r3, r3, r1
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	b21c      	sxth	r4, r3
 8014bae:	2c00      	cmp	r4, #0
 8014bb0:	dc0f      	bgt.n	8014bd2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8014bb2:	bf18      	it	ne
 8014bb4:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8014bb8:	4644      	mov	r4, r8
 8014bba:	bf1e      	ittt	ne
 8014bbc:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8014bc0:	185b      	addne	r3, r3, r1
 8014bc2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8014bc6:	e009      	b.n	8014bdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8014bc8:	4b4a      	ldr	r3, [pc, #296]	; (8014cf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8014bca:	f240 21da 	movw	r1, #730	; 0x2da
 8014bce:	4a43      	ldr	r2, [pc, #268]	; (8014cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014bd0:	e75e      	b.n	8014a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014bd2:	1ad3      	subs	r3, r2, r3
 8014bd4:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8014bd8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014bdc:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8014be0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014be4:	1b9b      	subs	r3, r3, r6
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	b219      	sxth	r1, r3
 8014bea:	2900      	cmp	r1, #0
 8014bec:	dd4b      	ble.n	8014c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8014bee:	4351      	muls	r1, r2
 8014bf0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8014bf4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8014bf8:	1acb      	subs	r3, r1, r3
 8014bfa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014bfe:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8014c02:	2e00      	cmp	r6, #0
 8014c04:	dd3b      	ble.n	8014c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014c06:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	dd37      	ble.n	8014c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014c0e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014c12:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014c16:	fb0a f90c 	mul.w	r9, sl, ip
 8014c1a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8014c1e:	4481      	add	r9, r0
 8014c20:	8828      	ldrh	r0, [r5, #0]
 8014c22:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8014c26:	1a41      	subs	r1, r0, r1
 8014c28:	42ae      	cmp	r6, r5
 8014c2a:	bfa8      	it	ge
 8014c2c:	462e      	movge	r6, r5
 8014c2e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8014c32:	428e      	cmp	r6, r1
 8014c34:	bfa8      	it	ge
 8014c36:	460e      	movge	r6, r1
 8014c38:	429d      	cmp	r5, r3
 8014c3a:	bfa8      	it	ge
 8014c3c:	461d      	movge	r5, r3
 8014c3e:	4b2c      	ldr	r3, [pc, #176]	; (8014cf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8014c40:	881b      	ldrh	r3, [r3, #0]
 8014c42:	eba3 030c 	sub.w	r3, r3, ip
 8014c46:	429d      	cmp	r5, r3
 8014c48:	bfa8      	it	ge
 8014c4a:	461d      	movge	r5, r3
 8014c4c:	42b0      	cmp	r0, r6
 8014c4e:	d12c      	bne.n	8014caa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8014c50:	4290      	cmp	r0, r2
 8014c52:	d12a      	bne.n	8014caa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8014c54:	6838      	ldr	r0, [r7, #0]
 8014c56:	9203      	str	r2, [sp, #12]
 8014c58:	6803      	ldr	r3, [r0, #0]
 8014c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c5c:	4798      	blx	r3
 8014c5e:	07c3      	lsls	r3, r0, #31
 8014c60:	d51a      	bpl.n	8014c98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8014c62:	9a03      	ldr	r2, [sp, #12]
 8014c64:	6838      	ldr	r0, [r7, #0]
 8014c66:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8014c6a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8014c6e:	6803      	ldr	r3, [r0, #0]
 8014c70:	9200      	str	r2, [sp, #0]
 8014c72:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8014c74:	4623      	mov	r3, r4
 8014c76:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8014c7a:	47a8      	blx	r5
 8014c7c:	4680      	mov	r8, r0
 8014c7e:	4640      	mov	r0, r8
 8014c80:	b00f      	add	sp, #60	; 0x3c
 8014c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c86:	bf1f      	itttt	ne
 8014c88:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8014c8c:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8014c90:	185b      	addne	r3, r3, r1
 8014c92:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8014c96:	e7b2      	b.n	8014bfe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8014c98:	6838      	ldr	r0, [r7, #0]
 8014c9a:	464a      	mov	r2, r9
 8014c9c:	4621      	mov	r1, r4
 8014c9e:	6803      	ldr	r3, [r0, #0]
 8014ca0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8014ca2:	fb05 f30a 	mul.w	r3, r5, sl
 8014ca6:	47b0      	blx	r6
 8014ca8:	e7e9      	b.n	8014c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014caa:	4355      	muls	r5, r2
 8014cac:	0076      	lsls	r6, r6, #1
 8014cae:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8014cb2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8014cb6:	9303      	str	r3, [sp, #12]
 8014cb8:	9b03      	ldr	r3, [sp, #12]
 8014cba:	429c      	cmp	r4, r3
 8014cbc:	d2df      	bcs.n	8014c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014cbe:	6838      	ldr	r0, [r7, #0]
 8014cc0:	464a      	mov	r2, r9
 8014cc2:	4621      	mov	r1, r4
 8014cc4:	44d1      	add	r9, sl
 8014cc6:	6803      	ldr	r3, [r0, #0]
 8014cc8:	445c      	add	r4, fp
 8014cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ccc:	461d      	mov	r5, r3
 8014cce:	4633      	mov	r3, r6
 8014cd0:	47a8      	blx	r5
 8014cd2:	e7f1      	b.n	8014cb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8014cd4:	20009bf4 	.word	0x20009bf4
 8014cd8:	080227be 	.word	0x080227be
 8014cdc:	08023033 	.word	0x08023033
 8014ce0:	080229c7 	.word	0x080229c7
 8014ce4:	08022870 	.word	0x08022870
 8014ce8:	080228c5 	.word	0x080228c5
 8014cec:	20009bee 	.word	0x20009bee
 8014cf0:	20009bf0 	.word	0x20009bf0
 8014cf4:	08022903 	.word	0x08022903

08014cf8 <_ZN8touchgfx8LCD16bppC1Ev>:
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	4910      	ldr	r1, [pc, #64]	; (8014d3c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8014cfc:	6042      	str	r2, [r0, #4]
 8014cfe:	6001      	str	r1, [r0, #0]
 8014d00:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014d04:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014d08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014d0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8014d10:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014d14:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014d18:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014d1c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8014d20:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014d24:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014d28:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8014d2c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8014d30:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8014d34:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	08022ca8 	.word	0x08022ca8

08014d40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	b08b      	sub	sp, #44	; 0x2c
 8014d46:	460d      	mov	r5, r1
 8014d48:	4604      	mov	r4, r0
 8014d4a:	4699      	mov	r9, r3
 8014d4c:	6808      	ldr	r0, [r1, #0]
 8014d4e:	ab06      	add	r3, sp, #24
 8014d50:	6849      	ldr	r1, [r1, #4]
 8014d52:	c303      	stmia	r3!, {r0, r1}
 8014d54:	6810      	ldr	r0, [r2, #0]
 8014d56:	ab08      	add	r3, sp, #32
 8014d58:	6851      	ldr	r1, [r2, #4]
 8014d5a:	c303      	stmia	r3!, {r0, r1}
 8014d5c:	a806      	add	r0, sp, #24
 8014d5e:	f7fa f889 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014d62:	4629      	mov	r1, r5
 8014d64:	a808      	add	r0, sp, #32
 8014d66:	4d63      	ldr	r5, [pc, #396]	; (8014ef4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8014d68:	f7fa f86c 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014d6c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014d70:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014d74:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014d78:	6828      	ldr	r0, [r5, #0]
 8014d7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014d7e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8014d82:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8014d86:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014d8a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8014d8e:	440a      	add	r2, r1
 8014d90:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014d94:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014d98:	4413      	add	r3, r2
 8014d9a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014d9e:	6803      	ldr	r3, [r0, #0]
 8014da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da2:	4798      	blx	r3
 8014da4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014da8:	d118      	bne.n	8014ddc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8014daa:	f010 0f20 	tst.w	r0, #32
 8014dae:	6828      	ldr	r0, [r5, #0]
 8014db0:	d017      	beq.n	8014de2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8014db2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8014db6:	b2b6      	uxth	r6, r6
 8014db8:	6801      	ldr	r1, [r0, #0]
 8014dba:	9502      	str	r5, [sp, #8]
 8014dbc:	fa1f f588 	uxth.w	r5, r8
 8014dc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8014dc4:	9601      	str	r6, [sp, #4]
 8014dc6:	9500      	str	r5, [sp, #0]
 8014dc8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014dcc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8014dce:	4621      	mov	r1, r4
 8014dd0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014dd4:	47a8      	blx	r5
 8014dd6:	b00b      	add	sp, #44	; 0x2c
 8014dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ddc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014de0:	e7e5      	b.n	8014dae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8014de2:	6803      	ldr	r3, [r0, #0]
 8014de4:	6a1b      	ldr	r3, [r3, #32]
 8014de6:	4798      	blx	r3
 8014de8:	4a43      	ldr	r2, [pc, #268]	; (8014ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8014dea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014dee:	f8b2 e000 	ldrh.w	lr, [r2]
 8014df2:	4692      	mov	sl, r2
 8014df4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014df8:	fb0e 1303 	mla	r3, lr, r3, r1
 8014dfc:	fb0e fe06 	mul.w	lr, lr, r6
 8014e00:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014e04:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8014e08:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8014e0c:	9305      	str	r3, [sp, #20]
 8014e0e:	4570      	cmp	r0, lr
 8014e10:	d26a      	bcs.n	8014ee8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 8014e12:	9b05      	ldr	r3, [sp, #20]
 8014e14:	4621      	mov	r1, r4
 8014e16:	eb00 0b03 	add.w	fp, r0, r3
 8014e1a:	4558      	cmp	r0, fp
 8014e1c:	d257      	bcs.n	8014ece <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 8014e1e:	f851 4b04 	ldr.w	r4, [r1], #4
 8014e22:	0e22      	lsrs	r2, r4, #24
 8014e24:	d012      	beq.n	8014e4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8014e26:	2aff      	cmp	r2, #255	; 0xff
 8014e28:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8014e2c:	d110      	bne.n	8014e50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8014e2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014e32:	d10d      	bne.n	8014e50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8014e34:	0963      	lsrs	r3, r4, #5
 8014e36:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8014e3a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014e3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014e42:	f027 0707 	bic.w	r7, r7, #7
 8014e46:	431f      	orrs	r7, r3
 8014e48:	433c      	orrs	r4, r7
 8014e4a:	8004      	strh	r4, [r0, #0]
 8014e4c:	3002      	adds	r0, #2
 8014e4e:	e7e4      	b.n	8014e1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8014e50:	fb09 f302 	mul.w	r3, r9, r2
 8014e54:	f8b0 c000 	ldrh.w	ip, [r0]
 8014e58:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8014e5c:	b2ff      	uxtb	r7, r7
 8014e5e:	1c5a      	adds	r2, r3, #1
 8014e60:	ea4f 262c 	mov.w	r6, ip, asr #8
 8014e64:	b2e4      	uxtb	r4, r4
 8014e66:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8014e6a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014e6e:	1212      	asrs	r2, r2, #8
 8014e70:	b293      	uxth	r3, r2
 8014e72:	43d2      	mvns	r2, r2
 8014e74:	fb15 f503 	smulbb	r5, r5, r3
 8014e78:	b2d2      	uxtb	r2, r2
 8014e7a:	fb17 f703 	smulbb	r7, r7, r3
 8014e7e:	fb06 5602 	mla	r6, r6, r2, r5
 8014e82:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8014e86:	fb14 f403 	smulbb	r4, r4, r3
 8014e8a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014e8e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014e92:	b2b6      	uxth	r6, r6
 8014e94:	fa5f fc8c 	uxtb.w	ip, ip
 8014e98:	fb05 7702 	mla	r7, r5, r2, r7
 8014e9c:	1c73      	adds	r3, r6, #1
 8014e9e:	fb0c 4202 	mla	r2, ip, r2, r4
 8014ea2:	b2bf      	uxth	r7, r7
 8014ea4:	b292      	uxth	r2, r2
 8014ea6:	1c7d      	adds	r5, r7, #1
 8014ea8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014eac:	f102 0c01 	add.w	ip, r2, #1
 8014eb0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8014eb4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8014eb8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8014ebc:	097f      	lsrs	r7, r7, #5
 8014ebe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014ec2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8014ec6:	4316      	orrs	r6, r2
 8014ec8:	433e      	orrs	r6, r7
 8014eca:	8006      	strh	r6, [r0, #0]
 8014ecc:	e7be      	b.n	8014e4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8014ece:	f8ba 3000 	ldrh.w	r3, [sl]
 8014ed2:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8014ed6:	eba3 0308 	sub.w	r3, r3, r8
 8014eda:	eba4 0408 	sub.w	r4, r4, r8
 8014ede:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014ee2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014ee6:	e792      	b.n	8014e0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8014ee8:	4b02      	ldr	r3, [pc, #8]	; (8014ef4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8014eea:	6818      	ldr	r0, [r3, #0]
 8014eec:	6803      	ldr	r3, [r0, #0]
 8014eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef0:	4798      	blx	r3
 8014ef2:	e770      	b.n	8014dd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8014ef4:	20009bf4 	.word	0x20009bf4
 8014ef8:	20009bee 	.word	0x20009bee

08014efc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	9d04      	ldr	r5, [sp, #16]
 8014f00:	460c      	mov	r4, r1
 8014f02:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8014f06:	4619      	mov	r1, r3
 8014f08:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014f0c:	2a0d      	cmp	r2, #13
 8014f0e:	d820      	bhi.n	8014f52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8014f10:	e8df f002 	tbb	[pc, r2]
 8014f14:	18121807 	.word	0x18121807
 8014f18:	18181818 	.word	0x18181818
 8014f1c:	18181818 	.word	0x18181818
 8014f20:	1818      	.short	0x1818
 8014f22:	6802      	ldr	r2, [r0, #0]
 8014f24:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8014f28:	68d6      	ldr	r6, [r2, #12]
 8014f2a:	462b      	mov	r3, r5
 8014f2c:	460a      	mov	r2, r1
 8014f2e:	4621      	mov	r1, r4
 8014f30:	46b4      	mov	ip, r6
 8014f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f36:	4760      	bx	ip
 8014f38:	462a      	mov	r2, r5
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f40:	f7ff befe 	b.w	8014d40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014f44:	4b03      	ldr	r3, [pc, #12]	; (8014f54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8014f46:	f240 21c1 	movw	r1, #705	; 0x2c1
 8014f4a:	4a03      	ldr	r2, [pc, #12]	; (8014f58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8014f4c:	4803      	ldr	r0, [pc, #12]	; (8014f5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8014f4e:	f009 f9fb 	bl	801e348 <__assert_func>
 8014f52:	bd70      	pop	{r4, r5, r6, pc}
 8014f54:	08022963 	.word	0x08022963
 8014f58:	080230b9 	.word	0x080230b9
 8014f5c:	080229c7 	.word	0x080229c7

08014f60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f64:	b093      	sub	sp, #76	; 0x4c
 8014f66:	880f      	ldrh	r7, [r1, #0]
 8014f68:	4604      	mov	r4, r0
 8014f6a:	4688      	mov	r8, r1
 8014f6c:	4616      	mov	r6, r2
 8014f6e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8014f72:	b12f      	cbz	r7, 8014f80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8014f74:	4b6f      	ldr	r3, [pc, #444]	; (8015134 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8014f76:	21e2      	movs	r1, #226	; 0xe2
 8014f78:	4a6f      	ldr	r2, [pc, #444]	; (8015138 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8014f7a:	4870      	ldr	r0, [pc, #448]	; (801513c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8014f7c:	f009 f9e4 	bl	801e348 <__assert_func>
 8014f80:	6810      	ldr	r0, [r2, #0]
 8014f82:	ad0e      	add	r5, sp, #56	; 0x38
 8014f84:	6851      	ldr	r1, [r2, #4]
 8014f86:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8015144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8014f8a:	c503      	stmia	r5!, {r0, r1}
 8014f8c:	6818      	ldr	r0, [r3, #0]
 8014f8e:	ad10      	add	r5, sp, #64	; 0x40
 8014f90:	6859      	ldr	r1, [r3, #4]
 8014f92:	c503      	stmia	r5!, {r0, r1}
 8014f94:	a80e      	add	r0, sp, #56	; 0x38
 8014f96:	f7f9 ff6d 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014f9a:	4631      	mov	r1, r6
 8014f9c:	a810      	add	r0, sp, #64	; 0x40
 8014f9e:	4e68      	ldr	r6, [pc, #416]	; (8015140 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8014fa0:	f7f9 ff50 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014fa4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014fa8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014fac:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8014fb0:	f8db 0000 	ldr.w	r0, [fp]
 8014fb4:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014fb8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8014fbc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8014fc0:	440c      	add	r4, r1
 8014fc2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8014fc6:	440a      	add	r2, r1
 8014fc8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014fcc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014fd0:	4413      	add	r3, r2
 8014fd2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014fdc:	4798      	blx	r3
 8014fde:	2801      	cmp	r0, #1
 8014fe0:	d11d      	bne.n	801501e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8014fe2:	220b      	movs	r2, #11
 8014fe4:	9708      	str	r7, [sp, #32]
 8014fe6:	b2ad      	uxth	r5, r5
 8014fe8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014fec:	9207      	str	r2, [sp, #28]
 8014fee:	4621      	mov	r1, r4
 8014ff0:	8832      	ldrh	r2, [r6, #0]
 8014ff2:	f8cd a010 	str.w	sl, [sp, #16]
 8014ff6:	9502      	str	r5, [sp, #8]
 8014ff8:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8014ffc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8015000:	9203      	str	r2, [sp, #12]
 8015002:	fa1f f289 	uxth.w	r2, r9
 8015006:	9201      	str	r2, [sp, #4]
 8015008:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801500c:	9200      	str	r2, [sp, #0]
 801500e:	4642      	mov	r2, r8
 8015010:	f8db 0000 	ldr.w	r0, [fp]
 8015014:	f7f7 fec6 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015018:	b013      	add	sp, #76	; 0x4c
 801501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801501e:	f8db 0000 	ldr.w	r0, [fp]
 8015022:	6803      	ldr	r3, [r0, #0]
 8015024:	6a1b      	ldr	r3, [r3, #32]
 8015026:	4798      	blx	r3
 8015028:	8832      	ldrh	r2, [r6, #0]
 801502a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801502e:	f04f 0e04 	mov.w	lr, #4
 8015032:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8015036:	4355      	muls	r5, r2
 8015038:	960d      	str	r6, [sp, #52]	; 0x34
 801503a:	fb02 1303 	mla	r3, r2, r3, r1
 801503e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015042:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8015046:	930c      	str	r3, [sp, #48]	; 0x30
 8015048:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801504c:	930b      	str	r3, [sp, #44]	; 0x2c
 801504e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015050:	4298      	cmp	r0, r3
 8015052:	d269      	bcs.n	8015128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015056:	4621      	mov	r1, r4
 8015058:	eb00 0b03 	add.w	fp, r0, r3
 801505c:	4558      	cmp	r0, fp
 801505e:	460b      	mov	r3, r1
 8015060:	d256      	bcs.n	8015110 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	3101      	adds	r1, #1
 8015066:	fb1e e303 	smlabb	r3, lr, r3, lr
 801506a:	f858 2003 	ldr.w	r2, [r8, r3]
 801506e:	0e14      	lsrs	r4, r2, #24
 8015070:	d012      	beq.n	8015098 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8015072:	2cff      	cmp	r4, #255	; 0xff
 8015074:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8015078:	d110      	bne.n	801509c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801507a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801507e:	d10d      	bne.n	801509c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8015080:	0953      	lsrs	r3, r2, #5
 8015082:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8015086:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801508a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801508e:	f026 0607 	bic.w	r6, r6, #7
 8015092:	431e      	orrs	r6, r3
 8015094:	4332      	orrs	r2, r6
 8015096:	8002      	strh	r2, [r0, #0]
 8015098:	3002      	adds	r0, #2
 801509a:	e7df      	b.n	801505c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801509c:	fb0a f404 	mul.w	r4, sl, r4
 80150a0:	8807      	ldrh	r7, [r0, #0]
 80150a2:	b2f6      	uxtb	r6, r6
 80150a4:	1c63      	adds	r3, r4, #1
 80150a6:	123d      	asrs	r5, r7, #8
 80150a8:	eb03 2324 	add.w	r3, r3, r4, asr #8
 80150ac:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80150b0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80150b4:	b2d2      	uxtb	r2, r2
 80150b6:	121b      	asrs	r3, r3, #8
 80150b8:	fa1f fc83 	uxth.w	ip, r3
 80150bc:	43db      	mvns	r3, r3
 80150be:	fb14 f40c 	smulbb	r4, r4, ip
 80150c2:	b2db      	uxtb	r3, r3
 80150c4:	fb12 f20c 	smulbb	r2, r2, ip
 80150c8:	fb05 4503 	mla	r5, r5, r3, r4
 80150cc:	10fc      	asrs	r4, r7, #3
 80150ce:	fb16 f60c 	smulbb	r6, r6, ip
 80150d2:	00ff      	lsls	r7, r7, #3
 80150d4:	b2ad      	uxth	r5, r5
 80150d6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80150da:	b2ff      	uxtb	r7, r7
 80150dc:	fb04 6603 	mla	r6, r4, r3, r6
 80150e0:	fb07 2203 	mla	r2, r7, r3, r2
 80150e4:	1c6b      	adds	r3, r5, #1
 80150e6:	b2b6      	uxth	r6, r6
 80150e8:	b292      	uxth	r2, r2
 80150ea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80150ee:	1c54      	adds	r4, r2, #1
 80150f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80150f4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80150f8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80150fc:	4325      	orrs	r5, r4
 80150fe:	1c74      	adds	r4, r6, #1
 8015100:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8015104:	0976      	lsrs	r6, r6, #5
 8015106:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801510a:	4335      	orrs	r5, r6
 801510c:	8005      	strh	r5, [r0, #0]
 801510e:	e7c3      	b.n	8015098 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8015110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015112:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8015116:	881b      	ldrh	r3, [r3, #0]
 8015118:	eba4 0409 	sub.w	r4, r4, r9
 801511c:	eba3 0309 	sub.w	r3, r3, r9
 8015120:	440c      	add	r4, r1
 8015122:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015126:	e792      	b.n	801504e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8015128:	4b06      	ldr	r3, [pc, #24]	; (8015144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801512a:	6818      	ldr	r0, [r3, #0]
 801512c:	6803      	ldr	r3, [r0, #0]
 801512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015130:	4798      	blx	r3
 8015132:	e771      	b.n	8015018 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8015134:	0802276e 	.word	0x0802276e
 8015138:	08022e8a 	.word	0x08022e8a
 801513c:	080229c7 	.word	0x080229c7
 8015140:	20009bee 	.word	0x20009bee
 8015144:	20009bf4 	.word	0x20009bf4

08015148 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8015148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	4614      	mov	r4, r2
 801514e:	880a      	ldrh	r2, [r1, #0]
 8015150:	b091      	sub	sp, #68	; 0x44
 8015152:	4607      	mov	r7, r0
 8015154:	2a02      	cmp	r2, #2
 8015156:	4689      	mov	r9, r1
 8015158:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801515c:	d006      	beq.n	801516c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801515e:	4b77      	ldr	r3, [pc, #476]	; (801533c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8015160:	f240 113b 	movw	r1, #315	; 0x13b
 8015164:	4a76      	ldr	r2, [pc, #472]	; (8015340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8015166:	4877      	ldr	r0, [pc, #476]	; (8015344 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 8015168:	f009 f8ee 	bl	801e348 <__assert_func>
 801516c:	2e00      	cmp	r6, #0
 801516e:	d04b      	beq.n	8015208 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8015170:	6820      	ldr	r0, [r4, #0]
 8015172:	ad0c      	add	r5, sp, #48	; 0x30
 8015174:	6861      	ldr	r1, [r4, #4]
 8015176:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801534c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801517a:	c503      	stmia	r5!, {r0, r1}
 801517c:	6818      	ldr	r0, [r3, #0]
 801517e:	ad0e      	add	r5, sp, #56	; 0x38
 8015180:	6859      	ldr	r1, [r3, #4]
 8015182:	c503      	stmia	r5!, {r0, r1}
 8015184:	a80c      	add	r0, sp, #48	; 0x30
 8015186:	f7f9 fe75 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801518a:	4621      	mov	r1, r4
 801518c:	a80e      	add	r0, sp, #56	; 0x38
 801518e:	f7f9 fe59 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015192:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015196:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801519a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801519e:	f8da 0000 	ldr.w	r0, [sl]
 80151a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80151a6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80151aa:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80151ae:	187c      	adds	r4, r7, r1
 80151b0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80151b4:	4f64      	ldr	r7, [pc, #400]	; (8015348 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 80151b6:	440a      	add	r2, r1
 80151b8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80151bc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80151c0:	4413      	add	r3, r2
 80151c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80151c6:	6803      	ldr	r3, [r0, #0]
 80151c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151cc:	4798      	blx	r3
 80151ce:	2801      	cmp	r0, #1
 80151d0:	d11d      	bne.n	801520e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 80151d2:	2200      	movs	r2, #0
 80151d4:	210b      	movs	r1, #11
 80151d6:	b2ad      	uxth	r5, r5
 80151d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80151dc:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80151e0:	8839      	ldrh	r1, [r7, #0]
 80151e2:	9604      	str	r6, [sp, #16]
 80151e4:	9502      	str	r5, [sp, #8]
 80151e6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80151ea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80151ee:	4621      	mov	r1, r4
 80151f0:	9203      	str	r2, [sp, #12]
 80151f2:	fa1f f288 	uxth.w	r2, r8
 80151f6:	9201      	str	r2, [sp, #4]
 80151f8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80151fc:	9200      	str	r2, [sp, #0]
 80151fe:	464a      	mov	r2, r9
 8015200:	f8da 0000 	ldr.w	r0, [sl]
 8015204:	f7f7 fdce 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015208:	b011      	add	sp, #68	; 0x44
 801520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520e:	f8da 0000 	ldr.w	r0, [sl]
 8015212:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8015216:	6803      	ldr	r3, [r0, #0]
 8015218:	6a1b      	ldr	r3, [r3, #32]
 801521a:	4798      	blx	r3
 801521c:	8839      	ldrh	r1, [r7, #0]
 801521e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015222:	2eff      	cmp	r6, #255	; 0xff
 8015224:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015228:	fb05 f501 	mul.w	r5, r5, r1
 801522c:	fb01 2303 	mla	r3, r1, r3, r2
 8015230:	f109 0204 	add.w	r2, r9, #4
 8015234:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015238:	d05f      	beq.n	80152fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 801523a:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 801523e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015242:	b2b6      	uxth	r6, r6
 8015244:	970b      	str	r7, [sp, #44]	; 0x2c
 8015246:	fa1f f989 	uxth.w	r9, r9
 801524a:	42a8      	cmp	r0, r5
 801524c:	d26f      	bcs.n	801532e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801524e:	eb00 010b 	add.w	r1, r0, fp
 8015252:	4288      	cmp	r0, r1
 8015254:	4623      	mov	r3, r4
 8015256:	d244      	bcs.n	80152e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8015258:	8807      	ldrh	r7, [r0, #0]
 801525a:	3401      	adds	r4, #1
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8015262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015266:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801526a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801526e:	00ff      	lsls	r7, r7, #3
 8015270:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8015274:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015278:	fb1c fc09 	smulbb	ip, ip, r9
 801527c:	b2ff      	uxtb	r7, r7
 801527e:	fb1a fa09 	smulbb	sl, sl, r9
 8015282:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8015286:	fb17 f709 	smulbb	r7, r7, r9
 801528a:	fb0e ce06 	mla	lr, lr, r6, ip
 801528e:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	fa1f fe8e 	uxth.w	lr, lr
 8015298:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801529c:	b2db      	uxtb	r3, r3
 801529e:	fb0c ac06 	mla	ip, ip, r6, sl
 80152a2:	f10e 0a01 	add.w	sl, lr, #1
 80152a6:	fb03 7306 	mla	r3, r3, r6, r7
 80152aa:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 80152b4:	fa1f fc8c 	uxth.w	ip, ip
 80152b8:	f103 0e01 	add.w	lr, r3, #1
 80152bc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80152c0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80152c4:	ea4a 0e03 	orr.w	lr, sl, r3
 80152c8:	f10c 0a01 	add.w	sl, ip, #1
 80152cc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80152d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80152d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80152d8:	ea4e 0e0c 	orr.w	lr, lr, ip
 80152dc:	f820 eb02 	strh.w	lr, [r0], #2
 80152e0:	e7b7      	b.n	8015252 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 80152e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152e4:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80152e8:	881b      	ldrh	r3, [r3, #0]
 80152ea:	eba1 0108 	sub.w	r1, r1, r8
 80152ee:	eba3 0308 	sub.w	r3, r3, r8
 80152f2:	440c      	add	r4, r1
 80152f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80152f8:	e7a7      	b.n	801524a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80152fa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80152fe:	42a8      	cmp	r0, r5
 8015300:	d215      	bcs.n	801532e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8015302:	eb00 010b 	add.w	r1, r0, fp
 8015306:	4288      	cmp	r0, r1
 8015308:	d206      	bcs.n	8015318 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801530a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801530e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015312:	f820 3b02 	strh.w	r3, [r0], #2
 8015316:	e7f6      	b.n	8015306 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8015318:	883b      	ldrh	r3, [r7, #0]
 801531a:	eba3 0308 	sub.w	r3, r3, r8
 801531e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015322:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015326:	eba3 0308 	sub.w	r3, r3, r8
 801532a:	441c      	add	r4, r3
 801532c:	e7e7      	b.n	80152fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801532e:	4b07      	ldr	r3, [pc, #28]	; (801534c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8015330:	6818      	ldr	r0, [r3, #0]
 8015332:	6803      	ldr	r3, [r0, #0]
 8015334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015336:	4798      	blx	r3
 8015338:	e766      	b.n	8015208 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801533a:	bf00      	nop
 801533c:	0802262c 	.word	0x0802262c
 8015340:	08022cf4 	.word	0x08022cf4
 8015344:	080229c7 	.word	0x080229c7
 8015348:	20009bee 	.word	0x20009bee
 801534c:	20009bf4 	.word	0x20009bf4

08015350 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	4614      	mov	r4, r2
 8015356:	880a      	ldrh	r2, [r1, #0]
 8015358:	b091      	sub	sp, #68	; 0x44
 801535a:	4606      	mov	r6, r0
 801535c:	2a01      	cmp	r2, #1
 801535e:	4688      	mov	r8, r1
 8015360:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015364:	d006      	beq.n	8015374 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8015366:	4b7c      	ldr	r3, [pc, #496]	; (8015558 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8015368:	f240 1197 	movw	r1, #407	; 0x197
 801536c:	4a7b      	ldr	r2, [pc, #492]	; (801555c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 801536e:	487c      	ldr	r0, [pc, #496]	; (8015560 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8015370:	f008 ffea 	bl	801e348 <__assert_func>
 8015374:	2f00      	cmp	r7, #0
 8015376:	d04b      	beq.n	8015410 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8015378:	6820      	ldr	r0, [r4, #0]
 801537a:	ad0c      	add	r5, sp, #48	; 0x30
 801537c:	6861      	ldr	r1, [r4, #4]
 801537e:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801556c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8015382:	c503      	stmia	r5!, {r0, r1}
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	ad0e      	add	r5, sp, #56	; 0x38
 8015388:	6859      	ldr	r1, [r3, #4]
 801538a:	c503      	stmia	r5!, {r0, r1}
 801538c:	a80c      	add	r0, sp, #48	; 0x30
 801538e:	f7f9 fd71 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015392:	4621      	mov	r1, r4
 8015394:	a80e      	add	r0, sp, #56	; 0x38
 8015396:	f7f9 fd55 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801539a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801539e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80153a2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80153a6:	f8da 0000 	ldr.w	r0, [sl]
 80153aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80153ae:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80153b2:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 80153b6:	1874      	adds	r4, r6, r1
 80153b8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80153bc:	4e69      	ldr	r6, [pc, #420]	; (8015564 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 80153be:	440a      	add	r2, r1
 80153c0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80153c4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80153c8:	4413      	add	r3, r2
 80153ca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80153ce:	6803      	ldr	r3, [r0, #0]
 80153d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153d4:	4798      	blx	r3
 80153d6:	2801      	cmp	r0, #1
 80153d8:	d11d      	bne.n	8015416 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 80153da:	220b      	movs	r2, #11
 80153dc:	2100      	movs	r1, #0
 80153de:	b2ad      	uxth	r5, r5
 80153e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80153e4:	e9cd 2107 	strd	r2, r1, [sp, #28]
 80153e8:	8832      	ldrh	r2, [r6, #0]
 80153ea:	4621      	mov	r1, r4
 80153ec:	9704      	str	r7, [sp, #16]
 80153ee:	9501      	str	r5, [sp, #4]
 80153f0:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80153f4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80153f8:	9203      	str	r2, [sp, #12]
 80153fa:	fa1f f289 	uxth.w	r2, r9
 80153fe:	9202      	str	r2, [sp, #8]
 8015400:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015404:	9200      	str	r2, [sp, #0]
 8015406:	4642      	mov	r2, r8
 8015408:	f8da 0000 	ldr.w	r0, [sl]
 801540c:	f7f7 fcca 	bl	800cda4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015410:	b011      	add	sp, #68	; 0x44
 8015412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015416:	f8da 0000 	ldr.w	r0, [sl]
 801541a:	6803      	ldr	r3, [r0, #0]
 801541c:	6a1b      	ldr	r3, [r3, #32]
 801541e:	4798      	blx	r3
 8015420:	8832      	ldrh	r2, [r6, #0]
 8015422:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015426:	2fff      	cmp	r7, #255	; 0xff
 8015428:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801542c:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8015430:	fb09 f902 	mul.w	r9, r9, r2
 8015434:	fb02 1303 	mla	r3, r2, r3, r1
 8015438:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801543c:	d056      	beq.n	80154ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801543e:	ea6f 0c07 	mvn.w	ip, r7
 8015442:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8015446:	b2bb      	uxth	r3, r7
 8015448:	960b      	str	r6, [sp, #44]	; 0x2c
 801544a:	fa5f fc8c 	uxtb.w	ip, ip
 801544e:	4548      	cmp	r0, r9
 8015450:	d27b      	bcs.n	801554a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8015452:	eb00 0a0e 	add.w	sl, r0, lr
 8015456:	4550      	cmp	r0, sl
 8015458:	4622      	mov	r2, r4
 801545a:	d23d      	bcs.n	80154d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 801545c:	7811      	ldrb	r1, [r2, #0]
 801545e:	2604      	movs	r6, #4
 8015460:	2203      	movs	r2, #3
 8015462:	3401      	adds	r4, #1
 8015464:	fb12 6101 	smlabb	r1, r2, r1, r6
 8015468:	8802      	ldrh	r2, [r0, #0]
 801546a:	eb08 0b01 	add.w	fp, r8, r1
 801546e:	1217      	asrs	r7, r2, #8
 8015470:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015474:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015478:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801547c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015480:	fb16 f603 	smulbb	r6, r6, r3
 8015484:	fb1b fb03 	smulbb	fp, fp, r3
 8015488:	fb07 670c 	mla	r7, r7, ip, r6
 801548c:	10d6      	asrs	r6, r2, #3
 801548e:	00d2      	lsls	r2, r2, #3
 8015490:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015494:	b2bf      	uxth	r7, r7
 8015496:	b2d2      	uxtb	r2, r2
 8015498:	fb06 b60c 	mla	r6, r6, ip, fp
 801549c:	fb12 f20c 	smulbb	r2, r2, ip
 80154a0:	b2b6      	uxth	r6, r6
 80154a2:	fb01 2103 	mla	r1, r1, r3, r2
 80154a6:	1c7a      	adds	r2, r7, #1
 80154a8:	f106 0b01 	add.w	fp, r6, #1
 80154ac:	b289      	uxth	r1, r1
 80154ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80154b2:	1c4a      	adds	r2, r1, #1
 80154b4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80154b8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80154bc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80154c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80154c4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80154c8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80154cc:	4317      	orrs	r7, r2
 80154ce:	ea47 070b 	orr.w	r7, r7, fp
 80154d2:	f820 7b02 	strh.w	r7, [r0], #2
 80154d6:	e7be      	b.n	8015456 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80154d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154da:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80154de:	8812      	ldrh	r2, [r2, #0]
 80154e0:	1b49      	subs	r1, r1, r5
 80154e2:	1b52      	subs	r2, r2, r5
 80154e4:	440c      	add	r4, r1
 80154e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80154ea:	e7b0      	b.n	801544e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 80154ec:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80154f0:	2203      	movs	r2, #3
 80154f2:	2704      	movs	r7, #4
 80154f4:	491c      	ldr	r1, [pc, #112]	; (8015568 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80154f6:	4548      	cmp	r0, r9
 80154f8:	d227      	bcs.n	801554a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80154fa:	eb00 0c0e 	add.w	ip, r0, lr
 80154fe:	4560      	cmp	r0, ip
 8015500:	4623      	mov	r3, r4
 8015502:	d219      	bcs.n	8015538 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8015504:	f893 a000 	ldrb.w	sl, [r3]
 8015508:	3401      	adds	r4, #1
 801550a:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 801550e:	eb08 0b0a 	add.w	fp, r8, sl
 8015512:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8015516:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801551a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801551e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8015522:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015526:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801552a:	ea43 030b 	orr.w	r3, r3, fp
 801552e:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8015532:	f820 3b02 	strh.w	r3, [r0], #2
 8015536:	e7e2      	b.n	80154fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8015538:	8833      	ldrh	r3, [r6, #0]
 801553a:	1b5b      	subs	r3, r3, r5
 801553c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015540:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015544:	1b5b      	subs	r3, r3, r5
 8015546:	441c      	add	r4, r3
 8015548:	e7d5      	b.n	80154f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801554a:	4b08      	ldr	r3, [pc, #32]	; (801556c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801554c:	6818      	ldr	r0, [r3, #0]
 801554e:	6803      	ldr	r3, [r0, #0]
 8015550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015552:	4798      	blx	r3
 8015554:	e75c      	b.n	8015410 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8015556:	bf00      	nop
 8015558:	0802267a 	.word	0x0802267a
 801555c:	08022d7d 	.word	0x08022d7d
 8015560:	080229c7 	.word	0x080229c7
 8015564:	20009bee 	.word	0x20009bee
 8015568:	fffff800 	.word	0xfffff800
 801556c:	20009bf4 	.word	0x20009bf4

08015570 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015570:	b430      	push	{r4, r5}
 8015572:	780d      	ldrb	r5, [r1, #0]
 8015574:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8015578:	2d01      	cmp	r5, #1
 801557a:	d00a      	beq.n	8015592 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801557c:	d305      	bcc.n	801558a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801557e:	2d02      	cmp	r5, #2
 8015580:	d10b      	bne.n	801559a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8015582:	9402      	str	r4, [sp, #8]
 8015584:	bc30      	pop	{r4, r5}
 8015586:	f7ff bddf 	b.w	8015148 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801558a:	9402      	str	r4, [sp, #8]
 801558c:	bc30      	pop	{r4, r5}
 801558e:	f7ff bce7 	b.w	8014f60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015592:	9402      	str	r4, [sp, #8]
 8015594:	bc30      	pop	{r4, r5}
 8015596:	f7ff bedb 	b.w	8015350 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801559a:	bc30      	pop	{r4, r5}
 801559c:	4770      	bx	lr
	...

080155a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80155a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155a4:	b087      	sub	sp, #28
 80155a6:	4604      	mov	r4, r0
 80155a8:	460e      	mov	r6, r1
 80155aa:	6810      	ldr	r0, [r2, #0]
 80155ac:	6851      	ldr	r1, [r2, #4]
 80155ae:	ad02      	add	r5, sp, #8
 80155b0:	4617      	mov	r7, r2
 80155b2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80155b6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80157e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80155ba:	c503      	stmia	r5!, {r0, r1}
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	ad04      	add	r5, sp, #16
 80155c0:	6859      	ldr	r1, [r3, #4]
 80155c2:	c503      	stmia	r5!, {r0, r1}
 80155c4:	a802      	add	r0, sp, #8
 80155c6:	f7f9 fc55 	bl	800ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155ca:	4639      	mov	r1, r7
 80155cc:	a804      	add	r0, sp, #16
 80155ce:	f7f9 fc39 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80155d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80155d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80155da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80155de:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80155e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80155e6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80155ea:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80155ee:	440e      	add	r6, r1
 80155f0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80155f4:	440a      	add	r2, r1
 80155f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80155fa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80155fe:	4413      	add	r3, r2
 8015600:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015604:	4b77      	ldr	r3, [pc, #476]	; (80157e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8015606:	6818      	ldr	r0, [r3, #0]
 8015608:	6803      	ldr	r3, [r0, #0]
 801560a:	6a1b      	ldr	r3, [r3, #32]
 801560c:	4798      	blx	r3
 801560e:	f8b9 b000 	ldrh.w	fp, [r9]
 8015612:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015616:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801561a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801561e:	fb05 f50b 	mul.w	r5, r5, fp
 8015622:	fb0b 2303 	mla	r3, fp, r3, r2
 8015626:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801562a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	d068      	beq.n	8015704 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8015632:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8015636:	4558      	cmp	r0, fp
 8015638:	f080 80cc 	bcs.w	80157d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801563c:	9b00      	ldr	r3, [sp, #0]
 801563e:	4631      	mov	r1, r6
 8015640:	18c3      	adds	r3, r0, r3
 8015642:	9301      	str	r3, [sp, #4]
 8015644:	9b01      	ldr	r3, [sp, #4]
 8015646:	4298      	cmp	r0, r3
 8015648:	d24e      	bcs.n	80156e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 801564a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801564e:	2a00      	cmp	r2, #0
 8015650:	d047      	beq.n	80156e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8015652:	fb0a f202 	mul.w	r2, sl, r2
 8015656:	1c53      	adds	r3, r2, #1
 8015658:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801565c:	121b      	asrs	r3, r3, #8
 801565e:	d040      	beq.n	80156e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8015660:	8802      	ldrh	r2, [r0, #0]
 8015662:	b29e      	uxth	r6, r3
 8015664:	f8b4 c000 	ldrh.w	ip, [r4]
 8015668:	43db      	mvns	r3, r3
 801566a:	1215      	asrs	r5, r2, #8
 801566c:	b2db      	uxtb	r3, r3
 801566e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8015672:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8015676:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801567a:	fb15 f503 	smulbb	r5, r5, r3
 801567e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015682:	00d2      	lsls	r2, r2, #3
 8015684:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8015688:	fb07 5706 	mla	r7, r7, r6, r5
 801568c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8015690:	b2d2      	uxtb	r2, r2
 8015692:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015696:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801569a:	fb1e fe03 	smulbb	lr, lr, r3
 801569e:	b2bf      	uxth	r7, r7
 80156a0:	fb12 f203 	smulbb	r2, r2, r3
 80156a4:	fa5f fc8c 	uxtb.w	ip, ip
 80156a8:	fb05 e506 	mla	r5, r5, r6, lr
 80156ac:	1c7b      	adds	r3, r7, #1
 80156ae:	fb0c 2c06 	mla	ip, ip, r6, r2
 80156b2:	b2ad      	uxth	r5, r5
 80156b4:	fa1f fc8c 	uxth.w	ip, ip
 80156b8:	f105 0e01 	add.w	lr, r5, #1
 80156bc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80156c0:	f10c 0601 	add.w	r6, ip, #1
 80156c4:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80156c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80156cc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80156d0:	096d      	lsrs	r5, r5, #5
 80156d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80156d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80156da:	ea47 070c 	orr.w	r7, r7, ip
 80156de:	432f      	orrs	r7, r5
 80156e0:	8007      	strh	r7, [r0, #0]
 80156e2:	3002      	adds	r0, #2
 80156e4:	3402      	adds	r4, #2
 80156e6:	e7ad      	b.n	8015644 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80156e8:	f8b9 3000 	ldrh.w	r3, [r9]
 80156ec:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80156f0:	eba3 0308 	sub.w	r3, r3, r8
 80156f4:	eba6 0608 	sub.w	r6, r6, r8
 80156f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80156fc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8015700:	440e      	add	r6, r1
 8015702:	e798      	b.n	8015636 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8015704:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015708:	42a8      	cmp	r0, r5
 801570a:	d263      	bcs.n	80157d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801570c:	9b00      	ldr	r3, [sp, #0]
 801570e:	4631      	mov	r1, r6
 8015710:	eb00 0b03 	add.w	fp, r0, r3
 8015714:	4558      	cmp	r0, fp
 8015716:	d24f      	bcs.n	80157b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8015718:	f811 3b01 	ldrb.w	r3, [r1], #1
 801571c:	b12b      	cbz	r3, 801572a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801571e:	2bff      	cmp	r3, #255	; 0xff
 8015720:	f8b4 e000 	ldrh.w	lr, [r4]
 8015724:	d104      	bne.n	8015730 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8015726:	f8a0 e000 	strh.w	lr, [r0]
 801572a:	3002      	adds	r0, #2
 801572c:	3402      	adds	r4, #2
 801572e:	e7f1      	b.n	8015714 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8015730:	8802      	ldrh	r2, [r0, #0]
 8015732:	b29f      	uxth	r7, r3
 8015734:	43db      	mvns	r3, r3
 8015736:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801573a:	1216      	asrs	r6, r2, #8
 801573c:	b2db      	uxtb	r3, r3
 801573e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015742:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015746:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801574a:	00d2      	lsls	r2, r2, #3
 801574c:	fb16 f603 	smulbb	r6, r6, r3
 8015750:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015754:	b2d2      	uxtb	r2, r2
 8015756:	fb0c 6c07 	mla	ip, ip, r7, r6
 801575a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801575e:	fb1a fa03 	smulbb	sl, sl, r3
 8015762:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015766:	fb12 f303 	smulbb	r3, r2, r3
 801576a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801576e:	fa5f fe8e 	uxtb.w	lr, lr
 8015772:	fb06 a607 	mla	r6, r6, r7, sl
 8015776:	fa1f fc8c 	uxth.w	ip, ip
 801577a:	fb0e 3e07 	mla	lr, lr, r7, r3
 801577e:	b2b6      	uxth	r6, r6
 8015780:	f10c 0201 	add.w	r2, ip, #1
 8015784:	fa1f fe8e 	uxth.w	lr, lr
 8015788:	f106 0a01 	add.w	sl, r6, #1
 801578c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8015790:	f10e 0301 	add.w	r3, lr, #1
 8015794:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8015798:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801579c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80157a0:	0976      	lsrs	r6, r6, #5
 80157a2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80157a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80157aa:	ea4c 0c0e 	orr.w	ip, ip, lr
 80157ae:	ea4c 0c06 	orr.w	ip, ip, r6
 80157b2:	f8a0 c000 	strh.w	ip, [r0]
 80157b6:	e7b8      	b.n	801572a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80157b8:	f8b9 3000 	ldrh.w	r3, [r9]
 80157bc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80157c0:	eba3 0308 	sub.w	r3, r3, r8
 80157c4:	eba6 0608 	sub.w	r6, r6, r8
 80157c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80157cc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80157d0:	440e      	add	r6, r1
 80157d2:	e799      	b.n	8015708 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 80157d4:	4b03      	ldr	r3, [pc, #12]	; (80157e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80157d6:	6818      	ldr	r0, [r3, #0]
 80157d8:	6803      	ldr	r3, [r0, #0]
 80157da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157dc:	4798      	blx	r3
 80157de:	b007      	add	sp, #28
 80157e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e4:	20009bf4 	.word	0x20009bf4
 80157e8:	20009bee 	.word	0x20009bee

080157ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80157ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f0:	b089      	sub	sp, #36	; 0x24
 80157f2:	4682      	mov	sl, r0
 80157f4:	460d      	mov	r5, r1
 80157f6:	4691      	mov	r9, r2
 80157f8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80157fc:	4698      	mov	r8, r3
 80157fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015800:	b3ae      	cbz	r6, 801586e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015802:	4608      	mov	r0, r1
 8015804:	f7fc fa08 	bl	8011c18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015808:	4607      	mov	r7, r0
 801580a:	4628      	mov	r0, r5
 801580c:	f7fc fa3e 	bl	8011c8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015810:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015814:	4628      	mov	r0, r5
 8015816:	f8ad 9008 	strh.w	r9, [sp, #8]
 801581a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801581e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8015822:	f7fc fb8b 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015826:	b178      	cbz	r0, 8015848 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015828:	4628      	mov	r0, r5
 801582a:	f7fc fb87 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801582e:	2802      	cmp	r0, #2
 8015830:	d00a      	beq.n	8015848 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015832:	4628      	mov	r0, r5
 8015834:	f7fc fb82 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015838:	280b      	cmp	r0, #11
 801583a:	d005      	beq.n	8015848 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801583c:	4b69      	ldr	r3, [pc, #420]	; (80159e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801583e:	214b      	movs	r1, #75	; 0x4b
 8015840:	4a69      	ldr	r2, [pc, #420]	; (80159e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8015842:	486a      	ldr	r0, [pc, #424]	; (80159ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8015844:	f008 fd80 	bl	801e348 <__assert_func>
 8015848:	4628      	mov	r0, r5
 801584a:	f7fc faed 	bl	8011e28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801584e:	4607      	mov	r7, r0
 8015850:	4628      	mov	r0, r5
 8015852:	f7fc fb1b 	bl	8011e8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8015856:	4681      	mov	r9, r0
 8015858:	4628      	mov	r0, r5
 801585a:	f7fc fb6f 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801585e:	2802      	cmp	r0, #2
 8015860:	d108      	bne.n	8015874 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8015862:	4633      	mov	r3, r6
 8015864:	4622      	mov	r2, r4
 8015866:	a902      	add	r1, sp, #8
 8015868:	4638      	mov	r0, r7
 801586a:	f7ff fa69 	bl	8014d40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801586e:	b009      	add	sp, #36	; 0x24
 8015870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015874:	4628      	mov	r0, r5
 8015876:	f7fc fb61 	bl	8011f3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801587a:	280b      	cmp	r0, #11
 801587c:	d107      	bne.n	801588e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801587e:	9600      	str	r6, [sp, #0]
 8015880:	4623      	mov	r3, r4
 8015882:	aa02      	add	r2, sp, #8
 8015884:	4649      	mov	r1, r9
 8015886:	4638      	mov	r0, r7
 8015888:	f7ff fe72 	bl	8015570 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801588c:	e7ef      	b.n	801586e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801588e:	4628      	mov	r0, r5
 8015890:	f7fc fa90 	bl	8011db4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015894:	b950      	cbnz	r0, 80158ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8015896:	f8da 3000 	ldr.w	r3, [sl]
 801589a:	aa02      	add	r2, sp, #8
 801589c:	4639      	mov	r1, r7
 801589e:	e9cd 6000 	strd	r6, r0, [sp]
 80158a2:	4650      	mov	r0, sl
 80158a4:	68dd      	ldr	r5, [r3, #12]
 80158a6:	4623      	mov	r3, r4
 80158a8:	47a8      	blx	r5
 80158aa:	e7e0      	b.n	801586e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80158ac:	f10d 0818 	add.w	r8, sp, #24
 80158b0:	4629      	mov	r1, r5
 80158b2:	ad04      	add	r5, sp, #16
 80158b4:	4640      	mov	r0, r8
 80158b6:	f7fc fa23 	bl	8011d00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80158ba:	e898 0003 	ldmia.w	r8, {r0, r1}
 80158be:	e885 0003 	stmia.w	r5, {r0, r1}
 80158c2:	4628      	mov	r0, r5
 80158c4:	4621      	mov	r1, r4
 80158c6:	f7f6 fe35 	bl	800c534 <_ZN8touchgfx4RectaNERKS0_>
 80158ca:	4628      	mov	r0, r5
 80158cc:	f7f6 fe75 	bl	800c5ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80158d0:	b138      	cbz	r0, 80158e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80158d2:	4623      	mov	r3, r4
 80158d4:	9600      	str	r6, [sp, #0]
 80158d6:	aa02      	add	r2, sp, #8
 80158d8:	4649      	mov	r1, r9
 80158da:	4638      	mov	r0, r7
 80158dc:	f7ff fe60 	bl	80155a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80158e0:	e7c5      	b.n	801586e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80158e2:	f8da 3000 	ldr.w	r3, [sl]
 80158e6:	aa02      	add	r2, sp, #8
 80158e8:	4639      	mov	r1, r7
 80158ea:	e9cd 6000 	strd	r6, r0, [sp]
 80158ee:	4650      	mov	r0, sl
 80158f0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80158f4:	462b      	mov	r3, r5
 80158f6:	47d8      	blx	fp
 80158f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80158fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015900:	4293      	cmp	r3, r2
 8015902:	dd13      	ble.n	801592c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8015904:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015908:	1a9b      	subs	r3, r3, r2
 801590a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801590e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015912:	4638      	mov	r0, r7
 8015914:	f8ad 201a 	strh.w	r2, [sp, #26]
 8015918:	aa02      	add	r2, sp, #8
 801591a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801591e:	4649      	mov	r1, r9
 8015920:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015924:	4643      	mov	r3, r8
 8015926:	9600      	str	r6, [sp, #0]
 8015928:	f7ff fe3a 	bl	80155a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801592c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8015930:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015934:	4293      	cmp	r3, r2
 8015936:	dd13      	ble.n	8015960 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8015938:	1a9b      	subs	r3, r3, r2
 801593a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801593e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8015942:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015946:	aa02      	add	r2, sp, #8
 8015948:	f8ad 001a 	strh.w	r0, [sp, #26]
 801594c:	4638      	mov	r0, r7
 801594e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015952:	4643      	mov	r3, r8
 8015954:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015958:	4649      	mov	r1, r9
 801595a:	9600      	str	r6, [sp, #0]
 801595c:	f7ff fe20 	bl	80155a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015960:	88a2      	ldrh	r2, [r4, #4]
 8015962:	8823      	ldrh	r3, [r4, #0]
 8015964:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8015968:	4413      	add	r3, r2
 801596a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801596e:	440a      	add	r2, r1
 8015970:	b29b      	uxth	r3, r3
 8015972:	b292      	uxth	r2, r2
 8015974:	b218      	sxth	r0, r3
 8015976:	b211      	sxth	r1, r2
 8015978:	4288      	cmp	r0, r1
 801597a:	dd13      	ble.n	80159a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801597c:	1a9b      	subs	r3, r3, r2
 801597e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8015982:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8015986:	aa02      	add	r2, sp, #8
 8015988:	f8ad 1018 	strh.w	r1, [sp, #24]
 801598c:	4649      	mov	r1, r9
 801598e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015992:	4643      	mov	r3, r8
 8015994:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015998:	4638      	mov	r0, r7
 801599a:	9600      	str	r6, [sp, #0]
 801599c:	f8ad 501a 	strh.w	r5, [sp, #26]
 80159a0:	f7ff fdfe 	bl	80155a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80159a4:	88e2      	ldrh	r2, [r4, #6]
 80159a6:	8863      	ldrh	r3, [r4, #2]
 80159a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80159ac:	4413      	add	r3, r2
 80159ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80159b2:	440a      	add	r2, r1
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	b292      	uxth	r2, r2
 80159b8:	b218      	sxth	r0, r3
 80159ba:	b211      	sxth	r1, r2
 80159bc:	4288      	cmp	r0, r1
 80159be:	f77f af56 	ble.w	801586e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80159c2:	f9b4 5000 	ldrsh.w	r5, [r4]
 80159c6:	1a9b      	subs	r3, r3, r2
 80159c8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80159cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80159d0:	4643      	mov	r3, r8
 80159d2:	f8ad 5018 	strh.w	r5, [sp, #24]
 80159d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 80159da:	f8ad 001c 	strh.w	r0, [sp, #28]
 80159de:	9600      	str	r6, [sp, #0]
 80159e0:	e779      	b.n	80158d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 80159e2:	bf00      	nop
 80159e4:	080226c8 	.word	0x080226c8
 80159e8:	08022e06 	.word	0x08022e06
 80159ec:	080229c7 	.word	0x080229c7

080159f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80159f0:	b508      	push	{r3, lr}
 80159f2:	b180      	cbz	r0, 8015a16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80159f4:	2902      	cmp	r1, #2
 80159f6:	d014      	beq.n	8015a22 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80159f8:	2903      	cmp	r1, #3
 80159fa:	d01d      	beq.n	8015a38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80159fc:	2901      	cmp	r1, #1
 80159fe:	d101      	bne.n	8015a04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015a00:	2001      	movs	r0, #1
 8015a02:	bd08      	pop	{r3, pc}
 8015a04:	4b0e      	ldr	r3, [pc, #56]	; (8015a40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8015a06:	8818      	ldrh	r0, [r3, #0]
 8015a08:	b990      	cbnz	r0, 8015a30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8015a0a:	4b0e      	ldr	r3, [pc, #56]	; (8015a44 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8015a0c:	2154      	movs	r1, #84	; 0x54
 8015a0e:	4a0e      	ldr	r2, [pc, #56]	; (8015a48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8015a10:	480e      	ldr	r0, [pc, #56]	; (8015a4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8015a12:	f008 fc99 	bl	801e348 <__assert_func>
 8015a16:	2902      	cmp	r1, #2
 8015a18:	d00e      	beq.n	8015a38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8015a1a:	2903      	cmp	r1, #3
 8015a1c:	d0f2      	beq.n	8015a04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015a1e:	2901      	cmp	r1, #1
 8015a20:	d1ee      	bne.n	8015a00 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8015a22:	4b07      	ldr	r3, [pc, #28]	; (8015a40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8015a24:	8818      	ldrh	r0, [r3, #0]
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d0ef      	beq.n	8015a0a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8015a2a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a2e:	e7e8      	b.n	8015a02 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015a30:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a34:	4240      	negs	r0, r0
 8015a36:	e7e4      	b.n	8015a02 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015a38:	f04f 30ff 	mov.w	r0, #4294967295
 8015a3c:	e7e1      	b.n	8015a02 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015a3e:	bf00      	nop
 8015a40:	20009bee 	.word	0x20009bee
 8015a44:	080229f9 	.word	0x080229f9
 8015a48:	08022f83 	.word	0x08022f83
 8015a4c:	08022a3b 	.word	0x08022a3b

08015a50 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8015a50:	b508      	push	{r3, lr}
 8015a52:	b180      	cbz	r0, 8015a76 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8015a54:	2902      	cmp	r1, #2
 8015a56:	d014      	beq.n	8015a82 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8015a58:	2903      	cmp	r1, #3
 8015a5a:	d018      	beq.n	8015a8e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015a5c:	2901      	cmp	r1, #1
 8015a5e:	d001      	beq.n	8015a64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015a60:	2001      	movs	r0, #1
 8015a62:	e013      	b.n	8015a8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a64:	4b0e      	ldr	r3, [pc, #56]	; (8015aa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015a66:	8818      	ldrh	r0, [r3, #0]
 8015a68:	b970      	cbnz	r0, 8015a88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8015a6a:	4b0e      	ldr	r3, [pc, #56]	; (8015aa4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8015a6c:	2154      	movs	r1, #84	; 0x54
 8015a6e:	4a0e      	ldr	r2, [pc, #56]	; (8015aa8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8015a70:	480e      	ldr	r0, [pc, #56]	; (8015aac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8015a72:	f008 fc69 	bl	801e348 <__assert_func>
 8015a76:	2902      	cmp	r1, #2
 8015a78:	d009      	beq.n	8015a8e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015a7a:	2903      	cmp	r1, #3
 8015a7c:	d0f0      	beq.n	8015a60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8015a7e:	2901      	cmp	r1, #1
 8015a80:	d1f0      	bne.n	8015a64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015a82:	f04f 30ff 	mov.w	r0, #4294967295
 8015a86:	e001      	b.n	8015a8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a88:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a8c:	bd08      	pop	{r3, pc}
 8015a8e:	4b04      	ldr	r3, [pc, #16]	; (8015aa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015a90:	8818      	ldrh	r0, [r3, #0]
 8015a92:	2800      	cmp	r0, #0
 8015a94:	d0e9      	beq.n	8015a6a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8015a96:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a9a:	4240      	negs	r0, r0
 8015a9c:	e7f6      	b.n	8015a8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a9e:	bf00      	nop
 8015aa0:	20009bee 	.word	0x20009bee
 8015aa4:	080229f9 	.word	0x080229f9
 8015aa8:	08022f83 	.word	0x08022f83
 8015aac:	08022a3b 	.word	0x08022a3b

08015ab0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab4:	b099      	sub	sp, #100	; 0x64
 8015ab6:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ab8:	a914      	add	r1, sp, #80	; 0x50
 8015aba:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8015abe:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8015ac2:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8015ac6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8015aca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8015ace:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ad2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8015ad6:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8015ada:	9308      	str	r3, [sp, #32]
 8015adc:	910c      	str	r1, [sp, #48]	; 0x30
 8015ade:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8015ae2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8015ae6:	910d      	str	r1, [sp, #52]	; 0x34
 8015ae8:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8015aec:	7998      	ldrb	r0, [r3, #6]
 8015aee:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8015af2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015af6:	4301      	orrs	r1, r0
 8015af8:	9109      	str	r1, [sp, #36]	; 0x24
 8015afa:	f000 81e4 	beq.w	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015afe:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8015b02:	79d9      	ldrb	r1, [r3, #7]
 8015b04:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8015b08:	ea51 0b0b 	orrs.w	fp, r1, fp
 8015b0c:	f000 81db 	beq.w	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015b10:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	2e00      	cmp	r6, #0
 8015b18:	f000 80fd 	beq.w	8015d16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8015b1c:	1af6      	subs	r6, r6, r3
 8015b1e:	b2b6      	uxth	r6, r6
 8015b20:	0433      	lsls	r3, r6, #16
 8015b22:	d502      	bpl.n	8015b2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8015b24:	1bad      	subs	r5, r5, r6
 8015b26:	2600      	movs	r6, #0
 8015b28:	b22d      	sxth	r5, r5
 8015b2a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015b2e:	a814      	add	r0, sp, #80	; 0x50
 8015b30:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8015b34:	428d      	cmp	r5, r1
 8015b36:	b28b      	uxth	r3, r1
 8015b38:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015b3c:	bfbf      	itttt	lt
 8015b3e:	18f6      	addlt	r6, r6, r3
 8015b40:	1b75      	sublt	r5, r6, r5
 8015b42:	b2ae      	uxthlt	r6, r5
 8015b44:	460d      	movlt	r5, r1
 8015b46:	8891      	ldrh	r1, [r2, #4]
 8015b48:	440b      	add	r3, r1
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	b21b      	sxth	r3, r3
 8015b4e:	9311      	str	r3, [sp, #68]	; 0x44
 8015b50:	8853      	ldrh	r3, [r2, #2]
 8015b52:	88d2      	ldrh	r2, [r2, #6]
 8015b54:	4413      	add	r3, r2
 8015b56:	9a08      	ldr	r2, [sp, #32]
 8015b58:	b21b      	sxth	r3, r3
 8015b5a:	9310      	str	r3, [sp, #64]	; 0x40
 8015b5c:	4bb1      	ldr	r3, [pc, #708]	; (8015e24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8015b5e:	f893 9000 	ldrb.w	r9, [r3]
 8015b62:	f109 3cff 	add.w	ip, r9, #4294967295
 8015b66:	f1dc 0300 	rsbs	r3, ip, #0
 8015b6a:	eb43 030c 	adc.w	r3, r3, ip
 8015b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b70:	4653      	mov	r3, sl
 8015b72:	f7f8 ffd8 	bl	800eb26 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015b76:	4629      	mov	r1, r5
 8015b78:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8015b7c:	4653      	mov	r3, sl
 8015b7e:	9a08      	ldr	r2, [sp, #32]
 8015b80:	a814      	add	r0, sp, #80	; 0x50
 8015b82:	f7f8 ffe8 	bl	800eb56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8015b86:	a918      	add	r1, sp, #96	; 0x60
 8015b88:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8015b8c:	a817      	add	r0, sp, #92	; 0x5c
 8015b8e:	f7f9 f943 	bl	800ee18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8015b92:	f1ba 0f00 	cmp.w	sl, #0
 8015b96:	f040 80c1 	bne.w	8015d1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 8015b9a:	f1b9 0f01 	cmp.w	r9, #1
 8015b9e:	f040 80c5 	bne.w	8015d2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	f1b8 0f01 	cmp.w	r8, #1
 8015ba8:	fa03 f308 	lsl.w	r3, r3, r8
 8015bac:	f103 33ff 	add.w	r3, r3, #4294967295
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8015bb4:	f000 80e5 	beq.w	8015d82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8015bb8:	f1b8 0f02 	cmp.w	r8, #2
 8015bbc:	f000 80e4 	beq.w	8015d88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8015bc0:	f1b8 0f04 	cmp.w	r8, #4
 8015bc4:	bf15      	itete	ne
 8015bc6:	46c1      	movne	r9, r8
 8015bc8:	f04f 0904 	moveq.w	r9, #4
 8015bcc:	2301      	movne	r3, #1
 8015bce:	2311      	moveq	r3, #17
 8015bd0:	9307      	str	r3, [sp, #28]
 8015bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bd4:	b153      	cbz	r3, 8015bec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8015bd6:	2408      	movs	r4, #8
 8015bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bda:	fb94 f3f9 	sdiv	r3, r4, r9
 8015bde:	1e5c      	subs	r4, r3, #1
 8015be0:	4414      	add	r4, r2
 8015be2:	fb94 f4f3 	sdiv	r4, r4, r3
 8015be6:	fb14 f403 	smulbb	r4, r4, r3
 8015bea:	b2a4      	uxth	r4, r4
 8015bec:	b906      	cbnz	r6, 8015bf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015bee:	b16f      	cbz	r7, 8015c0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8015bf0:	fb07 6304 	mla	r3, r7, r4, r6
 8015bf4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015bf6:	4639      	mov	r1, r7
 8015bf8:	fb08 f303 	mul.w	r3, r8, r3
 8015bfc:	f003 0707 	and.w	r7, r3, #7
 8015c00:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8015c04:	9328      	str	r3, [sp, #160]	; 0xa0
 8015c06:	ebab 0301 	sub.w	r3, fp, r1
 8015c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c0c:	4651      	mov	r1, sl
 8015c0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015c10:	f7ff feee 	bl	80159f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8015c14:	4651      	mov	r1, sl
 8015c16:	4683      	mov	fp, r0
 8015c18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015c1a:	f7ff ff19 	bl	8015a50 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8015c1e:	9a08      	ldr	r2, [sp, #32]
 8015c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c22:	4682      	mov	sl, r0
 8015c24:	1a9b      	subs	r3, r3, r2
 8015c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	bfa8      	it	ge
 8015c2c:	461a      	movge	r2, r3
 8015c2e:	2a00      	cmp	r2, #0
 8015c30:	9208      	str	r2, [sp, #32]
 8015c32:	f340 8148 	ble.w	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015c36:	1bad      	subs	r5, r5, r6
 8015c38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c3a:	1b5d      	subs	r5, r3, r5
 8015c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3e:	429d      	cmp	r5, r3
 8015c40:	bfd4      	ite	le
 8015c42:	ebc6 0605 	rsble	r6, r6, r5
 8015c46:	ebc6 0603 	rsbgt	r6, r6, r3
 8015c4a:	2e00      	cmp	r6, #0
 8015c4c:	f340 813b 	ble.w	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015c50:	1ba4      	subs	r4, r4, r6
 8015c52:	fb09 f304 	mul.w	r3, r9, r4
 8015c56:	930e      	str	r3, [sp, #56]	; 0x38
 8015c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f040 809d 	bne.w	8015d9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8015c60:	4b71      	ldr	r3, [pc, #452]	; (8015e28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8015c62:	6818      	ldr	r0, [r3, #0]
 8015c64:	6803      	ldr	r3, [r0, #0]
 8015c66:	6a1b      	ldr	r3, [r3, #32]
 8015c68:	4798      	blx	r3
 8015c6a:	4970      	ldr	r1, [pc, #448]	; (8015e2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8015c6c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8015c70:	880c      	ldrh	r4, [r1, #0]
 8015c72:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8015c76:	fb04 1303 	mla	r3, r4, r3, r1
 8015c7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c82:	7819      	ldrb	r1, [r3, #0]
 8015c84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c86:	4139      	asrs	r1, r7
 8015c88:	0a1b      	lsrs	r3, r3, #8
 8015c8a:	b2c9      	uxtb	r1, r1
 8015c8c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c94:	08db      	lsrs	r3, r3, #3
 8015c96:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8015c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8015c9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c9e:	00db      	lsls	r3, r3, #3
 8015ca0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015ca4:	9311      	str	r3, [sp, #68]	; 0x44
 8015ca6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8015caa:	fb0b ab16 	mls	fp, fp, r6, sl
 8015cae:	fb03 fa06 	mul.w	sl, r3, r6
 8015cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8015cb4:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8015cb8:	9312      	str	r3, [sp, #72]	; 0x48
 8015cba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8015cc0:	9b08      	ldr	r3, [sp, #32]
 8015cc2:	3b01      	subs	r3, #1
 8015cc4:	9308      	str	r3, [sp, #32]
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	f000 80c4 	beq.w	8015e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8015ccc:	46b2      	mov	sl, r6
 8015cce:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8015cd2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8015cd6:	f0c0 80ab 	bcc.w	8015e30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8015cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cdc:	400b      	ands	r3, r1
 8015cde:	d00a      	beq.n	8015cf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8015ce0:	9807      	ldr	r0, [sp, #28]
 8015ce2:	fb13 f300 	smulbb	r3, r3, r0
 8015ce6:	2bfe      	cmp	r3, #254	; 0xfe
 8015ce8:	dd59      	ble.n	8015d9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8015cea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015cec:	28ff      	cmp	r0, #255	; 0xff
 8015cee:	d156      	bne.n	8015d9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8015cf0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015cf2:	f8ae 4000 	strh.w	r4, [lr]
 8015cf6:	4447      	add	r7, r8
 8015cf8:	b2bf      	uxth	r7, r7
 8015cfa:	2f07      	cmp	r7, #7
 8015cfc:	bf89      	itett	hi
 8015cfe:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8015d00:	fa41 f109 	asrls.w	r1, r1, r9
 8015d04:	2700      	movhi	r7, #0
 8015d06:	7859      	ldrbhi	r1, [r3, #1]
 8015d08:	bf8a      	itet	hi
 8015d0a:	3301      	addhi	r3, #1
 8015d0c:	b2c9      	uxtbls	r1, r1
 8015d0e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8015d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d12:	449e      	add	lr, r3
 8015d14:	e7dd      	b.n	8015cd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8015d16:	441d      	add	r5, r3
 8015d18:	b22d      	sxth	r5, r5
 8015d1a:	e706      	b.n	8015b2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8015d1c:	f1ba 0f01 	cmp.w	sl, #1
 8015d20:	f47f af3f 	bne.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015d24:	f1b9 0f01 	cmp.w	r9, #1
 8015d28:	f47f af3b 	bne.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015d2c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8015e28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8015d30:	f8d9 0000 	ldr.w	r0, [r9]
 8015d34:	6803      	ldr	r3, [r0, #0]
 8015d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d38:	4798      	blx	r3
 8015d3a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8015d3e:	464a      	mov	r2, r9
 8015d40:	d006      	beq.n	8015d50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8015d42:	f1b8 0f04 	cmp.w	r8, #4
 8015d46:	d11a      	bne.n	8015d7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8015d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d4a:	3300      	adds	r3, #0
 8015d4c:	bf18      	it	ne
 8015d4e:	2301      	movne	r3, #1
 8015d50:	05c0      	lsls	r0, r0, #23
 8015d52:	f140 8088 	bpl.w	8015e66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8015d56:	f1b8 0f08 	cmp.w	r8, #8
 8015d5a:	f040 8084 	bne.w	8015e66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	bf14      	ite	ne
 8015d62:	2180      	movne	r1, #128	; 0x80
 8015d64:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	f040 80af 	bne.w	8015ecc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8015d6e:	2f00      	cmp	r7, #0
 8015d70:	f000 8083 	beq.w	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8015d74:	23ff      	movs	r3, #255	; 0xff
 8015d76:	46c1      	mov	r9, r8
 8015d78:	930a      	str	r3, [sp, #40]	; 0x28
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e728      	b.n	8015bd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	e7e6      	b.n	8015d50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8015d82:	46c1      	mov	r9, r8
 8015d84:	23ff      	movs	r3, #255	; 0xff
 8015d86:	e723      	b.n	8015bd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d88:	46c1      	mov	r9, r8
 8015d8a:	2355      	movs	r3, #85	; 0x55
 8015d8c:	e720      	b.n	8015bd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d8e:	23ff      	movs	r3, #255	; 0xff
 8015d90:	46c1      	mov	r9, r8
 8015d92:	930a      	str	r3, [sp, #40]	; 0x28
 8015d94:	2301      	movs	r3, #1
 8015d96:	9307      	str	r3, [sp, #28]
 8015d98:	e71d      	b.n	8015bd6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8015d9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015d9c:	e765      	b.n	8015c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8015d9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015da0:	f8be 5000 	ldrh.w	r5, [lr]
 8015da4:	fb10 f303 	smulbb	r3, r0, r3
 8015da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015daa:	122c      	asrs	r4, r5, #8
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8015db2:	1c58      	adds	r0, r3, #1
 8015db4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015db8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015dba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015dbe:	fa1f fc83 	uxth.w	ip, r3
 8015dc2:	43db      	mvns	r3, r3
 8015dc4:	fb10 f00c 	smulbb	r0, r0, ip
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	fb1c fb02 	smulbb	fp, ip, r2
 8015dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015dd0:	fb04 0403 	mla	r4, r4, r3, r0
 8015dd4:	10e8      	asrs	r0, r5, #3
 8015dd6:	fb1c fc02 	smulbb	ip, ip, r2
 8015dda:	00ed      	lsls	r5, r5, #3
 8015ddc:	b2a4      	uxth	r4, r4
 8015dde:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015de2:	b2ed      	uxtb	r5, r5
 8015de4:	fb00 b003 	mla	r0, r0, r3, fp
 8015de8:	fb05 cc03 	mla	ip, r5, r3, ip
 8015dec:	1c63      	adds	r3, r4, #1
 8015dee:	b280      	uxth	r0, r0
 8015df0:	fa1f fc8c 	uxth.w	ip, ip
 8015df4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8015df8:	f10c 0b01 	add.w	fp, ip, #1
 8015dfc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8015e00:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8015e04:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8015e08:	ea44 040b 	orr.w	r4, r4, fp
 8015e0c:	f100 0b01 	add.w	fp, r0, #1
 8015e10:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8015e14:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015e18:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015e1c:	ea44 040b 	orr.w	r4, r4, fp
 8015e20:	e767      	b.n	8015cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8015e22:	bf00      	nop
 8015e24:	20009bec 	.word	0x20009bec
 8015e28:	20009bf4 	.word	0x20009bf4
 8015e2c:	20009bee 	.word	0x20009bee
 8015e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e32:	b153      	cbz	r3, 8015e4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8015e34:	441f      	add	r7, r3
 8015e36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e38:	b2bf      	uxth	r7, r7
 8015e3a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8015e3e:	f007 0707 	and.w	r7, r7, #7
 8015e42:	7819      	ldrb	r1, [r3, #0]
 8015e44:	9328      	str	r3, [sp, #160]	; 0xa0
 8015e46:	4139      	asrs	r1, r7
 8015e48:	b2c9      	uxtb	r1, r1
 8015e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e4e:	441a      	add	r2, r3
 8015e50:	9209      	str	r2, [sp, #36]	; 0x24
 8015e52:	e735      	b.n	8015cc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8015e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d135      	bne.n	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015e5a:	4b21      	ldr	r3, [pc, #132]	; (8015ee0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8015e5c:	6818      	ldr	r0, [r3, #0]
 8015e5e:	6803      	ldr	r3, [r0, #0]
 8015e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e62:	4798      	blx	r3
 8015e64:	e02f      	b.n	8015ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	f43f ae9b 	beq.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e6c:	2e00      	cmp	r6, #0
 8015e6e:	f47f ae98 	bne.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e72:	2f00      	cmp	r7, #0
 8015e74:	f47f ae95 	bne.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e78:	2180      	movs	r1, #128	; 0x80
 8015e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015e7e:	18eb      	adds	r3, r5, r3
 8015e80:	4283      	cmp	r3, r0
 8015e82:	f73f ae8e 	bgt.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e86:	9b08      	ldr	r3, [sp, #32]
 8015e88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e8a:	445b      	add	r3, fp
 8015e8c:	4283      	cmp	r3, r0
 8015e8e:	f73f ae88 	bgt.w	8015ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e92:	f1b8 0f08 	cmp.w	r8, #8
 8015e96:	6810      	ldr	r0, [r2, #0]
 8015e98:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8015e9c:	bf18      	it	ne
 8015e9e:	3401      	addne	r4, #1
 8015ea0:	6805      	ldr	r5, [r0, #0]
 8015ea2:	9105      	str	r1, [sp, #20]
 8015ea4:	bf18      	it	ne
 8015ea6:	f024 0401 	bicne.w	r4, r4, #1
 8015eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015eac:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8015eb0:	bf18      	it	ne
 8015eb2:	b2a4      	uxthne	r4, r4
 8015eb4:	9104      	str	r1, [sp, #16]
 8015eb6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015eb8:	e9cd 4b00 	strd	r4, fp, [sp]
 8015ebc:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8015ec0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015ec2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8015ec4:	47a0      	blx	r4
 8015ec6:	b019      	add	sp, #100	; 0x64
 8015ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	f47f af5d 	bne.w	8015d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8015ed4:	23ff      	movs	r3, #255	; 0xff
 8015ed6:	46c1      	mov	r9, r8
 8015ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8015eda:	2301      	movs	r3, #1
 8015edc:	9307      	str	r3, [sp, #28]
 8015ede:	e687      	b.n	8015bf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015ee0:	20009bf4 	.word	0x20009bf4

08015ee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8015ee4:	b538      	push	{r3, r4, r5, lr}
 8015ee6:	4c15      	ldr	r4, [pc, #84]	; (8015f3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8015ee8:	4605      	mov	r5, r0
 8015eea:	7823      	ldrb	r3, [r4, #0]
 8015eec:	f3bf 8f5b 	dmb	ish
 8015ef0:	07da      	lsls	r2, r3, #31
 8015ef2:	d40b      	bmi.n	8015f0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f007 fc8c 	bl	801d812 <__cxa_guard_acquire>
 8015efa:	b138      	cbz	r0, 8015f0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8015efc:	4620      	mov	r0, r4
 8015efe:	f007 fc94 	bl	801d82a <__cxa_guard_release>
 8015f02:	4a0f      	ldr	r2, [pc, #60]	; (8015f40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8015f04:	490f      	ldr	r1, [pc, #60]	; (8015f44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8015f06:	4810      	ldr	r0, [pc, #64]	; (8015f48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8015f08:	f007 fc7c 	bl	801d804 <__aeabi_atexit>
 8015f0c:	4c0f      	ldr	r4, [pc, #60]	; (8015f4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8015f0e:	7823      	ldrb	r3, [r4, #0]
 8015f10:	f3bf 8f5b 	dmb	ish
 8015f14:	07db      	lsls	r3, r3, #31
 8015f16:	d40b      	bmi.n	8015f30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f007 fc7a 	bl	801d812 <__cxa_guard_acquire>
 8015f1e:	b138      	cbz	r0, 8015f30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8015f20:	4620      	mov	r0, r4
 8015f22:	f007 fc82 	bl	801d82a <__cxa_guard_release>
 8015f26:	4a06      	ldr	r2, [pc, #24]	; (8015f40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8015f28:	4909      	ldr	r1, [pc, #36]	; (8015f50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8015f2a:	480a      	ldr	r0, [pc, #40]	; (8015f54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8015f2c:	f007 fc6a 	bl	801d804 <__aeabi_atexit>
 8015f30:	4b05      	ldr	r3, [pc, #20]	; (8015f48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8015f32:	612b      	str	r3, [r5, #16]
 8015f34:	4b07      	ldr	r3, [pc, #28]	; (8015f54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8015f36:	616b      	str	r3, [r5, #20]
 8015f38:	bd38      	pop	{r3, r4, r5, pc}
 8015f3a:	bf00      	nop
 8015f3c:	20009cc0 	.word	0x20009cc0
 8015f40:	20000000 	.word	0x20000000
 8015f44:	080144e7 	.word	0x080144e7
 8015f48:	2000005c 	.word	0x2000005c
 8015f4c:	20009cc4 	.word	0x20009cc4
 8015f50:	080144e5 	.word	0x080144e5
 8015f54:	20000060 	.word	0x20000060

08015f58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8015f58:	b538      	push	{r3, r4, r5, lr}
 8015f5a:	4c15      	ldr	r4, [pc, #84]	; (8015fb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8015f5c:	4605      	mov	r5, r0
 8015f5e:	7823      	ldrb	r3, [r4, #0]
 8015f60:	f3bf 8f5b 	dmb	ish
 8015f64:	07da      	lsls	r2, r3, #31
 8015f66:	d40b      	bmi.n	8015f80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f007 fc52 	bl	801d812 <__cxa_guard_acquire>
 8015f6e:	b138      	cbz	r0, 8015f80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8015f70:	4620      	mov	r0, r4
 8015f72:	f007 fc5a 	bl	801d82a <__cxa_guard_release>
 8015f76:	4a0f      	ldr	r2, [pc, #60]	; (8015fb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8015f78:	490f      	ldr	r1, [pc, #60]	; (8015fb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8015f7a:	4810      	ldr	r0, [pc, #64]	; (8015fbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8015f7c:	f007 fc42 	bl	801d804 <__aeabi_atexit>
 8015f80:	4c0f      	ldr	r4, [pc, #60]	; (8015fc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8015f82:	7823      	ldrb	r3, [r4, #0]
 8015f84:	f3bf 8f5b 	dmb	ish
 8015f88:	07db      	lsls	r3, r3, #31
 8015f8a:	d40b      	bmi.n	8015fa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f007 fc40 	bl	801d812 <__cxa_guard_acquire>
 8015f92:	b138      	cbz	r0, 8015fa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015f94:	4620      	mov	r0, r4
 8015f96:	f007 fc48 	bl	801d82a <__cxa_guard_release>
 8015f9a:	4a06      	ldr	r2, [pc, #24]	; (8015fb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8015f9c:	4909      	ldr	r1, [pc, #36]	; (8015fc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8015f9e:	480a      	ldr	r0, [pc, #40]	; (8015fc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8015fa0:	f007 fc30 	bl	801d804 <__aeabi_atexit>
 8015fa4:	4b05      	ldr	r3, [pc, #20]	; (8015fbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8015fa6:	60ab      	str	r3, [r5, #8]
 8015fa8:	4b07      	ldr	r3, [pc, #28]	; (8015fc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8015faa:	60eb      	str	r3, [r5, #12]
 8015fac:	bd38      	pop	{r3, r4, r5, pc}
 8015fae:	bf00      	nop
 8015fb0:	20009c98 	.word	0x20009c98
 8015fb4:	20000000 	.word	0x20000000
 8015fb8:	080144eb 	.word	0x080144eb
 8015fbc:	20000034 	.word	0x20000034
 8015fc0:	20009c9c 	.word	0x20009c9c
 8015fc4:	080144e9 	.word	0x080144e9
 8015fc8:	20000038 	.word	0x20000038

08015fcc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8015fcc:	b510      	push	{r4, lr}
 8015fce:	4604      	mov	r4, r0
 8015fd0:	f7ff ff88 	bl	8015ee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fda:	f7ff bfbd 	b.w	8015f58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08015fe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8015fe0:	b538      	push	{r3, r4, r5, lr}
 8015fe2:	4c15      	ldr	r4, [pc, #84]	; (8016038 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8015fe4:	4605      	mov	r5, r0
 8015fe6:	7823      	ldrb	r3, [r4, #0]
 8015fe8:	f3bf 8f5b 	dmb	ish
 8015fec:	07da      	lsls	r2, r3, #31
 8015fee:	d40b      	bmi.n	8016008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f007 fc0e 	bl	801d812 <__cxa_guard_acquire>
 8015ff6:	b138      	cbz	r0, 8016008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f007 fc16 	bl	801d82a <__cxa_guard_release>
 8015ffe:	4a0f      	ldr	r2, [pc, #60]	; (801603c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016000:	490f      	ldr	r1, [pc, #60]	; (8016040 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016002:	4810      	ldr	r0, [pc, #64]	; (8016044 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016004:	f007 fbfe 	bl	801d804 <__aeabi_atexit>
 8016008:	4c0f      	ldr	r4, [pc, #60]	; (8016048 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801600a:	7823      	ldrb	r3, [r4, #0]
 801600c:	f3bf 8f5b 	dmb	ish
 8016010:	07db      	lsls	r3, r3, #31
 8016012:	d40b      	bmi.n	801602c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016014:	4620      	mov	r0, r4
 8016016:	f007 fbfc 	bl	801d812 <__cxa_guard_acquire>
 801601a:	b138      	cbz	r0, 801602c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801601c:	4620      	mov	r0, r4
 801601e:	f007 fc04 	bl	801d82a <__cxa_guard_release>
 8016022:	4a06      	ldr	r2, [pc, #24]	; (801603c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016024:	4909      	ldr	r1, [pc, #36]	; (801604c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016026:	480a      	ldr	r0, [pc, #40]	; (8016050 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016028:	f007 fbec 	bl	801d804 <__aeabi_atexit>
 801602c:	4b05      	ldr	r3, [pc, #20]	; (8016044 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801602e:	622b      	str	r3, [r5, #32]
 8016030:	4b07      	ldr	r3, [pc, #28]	; (8016050 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016032:	626b      	str	r3, [r5, #36]	; 0x24
 8016034:	bd38      	pop	{r3, r4, r5, pc}
 8016036:	bf00      	nop
 8016038:	20009cc8 	.word	0x20009cc8
 801603c:	20000000 	.word	0x20000000
 8016040:	080144df 	.word	0x080144df
 8016044:	20000064 	.word	0x20000064
 8016048:	20009ccc 	.word	0x20009ccc
 801604c:	080144dd 	.word	0x080144dd
 8016050:	20000068 	.word	0x20000068

08016054 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016054:	b538      	push	{r3, r4, r5, lr}
 8016056:	4c15      	ldr	r4, [pc, #84]	; (80160ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016058:	4605      	mov	r5, r0
 801605a:	7823      	ldrb	r3, [r4, #0]
 801605c:	f3bf 8f5b 	dmb	ish
 8016060:	07da      	lsls	r2, r3, #31
 8016062:	d40b      	bmi.n	801607c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016064:	4620      	mov	r0, r4
 8016066:	f007 fbd4 	bl	801d812 <__cxa_guard_acquire>
 801606a:	b138      	cbz	r0, 801607c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801606c:	4620      	mov	r0, r4
 801606e:	f007 fbdc 	bl	801d82a <__cxa_guard_release>
 8016072:	4a0f      	ldr	r2, [pc, #60]	; (80160b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016074:	490f      	ldr	r1, [pc, #60]	; (80160b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016076:	4810      	ldr	r0, [pc, #64]	; (80160b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016078:	f007 fbc4 	bl	801d804 <__aeabi_atexit>
 801607c:	4c0f      	ldr	r4, [pc, #60]	; (80160bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801607e:	7823      	ldrb	r3, [r4, #0]
 8016080:	f3bf 8f5b 	dmb	ish
 8016084:	07db      	lsls	r3, r3, #31
 8016086:	d40b      	bmi.n	80160a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016088:	4620      	mov	r0, r4
 801608a:	f007 fbc2 	bl	801d812 <__cxa_guard_acquire>
 801608e:	b138      	cbz	r0, 80160a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016090:	4620      	mov	r0, r4
 8016092:	f007 fbca 	bl	801d82a <__cxa_guard_release>
 8016096:	4a06      	ldr	r2, [pc, #24]	; (80160b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016098:	4909      	ldr	r1, [pc, #36]	; (80160c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801609a:	480a      	ldr	r0, [pc, #40]	; (80160c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801609c:	f007 fbb2 	bl	801d804 <__aeabi_atexit>
 80160a0:	4b05      	ldr	r3, [pc, #20]	; (80160b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80160a2:	61ab      	str	r3, [r5, #24]
 80160a4:	4b07      	ldr	r3, [pc, #28]	; (80160c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80160a6:	61eb      	str	r3, [r5, #28]
 80160a8:	bd38      	pop	{r3, r4, r5, pc}
 80160aa:	bf00      	nop
 80160ac:	20009ca0 	.word	0x20009ca0
 80160b0:	20000000 	.word	0x20000000
 80160b4:	080144e3 	.word	0x080144e3
 80160b8:	2000003c 	.word	0x2000003c
 80160bc:	20009ca4 	.word	0x20009ca4
 80160c0:	080144e1 	.word	0x080144e1
 80160c4:	20000040 	.word	0x20000040

080160c8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80160c8:	b510      	push	{r4, lr}
 80160ca:	4604      	mov	r4, r0
 80160cc:	f7ff ff88 	bl	8015fe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80160d0:	4620      	mov	r0, r4
 80160d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160d6:	f7ff bfbd 	b.w	8016054 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080160dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80160dc:	b538      	push	{r3, r4, r5, lr}
 80160de:	4c15      	ldr	r4, [pc, #84]	; (8016134 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80160e0:	4605      	mov	r5, r0
 80160e2:	7823      	ldrb	r3, [r4, #0]
 80160e4:	f3bf 8f5b 	dmb	ish
 80160e8:	07da      	lsls	r2, r3, #31
 80160ea:	d40b      	bmi.n	8016104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80160ec:	4620      	mov	r0, r4
 80160ee:	f007 fb90 	bl	801d812 <__cxa_guard_acquire>
 80160f2:	b138      	cbz	r0, 8016104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80160f4:	4620      	mov	r0, r4
 80160f6:	f007 fb98 	bl	801d82a <__cxa_guard_release>
 80160fa:	4a0f      	ldr	r2, [pc, #60]	; (8016138 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80160fc:	490f      	ldr	r1, [pc, #60]	; (801613c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80160fe:	4810      	ldr	r0, [pc, #64]	; (8016140 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016100:	f007 fb80 	bl	801d804 <__aeabi_atexit>
 8016104:	4c0f      	ldr	r4, [pc, #60]	; (8016144 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016106:	7823      	ldrb	r3, [r4, #0]
 8016108:	f3bf 8f5b 	dmb	ish
 801610c:	07db      	lsls	r3, r3, #31
 801610e:	d40b      	bmi.n	8016128 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016110:	4620      	mov	r0, r4
 8016112:	f007 fb7e 	bl	801d812 <__cxa_guard_acquire>
 8016116:	b138      	cbz	r0, 8016128 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016118:	4620      	mov	r0, r4
 801611a:	f007 fb86 	bl	801d82a <__cxa_guard_release>
 801611e:	4a06      	ldr	r2, [pc, #24]	; (8016138 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016120:	4909      	ldr	r1, [pc, #36]	; (8016148 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016122:	480a      	ldr	r0, [pc, #40]	; (801614c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016124:	f007 fb6e 	bl	801d804 <__aeabi_atexit>
 8016128:	4b05      	ldr	r3, [pc, #20]	; (8016140 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801612a:	632b      	str	r3, [r5, #48]	; 0x30
 801612c:	4b07      	ldr	r3, [pc, #28]	; (801614c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801612e:	636b      	str	r3, [r5, #52]	; 0x34
 8016130:	bd38      	pop	{r3, r4, r5, pc}
 8016132:	bf00      	nop
 8016134:	20009cd8 	.word	0x20009cd8
 8016138:	20000000 	.word	0x20000000
 801613c:	080144d7 	.word	0x080144d7
 8016140:	20000074 	.word	0x20000074
 8016144:	20009cdc 	.word	0x20009cdc
 8016148:	080144d5 	.word	0x080144d5
 801614c:	20000078 	.word	0x20000078

08016150 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016150:	b538      	push	{r3, r4, r5, lr}
 8016152:	4c15      	ldr	r4, [pc, #84]	; (80161a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016154:	4605      	mov	r5, r0
 8016156:	7823      	ldrb	r3, [r4, #0]
 8016158:	f3bf 8f5b 	dmb	ish
 801615c:	07da      	lsls	r2, r3, #31
 801615e:	d40b      	bmi.n	8016178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016160:	4620      	mov	r0, r4
 8016162:	f007 fb56 	bl	801d812 <__cxa_guard_acquire>
 8016166:	b138      	cbz	r0, 8016178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016168:	4620      	mov	r0, r4
 801616a:	f007 fb5e 	bl	801d82a <__cxa_guard_release>
 801616e:	4a0f      	ldr	r2, [pc, #60]	; (80161ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016170:	490f      	ldr	r1, [pc, #60]	; (80161b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016172:	4810      	ldr	r0, [pc, #64]	; (80161b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016174:	f007 fb46 	bl	801d804 <__aeabi_atexit>
 8016178:	4c0f      	ldr	r4, [pc, #60]	; (80161b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801617a:	7823      	ldrb	r3, [r4, #0]
 801617c:	f3bf 8f5b 	dmb	ish
 8016180:	07db      	lsls	r3, r3, #31
 8016182:	d40b      	bmi.n	801619c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016184:	4620      	mov	r0, r4
 8016186:	f007 fb44 	bl	801d812 <__cxa_guard_acquire>
 801618a:	b138      	cbz	r0, 801619c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801618c:	4620      	mov	r0, r4
 801618e:	f007 fb4c 	bl	801d82a <__cxa_guard_release>
 8016192:	4a06      	ldr	r2, [pc, #24]	; (80161ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016194:	4909      	ldr	r1, [pc, #36]	; (80161bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016196:	480a      	ldr	r0, [pc, #40]	; (80161c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016198:	f007 fb34 	bl	801d804 <__aeabi_atexit>
 801619c:	4b05      	ldr	r3, [pc, #20]	; (80161b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801619e:	62ab      	str	r3, [r5, #40]	; 0x28
 80161a0:	4b07      	ldr	r3, [pc, #28]	; (80161c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80161a2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80161a4:	bd38      	pop	{r3, r4, r5, pc}
 80161a6:	bf00      	nop
 80161a8:	20009ca8 	.word	0x20009ca8
 80161ac:	20000000 	.word	0x20000000
 80161b0:	080144db 	.word	0x080144db
 80161b4:	20000044 	.word	0x20000044
 80161b8:	20009cac 	.word	0x20009cac
 80161bc:	080144d9 	.word	0x080144d9
 80161c0:	20000048 	.word	0x20000048

080161c4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80161c4:	b510      	push	{r4, lr}
 80161c6:	4604      	mov	r4, r0
 80161c8:	f7ff ff88 	bl	80160dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80161cc:	4620      	mov	r0, r4
 80161ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161d2:	f7ff bfbd 	b.w	8016150 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080161d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80161d8:	b538      	push	{r3, r4, r5, lr}
 80161da:	4c15      	ldr	r4, [pc, #84]	; (8016230 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80161dc:	4605      	mov	r5, r0
 80161de:	7823      	ldrb	r3, [r4, #0]
 80161e0:	f3bf 8f5b 	dmb	ish
 80161e4:	07da      	lsls	r2, r3, #31
 80161e6:	d40b      	bmi.n	8016200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80161e8:	4620      	mov	r0, r4
 80161ea:	f007 fb12 	bl	801d812 <__cxa_guard_acquire>
 80161ee:	b138      	cbz	r0, 8016200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80161f0:	4620      	mov	r0, r4
 80161f2:	f007 fb1a 	bl	801d82a <__cxa_guard_release>
 80161f6:	4a0f      	ldr	r2, [pc, #60]	; (8016234 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80161f8:	490f      	ldr	r1, [pc, #60]	; (8016238 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80161fa:	4810      	ldr	r0, [pc, #64]	; (801623c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80161fc:	f007 fb02 	bl	801d804 <__aeabi_atexit>
 8016200:	4c0f      	ldr	r4, [pc, #60]	; (8016240 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8016202:	7823      	ldrb	r3, [r4, #0]
 8016204:	f3bf 8f5b 	dmb	ish
 8016208:	07db      	lsls	r3, r3, #31
 801620a:	d40b      	bmi.n	8016224 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801620c:	4620      	mov	r0, r4
 801620e:	f007 fb00 	bl	801d812 <__cxa_guard_acquire>
 8016212:	b138      	cbz	r0, 8016224 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8016214:	4620      	mov	r0, r4
 8016216:	f007 fb08 	bl	801d82a <__cxa_guard_release>
 801621a:	4a06      	ldr	r2, [pc, #24]	; (8016234 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801621c:	4909      	ldr	r1, [pc, #36]	; (8016244 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801621e:	480a      	ldr	r0, [pc, #40]	; (8016248 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8016220:	f007 faf0 	bl	801d804 <__aeabi_atexit>
 8016224:	4b05      	ldr	r3, [pc, #20]	; (801623c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8016226:	652b      	str	r3, [r5, #80]	; 0x50
 8016228:	4b07      	ldr	r3, [pc, #28]	; (8016248 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801622a:	656b      	str	r3, [r5, #84]	; 0x54
 801622c:	bd38      	pop	{r3, r4, r5, pc}
 801622e:	bf00      	nop
 8016230:	20009ce0 	.word	0x20009ce0
 8016234:	20000000 	.word	0x20000000
 8016238:	080144c7 	.word	0x080144c7
 801623c:	2000007c 	.word	0x2000007c
 8016240:	20009ce4 	.word	0x20009ce4
 8016244:	080144c5 	.word	0x080144c5
 8016248:	20000080 	.word	0x20000080

0801624c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801624c:	b538      	push	{r3, r4, r5, lr}
 801624e:	4c15      	ldr	r4, [pc, #84]	; (80162a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8016250:	4605      	mov	r5, r0
 8016252:	7823      	ldrb	r3, [r4, #0]
 8016254:	f3bf 8f5b 	dmb	ish
 8016258:	07da      	lsls	r2, r3, #31
 801625a:	d40b      	bmi.n	8016274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801625c:	4620      	mov	r0, r4
 801625e:	f007 fad8 	bl	801d812 <__cxa_guard_acquire>
 8016262:	b138      	cbz	r0, 8016274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8016264:	4620      	mov	r0, r4
 8016266:	f007 fae0 	bl	801d82a <__cxa_guard_release>
 801626a:	4a0f      	ldr	r2, [pc, #60]	; (80162a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801626c:	490f      	ldr	r1, [pc, #60]	; (80162ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801626e:	4810      	ldr	r0, [pc, #64]	; (80162b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8016270:	f007 fac8 	bl	801d804 <__aeabi_atexit>
 8016274:	4c0f      	ldr	r4, [pc, #60]	; (80162b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8016276:	7823      	ldrb	r3, [r4, #0]
 8016278:	f3bf 8f5b 	dmb	ish
 801627c:	07db      	lsls	r3, r3, #31
 801627e:	d40b      	bmi.n	8016298 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8016280:	4620      	mov	r0, r4
 8016282:	f007 fac6 	bl	801d812 <__cxa_guard_acquire>
 8016286:	b138      	cbz	r0, 8016298 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8016288:	4620      	mov	r0, r4
 801628a:	f007 face 	bl	801d82a <__cxa_guard_release>
 801628e:	4a06      	ldr	r2, [pc, #24]	; (80162a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8016290:	4909      	ldr	r1, [pc, #36]	; (80162b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8016292:	480a      	ldr	r0, [pc, #40]	; (80162bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8016294:	f007 fab6 	bl	801d804 <__aeabi_atexit>
 8016298:	4b05      	ldr	r3, [pc, #20]	; (80162b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801629a:	64ab      	str	r3, [r5, #72]	; 0x48
 801629c:	4b07      	ldr	r3, [pc, #28]	; (80162bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801629e:	64eb      	str	r3, [r5, #76]	; 0x4c
 80162a0:	bd38      	pop	{r3, r4, r5, pc}
 80162a2:	bf00      	nop
 80162a4:	20009ce8 	.word	0x20009ce8
 80162a8:	20000000 	.word	0x20000000
 80162ac:	080144cb 	.word	0x080144cb
 80162b0:	20000084 	.word	0x20000084
 80162b4:	20009cec 	.word	0x20009cec
 80162b8:	080144c9 	.word	0x080144c9
 80162bc:	20000088 	.word	0x20000088

080162c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4c15      	ldr	r4, [pc, #84]	; (8016318 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80162c4:	4605      	mov	r5, r0
 80162c6:	7823      	ldrb	r3, [r4, #0]
 80162c8:	f3bf 8f5b 	dmb	ish
 80162cc:	07da      	lsls	r2, r3, #31
 80162ce:	d40b      	bmi.n	80162e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80162d0:	4620      	mov	r0, r4
 80162d2:	f007 fa9e 	bl	801d812 <__cxa_guard_acquire>
 80162d6:	b138      	cbz	r0, 80162e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80162d8:	4620      	mov	r0, r4
 80162da:	f007 faa6 	bl	801d82a <__cxa_guard_release>
 80162de:	4a0f      	ldr	r2, [pc, #60]	; (801631c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80162e0:	490f      	ldr	r1, [pc, #60]	; (8016320 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80162e2:	4810      	ldr	r0, [pc, #64]	; (8016324 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80162e4:	f007 fa8e 	bl	801d804 <__aeabi_atexit>
 80162e8:	4c0f      	ldr	r4, [pc, #60]	; (8016328 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80162ea:	7823      	ldrb	r3, [r4, #0]
 80162ec:	f3bf 8f5b 	dmb	ish
 80162f0:	07db      	lsls	r3, r3, #31
 80162f2:	d40b      	bmi.n	801630c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80162f4:	4620      	mov	r0, r4
 80162f6:	f007 fa8c 	bl	801d812 <__cxa_guard_acquire>
 80162fa:	b138      	cbz	r0, 801630c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80162fc:	4620      	mov	r0, r4
 80162fe:	f007 fa94 	bl	801d82a <__cxa_guard_release>
 8016302:	4a06      	ldr	r2, [pc, #24]	; (801631c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8016304:	4909      	ldr	r1, [pc, #36]	; (801632c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8016306:	480a      	ldr	r0, [pc, #40]	; (8016330 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8016308:	f007 fa7c 	bl	801d804 <__aeabi_atexit>
 801630c:	4b05      	ldr	r3, [pc, #20]	; (8016324 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801630e:	642b      	str	r3, [r5, #64]	; 0x40
 8016310:	4b07      	ldr	r3, [pc, #28]	; (8016330 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8016312:	646b      	str	r3, [r5, #68]	; 0x44
 8016314:	bd38      	pop	{r3, r4, r5, pc}
 8016316:	bf00      	nop
 8016318:	20009cb0 	.word	0x20009cb0
 801631c:	20000000 	.word	0x20000000
 8016320:	080144cf 	.word	0x080144cf
 8016324:	2000004c 	.word	0x2000004c
 8016328:	20009cb4 	.word	0x20009cb4
 801632c:	080144cd 	.word	0x080144cd
 8016330:	20000050 	.word	0x20000050

08016334 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4c15      	ldr	r4, [pc, #84]	; (801638c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8016338:	4605      	mov	r5, r0
 801633a:	7823      	ldrb	r3, [r4, #0]
 801633c:	f3bf 8f5b 	dmb	ish
 8016340:	07da      	lsls	r2, r3, #31
 8016342:	d40b      	bmi.n	801635c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8016344:	4620      	mov	r0, r4
 8016346:	f007 fa64 	bl	801d812 <__cxa_guard_acquire>
 801634a:	b138      	cbz	r0, 801635c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801634c:	4620      	mov	r0, r4
 801634e:	f007 fa6c 	bl	801d82a <__cxa_guard_release>
 8016352:	4a0f      	ldr	r2, [pc, #60]	; (8016390 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8016354:	490f      	ldr	r1, [pc, #60]	; (8016394 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8016356:	4810      	ldr	r0, [pc, #64]	; (8016398 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8016358:	f007 fa54 	bl	801d804 <__aeabi_atexit>
 801635c:	4c0f      	ldr	r4, [pc, #60]	; (801639c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801635e:	7823      	ldrb	r3, [r4, #0]
 8016360:	f3bf 8f5b 	dmb	ish
 8016364:	07db      	lsls	r3, r3, #31
 8016366:	d40b      	bmi.n	8016380 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8016368:	4620      	mov	r0, r4
 801636a:	f007 fa52 	bl	801d812 <__cxa_guard_acquire>
 801636e:	b138      	cbz	r0, 8016380 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8016370:	4620      	mov	r0, r4
 8016372:	f007 fa5a 	bl	801d82a <__cxa_guard_release>
 8016376:	4a06      	ldr	r2, [pc, #24]	; (8016390 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8016378:	4909      	ldr	r1, [pc, #36]	; (80163a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801637a:	480a      	ldr	r0, [pc, #40]	; (80163a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801637c:	f007 fa42 	bl	801d804 <__aeabi_atexit>
 8016380:	4b05      	ldr	r3, [pc, #20]	; (8016398 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8016382:	63ab      	str	r3, [r5, #56]	; 0x38
 8016384:	4b07      	ldr	r3, [pc, #28]	; (80163a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8016386:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016388:	bd38      	pop	{r3, r4, r5, pc}
 801638a:	bf00      	nop
 801638c:	20009cd0 	.word	0x20009cd0
 8016390:	20000000 	.word	0x20000000
 8016394:	080144d3 	.word	0x080144d3
 8016398:	2000006c 	.word	0x2000006c
 801639c:	20009cd4 	.word	0x20009cd4
 80163a0:	080144d1 	.word	0x080144d1
 80163a4:	20000070 	.word	0x20000070

080163a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80163a8:	b510      	push	{r4, lr}
 80163aa:	4604      	mov	r4, r0
 80163ac:	f7ff ff14 	bl	80161d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80163b0:	4620      	mov	r0, r4
 80163b2:	f7ff ff85 	bl	80162c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80163b6:	4620      	mov	r0, r4
 80163b8:	f7ff ff48 	bl	801624c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80163bc:	4620      	mov	r0, r4
 80163be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c2:	f7ff bfb7 	b.w	8016334 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080163c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80163c8:	b538      	push	{r3, r4, r5, lr}
 80163ca:	4c15      	ldr	r4, [pc, #84]	; (8016420 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80163cc:	4605      	mov	r5, r0
 80163ce:	7823      	ldrb	r3, [r4, #0]
 80163d0:	f3bf 8f5b 	dmb	ish
 80163d4:	07da      	lsls	r2, r3, #31
 80163d6:	d40b      	bmi.n	80163f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80163d8:	4620      	mov	r0, r4
 80163da:	f007 fa1a 	bl	801d812 <__cxa_guard_acquire>
 80163de:	b138      	cbz	r0, 80163f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80163e0:	4620      	mov	r0, r4
 80163e2:	f007 fa22 	bl	801d82a <__cxa_guard_release>
 80163e6:	4a0f      	ldr	r2, [pc, #60]	; (8016424 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80163e8:	490f      	ldr	r1, [pc, #60]	; (8016428 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80163ea:	4810      	ldr	r0, [pc, #64]	; (801642c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80163ec:	f007 fa0a 	bl	801d804 <__aeabi_atexit>
 80163f0:	4c0f      	ldr	r4, [pc, #60]	; (8016430 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80163f2:	7823      	ldrb	r3, [r4, #0]
 80163f4:	f3bf 8f5b 	dmb	ish
 80163f8:	07db      	lsls	r3, r3, #31
 80163fa:	d40b      	bmi.n	8016414 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80163fc:	4620      	mov	r0, r4
 80163fe:	f007 fa08 	bl	801d812 <__cxa_guard_acquire>
 8016402:	b138      	cbz	r0, 8016414 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016404:	4620      	mov	r0, r4
 8016406:	f007 fa10 	bl	801d82a <__cxa_guard_release>
 801640a:	4a06      	ldr	r2, [pc, #24]	; (8016424 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801640c:	4909      	ldr	r1, [pc, #36]	; (8016434 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801640e:	480a      	ldr	r0, [pc, #40]	; (8016438 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016410:	f007 f9f8 	bl	801d804 <__aeabi_atexit>
 8016414:	4b05      	ldr	r3, [pc, #20]	; (801642c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016416:	662b      	str	r3, [r5, #96]	; 0x60
 8016418:	4b07      	ldr	r3, [pc, #28]	; (8016438 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801641a:	666b      	str	r3, [r5, #100]	; 0x64
 801641c:	bd38      	pop	{r3, r4, r5, pc}
 801641e:	bf00      	nop
 8016420:	20009cb8 	.word	0x20009cb8
 8016424:	20000000 	.word	0x20000000
 8016428:	080144bf 	.word	0x080144bf
 801642c:	20000054 	.word	0x20000054
 8016430:	20009cbc 	.word	0x20009cbc
 8016434:	080144bd 	.word	0x080144bd
 8016438:	20000058 	.word	0x20000058

0801643c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801643c:	b538      	push	{r3, r4, r5, lr}
 801643e:	4c15      	ldr	r4, [pc, #84]	; (8016494 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016440:	4605      	mov	r5, r0
 8016442:	7823      	ldrb	r3, [r4, #0]
 8016444:	f3bf 8f5b 	dmb	ish
 8016448:	07da      	lsls	r2, r3, #31
 801644a:	d40b      	bmi.n	8016464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801644c:	4620      	mov	r0, r4
 801644e:	f007 f9e0 	bl	801d812 <__cxa_guard_acquire>
 8016452:	b138      	cbz	r0, 8016464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016454:	4620      	mov	r0, r4
 8016456:	f007 f9e8 	bl	801d82a <__cxa_guard_release>
 801645a:	4a0f      	ldr	r2, [pc, #60]	; (8016498 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801645c:	490f      	ldr	r1, [pc, #60]	; (801649c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801645e:	4810      	ldr	r0, [pc, #64]	; (80164a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016460:	f007 f9d0 	bl	801d804 <__aeabi_atexit>
 8016464:	4c0f      	ldr	r4, [pc, #60]	; (80164a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8016466:	7823      	ldrb	r3, [r4, #0]
 8016468:	f3bf 8f5b 	dmb	ish
 801646c:	07db      	lsls	r3, r3, #31
 801646e:	d40b      	bmi.n	8016488 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016470:	4620      	mov	r0, r4
 8016472:	f007 f9ce 	bl	801d812 <__cxa_guard_acquire>
 8016476:	b138      	cbz	r0, 8016488 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016478:	4620      	mov	r0, r4
 801647a:	f007 f9d6 	bl	801d82a <__cxa_guard_release>
 801647e:	4a06      	ldr	r2, [pc, #24]	; (8016498 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016480:	4909      	ldr	r1, [pc, #36]	; (80164a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8016482:	480a      	ldr	r0, [pc, #40]	; (80164ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016484:	f007 f9be 	bl	801d804 <__aeabi_atexit>
 8016488:	4b05      	ldr	r3, [pc, #20]	; (80164a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801648a:	65ab      	str	r3, [r5, #88]	; 0x58
 801648c:	4b07      	ldr	r3, [pc, #28]	; (80164ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801648e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8016490:	bd38      	pop	{r3, r4, r5, pc}
 8016492:	bf00      	nop
 8016494:	20009c90 	.word	0x20009c90
 8016498:	20000000 	.word	0x20000000
 801649c:	080144c3 	.word	0x080144c3
 80164a0:	2000002c 	.word	0x2000002c
 80164a4:	20009c94 	.word	0x20009c94
 80164a8:	080144c1 	.word	0x080144c1
 80164ac:	20000030 	.word	0x20000030

080164b0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80164b0:	b510      	push	{r4, lr}
 80164b2:	4604      	mov	r4, r0
 80164b4:	f7ff ff88 	bl	80163c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80164b8:	4620      	mov	r0, r4
 80164ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164be:	f7ff bfbd 	b.w	801643c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080164c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	4c15      	ldr	r4, [pc, #84]	; (801651c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80164c8:	4605      	mov	r5, r0
 80164ca:	7823      	ldrb	r3, [r4, #0]
 80164cc:	f3bf 8f5b 	dmb	ish
 80164d0:	07da      	lsls	r2, r3, #31
 80164d2:	d40b      	bmi.n	80164ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80164d4:	4620      	mov	r0, r4
 80164d6:	f007 f99c 	bl	801d812 <__cxa_guard_acquire>
 80164da:	b138      	cbz	r0, 80164ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80164dc:	4620      	mov	r0, r4
 80164de:	f007 f9a4 	bl	801d82a <__cxa_guard_release>
 80164e2:	4a0f      	ldr	r2, [pc, #60]	; (8016520 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80164e4:	490f      	ldr	r1, [pc, #60]	; (8016524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80164e6:	4810      	ldr	r0, [pc, #64]	; (8016528 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80164e8:	f007 f98c 	bl	801d804 <__aeabi_atexit>
 80164ec:	4c0f      	ldr	r4, [pc, #60]	; (801652c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80164ee:	7823      	ldrb	r3, [r4, #0]
 80164f0:	f3bf 8f5b 	dmb	ish
 80164f4:	07db      	lsls	r3, r3, #31
 80164f6:	d40b      	bmi.n	8016510 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80164f8:	4620      	mov	r0, r4
 80164fa:	f007 f98a 	bl	801d812 <__cxa_guard_acquire>
 80164fe:	b138      	cbz	r0, 8016510 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016500:	4620      	mov	r0, r4
 8016502:	f007 f992 	bl	801d82a <__cxa_guard_release>
 8016506:	4a06      	ldr	r2, [pc, #24]	; (8016520 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016508:	4909      	ldr	r1, [pc, #36]	; (8016530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801650a:	480a      	ldr	r0, [pc, #40]	; (8016534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801650c:	f007 f97a 	bl	801d804 <__aeabi_atexit>
 8016510:	4b05      	ldr	r3, [pc, #20]	; (8016528 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016512:	672b      	str	r3, [r5, #112]	; 0x70
 8016514:	4b07      	ldr	r3, [pc, #28]	; (8016534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016516:	676b      	str	r3, [r5, #116]	; 0x74
 8016518:	bd38      	pop	{r3, r4, r5, pc}
 801651a:	bf00      	nop
 801651c:	20009c88 	.word	0x20009c88
 8016520:	20000000 	.word	0x20000000
 8016524:	080144b7 	.word	0x080144b7
 8016528:	20000024 	.word	0x20000024
 801652c:	20009c8c 	.word	0x20009c8c
 8016530:	080144b5 	.word	0x080144b5
 8016534:	20000028 	.word	0x20000028

08016538 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8016538:	b538      	push	{r3, r4, r5, lr}
 801653a:	4c15      	ldr	r4, [pc, #84]	; (8016590 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801653c:	4605      	mov	r5, r0
 801653e:	7823      	ldrb	r3, [r4, #0]
 8016540:	f3bf 8f5b 	dmb	ish
 8016544:	07da      	lsls	r2, r3, #31
 8016546:	d40b      	bmi.n	8016560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016548:	4620      	mov	r0, r4
 801654a:	f007 f962 	bl	801d812 <__cxa_guard_acquire>
 801654e:	b138      	cbz	r0, 8016560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016550:	4620      	mov	r0, r4
 8016552:	f007 f96a 	bl	801d82a <__cxa_guard_release>
 8016556:	4a0f      	ldr	r2, [pc, #60]	; (8016594 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016558:	490f      	ldr	r1, [pc, #60]	; (8016598 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801655a:	4810      	ldr	r0, [pc, #64]	; (801659c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801655c:	f007 f952 	bl	801d804 <__aeabi_atexit>
 8016560:	4c0f      	ldr	r4, [pc, #60]	; (80165a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8016562:	7823      	ldrb	r3, [r4, #0]
 8016564:	f3bf 8f5b 	dmb	ish
 8016568:	07db      	lsls	r3, r3, #31
 801656a:	d40b      	bmi.n	8016584 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801656c:	4620      	mov	r0, r4
 801656e:	f007 f950 	bl	801d812 <__cxa_guard_acquire>
 8016572:	b138      	cbz	r0, 8016584 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016574:	4620      	mov	r0, r4
 8016576:	f007 f958 	bl	801d82a <__cxa_guard_release>
 801657a:	4a06      	ldr	r2, [pc, #24]	; (8016594 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801657c:	4909      	ldr	r1, [pc, #36]	; (80165a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801657e:	480a      	ldr	r0, [pc, #40]	; (80165a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016580:	f007 f940 	bl	801d804 <__aeabi_atexit>
 8016584:	4b05      	ldr	r3, [pc, #20]	; (801659c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016586:	66ab      	str	r3, [r5, #104]	; 0x68
 8016588:	4b07      	ldr	r3, [pc, #28]	; (80165a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801658a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801658c:	bd38      	pop	{r3, r4, r5, pc}
 801658e:	bf00      	nop
 8016590:	20009c80 	.word	0x20009c80
 8016594:	20000000 	.word	0x20000000
 8016598:	080144bb 	.word	0x080144bb
 801659c:	2000001c 	.word	0x2000001c
 80165a0:	20009c84 	.word	0x20009c84
 80165a4:	080144b9 	.word	0x080144b9
 80165a8:	20000020 	.word	0x20000020

080165ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80165ac:	b510      	push	{r4, lr}
 80165ae:	4604      	mov	r4, r0
 80165b0:	f7ff ff88 	bl	80164c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80165b4:	4620      	mov	r0, r4
 80165b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165ba:	f7ff bfbd 	b.w	8016538 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080165be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80165be:	b510      	push	{r4, lr}
 80165c0:	4604      	mov	r4, r0
 80165c2:	f7ff fff3 	bl	80165ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80165c6:	4620      	mov	r0, r4
 80165c8:	f7ff ff72 	bl	80164b0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80165cc:	4620      	mov	r0, r4
 80165ce:	f7ff fdf9 	bl	80161c4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80165d2:	4620      	mov	r0, r4
 80165d4:	f7ff fcfa 	bl	8015fcc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80165d8:	4620      	mov	r0, r4
 80165da:	f7ff fd75 	bl	80160c8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80165de:	4620      	mov	r0, r4
 80165e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e4:	f7ff bee0 	b.w	80163a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080165e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80165e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ec:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80165f0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80165f4:	f1be 0f00 	cmp.w	lr, #0
 80165f8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80165fc:	fb0e 4708 	mla	r7, lr, r8, r4
 8016600:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8016604:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8016608:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801660c:	eb02 0a07 	add.w	sl, r2, r7
 8016610:	8808      	ldrh	r0, [r1, #0]
 8016612:	db37      	blt.n	8016684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8016614:	45f3      	cmp	fp, lr
 8016616:	dd35      	ble.n	8016684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8016618:	2c00      	cmp	r4, #0
 801661a:	db31      	blt.n	8016680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801661c:	45a0      	cmp	r8, r4
 801661e:	dd2f      	ble.n	8016680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8016620:	5dd2      	ldrb	r2, [r2, r7]
 8016622:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8016626:	1c62      	adds	r2, r4, #1
 8016628:	d42f      	bmi.n	801668a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801662a:	4590      	cmp	r8, r2
 801662c:	dd2d      	ble.n	801668a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801662e:	b366      	cbz	r6, 801668a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8016630:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016634:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8016638:	f11e 0e01 	adds.w	lr, lr, #1
 801663c:	d429      	bmi.n	8016692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801663e:	45f3      	cmp	fp, lr
 8016640:	dd27      	ble.n	8016692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8016642:	f1bc 0f00 	cmp.w	ip, #0
 8016646:	f000 80a0 	beq.w	801678a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801664a:	2c00      	cmp	r4, #0
 801664c:	db1f      	blt.n	801668e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801664e:	45a0      	cmp	r8, r4
 8016650:	dd1d      	ble.n	801668e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8016652:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8016656:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801665a:	3401      	adds	r4, #1
 801665c:	d41c      	bmi.n	8016698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801665e:	45a0      	cmp	r8, r4
 8016660:	dd1a      	ble.n	8016698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8016662:	b1de      	cbz	r6, 801669c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8016664:	44d0      	add	r8, sl
 8016666:	f898 2001 	ldrb.w	r2, [r8, #1]
 801666a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801666e:	2e0f      	cmp	r6, #15
 8016670:	d915      	bls.n	801669e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8016672:	4b49      	ldr	r3, [pc, #292]	; (8016798 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8016674:	f240 11ef 	movw	r1, #495	; 0x1ef
 8016678:	4a48      	ldr	r2, [pc, #288]	; (801679c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801667a:	4849      	ldr	r0, [pc, #292]	; (80167a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801667c:	f007 fe64 	bl	801e348 <__assert_func>
 8016680:	4681      	mov	r9, r0
 8016682:	e7d0      	b.n	8016626 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8016684:	4607      	mov	r7, r0
 8016686:	4681      	mov	r9, r0
 8016688:	e7d6      	b.n	8016638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801668a:	4607      	mov	r7, r0
 801668c:	e7d4      	b.n	8016638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801668e:	4686      	mov	lr, r0
 8016690:	e7e3      	b.n	801665a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8016692:	4603      	mov	r3, r0
 8016694:	4686      	mov	lr, r0
 8016696:	e7ea      	b.n	801666e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8016698:	4603      	mov	r3, r0
 801669a:	e7e8      	b.n	801666e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801669c:	4603      	mov	r3, r0
 801669e:	f1bc 0f0f 	cmp.w	ip, #15
 80166a2:	d8e6      	bhi.n	8016672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80166a4:	fb16 f80c 	smulbb	r8, r6, ip
 80166a8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80166ac:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80166b0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80166b4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80166b8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80166bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80166c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80166c4:	ea44 0909 	orr.w	r9, r4, r9
 80166c8:	f1cc 0410 	rsb	r4, ip, #16
 80166cc:	041a      	lsls	r2, r3, #16
 80166ce:	ea4a 0707 	orr.w	r7, sl, r7
 80166d2:	1ba4      	subs	r4, r4, r6
 80166d4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80166d8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80166dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80166e0:	4377      	muls	r7, r6
 80166e2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80166e6:	4313      	orrs	r3, r2
 80166e8:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80166ec:	fb04 7409 	mla	r4, r4, r9, r7
 80166f0:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80166f4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80166f8:	b2af      	uxth	r7, r5
 80166fa:	fb08 4303 	mla	r3, r8, r3, r4
 80166fe:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8016702:	43ed      	mvns	r5, r5
 8016704:	10c6      	asrs	r6, r0, #3
 8016706:	4322      	orrs	r2, r4
 8016708:	b2ed      	uxtb	r5, r5
 801670a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801670e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016712:	fb16 f605 	smulbb	r6, r6, r5
 8016716:	0d53      	lsrs	r3, r2, #21
 8016718:	0952      	lsrs	r2, r2, #5
 801671a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801671e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016722:	431a      	orrs	r2, r3
 8016724:	b293      	uxth	r3, r2
 8016726:	1202      	asrs	r2, r0, #8
 8016728:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801672c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8016730:	00dc      	lsls	r4, r3, #3
 8016732:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016736:	fb12 f205 	smulbb	r2, r2, r5
 801673a:	b2e4      	uxtb	r4, r4
 801673c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8016740:	10da      	asrs	r2, r3, #3
 8016742:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016746:	fa1f fc8c 	uxth.w	ip, ip
 801674a:	fb02 6207 	mla	r2, r2, r7, r6
 801674e:	f10c 0301 	add.w	r3, ip, #1
 8016752:	b296      	uxth	r6, r2
 8016754:	00c2      	lsls	r2, r0, #3
 8016756:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801675a:	b2d2      	uxtb	r2, r2
 801675c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016760:	fb12 f205 	smulbb	r2, r2, r5
 8016764:	fb04 2207 	mla	r2, r4, r7, r2
 8016768:	b292      	uxth	r2, r2
 801676a:	1c50      	adds	r0, r2, #1
 801676c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016770:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016774:	4313      	orrs	r3, r2
 8016776:	1c72      	adds	r2, r6, #1
 8016778:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801677c:	0952      	lsrs	r2, r2, #5
 801677e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016782:	4313      	orrs	r3, r2
 8016784:	800b      	strh	r3, [r1, #0]
 8016786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678a:	2e0f      	cmp	r6, #15
 801678c:	f63f af71 	bhi.w	8016672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8016790:	4603      	mov	r3, r0
 8016792:	4686      	mov	lr, r0
 8016794:	e786      	b.n	80166a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8016796:	bf00      	nop
 8016798:	08022952 	.word	0x08022952
 801679c:	08022fbe 	.word	0x08022fbe
 80167a0:	08022a3b 	.word	0x08022a3b

080167a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80167a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a8:	ed2d 8b08 	vpush	{d8-d11}
 80167ac:	b099      	sub	sp, #100	; 0x64
 80167ae:	eeb0 aa40 	vmov.f32	s20, s0
 80167b2:	eef0 9a60 	vmov.f32	s19, s1
 80167b6:	9215      	str	r2, [sp, #84]	; 0x54
 80167b8:	eeb0 9a41 	vmov.f32	s18, s2
 80167bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80167be:	eeb0 8a62 	vmov.f32	s16, s5
 80167c2:	9309      	str	r3, [sp, #36]	; 0x24
 80167c4:	eef0 8a43 	vmov.f32	s17, s6
 80167c8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80167cc:	eef0 ba44 	vmov.f32	s23, s8
 80167d0:	9016      	str	r0, [sp, #88]	; 0x58
 80167d2:	eeb0 ba64 	vmov.f32	s22, s9
 80167d6:	930d      	str	r3, [sp, #52]	; 0x34
 80167d8:	eef0 aa45 	vmov.f32	s21, s10
 80167dc:	6850      	ldr	r0, [r2, #4]
 80167de:	910c      	str	r1, [sp, #48]	; 0x30
 80167e0:	6812      	ldr	r2, [r2, #0]
 80167e2:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80167e6:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 80167ea:	fb00 1303 	mla	r3, r0, r3, r1
 80167ee:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80167f2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80167f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80167fa:	685e      	ldr	r6, [r3, #4]
 80167fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167fe:	3604      	adds	r6, #4
 8016800:	43db      	mvns	r3, r3
 8016802:	b2db      	uxtb	r3, r3
 8016804:	930a      	str	r3, [sp, #40]	; 0x28
 8016806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016808:	2b00      	cmp	r3, #0
 801680a:	dc03      	bgt.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801680c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801680e:	2b00      	cmp	r3, #0
 8016810:	f340 8226 	ble.w	8016c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8016814:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016816:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801681a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801681e:	1e48      	subs	r0, r1, #1
 8016820:	1e57      	subs	r7, r2, #1
 8016822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016824:	2b00      	cmp	r3, #0
 8016826:	f340 80e4 	ble.w	80169f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801682a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801682e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8016832:	d406      	bmi.n	8016842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016834:	4584      	cmp	ip, r0
 8016836:	da04      	bge.n	8016842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016838:	2b00      	cmp	r3, #0
 801683a:	db02      	blt.n	8016842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801683c:	42bb      	cmp	r3, r7
 801683e:	f2c0 80d9 	blt.w	80169f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8016842:	f11c 0c01 	adds.w	ip, ip, #1
 8016846:	f100 80ca 	bmi.w	80169de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801684a:	4561      	cmp	r1, ip
 801684c:	f2c0 80c7 	blt.w	80169de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8016850:	3301      	adds	r3, #1
 8016852:	f100 80c4 	bmi.w	80169de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8016856:	429a      	cmp	r2, r3
 8016858:	f2c0 80c1 	blt.w	80169de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801685c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8016860:	4647      	mov	r7, r8
 8016862:	f1bb 0f00 	cmp.w	fp, #0
 8016866:	f340 80e4 	ble.w	8016a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801686a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801686c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8016870:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016872:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8016876:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801687a:	ea5f 422a 	movs.w	r2, sl, asr #16
 801687e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016882:	689b      	ldr	r3, [r3, #8]
 8016884:	f100 8122 	bmi.w	8016acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8016888:	f103 39ff 	add.w	r9, r3, #4294967295
 801688c:	454a      	cmp	r2, r9
 801688e:	f280 811d 	bge.w	8016acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8016892:	f1bc 0f00 	cmp.w	ip, #0
 8016896:	f2c0 8119 	blt.w	8016acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801689a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801689e:	45cc      	cmp	ip, r9
 80168a0:	f280 8114 	bge.w	8016acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80168a4:	b21b      	sxth	r3, r3
 80168a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80168a8:	fb0c 2203 	mla	r2, ip, r3, r2
 80168ac:	eb04 0902 	add.w	r9, r4, r2
 80168b0:	5ca2      	ldrb	r2, [r4, r2]
 80168b2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80168b6:	2800      	cmp	r0, #0
 80168b8:	f000 80ff 	beq.w	8016aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80168bc:	f899 2001 	ldrb.w	r2, [r9, #1]
 80168c0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80168c4:	9211      	str	r2, [sp, #68]	; 0x44
 80168c6:	b151      	cbz	r1, 80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80168c8:	eb09 0203 	add.w	r2, r9, r3
 80168cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80168d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80168d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80168d6:	7853      	ldrb	r3, [r2, #1]
 80168d8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80168dc:	9312      	str	r3, [sp, #72]	; 0x48
 80168de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80168e0:	fb10 f201 	smulbb	r2, r0, r1
 80168e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80168e6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80168ea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80168ee:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80168f2:	10d2      	asrs	r2, r2, #3
 80168f4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80168f8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80168fc:	ea4c 0c03 	orr.w	ip, ip, r3
 8016900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016902:	041b      	lsls	r3, r3, #16
 8016904:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016908:	4323      	orrs	r3, r4
 801690a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801690c:	4353      	muls	r3, r2
 801690e:	fb09 330c 	mla	r3, r9, ip, r3
 8016912:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8016916:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801691a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801691e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8016922:	f1c1 0c10 	rsb	ip, r1, #16
 8016926:	ebac 0c00 	sub.w	ip, ip, r0
 801692a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801692e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016932:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8016936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016938:	0418      	lsls	r0, r3, #16
 801693a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801693e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016942:	4318      	orrs	r0, r3
 8016944:	fb02 c200 	mla	r2, r2, r0, ip
 8016948:	f8b7 c000 	ldrh.w	ip, [r7]
 801694c:	0d53      	lsrs	r3, r2, #21
 801694e:	0952      	lsrs	r2, r2, #5
 8016950:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016954:	ea4f 212c 	mov.w	r1, ip, asr #8
 8016958:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801695c:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8016960:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016964:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016968:	431a      	orrs	r2, r3
 801696a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801696e:	fb11 f104 	smulbb	r1, r1, r4
 8016972:	fa5f fc8c 	uxtb.w	ip, ip
 8016976:	b292      	uxth	r2, r2
 8016978:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801697c:	fb1c fc04 	smulbb	ip, ip, r4
 8016980:	fb1e fe04 	smulbb	lr, lr, r4
 8016984:	1210      	asrs	r0, r2, #8
 8016986:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801698a:	fb00 1003 	mla	r0, r0, r3, r1
 801698e:	10d1      	asrs	r1, r2, #3
 8016990:	00d2      	lsls	r2, r2, #3
 8016992:	b280      	uxth	r0, r0
 8016994:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016998:	b2d2      	uxtb	r2, r2
 801699a:	fb01 e103 	mla	r1, r1, r3, lr
 801699e:	fb02 c203 	mla	r2, r2, r3, ip
 80169a2:	1c43      	adds	r3, r0, #1
 80169a4:	b289      	uxth	r1, r1
 80169a6:	b292      	uxth	r2, r2
 80169a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80169ac:	f102 0c01 	add.w	ip, r2, #1
 80169b0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80169b4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80169b8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80169bc:	4313      	orrs	r3, r2
 80169be:	1c4a      	adds	r2, r1, #1
 80169c0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80169c4:	0949      	lsrs	r1, r1, #5
 80169c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80169ca:	430b      	orrs	r3, r1
 80169cc:	803b      	strh	r3, [r7, #0]
 80169ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169d0:	3702      	adds	r7, #2
 80169d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80169d6:	449a      	add	sl, r3
 80169d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169da:	441d      	add	r5, r3
 80169dc:	e741      	b.n	8016862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80169de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169e0:	f108 0802 	add.w	r8, r8, #2
 80169e4:	449a      	add	sl, r3
 80169e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169e8:	441d      	add	r5, r3
 80169ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ec:	3b01      	subs	r3, #1
 80169ee:	9309      	str	r3, [sp, #36]	; 0x24
 80169f0:	e717      	b.n	8016822 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80169f2:	d023      	beq.n	8016a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80169f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80169f8:	3b01      	subs	r3, #1
 80169fa:	fb00 a003 	mla	r0, r0, r3, sl
 80169fe:	1400      	asrs	r0, r0, #16
 8016a00:	f53f af2c 	bmi.w	801685c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a04:	3901      	subs	r1, #1
 8016a06:	4288      	cmp	r0, r1
 8016a08:	f6bf af28 	bge.w	801685c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a0c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8016a0e:	fb01 5303 	mla	r3, r1, r3, r5
 8016a12:	141b      	asrs	r3, r3, #16
 8016a14:	f53f af22 	bmi.w	801685c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a18:	3a01      	subs	r2, #1
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	f6bf af1e 	bge.w	801685c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a20:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8016a24:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8016a28:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016a2c:	f1be 0f00 	cmp.w	lr, #0
 8016a30:	dc6c      	bgt.n	8016b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8016a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a34:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016a38:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8016a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	f340 810e 	ble.w	8016c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8016a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016a4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016a4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016a52:	eef0 6a48 	vmov.f32	s13, s16
 8016a56:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016a5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016a5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a62:	ee16 aa90 	vmov	sl, s13
 8016a66:	eef0 6a68 	vmov.f32	s13, s17
 8016a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a6e:	ee16 5a90 	vmov	r5, s13
 8016a72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016a76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016a7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016a7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016a82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016a86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016a8a:	ee18 2a10 	vmov	r2, s16
 8016a8e:	eeb0 8a47 	vmov.f32	s16, s14
 8016a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a96:	ee18 2a90 	vmov	r2, s17
 8016a9a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016a9e:	eef0 8a67 	vmov.f32	s17, s15
 8016aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016aa6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016aac:	3b01      	subs	r3, #1
 8016aae:	930c      	str	r3, [sp, #48]	; 0x30
 8016ab0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016ab2:	bf08      	it	eq
 8016ab4:	4613      	moveq	r3, r2
 8016ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ab8:	e6a5      	b.n	8016806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016aba:	2900      	cmp	r1, #0
 8016abc:	f43f af0f 	beq.w	80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016ac0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016ac4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8016aca:	e708      	b.n	80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016acc:	f112 0901 	adds.w	r9, r2, #1
 8016ad0:	f53f af7d 	bmi.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016ad4:	454b      	cmp	r3, r9
 8016ad6:	f6ff af7a 	blt.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016ada:	f11c 0901 	adds.w	r9, ip, #1
 8016ade:	f53f af76 	bmi.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016ae2:	45ce      	cmp	lr, r9
 8016ae4:	f6ff af73 	blt.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016ae8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016aea:	b21b      	sxth	r3, r3
 8016aec:	9202      	str	r2, [sp, #8]
 8016aee:	fa0f f28e 	sxth.w	r2, lr
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	4633      	mov	r3, r6
 8016af6:	9201      	str	r2, [sp, #4]
 8016af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016afa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8016afe:	e9cd c003 	strd	ip, r0, [sp, #12]
 8016b02:	4639      	mov	r1, r7
 8016b04:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016b06:	f7ff fd6f 	bl	80165e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8016b0a:	e760      	b.n	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016b0c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016b0e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8016b12:	1429      	asrs	r1, r5, #16
 8016b14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016b16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016b1a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8016b1e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8016b22:	fb03 2101 	mla	r1, r3, r1, r2
 8016b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b28:	440a      	add	r2, r1
 8016b2a:	5c61      	ldrb	r1, [r4, r1]
 8016b2c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8016b30:	f1bc 0f00 	cmp.w	ip, #0
 8016b34:	f000 808c 	beq.w	8016c50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8016b38:	7857      	ldrb	r7, [r2, #1]
 8016b3a:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8016b3e:	9413      	str	r4, [sp, #76]	; 0x4c
 8016b40:	b140      	cbz	r0, 8016b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8016b42:	18d7      	adds	r7, r2, r3
 8016b44:	5cd3      	ldrb	r3, [r2, r3]
 8016b46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8016b4c:	787b      	ldrb	r3, [r7, #1]
 8016b4e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016b52:	9314      	str	r3, [sp, #80]	; 0x50
 8016b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b56:	fb1c f200 	smulbb	r2, ip, r0
 8016b5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b5c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016b60:	041f      	lsls	r7, r3, #16
 8016b62:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016b66:	10d2      	asrs	r2, r2, #3
 8016b68:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8016b6c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8016b70:	431f      	orrs	r7, r3
 8016b72:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8016b76:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b7a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8016b7c:	041b      	lsls	r3, r3, #16
 8016b7e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016b82:	ea43 030b 	orr.w	r3, r3, fp
 8016b86:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016b8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016b8e:	4353      	muls	r3, r2
 8016b90:	fb04 3707 	mla	r7, r4, r7, r3
 8016b94:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8016b98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016b9a:	ea43 0b01 	orr.w	fp, r3, r1
 8016b9e:	f1c0 0110 	rsb	r1, r0, #16
 8016ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ba4:	eba1 0c0c 	sub.w	ip, r1, ip
 8016ba8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016bac:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8016bb0:	fb0c 770b 	mla	r7, ip, fp, r7
 8016bb4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016bb8:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8016bbc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016bc0:	ea4c 0c0b 	orr.w	ip, ip, fp
 8016bc4:	fb02 770c 	mla	r7, r2, ip, r7
 8016bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bca:	0d79      	lsrs	r1, r7, #21
 8016bcc:	8812      	ldrh	r2, [r2, #0]
 8016bce:	097f      	lsrs	r7, r7, #5
 8016bd0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016bd4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016bd8:	430f      	orrs	r7, r1
 8016bda:	1211      	asrs	r1, r2, #8
 8016bdc:	b2bb      	uxth	r3, r7
 8016bde:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016be2:	10d7      	asrs	r7, r2, #3
 8016be4:	fb11 f104 	smulbb	r1, r1, r4
 8016be8:	1218      	asrs	r0, r3, #8
 8016bea:	00d2      	lsls	r2, r2, #3
 8016bec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016bf0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016bf4:	fb17 f704 	smulbb	r7, r7, r4
 8016bf8:	b2d2      	uxtb	r2, r2
 8016bfa:	fb00 1009 	mla	r0, r0, r9, r1
 8016bfe:	10d9      	asrs	r1, r3, #3
 8016c00:	fb12 f204 	smulbb	r2, r2, r4
 8016c04:	00db      	lsls	r3, r3, #3
 8016c06:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016c0a:	b280      	uxth	r0, r0
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	fb01 7109 	mla	r1, r1, r9, r7
 8016c12:	fb03 2309 	mla	r3, r3, r9, r2
 8016c16:	1c42      	adds	r2, r0, #1
 8016c18:	b289      	uxth	r1, r1
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8016c20:	1c4f      	adds	r7, r1, #1
 8016c22:	1c5a      	adds	r2, r3, #1
 8016c24:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016c28:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8016c2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c32:	0949      	lsrs	r1, r1, #5
 8016c34:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016c38:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016c3c:	4310      	orrs	r0, r2
 8016c3e:	4308      	orrs	r0, r1
 8016c40:	f823 0b02 	strh.w	r0, [r3], #2
 8016c44:	930e      	str	r3, [sp, #56]	; 0x38
 8016c46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c48:	449a      	add	sl, r3
 8016c4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c4c:	441d      	add	r5, r3
 8016c4e:	e6ed      	b.n	8016a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	f43f af7f 	beq.w	8016b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8016c56:	5cd3      	ldrb	r3, [r2, r3]
 8016c58:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016c5c:	9310      	str	r3, [sp, #64]	; 0x40
 8016c5e:	e779      	b.n	8016b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8016c60:	b019      	add	sp, #100	; 0x64
 8016c62:	ecbd 8b08 	vpop	{d8-d11}
 8016c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8016c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c70:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8016c74:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8016c78:	2e00      	cmp	r6, #0
 8016c7a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016c7e:	fb06 570e 	mla	r7, r6, lr, r5
 8016c82:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8016c86:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8016c8a:	eb02 0807 	add.w	r8, r2, r7
 8016c8e:	8808      	ldrh	r0, [r1, #0]
 8016c90:	db38      	blt.n	8016d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8016c92:	45b1      	cmp	r9, r6
 8016c94:	dd36      	ble.n	8016d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8016c96:	2d00      	cmp	r5, #0
 8016c98:	db32      	blt.n	8016d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016c9a:	45ae      	cmp	lr, r5
 8016c9c:	dd30      	ble.n	8016d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016c9e:	5dd2      	ldrb	r2, [r2, r7]
 8016ca0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8016ca4:	1c6a      	adds	r2, r5, #1
 8016ca6:	d430      	bmi.n	8016d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016ca8:	4596      	cmp	lr, r2
 8016caa:	dd2e      	ble.n	8016d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016cac:	b36c      	cbz	r4, 8016d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016cae:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016cb2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8016cb6:	3601      	adds	r6, #1
 8016cb8:	d42b      	bmi.n	8016d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016cba:	45b1      	cmp	r9, r6
 8016cbc:	dd29      	ble.n	8016d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016cbe:	f1bc 0f00 	cmp.w	ip, #0
 8016cc2:	d028      	beq.n	8016d16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8016cc4:	2d00      	cmp	r5, #0
 8016cc6:	db22      	blt.n	8016d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016cc8:	45ae      	cmp	lr, r5
 8016cca:	dd20      	ble.n	8016d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016ccc:	f818 600e 	ldrb.w	r6, [r8, lr]
 8016cd0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8016cd4:	3501      	adds	r5, #1
 8016cd6:	d407      	bmi.n	8016ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016cd8:	45ae      	cmp	lr, r5
 8016cda:	dd05      	ble.n	8016ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016cdc:	b134      	cbz	r4, 8016cec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8016cde:	44c6      	add	lr, r8
 8016ce0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8016ce4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016ce8:	2c0f      	cmp	r4, #15
 8016cea:	d802      	bhi.n	8016cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8016cec:	f1bc 0f0f 	cmp.w	ip, #15
 8016cf0:	d914      	bls.n	8016d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8016cf2:	4b26      	ldr	r3, [pc, #152]	; (8016d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8016cf4:	f240 11ef 	movw	r1, #495	; 0x1ef
 8016cf8:	4a25      	ldr	r2, [pc, #148]	; (8016d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8016cfa:	4826      	ldr	r0, [pc, #152]	; (8016d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8016cfc:	f007 fb24 	bl	801e348 <__assert_func>
 8016d00:	4607      	mov	r7, r0
 8016d02:	e7cf      	b.n	8016ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8016d04:	4602      	mov	r2, r0
 8016d06:	4607      	mov	r7, r0
 8016d08:	e7d5      	b.n	8016cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	e7d3      	b.n	8016cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8016d0e:	4606      	mov	r6, r0
 8016d10:	e7e0      	b.n	8016cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8016d12:	4606      	mov	r6, r0
 8016d14:	e7e8      	b.n	8016ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016d16:	2c0f      	cmp	r4, #15
 8016d18:	d8eb      	bhi.n	8016cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8016d1a:	4606      	mov	r6, r0
 8016d1c:	fb14 f30c 	smulbb	r3, r4, ip
 8016d20:	043d      	lsls	r5, r7, #16
 8016d22:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8016d26:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016d2a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8016d2e:	10db      	asrs	r3, r3, #3
 8016d30:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8016d34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016d38:	432f      	orrs	r7, r5
 8016d3a:	f1cc 0510 	rsb	r5, ip, #16
 8016d3e:	ea4e 0202 	orr.w	r2, lr, r2
 8016d42:	1b2d      	subs	r5, r5, r4
 8016d44:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8016d48:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8016d4c:	4354      	muls	r4, r2
 8016d4e:	fb05 4507 	mla	r5, r5, r7, r4
 8016d52:	0404      	lsls	r4, r0, #16
 8016d54:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016d58:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8016d5c:	4320      	orrs	r0, r4
 8016d5e:	fb03 5400 	mla	r4, r3, r0, r5
 8016d62:	0430      	lsls	r0, r6, #16
 8016d64:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8016d68:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8016d6c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016d70:	4330      	orrs	r0, r6
 8016d72:	fb03 4000 	mla	r0, r3, r0, r4
 8016d76:	0d43      	lsrs	r3, r0, #21
 8016d78:	0940      	lsrs	r0, r0, #5
 8016d7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016d7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016d82:	4318      	orrs	r0, r3
 8016d84:	8008      	strh	r0, [r1, #0]
 8016d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d8a:	bf00      	nop
 8016d8c:	08022952 	.word	0x08022952
 8016d90:	08022fbe 	.word	0x08022fbe
 8016d94:	08022a3b 	.word	0x08022a3b

08016d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d9c:	ed2d 8b0a 	vpush	{d8-d12}
 8016da0:	b093      	sub	sp, #76	; 0x4c
 8016da2:	eeb0 aa40 	vmov.f32	s20, s0
 8016da6:	eef0 9a60 	vmov.f32	s19, s1
 8016daa:	920f      	str	r2, [sp, #60]	; 0x3c
 8016dac:	eeb0 9a41 	vmov.f32	s18, s2
 8016db0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016db2:	eeb0 8a62 	vmov.f32	s16, s5
 8016db6:	9010      	str	r0, [sp, #64]	; 0x40
 8016db8:	eef0 8a43 	vmov.f32	s17, s6
 8016dbc:	6850      	ldr	r0, [r2, #4]
 8016dbe:	eeb0 ca44 	vmov.f32	s24, s8
 8016dc2:	9108      	str	r1, [sp, #32]
 8016dc4:	eef0 ba64 	vmov.f32	s23, s9
 8016dc8:	9306      	str	r3, [sp, #24]
 8016dca:	eeb0 ba45 	vmov.f32	s22, s10
 8016dce:	6812      	ldr	r2, [r2, #0]
 8016dd0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8016dd4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8016dd8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8016ddc:	fb00 1303 	mla	r3, r0, r3, r1
 8016de0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8016de4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	9307      	str	r3, [sp, #28]
 8016dea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016dec:	685f      	ldr	r7, [r3, #4]
 8016dee:	3704      	adds	r7, #4
 8016df0:	9b08      	ldr	r3, [sp, #32]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	dc03      	bgt.n	8016dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	f340 81b2 	ble.w	8017162 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8016dfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e08:	1e48      	subs	r0, r1, #1
 8016e0a:	f102 3cff 	add.w	ip, r2, #4294967295
 8016e0e:	9b06      	ldr	r3, [sp, #24]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	f340 80a9 	ble.w	8016f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8016e16:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8016e1a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016e1e:	d406      	bmi.n	8016e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e20:	4586      	cmp	lr, r0
 8016e22:	da04      	bge.n	8016e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	db02      	blt.n	8016e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e28:	4563      	cmp	r3, ip
 8016e2a:	f2c0 809e 	blt.w	8016f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8016e2e:	f11e 0e01 	adds.w	lr, lr, #1
 8016e32:	f100 808f 	bmi.w	8016f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8016e36:	4571      	cmp	r1, lr
 8016e38:	f2c0 808c 	blt.w	8016f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	f100 8089 	bmi.w	8016f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8016e42:	429a      	cmp	r2, r3
 8016e44:	f2c0 8086 	blt.w	8016f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8016e48:	f8dd b018 	ldr.w	fp, [sp, #24]
 8016e4c:	46c8      	mov	r8, r9
 8016e4e:	f1bb 0f00 	cmp.w	fp, #0
 8016e52:	f340 80a6 	ble.w	8016fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8016e56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016e58:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8016e5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e5e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8016e62:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8016e66:	1422      	asrs	r2, r4, #16
 8016e68:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016e6c:	689b      	ldr	r3, [r3, #8]
 8016e6e:	f100 80e3 	bmi.w	8017038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016e72:	f103 3aff 	add.w	sl, r3, #4294967295
 8016e76:	4552      	cmp	r2, sl
 8016e78:	f280 80de 	bge.w	8017038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016e7c:	f1bc 0f00 	cmp.w	ip, #0
 8016e80:	f2c0 80da 	blt.w	8017038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016e84:	f10e 3aff 	add.w	sl, lr, #4294967295
 8016e88:	45d4      	cmp	ip, sl
 8016e8a:	f280 80d5 	bge.w	8017038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016e8e:	b21b      	sxth	r3, r3
 8016e90:	9d07      	ldr	r5, [sp, #28]
 8016e92:	fb0c 2203 	mla	r2, ip, r3, r2
 8016e96:	eb05 0a02 	add.w	sl, r5, r2
 8016e9a:	5caa      	ldrb	r2, [r5, r2]
 8016e9c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	f000 80c0 	beq.w	8017026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8016ea6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016eaa:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8016eae:	920b      	str	r2, [sp, #44]	; 0x2c
 8016eb0:	b151      	cbz	r1, 8016ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8016eb2:	eb0a 0203 	add.w	r2, sl, r3
 8016eb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8016eba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8016ec0:	7853      	ldrb	r3, [r2, #1]
 8016ec2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eca:	fb10 f201 	smulbb	r2, r0, r1
 8016ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ed0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016ed4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016ed8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8016edc:	10d2      	asrs	r2, r2, #3
 8016ede:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016ee2:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8016ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8016eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016eec:	041b      	lsls	r3, r3, #16
 8016eee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016ef2:	432b      	orrs	r3, r5
 8016ef4:	4353      	muls	r3, r2
 8016ef6:	fb0a 330c 	mla	r3, sl, ip, r3
 8016efa:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8016efe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8016f02:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016f06:	ea4c 0e0e 	orr.w	lr, ip, lr
 8016f0a:	f1c1 0c10 	rsb	ip, r1, #16
 8016f0e:	ebac 0c00 	sub.w	ip, ip, r0
 8016f12:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016f16:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016f1a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8016f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f20:	0418      	lsls	r0, r3, #16
 8016f22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016f26:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016f2a:	4318      	orrs	r0, r3
 8016f2c:	fb02 c200 	mla	r2, r2, r0, ip
 8016f30:	0d53      	lsrs	r3, r2, #21
 8016f32:	0952      	lsrs	r2, r2, #5
 8016f34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016f38:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016f3c:	431a      	orrs	r2, r3
 8016f3e:	f8a8 2000 	strh.w	r2, [r8]
 8016f42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016f44:	f108 0802 	add.w	r8, r8, #2
 8016f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016f4c:	441c      	add	r4, r3
 8016f4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f50:	441e      	add	r6, r3
 8016f52:	e77c      	b.n	8016e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8016f54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016f56:	f109 0902 	add.w	r9, r9, #2
 8016f5a:	441c      	add	r4, r3
 8016f5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f5e:	441e      	add	r6, r3
 8016f60:	9b06      	ldr	r3, [sp, #24]
 8016f62:	3b01      	subs	r3, #1
 8016f64:	9306      	str	r3, [sp, #24]
 8016f66:	e752      	b.n	8016e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016f68:	d020      	beq.n	8016fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8016f6a:	9b06      	ldr	r3, [sp, #24]
 8016f6c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	fb00 4003 	mla	r0, r0, r3, r4
 8016f74:	1400      	asrs	r0, r0, #16
 8016f76:	f53f af67 	bmi.w	8016e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8016f7a:	3901      	subs	r1, #1
 8016f7c:	4288      	cmp	r0, r1
 8016f7e:	f6bf af63 	bge.w	8016e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8016f82:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016f84:	fb01 6303 	mla	r3, r1, r3, r6
 8016f88:	141b      	asrs	r3, r3, #16
 8016f8a:	f53f af5d 	bmi.w	8016e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8016f8e:	3a01      	subs	r2, #1
 8016f90:	4293      	cmp	r3, r2
 8016f92:	f6bf af59 	bge.w	8016e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8016f96:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016f9a:	46ca      	mov	sl, r9
 8016f9c:	f1b8 0f00 	cmp.w	r8, #0
 8016fa0:	dc67      	bgt.n	8017072 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8016fa2:	9b06      	ldr	r3, [sp, #24]
 8016fa4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8016fa8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8016fac:	9b08      	ldr	r3, [sp, #32]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	f340 80d7 	ble.w	8017162 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8016fb4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8016fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016fba:	ee79 9aab 	vadd.f32	s19, s19, s23
 8016fbe:	eef0 6a48 	vmov.f32	s13, s16
 8016fc2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8016fc6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8016fca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fce:	ee16 4a90 	vmov	r4, s13
 8016fd2:	eef0 6a68 	vmov.f32	s13, s17
 8016fd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fda:	ee16 6a90 	vmov	r6, s13
 8016fde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016fe2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016fe6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016fea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016fee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016ff2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016ff6:	ee18 2a10 	vmov	r2, s16
 8016ffa:	eeb0 8a47 	vmov.f32	s16, s14
 8016ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017002:	ee18 2a90 	vmov	r2, s17
 8017006:	9329      	str	r3, [sp, #164]	; 0xa4
 8017008:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801700a:	eef0 8a67 	vmov.f32	s17, s15
 801700e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017012:	932a      	str	r3, [sp, #168]	; 0xa8
 8017014:	9b08      	ldr	r3, [sp, #32]
 8017016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017018:	3b01      	subs	r3, #1
 801701a:	9308      	str	r3, [sp, #32]
 801701c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801701e:	bf08      	it	eq
 8017020:	4613      	moveq	r3, r2
 8017022:	9306      	str	r3, [sp, #24]
 8017024:	e6e4      	b.n	8016df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8017026:	2900      	cmp	r1, #0
 8017028:	f43f af4e 	beq.w	8016ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801702c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8017030:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017034:	9309      	str	r3, [sp, #36]	; 0x24
 8017036:	e747      	b.n	8016ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8017038:	f112 0a01 	adds.w	sl, r2, #1
 801703c:	d481      	bmi.n	8016f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801703e:	4553      	cmp	r3, sl
 8017040:	f6ff af7f 	blt.w	8016f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8017044:	f11c 0a01 	adds.w	sl, ip, #1
 8017048:	f53f af7b 	bmi.w	8016f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801704c:	45d6      	cmp	lr, sl
 801704e:	f6ff af78 	blt.w	8016f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8017052:	b21b      	sxth	r3, r3
 8017054:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8017058:	fa0f f28e 	sxth.w	r2, lr
 801705c:	9300      	str	r3, [sp, #0]
 801705e:	463b      	mov	r3, r7
 8017060:	9201      	str	r2, [sp, #4]
 8017062:	9a07      	ldr	r2, [sp, #28]
 8017064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017068:	4641      	mov	r1, r8
 801706a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801706c:	f7ff fdfe 	bl	8016c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8017070:	e767      	b.n	8016f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8017072:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017074:	1422      	asrs	r2, r4, #16
 8017076:	1431      	asrs	r1, r6, #16
 8017078:	9d07      	ldr	r5, [sp, #28]
 801707a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801707e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8017082:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017086:	fb03 2101 	mla	r1, r3, r1, r2
 801708a:	9a07      	ldr	r2, [sp, #28]
 801708c:	440a      	add	r2, r1
 801708e:	5c69      	ldrb	r1, [r5, r1]
 8017090:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8017094:	f1be 0f00 	cmp.w	lr, #0
 8017098:	d05c      	beq.n	8017154 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801709a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801709e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80170a2:	950d      	str	r5, [sp, #52]	; 0x34
 80170a4:	b150      	cbz	r0, 80170bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80170a6:	eb02 0c03 	add.w	ip, r2, r3
 80170aa:	5cd3      	ldrb	r3, [r2, r3]
 80170ac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80170b0:	930a      	str	r3, [sp, #40]	; 0x28
 80170b2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80170b6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80170ba:	930e      	str	r3, [sp, #56]	; 0x38
 80170bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170be:	fb1e f200 	smulbb	r2, lr, r0
 80170c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80170c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80170c8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80170cc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80170d0:	10d2      	asrs	r2, r2, #3
 80170d2:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80170d6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80170da:	ea4c 0c03 	orr.w	ip, ip, r3
 80170de:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80170e2:	9311      	str	r3, [sp, #68]	; 0x44
 80170e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80170e8:	041b      	lsls	r3, r3, #16
 80170ea:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80170ee:	ea43 030b 	orr.w	r3, r3, fp
 80170f2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80170f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80170fa:	4353      	muls	r3, r2
 80170fc:	fb05 3c0c 	mla	ip, r5, ip, r3
 8017100:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8017104:	ea43 0b01 	orr.w	fp, r3, r1
 8017108:	f1c0 0110 	rsb	r1, r0, #16
 801710c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801710e:	eba1 0e0e 	sub.w	lr, r1, lr
 8017112:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8017116:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801711a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801711e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8017122:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8017126:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801712a:	ea4b 0e0e 	orr.w	lr, fp, lr
 801712e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017132:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8017136:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801713a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801713e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8017142:	ea43 0c0c 	orr.w	ip, r3, ip
 8017146:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017148:	441c      	add	r4, r3
 801714a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801714c:	f82a cb02 	strh.w	ip, [sl], #2
 8017150:	441e      	add	r6, r3
 8017152:	e723      	b.n	8016f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8017154:	2800      	cmp	r0, #0
 8017156:	d0b1      	beq.n	80170bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8017158:	5cd3      	ldrb	r3, [r2, r3]
 801715a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801715e:	930a      	str	r3, [sp, #40]	; 0x28
 8017160:	e7ac      	b.n	80170bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8017162:	b013      	add	sp, #76	; 0x4c
 8017164:	ecbd 8b0a 	vpop	{d8-d12}
 8017168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801716c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017170:	468b      	mov	fp, r1
 8017172:	8809      	ldrh	r1, [r1, #0]
 8017174:	b089      	sub	sp, #36	; 0x24
 8017176:	10cd      	asrs	r5, r1, #3
 8017178:	ea4f 2921 	mov.w	r9, r1, asr #8
 801717c:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8017180:	00c9      	lsls	r1, r1, #3
 8017182:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8017186:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801718a:	9202      	str	r2, [sp, #8]
 801718c:	b2c9      	uxtb	r1, r1
 801718e:	9500      	str	r5, [sp, #0]
 8017190:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8017194:	9101      	str	r1, [sp, #4]
 8017196:	9900      	ldr	r1, [sp, #0]
 8017198:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801719c:	0209      	lsls	r1, r1, #8
 801719e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80171a2:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80171a6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80171aa:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80171ae:	fb04 650e 	mla	r5, r4, lr, r6
 80171b2:	2c00      	cmp	r4, #0
 80171b4:	eb02 0805 	add.w	r8, r2, r5
 80171b8:	9a01      	ldr	r2, [sp, #4]
 80171ba:	ea41 0102 	orr.w	r1, r1, r2
 80171be:	9107      	str	r1, [sp, #28]
 80171c0:	db43      	blt.n	801724a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80171c2:	45a2      	cmp	sl, r4
 80171c4:	dd41      	ble.n	801724a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80171c6:	2e00      	cmp	r6, #0
 80171c8:	db3d      	blt.n	8017246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80171ca:	45b6      	cmp	lr, r6
 80171cc:	dd3b      	ble.n	8017246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80171ce:	9a02      	ldr	r2, [sp, #8]
 80171d0:	5d55      	ldrb	r5, [r2, r5]
 80171d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171d6:	441d      	add	r5, r3
 80171d8:	1c72      	adds	r2, r6, #1
 80171da:	d439      	bmi.n	8017250 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80171dc:	4596      	cmp	lr, r2
 80171de:	dd37      	ble.n	8017250 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80171e0:	2f00      	cmp	r7, #0
 80171e2:	d035      	beq.n	8017250 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80171e4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80171e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80171ec:	4419      	add	r1, r3
 80171ee:	3401      	adds	r4, #1
 80171f0:	d432      	bmi.n	8017258 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80171f2:	45a2      	cmp	sl, r4
 80171f4:	dd30      	ble.n	8017258 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80171f6:	b378      	cbz	r0, 8017258 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80171f8:	2e00      	cmp	r6, #0
 80171fa:	db2b      	blt.n	8017254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80171fc:	45b6      	cmp	lr, r6
 80171fe:	dd29      	ble.n	8017254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8017200:	f818 400e 	ldrb.w	r4, [r8, lr]
 8017204:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017208:	441c      	add	r4, r3
 801720a:	3601      	adds	r6, #1
 801720c:	d427      	bmi.n	801725e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801720e:	45b6      	cmp	lr, r6
 8017210:	dd25      	ble.n	801725e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8017212:	b327      	cbz	r7, 801725e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8017214:	44c6      	add	lr, r8
 8017216:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801721a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801721e:	4413      	add	r3, r2
 8017220:	782a      	ldrb	r2, [r5, #0]
 8017222:	2f0f      	cmp	r7, #15
 8017224:	9202      	str	r2, [sp, #8]
 8017226:	780a      	ldrb	r2, [r1, #0]
 8017228:	9203      	str	r2, [sp, #12]
 801722a:	7822      	ldrb	r2, [r4, #0]
 801722c:	9204      	str	r2, [sp, #16]
 801722e:	781a      	ldrb	r2, [r3, #0]
 8017230:	9205      	str	r2, [sp, #20]
 8017232:	d801      	bhi.n	8017238 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8017234:	280f      	cmp	r0, #15
 8017236:	d914      	bls.n	8017262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8017238:	4b3f      	ldr	r3, [pc, #252]	; (8017338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801723a:	f240 210d 	movw	r1, #525	; 0x20d
 801723e:	4a3f      	ldr	r2, [pc, #252]	; (801733c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8017240:	483f      	ldr	r0, [pc, #252]	; (8017340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8017242:	f007 f881 	bl	801e348 <__assert_func>
 8017246:	ad07      	add	r5, sp, #28
 8017248:	e7c6      	b.n	80171d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801724a:	a907      	add	r1, sp, #28
 801724c:	460d      	mov	r5, r1
 801724e:	e7ce      	b.n	80171ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8017250:	a907      	add	r1, sp, #28
 8017252:	e7cc      	b.n	80171ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8017254:	ac07      	add	r4, sp, #28
 8017256:	e7d8      	b.n	801720a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8017258:	ab07      	add	r3, sp, #28
 801725a:	461c      	mov	r4, r3
 801725c:	e7e0      	b.n	8017220 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801725e:	ab07      	add	r3, sp, #28
 8017260:	e7de      	b.n	8017220 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8017262:	b2ba      	uxth	r2, r7
 8017264:	f891 8002 	ldrb.w	r8, [r1, #2]
 8017268:	b280      	uxth	r0, r0
 801726a:	7849      	ldrb	r1, [r1, #1]
 801726c:	78ae      	ldrb	r6, [r5, #2]
 801726e:	fa1f f78c 	uxth.w	r7, ip
 8017272:	fb02 fa00 	mul.w	sl, r2, r0
 8017276:	0112      	lsls	r2, r2, #4
 8017278:	786d      	ldrb	r5, [r5, #1]
 801727a:	ea6f 0c0c 	mvn.w	ip, ip
 801727e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017282:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8017286:	eba2 020a 	sub.w	r2, r2, sl
 801728a:	fa5f fc8c 	uxtb.w	ip, ip
 801728e:	b280      	uxth	r0, r0
 8017290:	fb19 f90c 	smulbb	r9, r9, ip
 8017294:	b292      	uxth	r2, r2
 8017296:	ebae 0e00 	sub.w	lr, lr, r0
 801729a:	4351      	muls	r1, r2
 801729c:	fa1f fe8e 	uxth.w	lr, lr
 80172a0:	fb02 f808 	mul.w	r8, r2, r8
 80172a4:	fb0e 1505 	mla	r5, lr, r5, r1
 80172a8:	7861      	ldrb	r1, [r4, #1]
 80172aa:	fb0e 8806 	mla	r8, lr, r6, r8
 80172ae:	78a6      	ldrb	r6, [r4, #2]
 80172b0:	fb00 5501 	mla	r5, r0, r1, r5
 80172b4:	7859      	ldrb	r1, [r3, #1]
 80172b6:	fb00 8806 	mla	r8, r0, r6, r8
 80172ba:	789e      	ldrb	r6, [r3, #2]
 80172bc:	9b00      	ldr	r3, [sp, #0]
 80172be:	fb0a 5101 	mla	r1, sl, r1, r5
 80172c2:	fb0a 8606 	mla	r6, sl, r6, r8
 80172c6:	fb13 f50c 	smulbb	r5, r3, ip
 80172ca:	9b03      	ldr	r3, [sp, #12]
 80172cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80172d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80172d4:	435a      	muls	r2, r3
 80172d6:	9b02      	ldr	r3, [sp, #8]
 80172d8:	fb06 9607 	mla	r6, r6, r7, r9
 80172dc:	fb0e 2203 	mla	r2, lr, r3, r2
 80172e0:	9b04      	ldr	r3, [sp, #16]
 80172e2:	fb01 5107 	mla	r1, r1, r7, r5
 80172e6:	b2b6      	uxth	r6, r6
 80172e8:	fb00 2003 	mla	r0, r0, r3, r2
 80172ec:	9b05      	ldr	r3, [sp, #20]
 80172ee:	b289      	uxth	r1, r1
 80172f0:	f106 0901 	add.w	r9, r6, #1
 80172f4:	fb0a 0a03 	mla	sl, sl, r3, r0
 80172f8:	9b01      	ldr	r3, [sp, #4]
 80172fa:	1c4d      	adds	r5, r1, #1
 80172fc:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8017300:	fb13 fc0c 	smulbb	ip, r3, ip
 8017304:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8017308:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801730c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8017310:	fb0a c707 	mla	r7, sl, r7, ip
 8017314:	0949      	lsrs	r1, r1, #5
 8017316:	b2bf      	uxth	r7, r7
 8017318:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801731c:	f107 0c01 	add.w	ip, r7, #1
 8017320:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8017324:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017328:	433e      	orrs	r6, r7
 801732a:	430e      	orrs	r6, r1
 801732c:	f8ab 6000 	strh.w	r6, [fp]
 8017330:	b009      	add	sp, #36	; 0x24
 8017332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017336:	bf00      	nop
 8017338:	08022952 	.word	0x08022952
 801733c:	08022f15 	.word	0x08022f15
 8017340:	08022a3b 	.word	0x08022a3b

08017344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	ed2d 8b08 	vpush	{d8-d11}
 801734c:	b095      	sub	sp, #84	; 0x54
 801734e:	eeb0 aa40 	vmov.f32	s20, s0
 8017352:	eef0 9a60 	vmov.f32	s19, s1
 8017356:	9212      	str	r2, [sp, #72]	; 0x48
 8017358:	eeb0 9a41 	vmov.f32	s18, s2
 801735c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801735e:	eeb0 8a62 	vmov.f32	s16, s5
 8017362:	9309      	str	r3, [sp, #36]	; 0x24
 8017364:	eef0 8a43 	vmov.f32	s17, s6
 8017368:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801736c:	eef0 ba44 	vmov.f32	s23, s8
 8017370:	9013      	str	r0, [sp, #76]	; 0x4c
 8017372:	eeb0 ba64 	vmov.f32	s22, s9
 8017376:	930f      	str	r3, [sp, #60]	; 0x3c
 8017378:	eef0 aa45 	vmov.f32	s21, s10
 801737c:	6850      	ldr	r0, [r2, #4]
 801737e:	910e      	str	r1, [sp, #56]	; 0x38
 8017380:	6812      	ldr	r2, [r2, #0]
 8017382:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8017386:	fb00 1303 	mla	r3, r0, r3, r1
 801738a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801738e:	930a      	str	r3, [sp, #40]	; 0x28
 8017390:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	930d      	str	r3, [sp, #52]	; 0x34
 8017396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017398:	685c      	ldr	r4, [r3, #4]
 801739a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801739c:	3404      	adds	r4, #4
 801739e:	43db      	mvns	r3, r3
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80173a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	dc03      	bgt.n	80173b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80173aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f340 8258 	ble.w	8017862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80173b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80173b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80173b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80173bc:	1e48      	subs	r0, r1, #1
 80173be:	1e55      	subs	r5, r2, #1
 80173c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	f340 80fc 	ble.w	80175c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80173c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80173ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80173cc:	1436      	asrs	r6, r6, #16
 80173ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80173d2:	d406      	bmi.n	80173e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80173d4:	4286      	cmp	r6, r0
 80173d6:	da04      	bge.n	80173e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80173d8:	2b00      	cmp	r3, #0
 80173da:	db02      	blt.n	80173e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80173dc:	42ab      	cmp	r3, r5
 80173de:	f2c0 80f0 	blt.w	80175c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80173e2:	3601      	adds	r6, #1
 80173e4:	f100 80dd 	bmi.w	80175a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80173e8:	42b1      	cmp	r1, r6
 80173ea:	f2c0 80da 	blt.w	80175a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80173ee:	3301      	adds	r3, #1
 80173f0:	f100 80d7 	bmi.w	80175a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80173f4:	429a      	cmp	r2, r3
 80173f6:	f2c0 80d4 	blt.w	80175a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80173fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173fc:	9311      	str	r3, [sp, #68]	; 0x44
 80173fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017400:	930c      	str	r3, [sp, #48]	; 0x30
 8017402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017404:	2b00      	cmp	r3, #0
 8017406:	f340 80fd 	ble.w	8017604 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801740a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801740c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801740e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017410:	68c6      	ldr	r6, [r0, #12]
 8017412:	141d      	asrs	r5, r3, #16
 8017414:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8017416:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801741a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801741c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801741e:	1400      	asrs	r0, r0, #16
 8017420:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017424:	6892      	ldr	r2, [r2, #8]
 8017426:	f100 8141 	bmi.w	80176ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801742a:	1e57      	subs	r7, r2, #1
 801742c:	42b8      	cmp	r0, r7
 801742e:	f280 813d 	bge.w	80176ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017432:	2d00      	cmp	r5, #0
 8017434:	f2c0 813a 	blt.w	80176ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017438:	1e77      	subs	r7, r6, #1
 801743a:	42bd      	cmp	r5, r7
 801743c:	f280 8136 	bge.w	80176ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017440:	b212      	sxth	r2, r2
 8017442:	fb05 0002 	mla	r0, r5, r2, r0
 8017446:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017448:	f815 a000 	ldrb.w	sl, [r5, r0]
 801744c:	182e      	adds	r6, r5, r0
 801744e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8017452:	eb04 050a 	add.w	r5, r4, sl
 8017456:	2b00      	cmp	r3, #0
 8017458:	f000 811a 	beq.w	8017690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801745c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8017460:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017464:	44a4      	add	ip, r4
 8017466:	2900      	cmp	r1, #0
 8017468:	f000 811a 	beq.w	80176a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801746c:	18b0      	adds	r0, r6, r2
 801746e:	5cb2      	ldrb	r2, [r6, r2]
 8017470:	7840      	ldrb	r0, [r0, #1]
 8017472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801747a:	4422      	add	r2, r4
 801747c:	4420      	add	r0, r4
 801747e:	b29b      	uxth	r3, r3
 8017480:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8017484:	b289      	uxth	r1, r1
 8017486:	f895 b002 	ldrb.w	fp, [r5, #2]
 801748a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801748c:	fb03 f901 	mul.w	r9, r3, r1
 8017490:	011b      	lsls	r3, r3, #4
 8017492:	f8b6 e000 	ldrh.w	lr, [r6]
 8017496:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801749a:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801749e:	eba3 0309 	sub.w	r3, r3, r9
 80174a2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80174a6:	b289      	uxth	r1, r1
 80174a8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	eba8 0801 	sub.w	r8, r8, r1
 80174b2:	435f      	muls	r7, r3
 80174b4:	fa1f f888 	uxth.w	r8, r8
 80174b8:	9310      	str	r3, [sp, #64]	; 0x40
 80174ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174bc:	fb08 770b 	mla	r7, r8, fp, r7
 80174c0:	f892 b002 	ldrb.w	fp, [r2, #2]
 80174c4:	fb01 770b 	mla	r7, r1, fp, r7
 80174c8:	f890 b002 	ldrb.w	fp, [r0, #2]
 80174cc:	fb09 770b 	mla	r7, r9, fp, r7
 80174d0:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80174d4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80174d8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80174dc:	fb1b fb03 	smulbb	fp, fp, r3
 80174e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174e2:	fb07 b706 	mla	r7, r7, r6, fp
 80174e6:	f895 b001 	ldrb.w	fp, [r5, #1]
 80174ea:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80174ee:	f89c c000 	ldrb.w	ip, [ip]
 80174f2:	b2bf      	uxth	r7, r7
 80174f4:	435d      	muls	r5, r3
 80174f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174f8:	fb08 550b 	mla	r5, r8, fp, r5
 80174fc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017500:	fb01 550b 	mla	r5, r1, fp, r5
 8017504:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017508:	fb09 550b 	mla	r5, r9, fp, r5
 801750c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8017510:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017514:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8017518:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801751c:	fa5f fe8e 	uxtb.w	lr, lr
 8017520:	fb1b fb03 	smulbb	fp, fp, r3
 8017524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017526:	fb03 f30c 	mul.w	r3, r3, ip
 801752a:	f892 c000 	ldrb.w	ip, [r2]
 801752e:	fb05 b506 	mla	r5, r5, r6, fp
 8017532:	1c7a      	adds	r2, r7, #1
 8017534:	fb08 330a 	mla	r3, r8, sl, r3
 8017538:	b2ad      	uxth	r5, r5
 801753a:	fb01 330c 	mla	r3, r1, ip, r3
 801753e:	f890 c000 	ldrb.w	ip, [r0]
 8017542:	f105 0b01 	add.w	fp, r5, #1
 8017546:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801754a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801754e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017550:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8017554:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017558:	fb1e fe03 	smulbb	lr, lr, r3
 801755c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017560:	096d      	lsrs	r5, r5, #5
 8017562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017564:	fb0c ee06 	mla	lr, ip, r6, lr
 8017568:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801756c:	fa1f fe8e 	uxth.w	lr, lr
 8017570:	f10e 0c01 	add.w	ip, lr, #1
 8017574:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8017578:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801757c:	ea47 070e 	orr.w	r7, r7, lr
 8017580:	433d      	orrs	r5, r7
 8017582:	801d      	strh	r5, [r3, #0]
 8017584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017586:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017588:	3302      	adds	r3, #2
 801758a:	930c      	str	r3, [sp, #48]	; 0x30
 801758c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801758e:	4413      	add	r3, r2
 8017590:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8017592:	9327      	str	r3, [sp, #156]	; 0x9c
 8017594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017596:	4413      	add	r3, r2
 8017598:	9328      	str	r3, [sp, #160]	; 0xa0
 801759a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801759c:	3b01      	subs	r3, #1
 801759e:	9311      	str	r3, [sp, #68]	; 0x44
 80175a0:	e72f      	b.n	8017402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80175a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80175a4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80175a6:	4433      	add	r3, r6
 80175a8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80175aa:	9327      	str	r3, [sp, #156]	; 0x9c
 80175ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80175ae:	4433      	add	r3, r6
 80175b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80175b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175b4:	3b01      	subs	r3, #1
 80175b6:	9309      	str	r3, [sp, #36]	; 0x24
 80175b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ba:	3302      	adds	r3, #2
 80175bc:	930a      	str	r3, [sp, #40]	; 0x28
 80175be:	e6ff      	b.n	80173c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80175c0:	d027      	beq.n	8017612 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80175c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175c4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80175c6:	3b01      	subs	r3, #1
 80175c8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80175ca:	fb00 5003 	mla	r0, r0, r3, r5
 80175ce:	1400      	asrs	r0, r0, #16
 80175d0:	f53f af13 	bmi.w	80173fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80175d4:	3901      	subs	r1, #1
 80175d6:	4288      	cmp	r0, r1
 80175d8:	f6bf af0f 	bge.w	80173fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80175dc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80175de:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80175e0:	fb01 0303 	mla	r3, r1, r3, r0
 80175e4:	141b      	asrs	r3, r3, #16
 80175e6:	f53f af08 	bmi.w	80173fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80175ea:	3a01      	subs	r2, #1
 80175ec:	4293      	cmp	r3, r2
 80175ee:	f6bf af04 	bge.w	80173fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80175f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175f4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80175f8:	9311      	str	r3, [sp, #68]	; 0x44
 80175fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175fc:	930c      	str	r3, [sp, #48]	; 0x30
 80175fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017600:	2b00      	cmp	r3, #0
 8017602:	dc70      	bgt.n	80176e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8017604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017608:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801760c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017610:	930a      	str	r3, [sp, #40]	; 0x28
 8017612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017614:	2b00      	cmp	r3, #0
 8017616:	f340 8124 	ble.w	8017862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801761a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801761e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017620:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017624:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017628:	eef0 6a48 	vmov.f32	s13, s16
 801762c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017630:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017634:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017638:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801763c:	eef0 6a68 	vmov.f32	s13, s17
 8017640:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017644:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8017648:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801764c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017650:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017654:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017658:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801765c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017660:	ee18 2a10 	vmov	r2, s16
 8017664:	eeb0 8a47 	vmov.f32	s16, s14
 8017668:	fb92 f3f3 	sdiv	r3, r2, r3
 801766c:	ee18 2a90 	vmov	r2, s17
 8017670:	9329      	str	r3, [sp, #164]	; 0xa4
 8017672:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017674:	eef0 8a67 	vmov.f32	s17, s15
 8017678:	fb92 f3f3 	sdiv	r3, r2, r3
 801767c:	932a      	str	r3, [sp, #168]	; 0xa8
 801767e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017682:	3b01      	subs	r3, #1
 8017684:	930e      	str	r3, [sp, #56]	; 0x38
 8017686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017688:	bf08      	it	eq
 801768a:	4613      	moveq	r3, r2
 801768c:	9309      	str	r3, [sp, #36]	; 0x24
 801768e:	e689      	b.n	80173a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017690:	b149      	cbz	r1, 80176a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8017692:	5cb2      	ldrb	r2, [r6, r2]
 8017694:	4628      	mov	r0, r5
 8017696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801769a:	4422      	add	r2, r4
 801769c:	46ac      	mov	ip, r5
 801769e:	e6ee      	b.n	801747e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80176a0:	4628      	mov	r0, r5
 80176a2:	462a      	mov	r2, r5
 80176a4:	e6eb      	b.n	801747e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80176a6:	4628      	mov	r0, r5
 80176a8:	462a      	mov	r2, r5
 80176aa:	e7f7      	b.n	801769c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80176ac:	1c47      	adds	r7, r0, #1
 80176ae:	f53f af69 	bmi.w	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80176b2:	42ba      	cmp	r2, r7
 80176b4:	f6ff af66 	blt.w	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80176b8:	1c6f      	adds	r7, r5, #1
 80176ba:	f53f af63 	bmi.w	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80176be:	42be      	cmp	r6, r7
 80176c0:	f6ff af60 	blt.w	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80176c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80176c6:	b236      	sxth	r6, r6
 80176c8:	b212      	sxth	r2, r2
 80176ca:	9002      	str	r0, [sp, #8]
 80176cc:	9601      	str	r6, [sp, #4]
 80176ce:	9200      	str	r2, [sp, #0]
 80176d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80176d2:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80176d6:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80176da:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80176de:	4623      	mov	r3, r4
 80176e0:	f7ff fd44 	bl	801716c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80176e4:	e74e      	b.n	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80176e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80176e8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80176ea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80176ee:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80176f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80176f2:	1400      	asrs	r0, r0, #16
 80176f4:	142d      	asrs	r5, r5, #16
 80176f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80176f8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80176fc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017700:	fb02 5000 	mla	r0, r2, r0, r5
 8017704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017706:	f815 9000 	ldrb.w	r9, [r5, r0]
 801770a:	182e      	adds	r6, r5, r0
 801770c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017710:	eb04 0509 	add.w	r5, r4, r9
 8017714:	2b00      	cmp	r3, #0
 8017716:	f000 8096 	beq.w	8017846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 801771a:	7877      	ldrb	r7, [r6, #1]
 801771c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017720:	4427      	add	r7, r4
 8017722:	2900      	cmp	r1, #0
 8017724:	f000 8097 	beq.w	8017856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8017728:	18b0      	adds	r0, r6, r2
 801772a:	5cb2      	ldrb	r2, [r6, r2]
 801772c:	7840      	ldrb	r0, [r0, #1]
 801772e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017732:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017736:	4422      	add	r2, r4
 8017738:	4420      	add	r0, r4
 801773a:	b29b      	uxth	r3, r3
 801773c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801773e:	b289      	uxth	r1, r1
 8017740:	f895 b002 	ldrb.w	fp, [r5, #2]
 8017744:	f8b6 c000 	ldrh.w	ip, [r6]
 8017748:	fb03 f801 	mul.w	r8, r3, r1
 801774c:	011b      	lsls	r3, r3, #4
 801774e:	78be      	ldrb	r6, [r7, #2]
 8017750:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8017754:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017758:	eba3 0308 	sub.w	r3, r3, r8
 801775c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8017760:	b289      	uxth	r1, r1
 8017762:	b29b      	uxth	r3, r3
 8017764:	ebae 0e01 	sub.w	lr, lr, r1
 8017768:	435e      	muls	r6, r3
 801776a:	fa1f fe8e 	uxth.w	lr, lr
 801776e:	9310      	str	r3, [sp, #64]	; 0x40
 8017770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017772:	fb0e 660b 	mla	r6, lr, fp, r6
 8017776:	f892 b002 	ldrb.w	fp, [r2, #2]
 801777a:	fb01 660b 	mla	r6, r1, fp, r6
 801777e:	f890 b002 	ldrb.w	fp, [r0, #2]
 8017782:	fb08 660b 	mla	r6, r8, fp, r6
 8017786:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801778a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801778e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8017792:	fb1b fb03 	smulbb	fp, fp, r3
 8017796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017798:	fb06 b60a 	mla	r6, r6, sl, fp
 801779c:	f895 b001 	ldrb.w	fp, [r5, #1]
 80177a0:	787d      	ldrb	r5, [r7, #1]
 80177a2:	783f      	ldrb	r7, [r7, #0]
 80177a4:	b2b6      	uxth	r6, r6
 80177a6:	435d      	muls	r5, r3
 80177a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177aa:	fb0e 550b 	mla	r5, lr, fp, r5
 80177ae:	f892 b001 	ldrb.w	fp, [r2, #1]
 80177b2:	fb01 550b 	mla	r5, r1, fp, r5
 80177b6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80177ba:	fb08 550b 	mla	r5, r8, fp, r5
 80177be:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80177c2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80177c6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80177ca:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80177ce:	fa5f fc8c 	uxtb.w	ip, ip
 80177d2:	fb1b fb03 	smulbb	fp, fp, r3
 80177d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177d8:	437b      	muls	r3, r7
 80177da:	7817      	ldrb	r7, [r2, #0]
 80177dc:	fb05 b50a 	mla	r5, r5, sl, fp
 80177e0:	fb0e 3309 	mla	r3, lr, r9, r3
 80177e4:	b2ad      	uxth	r5, r5
 80177e6:	fb01 3307 	mla	r3, r1, r7, r3
 80177ea:	7807      	ldrb	r7, [r0, #0]
 80177ec:	f105 0b01 	add.w	fp, r5, #1
 80177f0:	fb08 3707 	mla	r7, r8, r7, r3
 80177f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177f6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80177fa:	fb1c fc03 	smulbb	ip, ip, r3
 80177fe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8017802:	1c73      	adds	r3, r6, #1
 8017804:	096d      	lsrs	r5, r5, #5
 8017806:	fb07 c70a 	mla	r7, r7, sl, ip
 801780a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801780e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017812:	b2bf      	uxth	r7, r7
 8017814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017816:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801781a:	1c7a      	adds	r2, r7, #1
 801781c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8017820:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017824:	4316      	orrs	r6, r2
 8017826:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017828:	432e      	orrs	r6, r5
 801782a:	f823 6b02 	strh.w	r6, [r3], #2
 801782e:	930c      	str	r3, [sp, #48]	; 0x30
 8017830:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017832:	4413      	add	r3, r2
 8017834:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8017836:	9327      	str	r3, [sp, #156]	; 0x9c
 8017838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801783a:	4413      	add	r3, r2
 801783c:	9328      	str	r3, [sp, #160]	; 0xa0
 801783e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017840:	3b01      	subs	r3, #1
 8017842:	9311      	str	r3, [sp, #68]	; 0x44
 8017844:	e6db      	b.n	80175fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017846:	b149      	cbz	r1, 801785c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8017848:	5cb2      	ldrb	r2, [r6, r2]
 801784a:	4628      	mov	r0, r5
 801784c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017850:	4422      	add	r2, r4
 8017852:	462f      	mov	r7, r5
 8017854:	e771      	b.n	801773a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8017856:	4628      	mov	r0, r5
 8017858:	462a      	mov	r2, r5
 801785a:	e76e      	b.n	801773a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 801785c:	4628      	mov	r0, r5
 801785e:	462a      	mov	r2, r5
 8017860:	e7f7      	b.n	8017852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8017862:	b015      	add	sp, #84	; 0x54
 8017864:	ecbd 8b08 	vpop	{d8-d11}
 8017868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801786c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017870:	880e      	ldrh	r6, [r1, #0]
 8017872:	b085      	sub	sp, #20
 8017874:	4691      	mov	r9, r2
 8017876:	0230      	lsls	r0, r6, #8
 8017878:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801787c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017880:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8017884:	0170      	lsls	r0, r6, #5
 8017886:	00f6      	lsls	r6, r6, #3
 8017888:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801788c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8017890:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8017894:	b2f6      	uxtb	r6, r6
 8017896:	ea4b 0000 	orr.w	r0, fp, r0
 801789a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801789e:	4306      	orrs	r6, r0
 80178a0:	fb05 7a0c 	mla	sl, r5, ip, r7
 80178a4:	2d00      	cmp	r5, #0
 80178a6:	9603      	str	r6, [sp, #12]
 80178a8:	eb09 0e0a 	add.w	lr, r9, sl
 80178ac:	db42      	blt.n	8017934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80178ae:	45a8      	cmp	r8, r5
 80178b0:	dd40      	ble.n	8017934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80178b2:	2f00      	cmp	r7, #0
 80178b4:	db3c      	blt.n	8017930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80178b6:	45bc      	cmp	ip, r7
 80178b8:	dd3a      	ble.n	8017930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80178ba:	f819 600a 	ldrb.w	r6, [r9, sl]
 80178be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80178c2:	441e      	add	r6, r3
 80178c4:	1c78      	adds	r0, r7, #1
 80178c6:	d438      	bmi.n	801793a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80178c8:	4584      	cmp	ip, r0
 80178ca:	dd36      	ble.n	801793a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80178cc:	b3aa      	cbz	r2, 801793a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80178ce:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80178d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80178d6:	4418      	add	r0, r3
 80178d8:	3501      	adds	r5, #1
 80178da:	d432      	bmi.n	8017942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80178dc:	45a8      	cmp	r8, r5
 80178de:	dd30      	ble.n	8017942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80178e0:	b37c      	cbz	r4, 8017942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80178e2:	2f00      	cmp	r7, #0
 80178e4:	db2b      	blt.n	801793e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80178e6:	45bc      	cmp	ip, r7
 80178e8:	dd29      	ble.n	801793e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80178ea:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80178ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178f2:	441d      	add	r5, r3
 80178f4:	3701      	adds	r7, #1
 80178f6:	d427      	bmi.n	8017948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80178f8:	45bc      	cmp	ip, r7
 80178fa:	dd25      	ble.n	8017948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80178fc:	b322      	cbz	r2, 8017948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80178fe:	44f4      	add	ip, lr
 8017900:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8017904:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017908:	443b      	add	r3, r7
 801790a:	781f      	ldrb	r7, [r3, #0]
 801790c:	2a0f      	cmp	r2, #15
 801790e:	f896 a000 	ldrb.w	sl, [r6]
 8017912:	f890 b000 	ldrb.w	fp, [r0]
 8017916:	f895 9000 	ldrb.w	r9, [r5]
 801791a:	9700      	str	r7, [sp, #0]
 801791c:	d801      	bhi.n	8017922 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801791e:	2c0f      	cmp	r4, #15
 8017920:	d914      	bls.n	801794c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8017922:	4b2c      	ldr	r3, [pc, #176]	; (80179d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8017924:	f240 210d 	movw	r1, #525	; 0x20d
 8017928:	4a2b      	ldr	r2, [pc, #172]	; (80179d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801792a:	482c      	ldr	r0, [pc, #176]	; (80179dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801792c:	f006 fd0c 	bl	801e348 <__assert_func>
 8017930:	ae03      	add	r6, sp, #12
 8017932:	e7c7      	b.n	80178c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8017934:	a803      	add	r0, sp, #12
 8017936:	4606      	mov	r6, r0
 8017938:	e7ce      	b.n	80178d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801793a:	a803      	add	r0, sp, #12
 801793c:	e7cc      	b.n	80178d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801793e:	ad03      	add	r5, sp, #12
 8017940:	e7d8      	b.n	80178f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8017942:	ab03      	add	r3, sp, #12
 8017944:	461d      	mov	r5, r3
 8017946:	e7e0      	b.n	801790a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8017948:	ab03      	add	r3, sp, #12
 801794a:	e7de      	b.n	801790a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801794c:	b292      	uxth	r2, r2
 801794e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017952:	b2a4      	uxth	r4, r4
 8017954:	78b7      	ldrb	r7, [r6, #2]
 8017956:	7840      	ldrb	r0, [r0, #1]
 8017958:	fb02 f804 	mul.w	r8, r2, r4
 801795c:	0112      	lsls	r2, r2, #4
 801795e:	7876      	ldrb	r6, [r6, #1]
 8017960:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8017964:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8017968:	eba2 0208 	sub.w	r2, r2, r8
 801796c:	b2a4      	uxth	r4, r4
 801796e:	b292      	uxth	r2, r2
 8017970:	ebac 0c04 	sub.w	ip, ip, r4
 8017974:	fb02 fe0e 	mul.w	lr, r2, lr
 8017978:	fa1f fc8c 	uxth.w	ip, ip
 801797c:	fb0c ee07 	mla	lr, ip, r7, lr
 8017980:	78af      	ldrb	r7, [r5, #2]
 8017982:	fb04 ee07 	mla	lr, r4, r7, lr
 8017986:	789f      	ldrb	r7, [r3, #2]
 8017988:	785b      	ldrb	r3, [r3, #1]
 801798a:	fb08 e707 	mla	r7, r8, r7, lr
 801798e:	fb02 fe0b 	mul.w	lr, r2, fp
 8017992:	4342      	muls	r2, r0
 8017994:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017998:	7868      	ldrb	r0, [r5, #1]
 801799a:	fb0c ee0a 	mla	lr, ip, sl, lr
 801799e:	fb0c 2206 	mla	r2, ip, r6, r2
 80179a2:	9701      	str	r7, [sp, #4]
 80179a4:	fb04 ee09 	mla	lr, r4, r9, lr
 80179a8:	9f00      	ldr	r7, [sp, #0]
 80179aa:	fb04 2400 	mla	r4, r4, r0, r2
 80179ae:	fb08 ee07 	mla	lr, r8, r7, lr
 80179b2:	9f01      	ldr	r7, [sp, #4]
 80179b4:	fb08 4803 	mla	r8, r8, r3, r4
 80179b8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80179bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80179c0:	ea47 070e 	orr.w	r7, r7, lr
 80179c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80179c8:	ea47 0708 	orr.w	r7, r7, r8
 80179cc:	800f      	strh	r7, [r1, #0]
 80179ce:	b005      	add	sp, #20
 80179d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d4:	08022952 	.word	0x08022952
 80179d8:	08022f15 	.word	0x08022f15
 80179dc:	08022a3b 	.word	0x08022a3b

080179e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80179e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e4:	ed2d 8b08 	vpush	{d8-d11}
 80179e8:	b08f      	sub	sp, #60	; 0x3c
 80179ea:	eeb0 aa40 	vmov.f32	s20, s0
 80179ee:	eef0 9a60 	vmov.f32	s19, s1
 80179f2:	920c      	str	r2, [sp, #48]	; 0x30
 80179f4:	eeb0 9a41 	vmov.f32	s18, s2
 80179f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80179fa:	eeb0 8a62 	vmov.f32	s16, s5
 80179fe:	900d      	str	r0, [sp, #52]	; 0x34
 8017a00:	eef0 8a43 	vmov.f32	s17, s6
 8017a04:	6850      	ldr	r0, [r2, #4]
 8017a06:	eef0 ba44 	vmov.f32	s23, s8
 8017a0a:	910a      	str	r1, [sp, #40]	; 0x28
 8017a0c:	eeb0 ba64 	vmov.f32	s22, s9
 8017a10:	9306      	str	r3, [sp, #24]
 8017a12:	eef0 aa45 	vmov.f32	s21, s10
 8017a16:	6812      	ldr	r2, [r2, #0]
 8017a18:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8017a1c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8017a20:	fb00 1303 	mla	r3, r0, r3, r1
 8017a24:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017a28:	9307      	str	r3, [sp, #28]
 8017a2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	9308      	str	r3, [sp, #32]
 8017a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a32:	685c      	ldr	r4, [r3, #4]
 8017a34:	3404      	adds	r4, #4
 8017a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	dc03      	bgt.n	8017a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	f340 81d5 	ble.w	8017dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8017a44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017a4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017a4e:	1e48      	subs	r0, r1, #1
 8017a50:	1e56      	subs	r6, r2, #1
 8017a52:	9b06      	ldr	r3, [sp, #24]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	f340 80b6 	ble.w	8017bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8017a5a:	ea5f 472b 	movs.w	r7, fp, asr #16
 8017a5e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8017a62:	d406      	bmi.n	8017a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017a64:	4287      	cmp	r7, r0
 8017a66:	da04      	bge.n	8017a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	db02      	blt.n	8017a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017a6c:	42b3      	cmp	r3, r6
 8017a6e:	f2c0 80ab 	blt.w	8017bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017a72:	3701      	adds	r7, #1
 8017a74:	f100 809c 	bmi.w	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8017a78:	42b9      	cmp	r1, r7
 8017a7a:	f2c0 8099 	blt.w	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8017a7e:	3301      	adds	r3, #1
 8017a80:	f100 8096 	bmi.w	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8017a84:	429a      	cmp	r2, r3
 8017a86:	f2c0 8093 	blt.w	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8017a8a:	9b06      	ldr	r3, [sp, #24]
 8017a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a8e:	9b07      	ldr	r3, [sp, #28]
 8017a90:	9309      	str	r3, [sp, #36]	; 0x24
 8017a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	f340 80b4 	ble.w	8017c02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8017a9a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017a9c:	142e      	asrs	r6, r5, #16
 8017a9e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017aa0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8017aa4:	68c7      	ldr	r7, [r0, #12]
 8017aa6:	ea5f 402b 	movs.w	r0, fp, asr #16
 8017aaa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017aae:	6892      	ldr	r2, [r2, #8]
 8017ab0:	f100 80fb 	bmi.w	8017caa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017ab4:	f102 3cff 	add.w	ip, r2, #4294967295
 8017ab8:	4560      	cmp	r0, ip
 8017aba:	f280 80f6 	bge.w	8017caa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017abe:	2e00      	cmp	r6, #0
 8017ac0:	f2c0 80f3 	blt.w	8017caa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017ac4:	f107 3cff 	add.w	ip, r7, #4294967295
 8017ac8:	4566      	cmp	r6, ip
 8017aca:	f280 80ee 	bge.w	8017caa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017ace:	b212      	sxth	r2, r2
 8017ad0:	fb06 0002 	mla	r0, r6, r2, r0
 8017ad4:	9e08      	ldr	r6, [sp, #32]
 8017ad6:	1837      	adds	r7, r6, r0
 8017ad8:	5c30      	ldrb	r0, [r6, r0]
 8017ada:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8017ade:	eb04 0c08 	add.w	ip, r4, r8
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f000 80d3 	beq.w	8017c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8017ae8:	787e      	ldrb	r6, [r7, #1]
 8017aea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017aee:	4426      	add	r6, r4
 8017af0:	2900      	cmp	r1, #0
 8017af2:	f000 80d4 	beq.w	8017c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8017af6:	18b8      	adds	r0, r7, r2
 8017af8:	5cba      	ldrb	r2, [r7, r2]
 8017afa:	7840      	ldrb	r0, [r0, #1]
 8017afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017b04:	4422      	add	r2, r4
 8017b06:	4420      	add	r0, r4
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	78b7      	ldrb	r7, [r6, #2]
 8017b0c:	b289      	uxth	r1, r1
 8017b0e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017b12:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017b16:	fb03 f901 	mul.w	r9, r3, r1
 8017b1a:	011b      	lsls	r3, r3, #4
 8017b1c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017b20:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017b24:	eba3 0309 	sub.w	r3, r3, r9
 8017b28:	b289      	uxth	r1, r1
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	ebae 0e01 	sub.w	lr, lr, r1
 8017b30:	435f      	muls	r7, r3
 8017b32:	fa1f fe8e 	uxth.w	lr, lr
 8017b36:	fb0e 770a 	mla	r7, lr, sl, r7
 8017b3a:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017b3e:	fb01 770a 	mla	r7, r1, sl, r7
 8017b42:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017b46:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017b4a:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017b4e:	f896 8000 	ldrb.w	r8, [r6]
 8017b52:	7876      	ldrb	r6, [r6, #1]
 8017b54:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017b58:	fb03 f808 	mul.w	r8, r3, r8
 8017b5c:	4373      	muls	r3, r6
 8017b5e:	fb0e 8807 	mla	r8, lr, r7, r8
 8017b62:	7817      	ldrb	r7, [r2, #0]
 8017b64:	fb0e 330c 	mla	r3, lr, ip, r3
 8017b68:	fb01 8807 	mla	r8, r1, r7, r8
 8017b6c:	7807      	ldrb	r7, [r0, #0]
 8017b6e:	fb09 8707 	mla	r7, r9, r7, r8
 8017b72:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017b76:	ea4a 0707 	orr.w	r7, sl, r7
 8017b7a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017b7e:	fb01 310a 	mla	r1, r1, sl, r3
 8017b82:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b88:	fb09 1a0a 	mla	sl, r9, sl, r1
 8017b8c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017b90:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017b94:	ea47 070a 	orr.w	r7, r7, sl
 8017b98:	801f      	strh	r7, [r3, #0]
 8017b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b9c:	3302      	adds	r3, #2
 8017b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8017ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017ba2:	449b      	add	fp, r3
 8017ba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017ba6:	441d      	add	r5, r3
 8017ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017baa:	3b01      	subs	r3, #1
 8017bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bae:	e770      	b.n	8017a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017bb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017bb2:	449b      	add	fp, r3
 8017bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017bb6:	441d      	add	r5, r3
 8017bb8:	9b06      	ldr	r3, [sp, #24]
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	9306      	str	r3, [sp, #24]
 8017bbe:	9b07      	ldr	r3, [sp, #28]
 8017bc0:	3302      	adds	r3, #2
 8017bc2:	9307      	str	r3, [sp, #28]
 8017bc4:	e745      	b.n	8017a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017bc6:	d023      	beq.n	8017c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8017bc8:	9b06      	ldr	r3, [sp, #24]
 8017bca:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017bcc:	3b01      	subs	r3, #1
 8017bce:	fb00 b003 	mla	r0, r0, r3, fp
 8017bd2:	1400      	asrs	r0, r0, #16
 8017bd4:	f53f af59 	bmi.w	8017a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017bd8:	3901      	subs	r1, #1
 8017bda:	4288      	cmp	r0, r1
 8017bdc:	f6bf af55 	bge.w	8017a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017be0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017be2:	fb01 5303 	mla	r3, r1, r3, r5
 8017be6:	141b      	asrs	r3, r3, #16
 8017be8:	f53f af4f 	bmi.w	8017a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017bec:	3a01      	subs	r2, #1
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	f6bf af4b 	bge.w	8017a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017bf4:	9b06      	ldr	r3, [sp, #24]
 8017bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8017bf8:	9b07      	ldr	r3, [sp, #28]
 8017bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	dc70      	bgt.n	8017ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8017c02:	9b06      	ldr	r3, [sp, #24]
 8017c04:	9a07      	ldr	r2, [sp, #28]
 8017c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017c0e:	9307      	str	r3, [sp, #28]
 8017c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f340 80eb 	ble.w	8017dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8017c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017c22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017c26:	eef0 6a48 	vmov.f32	s13, s16
 8017c2a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017c2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c36:	ee16 ba90 	vmov	fp, s13
 8017c3a:	eef0 6a68 	vmov.f32	s13, s17
 8017c3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c42:	ee16 5a90 	vmov	r5, s13
 8017c46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017c4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017c4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017c52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017c56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017c5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017c5e:	ee18 2a10 	vmov	r2, s16
 8017c62:	eeb0 8a47 	vmov.f32	s16, s14
 8017c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c6a:	ee18 2a90 	vmov	r2, s17
 8017c6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8017c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c72:	eef0 8a67 	vmov.f32	s17, s15
 8017c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c7a:	9324      	str	r3, [sp, #144]	; 0x90
 8017c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c80:	3b01      	subs	r3, #1
 8017c82:	930a      	str	r3, [sp, #40]	; 0x28
 8017c84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c86:	bf08      	it	eq
 8017c88:	4613      	moveq	r3, r2
 8017c8a:	9306      	str	r3, [sp, #24]
 8017c8c:	e6d3      	b.n	8017a36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8017c8e:	b149      	cbz	r1, 8017ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8017c90:	5cba      	ldrb	r2, [r7, r2]
 8017c92:	4660      	mov	r0, ip
 8017c94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c98:	4422      	add	r2, r4
 8017c9a:	4666      	mov	r6, ip
 8017c9c:	e734      	b.n	8017b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017c9e:	4660      	mov	r0, ip
 8017ca0:	4662      	mov	r2, ip
 8017ca2:	e731      	b.n	8017b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017ca4:	4660      	mov	r0, ip
 8017ca6:	4662      	mov	r2, ip
 8017ca8:	e7f7      	b.n	8017c9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017caa:	f110 0c01 	adds.w	ip, r0, #1
 8017cae:	f53f af74 	bmi.w	8017b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017cb2:	4562      	cmp	r2, ip
 8017cb4:	f6ff af71 	blt.w	8017b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017cb8:	f116 0c01 	adds.w	ip, r6, #1
 8017cbc:	f53f af6d 	bmi.w	8017b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017cc0:	4567      	cmp	r7, ip
 8017cc2:	f6ff af6a 	blt.w	8017b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017cc6:	b23f      	sxth	r7, r7
 8017cc8:	b212      	sxth	r2, r2
 8017cca:	9701      	str	r7, [sp, #4]
 8017ccc:	9200      	str	r2, [sp, #0]
 8017cce:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017cd2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8017cd6:	4623      	mov	r3, r4
 8017cd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017cda:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017cde:	f7ff fdc5 	bl	801786c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8017ce2:	e75a      	b.n	8017b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017ce4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017ce6:	ea4f 462b 	mov.w	r6, fp, asr #16
 8017cea:	1428      	asrs	r0, r5, #16
 8017cec:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8017cf0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017cf4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017cf8:	fb02 6000 	mla	r0, r2, r0, r6
 8017cfc:	9e08      	ldr	r6, [sp, #32]
 8017cfe:	f816 8000 	ldrb.w	r8, [r6, r0]
 8017d02:	1837      	adds	r7, r6, r0
 8017d04:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017d08:	eb04 0c08 	add.w	ip, r4, r8
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d060      	beq.n	8017dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8017d10:	787e      	ldrb	r6, [r7, #1]
 8017d12:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017d16:	4426      	add	r6, r4
 8017d18:	2900      	cmp	r1, #0
 8017d1a:	d062      	beq.n	8017de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8017d1c:	18b8      	adds	r0, r7, r2
 8017d1e:	5cba      	ldrb	r2, [r7, r2]
 8017d20:	7840      	ldrb	r0, [r0, #1]
 8017d22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017d2a:	4422      	add	r2, r4
 8017d2c:	4420      	add	r0, r4
 8017d2e:	b29b      	uxth	r3, r3
 8017d30:	78b7      	ldrb	r7, [r6, #2]
 8017d32:	b289      	uxth	r1, r1
 8017d34:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017d38:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017d3c:	fb03 f901 	mul.w	r9, r3, r1
 8017d40:	011b      	lsls	r3, r3, #4
 8017d42:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017d46:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017d4a:	eba3 0309 	sub.w	r3, r3, r9
 8017d4e:	b289      	uxth	r1, r1
 8017d50:	b29b      	uxth	r3, r3
 8017d52:	ebae 0e01 	sub.w	lr, lr, r1
 8017d56:	435f      	muls	r7, r3
 8017d58:	fa1f fe8e 	uxth.w	lr, lr
 8017d5c:	fb0e 770a 	mla	r7, lr, sl, r7
 8017d60:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017d64:	fb01 770a 	mla	r7, r1, sl, r7
 8017d68:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017d6c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017d70:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017d74:	f896 8000 	ldrb.w	r8, [r6]
 8017d78:	7876      	ldrb	r6, [r6, #1]
 8017d7a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017d7e:	fb03 f808 	mul.w	r8, r3, r8
 8017d82:	4373      	muls	r3, r6
 8017d84:	7856      	ldrb	r6, [r2, #1]
 8017d86:	fb0e 8807 	mla	r8, lr, r7, r8
 8017d8a:	7817      	ldrb	r7, [r2, #0]
 8017d8c:	fb0e 330c 	mla	r3, lr, ip, r3
 8017d90:	fb01 8807 	mla	r8, r1, r7, r8
 8017d94:	7807      	ldrb	r7, [r0, #0]
 8017d96:	fb01 3306 	mla	r3, r1, r6, r3
 8017d9a:	fb09 8707 	mla	r7, r9, r7, r8
 8017d9e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017da2:	ea4a 0707 	orr.w	r7, sl, r7
 8017da6:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017daa:	fb09 3a0a 	mla	sl, r9, sl, r3
 8017dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017db0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017db4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017db8:	ea47 070a 	orr.w	r7, r7, sl
 8017dbc:	f823 7b02 	strh.w	r7, [r3], #2
 8017dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017dc4:	449b      	add	fp, r3
 8017dc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017dc8:	441d      	add	r5, r3
 8017dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dcc:	3b01      	subs	r3, #1
 8017dce:	9309      	str	r3, [sp, #36]	; 0x24
 8017dd0:	e714      	b.n	8017bfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8017dd2:	b149      	cbz	r1, 8017de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8017dd4:	5cba      	ldrb	r2, [r7, r2]
 8017dd6:	4660      	mov	r0, ip
 8017dd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ddc:	4422      	add	r2, r4
 8017dde:	4666      	mov	r6, ip
 8017de0:	e7a5      	b.n	8017d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8017de2:	4660      	mov	r0, ip
 8017de4:	4662      	mov	r2, ip
 8017de6:	e7a2      	b.n	8017d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8017de8:	4660      	mov	r0, ip
 8017dea:	4662      	mov	r2, ip
 8017dec:	e7f7      	b.n	8017dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8017dee:	b00f      	add	sp, #60	; 0x3c
 8017df0:	ecbd 8b08 	vpop	{d8-d11}
 8017df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017df8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8017df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfc:	880e      	ldrh	r6, [r1, #0]
 8017dfe:	b085      	sub	sp, #20
 8017e00:	4691      	mov	r9, r2
 8017e02:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8017e06:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8017e0a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017e0e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8017e12:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8017e16:	00f6      	lsls	r6, r6, #3
 8017e18:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8017e1c:	9200      	str	r2, [sp, #0]
 8017e1e:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8017e22:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8017e26:	9201      	str	r2, [sp, #4]
 8017e28:	b2f2      	uxtb	r2, r6
 8017e2a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8017e2e:	9202      	str	r2, [sp, #8]
 8017e30:	fb04 560c 	mla	r6, r4, ip, r5
 8017e34:	2c00      	cmp	r4, #0
 8017e36:	eb09 0e06 	add.w	lr, r9, r6
 8017e3a:	db3e      	blt.n	8017eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8017e3c:	45a0      	cmp	r8, r4
 8017e3e:	dd3c      	ble.n	8017eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8017e40:	2d00      	cmp	r5, #0
 8017e42:	db38      	blt.n	8017eb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8017e44:	45ac      	cmp	ip, r5
 8017e46:	dd36      	ble.n	8017eb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8017e48:	f819 2006 	ldrb.w	r2, [r9, r6]
 8017e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017e50:	1c6e      	adds	r6, r5, #1
 8017e52:	d435      	bmi.n	8017ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8017e54:	45b4      	cmp	ip, r6
 8017e56:	dd33      	ble.n	8017ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8017e58:	b3a0      	cbz	r0, 8017ec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8017e5a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8017e5e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8017e62:	3401      	adds	r4, #1
 8017e64:	d432      	bmi.n	8017ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8017e66:	45a0      	cmp	r8, r4
 8017e68:	dd30      	ble.n	8017ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8017e6a:	b397      	cbz	r7, 8017ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8017e6c:	2d00      	cmp	r5, #0
 8017e6e:	db2b      	blt.n	8017ec8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8017e70:	45ac      	cmp	ip, r5
 8017e72:	dd29      	ble.n	8017ec8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8017e74:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8017e78:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8017e7c:	3501      	adds	r5, #1
 8017e7e:	d42b      	bmi.n	8017ed8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8017e80:	45ac      	cmp	ip, r5
 8017e82:	dd29      	ble.n	8017ed8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8017e84:	b350      	cbz	r0, 8017edc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8017e86:	44f4      	add	ip, lr
 8017e88:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8017e8c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e90:	280f      	cmp	r0, #15
 8017e92:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8017e96:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017e9a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017e9e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8017ea2:	d801      	bhi.n	8017ea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8017ea4:	2f0f      	cmp	r7, #15
 8017ea6:	d91b      	bls.n	8017ee0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8017ea8:	4b85      	ldr	r3, [pc, #532]	; (80180c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8017eaa:	f240 210d 	movw	r1, #525	; 0x20d
 8017eae:	4a85      	ldr	r2, [pc, #532]	; (80180c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8017eb0:	4885      	ldr	r0, [pc, #532]	; (80180c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 8017eb2:	f006 fa49 	bl	801e348 <__assert_func>
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	e7ca      	b.n	8017e50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8017eba:	2600      	movs	r6, #0
 8017ebc:	4632      	mov	r2, r6
 8017ebe:	e7d0      	b.n	8017e62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8017ec0:	2600      	movs	r6, #0
 8017ec2:	e7ce      	b.n	8017e62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	e7cc      	b.n	8017e62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8017ec8:	2400      	movs	r4, #0
 8017eca:	e7d7      	b.n	8017e7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8017ecc:	2300      	movs	r3, #0
 8017ece:	461c      	mov	r4, r3
 8017ed0:	e7de      	b.n	8017e90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8017ed2:	463b      	mov	r3, r7
 8017ed4:	463c      	mov	r4, r7
 8017ed6:	e7db      	b.n	8017e90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8017ed8:	2300      	movs	r3, #0
 8017eda:	e7d9      	b.n	8017e90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8017edc:	4603      	mov	r3, r0
 8017ede:	e7d7      	b.n	8017e90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8017ee0:	b280      	uxth	r0, r0
 8017ee2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017ee6:	b2bf      	uxth	r7, r7
 8017ee8:	fb00 fe07 	mul.w	lr, r0, r7
 8017eec:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017ef0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017ef4:	eba0 0c0e 	sub.w	ip, r0, lr
 8017ef8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8017efc:	b2bf      	uxth	r7, r7
 8017efe:	fa1f fc8c 	uxth.w	ip, ip
 8017f02:	eba5 0507 	sub.w	r5, r5, r7
 8017f06:	fb0c f00a 	mul.w	r0, ip, sl
 8017f0a:	b2ad      	uxth	r5, r5
 8017f0c:	fb05 000b 	mla	r0, r5, fp, r0
 8017f10:	fb07 0009 	mla	r0, r7, r9, r0
 8017f14:	fb0e 0008 	mla	r0, lr, r8, r0
 8017f18:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017f1c:	9003      	str	r0, [sp, #12]
 8017f1e:	d018      	beq.n	8017f52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 8017f20:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8017f24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017f28:	fb0b f000 	mul.w	r0, fp, r0
 8017f2c:	fb0b fb02 	mul.w	fp, fp, r2
 8017f30:	0a02      	lsrs	r2, r0, #8
 8017f32:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017f36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017f3a:	4402      	add	r2, r0
 8017f3c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8017f40:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8017f44:	0a12      	lsrs	r2, r2, #8
 8017f46:	0a00      	lsrs	r0, r0, #8
 8017f48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017f4c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017f50:	4302      	orrs	r2, r0
 8017f52:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017f56:	d019      	beq.n	8017f8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8017f58:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8017f5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017f60:	fb0a fb0b 	mul.w	fp, sl, fp
 8017f64:	fb0a fa06 	mul.w	sl, sl, r6
 8017f68:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8017f6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017f70:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8017f74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017f78:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8017f7c:	445e      	add	r6, fp
 8017f7e:	0a00      	lsrs	r0, r0, #8
 8017f80:	0a36      	lsrs	r6, r6, #8
 8017f82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017f86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017f8a:	4306      	orrs	r6, r0
 8017f8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017f90:	d019      	beq.n	8017fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 8017f92:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017f96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017f9a:	fb09 fa0a 	mul.w	sl, r9, sl
 8017f9e:	fb09 f904 	mul.w	r9, r9, r4
 8017fa2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017fa6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017faa:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8017fae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017fb2:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8017fb6:	4454      	add	r4, sl
 8017fb8:	0a00      	lsrs	r0, r0, #8
 8017fba:	0a24      	lsrs	r4, r4, #8
 8017fbc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017fc0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017fc4:	4304      	orrs	r4, r0
 8017fc6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017fca:	d019      	beq.n	8018000 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8017fcc:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017fd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fd4:	fb08 f909 	mul.w	r9, r8, r9
 8017fd8:	fb08 f803 	mul.w	r8, r8, r3
 8017fdc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017fe0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017fe4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8017fe8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fec:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8017ff0:	444b      	add	r3, r9
 8017ff2:	0a00      	lsrs	r0, r0, #8
 8017ff4:	0a1b      	lsrs	r3, r3, #8
 8017ff6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017ffa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017ffe:	4303      	orrs	r3, r0
 8018000:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018004:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018008:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801800c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018010:	fb0c f808 	mul.w	r8, ip, r8
 8018014:	fb0c f606 	mul.w	r6, ip, r6
 8018018:	fb05 8800 	mla	r8, r5, r0, r8
 801801c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018020:	fb05 6202 	mla	r2, r5, r2, r6
 8018024:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018028:	fb07 8800 	mla	r8, r7, r0, r8
 801802c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018030:	b2ad      	uxth	r5, r5
 8018032:	fb0e 8000 	mla	r0, lr, r0, r8
 8018036:	0a00      	lsrs	r0, r0, #8
 8018038:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801803c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8018040:	9c00      	ldr	r4, [sp, #0]
 8018042:	fb07 2700 	mla	r7, r7, r0, r2
 8018046:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801804a:	9b03      	ldr	r3, [sp, #12]
 801804c:	fb0e 7000 	mla	r0, lr, r0, r7
 8018050:	436b      	muls	r3, r5
 8018052:	0a00      	lsrs	r0, r0, #8
 8018054:	1c5a      	adds	r2, r3, #1
 8018056:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801805a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801805e:	ea48 0000 	orr.w	r0, r8, r0
 8018062:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8018066:	0c03      	lsrs	r3, r0, #16
 8018068:	b2d2      	uxtb	r2, r2
 801806a:	fb14 f602 	smulbb	r6, r4, r2
 801806e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018072:	b2c0      	uxtb	r0, r0
 8018074:	fb03 6305 	mla	r3, r3, r5, r6
 8018078:	b29e      	uxth	r6, r3
 801807a:	9b01      	ldr	r3, [sp, #4]
 801807c:	fb13 f302 	smulbb	r3, r3, r2
 8018080:	fb04 3405 	mla	r4, r4, r5, r3
 8018084:	9b02      	ldr	r3, [sp, #8]
 8018086:	fb13 f202 	smulbb	r2, r3, r2
 801808a:	b2a4      	uxth	r4, r4
 801808c:	1c73      	adds	r3, r6, #1
 801808e:	fb00 2005 	mla	r0, r0, r5, r2
 8018092:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8018096:	b280      	uxth	r0, r0
 8018098:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801809c:	1c42      	adds	r2, r0, #1
 801809e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80180a2:	1c62      	adds	r2, r4, #1
 80180a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80180a8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80180ac:	0952      	lsrs	r2, r2, #5
 80180ae:	4303      	orrs	r3, r0
 80180b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80180b4:	4313      	orrs	r3, r2
 80180b6:	800b      	strh	r3, [r1, #0]
 80180b8:	b005      	add	sp, #20
 80180ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180be:	bf00      	nop
 80180c0:	08022952 	.word	0x08022952
 80180c4:	08022f15 	.word	0x08022f15
 80180c8:	08022a3b 	.word	0x08022a3b

080180cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d0:	ed2d 8b08 	vpush	{d8-d11}
 80180d4:	b09f      	sub	sp, #124	; 0x7c
 80180d6:	eeb0 aa40 	vmov.f32	s20, s0
 80180da:	eef0 9a60 	vmov.f32	s19, s1
 80180de:	921b      	str	r2, [sp, #108]	; 0x6c
 80180e0:	eeb0 9a41 	vmov.f32	s18, s2
 80180e4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80180e6:	eeb0 8a62 	vmov.f32	s16, s5
 80180ea:	9309      	str	r3, [sp, #36]	; 0x24
 80180ec:	eef0 8a43 	vmov.f32	s17, s6
 80180f0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80180f4:	eef0 ba44 	vmov.f32	s23, s8
 80180f8:	901d      	str	r0, [sp, #116]	; 0x74
 80180fa:	eeb0 ba64 	vmov.f32	s22, s9
 80180fe:	931c      	str	r3, [sp, #112]	; 0x70
 8018100:	eef0 aa45 	vmov.f32	s21, s10
 8018104:	6850      	ldr	r0, [r2, #4]
 8018106:	9119      	str	r1, [sp, #100]	; 0x64
 8018108:	6812      	ldr	r2, [r2, #0]
 801810a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801810c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8018110:	fb00 1303 	mla	r3, r0, r3, r1
 8018114:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018118:	930c      	str	r3, [sp, #48]	; 0x30
 801811a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	9312      	str	r3, [sp, #72]	; 0x48
 8018120:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018122:	685e      	ldr	r6, [r3, #4]
 8018124:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8018128:	3604      	adds	r6, #4
 801812a:	930d      	str	r3, [sp, #52]	; 0x34
 801812c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801812e:	2b00      	cmp	r3, #0
 8018130:	dc03      	bgt.n	801813a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018134:	2b00      	cmp	r3, #0
 8018136:	f340 838d 	ble.w	8018854 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 801813a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801813c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018140:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018144:	1e48      	subs	r0, r1, #1
 8018146:	1e57      	subs	r7, r2, #1
 8018148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801814a:	2b00      	cmp	r3, #0
 801814c:	f340 819a 	ble.w	8018484 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8018150:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018152:	142b      	asrs	r3, r5, #16
 8018154:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018158:	d406      	bmi.n	8018168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801815a:	4584      	cmp	ip, r0
 801815c:	da04      	bge.n	8018168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801815e:	2b00      	cmp	r3, #0
 8018160:	db02      	blt.n	8018168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018162:	42bb      	cmp	r3, r7
 8018164:	f2c0 818f 	blt.w	8018486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8018168:	f11c 0c01 	adds.w	ip, ip, #1
 801816c:	f100 817d 	bmi.w	801846a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8018170:	4561      	cmp	r1, ip
 8018172:	f2c0 817a 	blt.w	801846a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8018176:	3301      	adds	r3, #1
 8018178:	f100 8177 	bmi.w	801846a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801817c:	429a      	cmp	r2, r3
 801817e:	f2c0 8174 	blt.w	801846a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8018182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018184:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018186:	931a      	str	r3, [sp, #104]	; 0x68
 8018188:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801818a:	2b00      	cmp	r3, #0
 801818c:	f340 8199 	ble.w	80184c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8018190:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018192:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018196:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801819a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801819e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80181a0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80181a4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80181a6:	141b      	asrs	r3, r3, #16
 80181a8:	f100 81dc 	bmi.w	8018564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80181ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80181b0:	4543      	cmp	r3, r8
 80181b2:	f280 81d7 	bge.w	8018564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80181b6:	f1bc 0f00 	cmp.w	ip, #0
 80181ba:	f2c0 81d3 	blt.w	8018564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80181be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80181c2:	45c4      	cmp	ip, r8
 80181c4:	f280 81ce 	bge.w	8018564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80181c8:	b200      	sxth	r0, r0
 80181ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80181cc:	fb0c 3300 	mla	r3, ip, r0, r3
 80181d0:	eb04 0803 	add.w	r8, r4, r3
 80181d4:	5ce3      	ldrb	r3, [r4, r3]
 80181d6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80181da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80181de:	2a00      	cmp	r2, #0
 80181e0:	f000 81b5 	beq.w	801854e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80181e4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80181e8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80181ec:	940e      	str	r4, [sp, #56]	; 0x38
 80181ee:	0e24      	lsrs	r4, r4, #24
 80181f0:	9415      	str	r4, [sp, #84]	; 0x54
 80181f2:	b179      	cbz	r1, 8018214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80181f4:	eb08 0c00 	add.w	ip, r8, r0
 80181f8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80181fc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018200:	900a      	str	r0, [sp, #40]	; 0x28
 8018202:	0e00      	lsrs	r0, r0, #24
 8018204:	9013      	str	r0, [sp, #76]	; 0x4c
 8018206:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801820a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801820e:	900f      	str	r0, [sp, #60]	; 0x3c
 8018210:	0e00      	lsrs	r0, r0, #24
 8018212:	9016      	str	r0, [sp, #88]	; 0x58
 8018214:	b292      	uxth	r2, r2
 8018216:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018218:	b289      	uxth	r1, r1
 801821a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801821c:	fb02 f901 	mul.w	r9, r2, r1
 8018220:	0112      	lsls	r2, r2, #4
 8018222:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018226:	eba2 0809 	sub.w	r8, r2, r9
 801822a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801822e:	b289      	uxth	r1, r1
 8018230:	fa1f f888 	uxth.w	r8, r8
 8018234:	1a52      	subs	r2, r2, r1
 8018236:	fb08 f000 	mul.w	r0, r8, r0
 801823a:	b292      	uxth	r2, r2
 801823c:	fb02 000e 	mla	r0, r2, lr, r0
 8018240:	fb01 0004 	mla	r0, r1, r4, r0
 8018244:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018246:	fb09 0004 	mla	r0, r9, r4, r0
 801824a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801824e:	2800      	cmp	r0, #0
 8018250:	f000 8100 	beq.w	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8018254:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018258:	d01b      	beq.n	8018292 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801825a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801825e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018262:	fb0e fa0a 	mul.w	sl, lr, sl
 8018266:	fb0e fe03 	mul.w	lr, lr, r3
 801826a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801826e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018272:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018276:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801827a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801827e:	4453      	add	r3, sl
 8018280:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018284:	0a1b      	lsrs	r3, r3, #8
 8018286:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801828a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801828e:	ea43 030c 	orr.w	r3, r3, ip
 8018292:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018294:	2cff      	cmp	r4, #255	; 0xff
 8018296:	d021      	beq.n	80182dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018298:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801829a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801829e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80182a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80182a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80182a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80182aa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80182ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80182b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80182b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80182c0:	44de      	add	lr, fp
 80182c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80182c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80182d6:	ea4e 040a 	orr.w	r4, lr, sl
 80182da:	940e      	str	r4, [sp, #56]	; 0x38
 80182dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182de:	2cff      	cmp	r4, #255	; 0xff
 80182e0:	d021      	beq.n	8018326 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80182e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80182e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80182ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80182f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80182fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8018302:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018306:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801830a:	44de      	add	lr, fp
 801830c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018310:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018318:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801831c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018320:	ea4e 040a 	orr.w	r4, lr, sl
 8018324:	940a      	str	r4, [sp, #40]	; 0x28
 8018326:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018328:	2cff      	cmp	r4, #255	; 0xff
 801832a:	d021      	beq.n	8018370 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801832c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801832e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018332:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018334:	fb04 fb0b 	mul.w	fp, r4, fp
 8018338:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801833a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801833e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018340:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018344:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018348:	fb04 fa0a 	mul.w	sl, r4, sl
 801834c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018350:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018354:	44de      	add	lr, fp
 8018356:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801835a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801835e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018362:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018366:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801836a:	ea4e 040a 	orr.w	r4, lr, sl
 801836e:	940f      	str	r4, [sp, #60]	; 0x3c
 8018370:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018372:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801837a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801837e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018380:	fb08 fc0c 	mul.w	ip, r8, ip
 8018384:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018388:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801838c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801838e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018392:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018396:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018398:	fb09 cc0e 	mla	ip, r9, lr, ip
 801839c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80183a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80183a2:	fb08 f80e 	mul.w	r8, r8, lr
 80183a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80183aa:	f8b7 e000 	ldrh.w	lr, [r7]
 80183ae:	fb02 8303 	mla	r3, r2, r3, r8
 80183b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80183bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183be:	fb01 330a 	mla	r3, r1, sl, r3
 80183c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80183c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80183c8:	fb09 3901 	mla	r9, r9, r1, r3
 80183cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80183d2:	4343      	muls	r3, r0
 80183d4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80183d8:	1c58      	adds	r0, r3, #1
 80183da:	ea4c 0c09 	orr.w	ip, ip, r9
 80183de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80183e2:	ea4f 232e 	mov.w	r3, lr, asr #8
 80183e6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80183ea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80183ee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80183f2:	fb11 f102 	smulbb	r1, r1, r2
 80183f6:	b2c0      	uxtb	r0, r0
 80183f8:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80183fc:	fb03 1300 	mla	r3, r3, r0, r1
 8018400:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018404:	b299      	uxth	r1, r3
 8018406:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801840a:	fa5f fc8c 	uxtb.w	ip, ip
 801840e:	fb13 f304 	smulbb	r3, r3, r4
 8018412:	fb1c fc04 	smulbb	ip, ip, r4
 8018416:	fb02 3200 	mla	r2, r2, r0, r3
 801841a:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 801841e:	b2db      	uxtb	r3, r3
 8018420:	b292      	uxth	r2, r2
 8018422:	fb03 cc00 	mla	ip, r3, r0, ip
 8018426:	1c4b      	adds	r3, r1, #1
 8018428:	fa1f fc8c 	uxth.w	ip, ip
 801842c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018430:	1c51      	adds	r1, r2, #1
 8018432:	f10c 0001 	add.w	r0, ip, #1
 8018436:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801843a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801843e:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8018442:	0952      	lsrs	r2, r2, #5
 8018444:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018448:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801844c:	ea43 030c 	orr.w	r3, r3, ip
 8018450:	4313      	orrs	r3, r2
 8018452:	803b      	strh	r3, [r7, #0]
 8018454:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018456:	3702      	adds	r7, #2
 8018458:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801845a:	441a      	add	r2, r3
 801845c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801845e:	441d      	add	r5, r3
 8018460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018462:	9231      	str	r2, [sp, #196]	; 0xc4
 8018464:	3b01      	subs	r3, #1
 8018466:	931a      	str	r3, [sp, #104]	; 0x68
 8018468:	e68e      	b.n	8018188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801846a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801846c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801846e:	441c      	add	r4, r3
 8018470:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018472:	441d      	add	r5, r3
 8018474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018476:	9431      	str	r4, [sp, #196]	; 0xc4
 8018478:	3b01      	subs	r3, #1
 801847a:	9309      	str	r3, [sp, #36]	; 0x24
 801847c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801847e:	3302      	adds	r3, #2
 8018480:	930c      	str	r3, [sp, #48]	; 0x30
 8018482:	e661      	b.n	8018148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018484:	d024      	beq.n	80184d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8018486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018488:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801848a:	3b01      	subs	r3, #1
 801848c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801848e:	fb00 4003 	mla	r0, r0, r3, r4
 8018492:	1400      	asrs	r0, r0, #16
 8018494:	f53f ae75 	bmi.w	8018182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018498:	3901      	subs	r1, #1
 801849a:	4288      	cmp	r0, r1
 801849c:	f6bf ae71 	bge.w	8018182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80184a0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80184a2:	fb01 5303 	mla	r3, r1, r3, r5
 80184a6:	141b      	asrs	r3, r3, #16
 80184a8:	f53f ae6b 	bmi.w	8018182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80184ac:	3a01      	subs	r2, #1
 80184ae:	4293      	cmp	r3, r2
 80184b0:	f6bf ae67 	bge.w	8018182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80184b4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80184b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80184bc:	f1bb 0f00 	cmp.w	fp, #0
 80184c0:	dc70      	bgt.n	80185a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80184c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80184c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80184ce:	930c      	str	r3, [sp, #48]	; 0x30
 80184d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	f340 81be 	ble.w	8018854 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 80184d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80184dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80184de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80184e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80184e6:	eef0 6a48 	vmov.f32	s13, s16
 80184ea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80184ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80184f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80184f6:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80184fa:	eef0 6a68 	vmov.f32	s13, s17
 80184fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018502:	ee16 5a90 	vmov	r5, s13
 8018506:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801850a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801850e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018512:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018516:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801851a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801851e:	ee18 2a10 	vmov	r2, s16
 8018522:	eeb0 8a47 	vmov.f32	s16, s14
 8018526:	fb92 f3f3 	sdiv	r3, r2, r3
 801852a:	ee18 2a90 	vmov	r2, s17
 801852e:	9333      	str	r3, [sp, #204]	; 0xcc
 8018530:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018532:	eef0 8a67 	vmov.f32	s17, s15
 8018536:	fb92 f3f3 	sdiv	r3, r2, r3
 801853a:	9334      	str	r3, [sp, #208]	; 0xd0
 801853c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801853e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018540:	3b01      	subs	r3, #1
 8018542:	9319      	str	r3, [sp, #100]	; 0x64
 8018544:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018546:	bf08      	it	eq
 8018548:	4613      	moveq	r3, r2
 801854a:	9309      	str	r3, [sp, #36]	; 0x24
 801854c:	e5ee      	b.n	801812c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801854e:	2900      	cmp	r1, #0
 8018550:	f43f ae60 	beq.w	8018214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018554:	f818 0000 	ldrb.w	r0, [r8, r0]
 8018558:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801855c:	900a      	str	r0, [sp, #40]	; 0x28
 801855e:	0e00      	lsrs	r0, r0, #24
 8018560:	9013      	str	r0, [sp, #76]	; 0x4c
 8018562:	e657      	b.n	8018214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018564:	f113 0801 	adds.w	r8, r3, #1
 8018568:	f53f af74 	bmi.w	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801856c:	4540      	cmp	r0, r8
 801856e:	f6ff af71 	blt.w	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8018572:	f11c 0801 	adds.w	r8, ip, #1
 8018576:	f53f af6d 	bmi.w	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801857a:	45c6      	cmp	lr, r8
 801857c:	f6ff af6a 	blt.w	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8018580:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018582:	b200      	sxth	r0, r0
 8018584:	9302      	str	r3, [sp, #8]
 8018586:	fa0f f38e 	sxth.w	r3, lr
 801858a:	9000      	str	r0, [sp, #0]
 801858c:	9301      	str	r3, [sp, #4]
 801858e:	4633      	mov	r3, r6
 8018590:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018592:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018596:	e9cd c203 	strd	ip, r2, [sp, #12]
 801859a:	4639      	mov	r1, r7
 801859c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801859e:	f7ff fc2b 	bl	8017df8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80185a2:	e757      	b.n	8018454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80185a4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80185a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80185aa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80185ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80185b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80185b2:	1427      	asrs	r7, r4, #16
 80185b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80185b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80185ba:	142b      	asrs	r3, r5, #16
 80185bc:	fb01 7303 	mla	r3, r1, r3, r7
 80185c0:	18e7      	adds	r7, r4, r3
 80185c2:	5ce3      	ldrb	r3, [r4, r3]
 80185c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80185c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80185cc:	2a00      	cmp	r2, #0
 80185ce:	f000 8137 	beq.w	8018840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 80185d2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80185d6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80185da:	9410      	str	r4, [sp, #64]	; 0x40
 80185dc:	0e24      	lsrs	r4, r4, #24
 80185de:	9417      	str	r4, [sp, #92]	; 0x5c
 80185e0:	b170      	cbz	r0, 8018600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80185e2:	eb07 0e01 	add.w	lr, r7, r1
 80185e6:	5c79      	ldrb	r1, [r7, r1]
 80185e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80185ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80185ee:	0e09      	lsrs	r1, r1, #24
 80185f0:	9114      	str	r1, [sp, #80]	; 0x50
 80185f2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80185f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80185fa:	9111      	str	r1, [sp, #68]	; 0x44
 80185fc:	0e09      	lsrs	r1, r1, #24
 80185fe:	9118      	str	r1, [sp, #96]	; 0x60
 8018600:	b292      	uxth	r2, r2
 8018602:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018604:	b280      	uxth	r0, r0
 8018606:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018608:	fb02 f800 	mul.w	r8, r2, r0
 801860c:	0112      	lsls	r2, r2, #4
 801860e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8018612:	eba2 0e08 	sub.w	lr, r2, r8
 8018616:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801861a:	b280      	uxth	r0, r0
 801861c:	fa1f fe8e 	uxth.w	lr, lr
 8018620:	1a12      	subs	r2, r2, r0
 8018622:	fb0e f101 	mul.w	r1, lr, r1
 8018626:	b292      	uxth	r2, r2
 8018628:	fb02 110c 	mla	r1, r2, ip, r1
 801862c:	fb00 1104 	mla	r1, r0, r4, r1
 8018630:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018632:	fb08 1104 	mla	r1, r8, r4, r1
 8018636:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801863a:	2900      	cmp	r1, #0
 801863c:	f000 80f5 	beq.w	801882a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8018640:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018644:	d019      	beq.n	801867a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8018646:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801864a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801864e:	fb0c fa0a 	mul.w	sl, ip, sl
 8018652:	fb0c fc03 	mul.w	ip, ip, r3
 8018656:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801865a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801865e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018662:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018666:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801866a:	4453      	add	r3, sl
 801866c:	0a3f      	lsrs	r7, r7, #8
 801866e:	0a1b      	lsrs	r3, r3, #8
 8018670:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018674:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018678:	433b      	orrs	r3, r7
 801867a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801867c:	2cff      	cmp	r4, #255	; 0xff
 801867e:	d020      	beq.n	80186c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8018680:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018682:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018686:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018688:	4367      	muls	r7, r4
 801868a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801868c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018690:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018694:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018696:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801869a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801869e:	fb04 fa0a 	mul.w	sl, r4, sl
 80186a2:	44bc      	add	ip, r7
 80186a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80186a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80186b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80186bc:	ea4c 040a 	orr.w	r4, ip, sl
 80186c0:	9410      	str	r4, [sp, #64]	; 0x40
 80186c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186c4:	2cff      	cmp	r4, #255	; 0xff
 80186c6:	d020      	beq.n	801870a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 80186c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80186ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186d0:	4367      	muls	r7, r4
 80186d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80186d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80186dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80186e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80186ea:	44bc      	add	ip, r7
 80186ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80186f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80186f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018700:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018704:	ea4c 040a 	orr.w	r4, ip, sl
 8018708:	940b      	str	r4, [sp, #44]	; 0x2c
 801870a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801870c:	2cff      	cmp	r4, #255	; 0xff
 801870e:	d020      	beq.n	8018752 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 8018710:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018712:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018716:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018718:	4367      	muls	r7, r4
 801871a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801871c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018720:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018724:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018726:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801872a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801872e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018732:	44bc      	add	ip, r7
 8018734:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801873c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018740:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018744:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018748:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801874c:	ea4c 040a 	orr.w	r4, ip, sl
 8018750:	9411      	str	r4, [sp, #68]	; 0x44
 8018752:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018754:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801875c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018760:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018762:	fb0e f707 	mul.w	r7, lr, r7
 8018766:	fb02 770c 	mla	r7, r2, ip, r7
 801876a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801876e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018770:	fb00 770c 	mla	r7, r0, ip, r7
 8018774:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018778:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801877a:	fb08 770c 	mla	r7, r8, ip, r7
 801877e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018782:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018784:	fb0e fe0c 	mul.w	lr, lr, ip
 8018788:	0a3f      	lsrs	r7, r7, #8
 801878a:	fb02 e303 	mla	r3, r2, r3, lr
 801878e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018790:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018794:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018798:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801879a:	fb00 330a 	mla	r3, r0, sl, r3
 801879e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80187a2:	f8b9 0000 	ldrh.w	r0, [r9]
 80187a6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80187aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187ac:	1202      	asrs	r2, r0, #8
 80187ae:	434b      	muls	r3, r1
 80187b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80187b4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80187b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80187bc:	1c59      	adds	r1, r3, #1
 80187be:	ea47 070c 	orr.w	r7, r7, ip
 80187c2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80187c6:	0c3b      	lsrs	r3, r7, #16
 80187c8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80187cc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80187d0:	b2ff      	uxtb	r7, r7
 80187d2:	fb13 f304 	smulbb	r3, r3, r4
 80187d6:	b2c9      	uxtb	r1, r1
 80187d8:	fb1c fc04 	smulbb	ip, ip, r4
 80187dc:	fb02 3201 	mla	r2, r2, r1, r3
 80187e0:	10c3      	asrs	r3, r0, #3
 80187e2:	fb17 f704 	smulbb	r7, r7, r4
 80187e6:	00c0      	lsls	r0, r0, #3
 80187e8:	b292      	uxth	r2, r2
 80187ea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80187ee:	b2c0      	uxtb	r0, r0
 80187f0:	fb03 c301 	mla	r3, r3, r1, ip
 80187f4:	f102 0c01 	add.w	ip, r2, #1
 80187f8:	fb00 7001 	mla	r0, r0, r1, r7
 80187fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018800:	b280      	uxth	r0, r0
 8018802:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8018806:	b29b      	uxth	r3, r3
 8018808:	1c42      	adds	r2, r0, #1
 801880a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801880e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8018812:	ea4c 0200 	orr.w	r2, ip, r0
 8018816:	f103 0c01 	add.w	ip, r3, #1
 801881a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801881e:	095b      	lsrs	r3, r3, #5
 8018820:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018824:	431a      	orrs	r2, r3
 8018826:	f8a9 2000 	strh.w	r2, [r9]
 801882a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801882c:	f109 0902 	add.w	r9, r9, #2
 8018830:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018836:	441a      	add	r2, r3
 8018838:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801883a:	9231      	str	r2, [sp, #196]	; 0xc4
 801883c:	441d      	add	r5, r3
 801883e:	e63d      	b.n	80184bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8018840:	2800      	cmp	r0, #0
 8018842:	f43f aedd 	beq.w	8018600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8018846:	5c79      	ldrb	r1, [r7, r1]
 8018848:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801884c:	910b      	str	r1, [sp, #44]	; 0x2c
 801884e:	0e09      	lsrs	r1, r1, #24
 8018850:	9114      	str	r1, [sp, #80]	; 0x50
 8018852:	e6d5      	b.n	8018600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8018854:	b01f      	add	sp, #124	; 0x7c
 8018856:	ecbd 8b08 	vpop	{d8-d11}
 801885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8018860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018864:	880e      	ldrh	r6, [r1, #0]
 8018866:	b085      	sub	sp, #20
 8018868:	4691      	mov	r9, r2
 801886a:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801886e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8018872:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8018876:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 801887a:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 801887e:	00f6      	lsls	r6, r6, #3
 8018880:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8018884:	9200      	str	r2, [sp, #0]
 8018886:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 801888a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801888e:	9201      	str	r2, [sp, #4]
 8018890:	b2f2      	uxtb	r2, r6
 8018892:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8018896:	9202      	str	r2, [sp, #8]
 8018898:	fb04 560c 	mla	r6, r4, ip, r5
 801889c:	2c00      	cmp	r4, #0
 801889e:	eb09 0e06 	add.w	lr, r9, r6
 80188a2:	db3e      	blt.n	8018922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80188a4:	45a0      	cmp	r8, r4
 80188a6:	dd3c      	ble.n	8018922 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80188a8:	2d00      	cmp	r5, #0
 80188aa:	db38      	blt.n	801891e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80188ac:	45ac      	cmp	ip, r5
 80188ae:	dd36      	ble.n	801891e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80188b0:	f819 2006 	ldrb.w	r2, [r9, r6]
 80188b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80188b8:	1c6e      	adds	r6, r5, #1
 80188ba:	d435      	bmi.n	8018928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80188bc:	45b4      	cmp	ip, r6
 80188be:	dd33      	ble.n	8018928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80188c0:	b3a0      	cbz	r0, 801892c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80188c2:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80188c6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80188ca:	3401      	adds	r4, #1
 80188cc:	d432      	bmi.n	8018934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80188ce:	45a0      	cmp	r8, r4
 80188d0:	dd30      	ble.n	8018934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80188d2:	b397      	cbz	r7, 801893a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 80188d4:	2d00      	cmp	r5, #0
 80188d6:	db2b      	blt.n	8018930 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80188d8:	45ac      	cmp	ip, r5
 80188da:	dd29      	ble.n	8018930 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80188dc:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80188e0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80188e4:	3501      	adds	r5, #1
 80188e6:	d42b      	bmi.n	8018940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 80188e8:	45ac      	cmp	ip, r5
 80188ea:	dd29      	ble.n	8018940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 80188ec:	b350      	cbz	r0, 8018944 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 80188ee:	44f4      	add	ip, lr
 80188f0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80188f4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80188f8:	280f      	cmp	r0, #15
 80188fa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80188fe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018902:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018906:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801890a:	d801      	bhi.n	8018910 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 801890c:	2f0f      	cmp	r7, #15
 801890e:	d91b      	bls.n	8018948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 8018910:	4b7e      	ldr	r3, [pc, #504]	; (8018b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8018912:	f240 210d 	movw	r1, #525	; 0x20d
 8018916:	4a7e      	ldr	r2, [pc, #504]	; (8018b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8018918:	487e      	ldr	r0, [pc, #504]	; (8018b14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801891a:	f005 fd15 	bl	801e348 <__assert_func>
 801891e:	2200      	movs	r2, #0
 8018920:	e7ca      	b.n	80188b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8018922:	2600      	movs	r6, #0
 8018924:	4632      	mov	r2, r6
 8018926:	e7d0      	b.n	80188ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8018928:	2600      	movs	r6, #0
 801892a:	e7ce      	b.n	80188ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801892c:	4606      	mov	r6, r0
 801892e:	e7cc      	b.n	80188ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8018930:	2400      	movs	r4, #0
 8018932:	e7d7      	b.n	80188e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8018934:	2300      	movs	r3, #0
 8018936:	461c      	mov	r4, r3
 8018938:	e7de      	b.n	80188f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801893a:	463b      	mov	r3, r7
 801893c:	463c      	mov	r4, r7
 801893e:	e7db      	b.n	80188f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8018940:	2300      	movs	r3, #0
 8018942:	e7d9      	b.n	80188f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8018944:	4603      	mov	r3, r0
 8018946:	e7d7      	b.n	80188f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8018948:	b280      	uxth	r0, r0
 801894a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801894e:	b2bf      	uxth	r7, r7
 8018950:	fb00 fe07 	mul.w	lr, r0, r7
 8018954:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018958:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801895c:	eba0 0c0e 	sub.w	ip, r0, lr
 8018960:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8018964:	b2bf      	uxth	r7, r7
 8018966:	fa1f fc8c 	uxth.w	ip, ip
 801896a:	eba5 0507 	sub.w	r5, r5, r7
 801896e:	fb0c f00a 	mul.w	r0, ip, sl
 8018972:	b2ad      	uxth	r5, r5
 8018974:	fb05 000b 	mla	r0, r5, fp, r0
 8018978:	fb07 0009 	mla	r0, r7, r9, r0
 801897c:	fb0e 0008 	mla	r0, lr, r8, r0
 8018980:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018984:	9003      	str	r0, [sp, #12]
 8018986:	d018      	beq.n	80189ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 8018988:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801898c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018990:	fb0b f000 	mul.w	r0, fp, r0
 8018994:	fb0b fb02 	mul.w	fp, fp, r2
 8018998:	0a02      	lsrs	r2, r0, #8
 801899a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801899e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80189a2:	4402      	add	r2, r0
 80189a4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80189a8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80189ac:	0a12      	lsrs	r2, r2, #8
 80189ae:	0a00      	lsrs	r0, r0, #8
 80189b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80189b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80189b8:	4302      	orrs	r2, r0
 80189ba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80189be:	d019      	beq.n	80189f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 80189c0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80189c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80189c8:	fb0a fb0b 	mul.w	fp, sl, fp
 80189cc:	fb0a fa06 	mul.w	sl, sl, r6
 80189d0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80189d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80189d8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80189dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80189e0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80189e4:	445e      	add	r6, fp
 80189e6:	0a00      	lsrs	r0, r0, #8
 80189e8:	0a36      	lsrs	r6, r6, #8
 80189ea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80189ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80189f2:	4306      	orrs	r6, r0
 80189f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80189f8:	d019      	beq.n	8018a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 80189fa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80189fe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018a02:	fb09 fa0a 	mul.w	sl, r9, sl
 8018a06:	fb09 f904 	mul.w	r9, r9, r4
 8018a0a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018a0e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018a12:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8018a16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018a1a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8018a1e:	4454      	add	r4, sl
 8018a20:	0a00      	lsrs	r0, r0, #8
 8018a22:	0a24      	lsrs	r4, r4, #8
 8018a24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018a28:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018a2c:	4304      	orrs	r4, r0
 8018a2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018a32:	d019      	beq.n	8018a68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 8018a34:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018a38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a3c:	fb08 f909 	mul.w	r9, r8, r9
 8018a40:	fb08 f803 	mul.w	r8, r8, r3
 8018a44:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018a48:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018a4c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8018a50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018a54:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8018a58:	444b      	add	r3, r9
 8018a5a:	0a00      	lsrs	r0, r0, #8
 8018a5c:	0a1b      	lsrs	r3, r3, #8
 8018a5e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018a62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018a66:	4303      	orrs	r3, r0
 8018a68:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018a6c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018a70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018a74:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018a78:	fb0c f808 	mul.w	r8, ip, r8
 8018a7c:	fb0c f606 	mul.w	r6, ip, r6
 8018a80:	fb05 8800 	mla	r8, r5, r0, r8
 8018a84:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018a88:	fb05 6202 	mla	r2, r5, r2, r6
 8018a8c:	9d01      	ldr	r5, [sp, #4]
 8018a8e:	fb07 8800 	mla	r8, r7, r0, r8
 8018a92:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018a96:	fb0e 8000 	mla	r0, lr, r0, r8
 8018a9a:	0a00      	lsrs	r0, r0, #8
 8018a9c:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8018aa0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8018aa4:	9c02      	ldr	r4, [sp, #8]
 8018aa6:	fb07 2700 	mla	r7, r7, r0, r2
 8018aaa:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8018aae:	9b03      	ldr	r3, [sp, #12]
 8018ab0:	fb0e 7000 	mla	r0, lr, r0, r7
 8018ab4:	43da      	mvns	r2, r3
 8018ab6:	9b00      	ldr	r3, [sp, #0]
 8018ab8:	0a00      	lsrs	r0, r0, #8
 8018aba:	b2d2      	uxtb	r2, r2
 8018abc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018ac0:	4353      	muls	r3, r2
 8018ac2:	4354      	muls	r4, r2
 8018ac4:	ea48 0000 	orr.w	r0, r8, r0
 8018ac8:	4355      	muls	r5, r2
 8018aca:	4622      	mov	r2, r4
 8018acc:	1c5c      	adds	r4, r3, #1
 8018ace:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8018ad2:	0c03      	lsrs	r3, r0, #16
 8018ad4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8018ad8:	4b0f      	ldr	r3, [pc, #60]	; (8018b18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 8018ada:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8018ade:	1c54      	adds	r4, r2, #1
 8018ae0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018ae4:	b2c2      	uxtb	r2, r0
 8018ae6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018aea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018aee:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8018af2:	1c6a      	adds	r2, r5, #1
 8018af4:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8018af8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018afc:	00c0      	lsls	r0, r0, #3
 8018afe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018b02:	4318      	orrs	r0, r3
 8018b04:	8008      	strh	r0, [r1, #0]
 8018b06:	b005      	add	sp, #20
 8018b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b0c:	08022952 	.word	0x08022952
 8018b10:	08022f15 	.word	0x08022f15
 8018b14:	08022a3b 	.word	0x08022a3b
 8018b18:	fffff800 	.word	0xfffff800

08018b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b20:	ed2d 8b08 	vpush	{d8-d11}
 8018b24:	b09b      	sub	sp, #108	; 0x6c
 8018b26:	eeb0 aa40 	vmov.f32	s20, s0
 8018b2a:	eef0 9a60 	vmov.f32	s19, s1
 8018b2e:	9218      	str	r2, [sp, #96]	; 0x60
 8018b30:	eeb0 9a41 	vmov.f32	s18, s2
 8018b34:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018b36:	eeb0 8a62 	vmov.f32	s16, s5
 8018b3a:	9019      	str	r0, [sp, #100]	; 0x64
 8018b3c:	eef0 8a43 	vmov.f32	s17, s6
 8018b40:	6850      	ldr	r0, [r2, #4]
 8018b42:	eef0 ba44 	vmov.f32	s23, s8
 8018b46:	9116      	str	r1, [sp, #88]	; 0x58
 8018b48:	eeb0 ba64 	vmov.f32	s22, s9
 8018b4c:	9307      	str	r3, [sp, #28]
 8018b4e:	eef0 aa45 	vmov.f32	s21, s10
 8018b52:	6812      	ldr	r2, [r2, #0]
 8018b54:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8018b56:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8018b5a:	fb00 1303 	mla	r3, r0, r3, r1
 8018b5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018b62:	930a      	str	r3, [sp, #40]	; 0x28
 8018b64:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b6a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018b6c:	685e      	ldr	r6, [r3, #4]
 8018b6e:	3604      	adds	r6, #4
 8018b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	dc03      	bgt.n	8018b7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018b76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	f340 836f 	ble.w	801925c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8018b7e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018b80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018b84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018b88:	1e48      	subs	r0, r1, #1
 8018b8a:	1e57      	subs	r7, r2, #1
 8018b8c:	9b07      	ldr	r3, [sp, #28]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	f340 8188 	ble.w	8018ea4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8018b94:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8018b96:	142b      	asrs	r3, r5, #16
 8018b98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018b9c:	d406      	bmi.n	8018bac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018b9e:	4584      	cmp	ip, r0
 8018ba0:	da04      	bge.n	8018bac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	db02      	blt.n	8018bac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018ba6:	42bb      	cmp	r3, r7
 8018ba8:	f2c0 817d 	blt.w	8018ea6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018bac:	f11c 0c01 	adds.w	ip, ip, #1
 8018bb0:	f100 816b 	bmi.w	8018e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018bb4:	4561      	cmp	r1, ip
 8018bb6:	f2c0 8168 	blt.w	8018e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018bba:	3301      	adds	r3, #1
 8018bbc:	f100 8165 	bmi.w	8018e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	f2c0 8162 	blt.w	8018e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018bc6:	9b07      	ldr	r3, [sp, #28]
 8018bc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018bca:	9317      	str	r3, [sp, #92]	; 0x5c
 8018bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	f340 8187 	ble.w	8018ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018bd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018bd6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018bda:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018bde:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018be2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018be4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018be8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018bea:	141b      	asrs	r3, r3, #16
 8018bec:	f100 81ca 	bmi.w	8018f84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8018bf0:	f101 38ff 	add.w	r8, r1, #4294967295
 8018bf4:	4543      	cmp	r3, r8
 8018bf6:	f280 81c5 	bge.w	8018f84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8018bfa:	f1bc 0f00 	cmp.w	ip, #0
 8018bfe:	f2c0 81c1 	blt.w	8018f84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8018c02:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018c06:	45c4      	cmp	ip, r8
 8018c08:	f280 81bc 	bge.w	8018f84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8018c0c:	b209      	sxth	r1, r1
 8018c0e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018c10:	fb0c 3301 	mla	r3, ip, r1, r3
 8018c14:	eb04 0803 	add.w	r8, r4, r3
 8018c18:	5ce3      	ldrb	r3, [r4, r3]
 8018c1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018c1e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018c22:	2a00      	cmp	r2, #0
 8018c24:	f000 81a3 	beq.w	8018f6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8018c28:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018c2c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018c30:	940b      	str	r4, [sp, #44]	; 0x2c
 8018c32:	0e24      	lsrs	r4, r4, #24
 8018c34:	9412      	str	r4, [sp, #72]	; 0x48
 8018c36:	b178      	cbz	r0, 8018c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8018c38:	eb08 0c01 	add.w	ip, r8, r1
 8018c3c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018c40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c44:	9108      	str	r1, [sp, #32]
 8018c46:	0e09      	lsrs	r1, r1, #24
 8018c48:	9110      	str	r1, [sp, #64]	; 0x40
 8018c4a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018c4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c52:	910c      	str	r1, [sp, #48]	; 0x30
 8018c54:	0e09      	lsrs	r1, r1, #24
 8018c56:	9113      	str	r1, [sp, #76]	; 0x4c
 8018c58:	b292      	uxth	r2, r2
 8018c5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018c5c:	b280      	uxth	r0, r0
 8018c5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c60:	fb02 f900 	mul.w	r9, r2, r0
 8018c64:	0112      	lsls	r2, r2, #4
 8018c66:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018c6a:	eba2 0809 	sub.w	r8, r2, r9
 8018c6e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018c72:	b280      	uxth	r0, r0
 8018c74:	fa1f f888 	uxth.w	r8, r8
 8018c78:	1a12      	subs	r2, r2, r0
 8018c7a:	fb08 f101 	mul.w	r1, r8, r1
 8018c7e:	b292      	uxth	r2, r2
 8018c80:	fb02 110e 	mla	r1, r2, lr, r1
 8018c84:	fb00 1104 	mla	r1, r0, r4, r1
 8018c88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c8a:	fb09 1104 	mla	r1, r9, r4, r1
 8018c8e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018c92:	2900      	cmp	r1, #0
 8018c94:	f000 80ee 	beq.w	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018c98:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018c9c:	d01b      	beq.n	8018cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018c9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018ca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ca6:	fb0e fa0a 	mul.w	sl, lr, sl
 8018caa:	fb0e fe03 	mul.w	lr, lr, r3
 8018cae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018cb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018cb6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018cbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018cc2:	4453      	add	r3, sl
 8018cc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018cc8:	0a1b      	lsrs	r3, r3, #8
 8018cca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018cce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018cd2:	ea43 030c 	orr.w	r3, r3, ip
 8018cd6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018cd8:	2cff      	cmp	r4, #255	; 0xff
 8018cda:	d021      	beq.n	8018d20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018cdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018cde:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018ce2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018ce4:	fb04 fb0b 	mul.w	fp, r4, fp
 8018ce8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018cea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018cee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018cf0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018cf4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018cf8:	fb04 fa0a 	mul.w	sl, r4, sl
 8018cfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d00:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018d04:	44de      	add	lr, fp
 8018d06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018d0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018d0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018d1a:	ea4e 040a 	orr.w	r4, lr, sl
 8018d1e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018d20:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018d22:	2cff      	cmp	r4, #255	; 0xff
 8018d24:	d021      	beq.n	8018d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8018d26:	9c08      	ldr	r4, [sp, #32]
 8018d28:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018d2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018d2e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018d32:	9c08      	ldr	r4, [sp, #32]
 8018d34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018d38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018d3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018d3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018d42:	fb04 fa0a 	mul.w	sl, r4, sl
 8018d46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d4a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018d4e:	44de      	add	lr, fp
 8018d50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018d54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018d58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018d64:	ea4e 040a 	orr.w	r4, lr, sl
 8018d68:	9408      	str	r4, [sp, #32]
 8018d6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d6c:	2cff      	cmp	r4, #255	; 0xff
 8018d6e:	d021      	beq.n	8018db4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8018d70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d72:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018d76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d78:	fb04 fb0b 	mul.w	fp, r4, fp
 8018d7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018d82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018d88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018d8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018d90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018d98:	44de      	add	lr, fp
 8018d9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018d9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018da2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018da6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018daa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018dae:	ea4e 040a 	orr.w	r4, lr, sl
 8018db2:	940c      	str	r4, [sp, #48]	; 0x30
 8018db4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018db6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018dbe:	43c9      	mvns	r1, r1
 8018dc0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018dc4:	9c08      	ldr	r4, [sp, #32]
 8018dc6:	b2c9      	uxtb	r1, r1
 8018dc8:	fb08 fc0c 	mul.w	ip, r8, ip
 8018dcc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018dd0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018dd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018dd6:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018dda:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018dde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018de0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018de4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018de8:	fb08 f80e 	mul.w	r8, r8, lr
 8018dec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018df0:	fb02 8303 	mla	r3, r2, r3, r8
 8018df4:	9a08      	ldr	r2, [sp, #32]
 8018df6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018dfa:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e00:	fb00 330a 	mla	r3, r0, sl, r3
 8018e04:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018e08:	fb09 3900 	mla	r9, r9, r0, r3
 8018e0c:	883b      	ldrh	r3, [r7, #0]
 8018e0e:	1218      	asrs	r0, r3, #8
 8018e10:	10da      	asrs	r2, r3, #3
 8018e12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018e16:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018e1a:	00db      	lsls	r3, r3, #3
 8018e1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018e20:	4348      	muls	r0, r1
 8018e22:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	434a      	muls	r2, r1
 8018e2a:	ea4c 0c09 	orr.w	ip, ip, r9
 8018e2e:	434b      	muls	r3, r1
 8018e30:	1c41      	adds	r1, r0, #1
 8018e32:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8018e36:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8018e3a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8018e3e:	4960      	ldr	r1, [pc, #384]	; (8018fc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8018e40:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8018e44:	1c59      	adds	r1, r3, #1
 8018e46:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018e4a:	fa5f f38c 	uxtb.w	r3, ip
 8018e4e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8018e52:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018e56:	1c51      	adds	r1, r2, #1
 8018e58:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018e5c:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8018e60:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8018e64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018e68:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8018e6c:	ea43 0c0c 	orr.w	ip, r3, ip
 8018e70:	f8a7 c000 	strh.w	ip, [r7]
 8018e74:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018e76:	3702      	adds	r7, #2
 8018e78:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018e7a:	441a      	add	r2, r3
 8018e7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018e7e:	441d      	add	r5, r3
 8018e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e82:	922d      	str	r2, [sp, #180]	; 0xb4
 8018e84:	3b01      	subs	r3, #1
 8018e86:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e88:	e6a0      	b.n	8018bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018e8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018e8c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8018e8e:	441c      	add	r4, r3
 8018e90:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018e92:	441d      	add	r5, r3
 8018e94:	9b07      	ldr	r3, [sp, #28]
 8018e96:	942d      	str	r4, [sp, #180]	; 0xb4
 8018e98:	3b01      	subs	r3, #1
 8018e9a:	9307      	str	r3, [sp, #28]
 8018e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e9e:	3302      	adds	r3, #2
 8018ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8018ea2:	e673      	b.n	8018b8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018ea4:	d024      	beq.n	8018ef0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8018ea6:	9b07      	ldr	r3, [sp, #28]
 8018ea8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8018eaa:	3b01      	subs	r3, #1
 8018eac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8018eae:	fb00 4003 	mla	r0, r0, r3, r4
 8018eb2:	1400      	asrs	r0, r0, #16
 8018eb4:	f53f ae87 	bmi.w	8018bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018eb8:	3901      	subs	r1, #1
 8018eba:	4288      	cmp	r0, r1
 8018ebc:	f6bf ae83 	bge.w	8018bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018ec0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018ec2:	fb01 5303 	mla	r3, r1, r3, r5
 8018ec6:	141b      	asrs	r3, r3, #16
 8018ec8:	f53f ae7d 	bmi.w	8018bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018ecc:	3a01      	subs	r2, #1
 8018ece:	4293      	cmp	r3, r2
 8018ed0:	f6bf ae79 	bge.w	8018bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018ed4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018ed8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8018edc:	f1bb 0f00 	cmp.w	fp, #0
 8018ee0:	dc70      	bgt.n	8018fc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8018ee2:	9b07      	ldr	r3, [sp, #28]
 8018ee4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018eea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8018eee:	930a      	str	r3, [sp, #40]	; 0x28
 8018ef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	f340 81b2 	ble.w	801925c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8018ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018efc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018efe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018f02:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018f06:	eef0 6a48 	vmov.f32	s13, s16
 8018f0a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018f0e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018f12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f16:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8018f1a:	eef0 6a68 	vmov.f32	s13, s17
 8018f1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f22:	ee16 5a90 	vmov	r5, s13
 8018f26:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018f2a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018f2e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018f32:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018f36:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018f3a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018f3e:	ee18 2a10 	vmov	r2, s16
 8018f42:	eeb0 8a47 	vmov.f32	s16, s14
 8018f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f4a:	ee18 2a90 	vmov	r2, s17
 8018f4e:	932f      	str	r3, [sp, #188]	; 0xbc
 8018f50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f52:	eef0 8a67 	vmov.f32	s17, s15
 8018f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f5a:	9330      	str	r3, [sp, #192]	; 0xc0
 8018f5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018f5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018f60:	3b01      	subs	r3, #1
 8018f62:	9316      	str	r3, [sp, #88]	; 0x58
 8018f64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f66:	bf08      	it	eq
 8018f68:	4613      	moveq	r3, r2
 8018f6a:	9307      	str	r3, [sp, #28]
 8018f6c:	e600      	b.n	8018b70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018f6e:	2800      	cmp	r0, #0
 8018f70:	f43f ae72 	beq.w	8018c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8018f74:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018f78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f7c:	9108      	str	r1, [sp, #32]
 8018f7e:	0e09      	lsrs	r1, r1, #24
 8018f80:	9110      	str	r1, [sp, #64]	; 0x40
 8018f82:	e669      	b.n	8018c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8018f84:	f113 0801 	adds.w	r8, r3, #1
 8018f88:	f53f af74 	bmi.w	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018f8c:	4541      	cmp	r1, r8
 8018f8e:	f6ff af71 	blt.w	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018f92:	f11c 0801 	adds.w	r8, ip, #1
 8018f96:	f53f af6d 	bmi.w	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018f9a:	45c6      	cmp	lr, r8
 8018f9c:	f6ff af6a 	blt.w	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018fa0:	b209      	sxth	r1, r1
 8018fa2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018fa6:	fa0f f38e 	sxth.w	r3, lr
 8018faa:	9100      	str	r1, [sp, #0]
 8018fac:	4639      	mov	r1, r7
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	4633      	mov	r3, r6
 8018fb2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018fb8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018fba:	f7ff fc51 	bl	8018860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8018fbe:	e759      	b.n	8018e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8018fc0:	fffff800 	.word	0xfffff800
 8018fc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018fc6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018fca:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8018fcc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018fd0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018fd2:	1427      	asrs	r7, r4, #16
 8018fd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018fd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018fda:	142b      	asrs	r3, r5, #16
 8018fdc:	fb01 7303 	mla	r3, r1, r3, r7
 8018fe0:	18e7      	adds	r7, r4, r3
 8018fe2:	5ce3      	ldrb	r3, [r4, r3]
 8018fe4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018fe8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018fec:	2a00      	cmp	r2, #0
 8018fee:	f000 812b 	beq.w	8019248 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8018ff2:	f897 e001 	ldrb.w	lr, [r7, #1]
 8018ff6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8018ffa:	940d      	str	r4, [sp, #52]	; 0x34
 8018ffc:	0e24      	lsrs	r4, r4, #24
 8018ffe:	9414      	str	r4, [sp, #80]	; 0x50
 8019000:	b170      	cbz	r0, 8019020 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8019002:	eb07 0e01 	add.w	lr, r7, r1
 8019006:	5c79      	ldrb	r1, [r7, r1]
 8019008:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801900c:	9109      	str	r1, [sp, #36]	; 0x24
 801900e:	0e09      	lsrs	r1, r1, #24
 8019010:	9111      	str	r1, [sp, #68]	; 0x44
 8019012:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8019016:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801901a:	910e      	str	r1, [sp, #56]	; 0x38
 801901c:	0e09      	lsrs	r1, r1, #24
 801901e:	9115      	str	r1, [sp, #84]	; 0x54
 8019020:	b292      	uxth	r2, r2
 8019022:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019024:	b280      	uxth	r0, r0
 8019026:	fb02 f800 	mul.w	r8, r2, r0
 801902a:	0112      	lsls	r2, r2, #4
 801902c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8019030:	eba2 0e08 	sub.w	lr, r2, r8
 8019034:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801903a:	b280      	uxth	r0, r0
 801903c:	fa1f fe8e 	uxth.w	lr, lr
 8019040:	1a09      	subs	r1, r1, r0
 8019042:	fb0e f202 	mul.w	r2, lr, r2
 8019046:	b289      	uxth	r1, r1
 8019048:	fb01 220c 	mla	r2, r1, ip, r2
 801904c:	fb00 2204 	mla	r2, r0, r4, r2
 8019050:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019052:	fb08 2204 	mla	r2, r8, r4, r2
 8019056:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801905a:	2a00      	cmp	r2, #0
 801905c:	f000 80e9 	beq.w	8019232 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8019060:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019064:	d019      	beq.n	801909a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8019066:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801906a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801906e:	fb0c fa0a 	mul.w	sl, ip, sl
 8019072:	fb0c fc03 	mul.w	ip, ip, r3
 8019076:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801907a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801907e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019082:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019086:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801908a:	4453      	add	r3, sl
 801908c:	0a3f      	lsrs	r7, r7, #8
 801908e:	0a1b      	lsrs	r3, r3, #8
 8019090:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019094:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019098:	433b      	orrs	r3, r7
 801909a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801909c:	2cff      	cmp	r4, #255	; 0xff
 801909e:	d020      	beq.n	80190e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80190a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80190a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80190a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80190a8:	4367      	muls	r7, r4
 80190aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80190ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80190b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80190b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80190b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80190ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80190be:	fb04 fa0a 	mul.w	sl, r4, sl
 80190c2:	44bc      	add	ip, r7
 80190c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80190c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80190cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80190d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80190d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190dc:	ea4c 040a 	orr.w	r4, ip, sl
 80190e0:	940d      	str	r4, [sp, #52]	; 0x34
 80190e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80190e4:	2cff      	cmp	r4, #255	; 0xff
 80190e6:	d020      	beq.n	801912a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80190e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80190ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80190ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80190f0:	4367      	muls	r7, r4
 80190f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80190f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80190f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80190fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80190fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019102:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019106:	fb04 fa0a 	mul.w	sl, r4, sl
 801910a:	44bc      	add	ip, r7
 801910c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019114:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019118:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801911c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019120:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019124:	ea4c 040a 	orr.w	r4, ip, sl
 8019128:	9409      	str	r4, [sp, #36]	; 0x24
 801912a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801912c:	2cff      	cmp	r4, #255	; 0xff
 801912e:	d020      	beq.n	8019172 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8019130:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019132:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019136:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019138:	4367      	muls	r7, r4
 801913a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801913c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019140:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019144:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019146:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801914a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801914e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019152:	44bc      	add	ip, r7
 8019154:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019158:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801915c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019160:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019164:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019168:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801916c:	ea4c 040a 	orr.w	r4, ip, sl
 8019170:	940e      	str	r4, [sp, #56]	; 0x38
 8019172:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019174:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801917c:	43d2      	mvns	r2, r2
 801917e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019182:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019184:	b2d2      	uxtb	r2, r2
 8019186:	fb0e f707 	mul.w	r7, lr, r7
 801918a:	fb01 770c 	mla	r7, r1, ip, r7
 801918e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019192:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019194:	fb00 770c 	mla	r7, r0, ip, r7
 8019198:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801919c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801919e:	fb08 770c 	mla	r7, r8, ip, r7
 80191a2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80191a6:	fb0e fe0c 	mul.w	lr, lr, ip
 80191aa:	0a3f      	lsrs	r7, r7, #8
 80191ac:	fb01 e303 	mla	r3, r1, r3, lr
 80191b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80191b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80191b6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80191ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80191bc:	fb00 330a 	mla	r3, r0, sl, r3
 80191c0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80191c4:	fb08 3c0c 	mla	ip, r8, ip, r3
 80191c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80191cc:	1218      	asrs	r0, r3, #8
 80191ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80191d2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80191d6:	10d9      	asrs	r1, r3, #3
 80191d8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	4350      	muls	r0, r2
 80191e0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80191e4:	ea47 070c 	orr.w	r7, r7, ip
 80191e8:	b2db      	uxtb	r3, r3
 80191ea:	f100 0c01 	add.w	ip, r0, #1
 80191ee:	4351      	muls	r1, r2
 80191f0:	4353      	muls	r3, r2
 80191f2:	4a1d      	ldr	r2, [pc, #116]	; (8019268 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 80191f4:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80191f8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80191fc:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8019200:	f103 0c01 	add.w	ip, r3, #1
 8019204:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019208:	fa5f fc87 	uxtb.w	ip, r7
 801920c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8019210:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8019214:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019218:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801921c:	1c4b      	adds	r3, r1, #1
 801921e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8019222:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8019226:	00ff      	lsls	r7, r7, #3
 8019228:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801922c:	4338      	orrs	r0, r7
 801922e:	f8a9 0000 	strh.w	r0, [r9]
 8019232:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019234:	f109 0902 	add.w	r9, r9, #2
 8019238:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801923a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801923e:	441a      	add	r2, r3
 8019240:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019242:	922d      	str	r2, [sp, #180]	; 0xb4
 8019244:	441d      	add	r5, r3
 8019246:	e649      	b.n	8018edc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8019248:	2800      	cmp	r0, #0
 801924a:	f43f aee9 	beq.w	8019020 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801924e:	5c79      	ldrb	r1, [r7, r1]
 8019250:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019254:	9109      	str	r1, [sp, #36]	; 0x24
 8019256:	0e09      	lsrs	r1, r1, #24
 8019258:	9111      	str	r1, [sp, #68]	; 0x44
 801925a:	e6e1      	b.n	8019020 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801925c:	b01b      	add	sp, #108	; 0x6c
 801925e:	ecbd 8b08 	vpop	{d8-d11}
 8019262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019266:	bf00      	nop
 8019268:	fffff800 	.word	0xfffff800

0801926c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	b085      	sub	sp, #20
 8019272:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8019276:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801927a:	9103      	str	r1, [sp, #12]
 801927c:	2d00      	cmp	r5, #0
 801927e:	fb05 7106 	mla	r1, r5, r6, r7
 8019282:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8019286:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801928a:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801928e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8019292:	eb03 0901 	add.w	r9, r3, r1
 8019296:	9401      	str	r4, [sp, #4]
 8019298:	f2c0 80c0 	blt.w	801941c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801929c:	45a8      	cmp	r8, r5
 801929e:	f340 80bd 	ble.w	801941c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80192a2:	2f00      	cmp	r7, #0
 80192a4:	f2c0 80b6 	blt.w	8019414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80192a8:	42be      	cmp	r6, r7
 80192aa:	f340 80b3 	ble.w	8019414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80192ae:	f813 c001 	ldrb.w	ip, [r3, r1]
 80192b2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80192b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80192ba:	d019      	beq.n	80192f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80192bc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80192c0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80192c4:	435a      	muls	r2, r3
 80192c6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80192ca:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80192ce:	fb0c f403 	mul.w	r4, ip, r3
 80192d2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80192d6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80192da:	441a      	add	r2, r3
 80192dc:	f104 0320 	add.w	r3, r4, #32
 80192e0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80192e4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80192e8:	0a1b      	lsrs	r3, r3, #8
 80192ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80192ee:	4319      	orrs	r1, r3
 80192f0:	b289      	uxth	r1, r1
 80192f2:	1c7b      	adds	r3, r7, #1
 80192f4:	f100 8097 	bmi.w	8019426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80192f8:	429e      	cmp	r6, r3
 80192fa:	f340 8094 	ble.w	8019426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80192fe:	2800      	cmp	r0, #0
 8019300:	f000 8094 	beq.w	801942c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8019304:	f899 4001 	ldrb.w	r4, [r9, #1]
 8019308:	9b01      	ldr	r3, [sp, #4]
 801930a:	2cff      	cmp	r4, #255	; 0xff
 801930c:	885b      	ldrh	r3, [r3, #2]
 801930e:	d01b      	beq.n	8019348 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8019310:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8019314:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019318:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801931c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019320:	fb0a f202 	mul.w	r2, sl, r2
 8019324:	fb04 fa03 	mul.w	sl, r4, r3
 8019328:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801932c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019330:	441a      	add	r2, r3
 8019332:	f10a 0320 	add.w	r3, sl, #32
 8019336:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801933a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801933e:	0a1b      	lsrs	r3, r3, #8
 8019340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019344:	ea4b 0303 	orr.w	r3, fp, r3
 8019348:	b29b      	uxth	r3, r3
 801934a:	3501      	adds	r5, #1
 801934c:	d474      	bmi.n	8019438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801934e:	45a8      	cmp	r8, r5
 8019350:	dd72      	ble.n	8019438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8019352:	f1be 0f00 	cmp.w	lr, #0
 8019356:	f000 8120 	beq.w	801959a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801935a:	2f00      	cmp	r7, #0
 801935c:	db69      	blt.n	8019432 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801935e:	42be      	cmp	r6, r7
 8019360:	dd67      	ble.n	8019432 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8019362:	f819 5006 	ldrb.w	r5, [r9, r6]
 8019366:	9a01      	ldr	r2, [sp, #4]
 8019368:	2dff      	cmp	r5, #255	; 0xff
 801936a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801936e:	d01c      	beq.n	80193aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8019370:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8019374:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019378:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801937c:	fb08 f802 	mul.w	r8, r8, r2
 8019380:	fb05 fa0b 	mul.w	sl, r5, fp
 8019384:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019388:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801938c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019390:	4490      	add	r8, r2
 8019392:	f10a 0220 	add.w	r2, sl, #32
 8019396:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801939a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801939e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80193a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80193a6:	ea4b 0b0a 	orr.w	fp, fp, sl
 80193aa:	fa1f fb8b 	uxth.w	fp, fp
 80193ae:	3701      	adds	r7, #1
 80193b0:	d447      	bmi.n	8019442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80193b2:	42be      	cmp	r6, r7
 80193b4:	dd45      	ble.n	8019442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d046      	beq.n	8019448 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80193ba:	3601      	adds	r6, #1
 80193bc:	9a01      	ldr	r2, [sp, #4]
 80193be:	f819 7006 	ldrb.w	r7, [r9, r6]
 80193c2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80193c6:	2fff      	cmp	r7, #255	; 0xff
 80193c8:	d01a      	beq.n	8019400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80193ca:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80193ce:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80193d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80193d6:	fb08 f806 	mul.w	r8, r8, r6
 80193da:	fb07 f902 	mul.w	r9, r7, r2
 80193de:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80193e2:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80193e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80193ea:	44b0      	add	r8, r6
 80193ec:	f109 0620 	add.w	r6, r9, #32
 80193f0:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80193f4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80193f8:	0a36      	lsrs	r6, r6, #8
 80193fa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80193fe:	4332      	orrs	r2, r6
 8019400:	b292      	uxth	r2, r2
 8019402:	280f      	cmp	r0, #15
 8019404:	d922      	bls.n	801944c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8019406:	4b69      	ldr	r3, [pc, #420]	; (80195ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8019408:	f240 210d 	movw	r1, #525	; 0x20d
 801940c:	4a68      	ldr	r2, [pc, #416]	; (80195b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801940e:	4869      	ldr	r0, [pc, #420]	; (80195b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8019410:	f004 ff9a 	bl	801e348 <__assert_func>
 8019414:	f04f 0c00 	mov.w	ip, #0
 8019418:	4661      	mov	r1, ip
 801941a:	e76a      	b.n	80192f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801941c:	2400      	movs	r4, #0
 801941e:	46a4      	mov	ip, r4
 8019420:	4623      	mov	r3, r4
 8019422:	4621      	mov	r1, r4
 8019424:	e791      	b.n	801934a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8019426:	2400      	movs	r4, #0
 8019428:	4623      	mov	r3, r4
 801942a:	e78e      	b.n	801934a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801942c:	4604      	mov	r4, r0
 801942e:	4603      	mov	r3, r0
 8019430:	e78b      	b.n	801934a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8019432:	2500      	movs	r5, #0
 8019434:	46ab      	mov	fp, r5
 8019436:	e7ba      	b.n	80193ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8019438:	2700      	movs	r7, #0
 801943a:	463d      	mov	r5, r7
 801943c:	463a      	mov	r2, r7
 801943e:	46bb      	mov	fp, r7
 8019440:	e7df      	b.n	8019402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8019442:	2700      	movs	r7, #0
 8019444:	463a      	mov	r2, r7
 8019446:	e7dc      	b.n	8019402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8019448:	4607      	mov	r7, r0
 801944a:	4602      	mov	r2, r0
 801944c:	f1be 0f0f 	cmp.w	lr, #15
 8019450:	d8d9      	bhi.n	8019406 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8019452:	b286      	uxth	r6, r0
 8019454:	fa1f f98e 	uxth.w	r9, lr
 8019458:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801945c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019460:	fb06 f809 	mul.w	r8, r6, r9
 8019464:	0136      	lsls	r6, r6, #4
 8019466:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801946a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801946e:	9601      	str	r6, [sp, #4]
 8019470:	ea4a 0101 	orr.w	r1, sl, r1
 8019474:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8019478:	fa1f f689 	uxth.w	r6, r9
 801947c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019480:	fb10 f90e 	smulbb	r9, r0, lr
 8019484:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019488:	9602      	str	r6, [sp, #8]
 801948a:	460e      	mov	r6, r1
 801948c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8019490:	f1ce 0110 	rsb	r1, lr, #16
 8019494:	ea4a 0303 	orr.w	r3, sl, r3
 8019498:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801949c:	1a09      	subs	r1, r1, r0
 801949e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80194a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80194a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80194aa:	4343      	muls	r3, r0
 80194ac:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80194b0:	9801      	ldr	r0, [sp, #4]
 80194b2:	ea4a 0202 	orr.w	r2, sl, r2
 80194b6:	fb01 3106 	mla	r1, r1, r6, r3
 80194ba:	9e02      	ldr	r6, [sp, #8]
 80194bc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80194c0:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80194c4:	fb09 1302 	mla	r3, r9, r2, r1
 80194c8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80194cc:	1b80      	subs	r0, r0, r6
 80194ce:	9e01      	ldr	r6, [sp, #4]
 80194d0:	9a03      	ldr	r2, [sp, #12]
 80194d2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80194d6:	eba6 0608 	sub.w	r6, r6, r8
 80194da:	b280      	uxth	r0, r0
 80194dc:	8811      	ldrh	r1, [r2, #0]
 80194de:	ea4a 0b0b 	orr.w	fp, sl, fp
 80194e2:	b2b6      	uxth	r6, r6
 80194e4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80194e8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80194ec:	4374      	muls	r4, r6
 80194ee:	b292      	uxth	r2, r2
 80194f0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80194f4:	fb0c 4400 	mla	r4, ip, r0, r4
 80194f8:	9802      	ldr	r0, [sp, #8]
 80194fa:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80194fe:	fb00 4505 	mla	r5, r0, r5, r4
 8019502:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8019506:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801950a:	1208      	asrs	r0, r1, #8
 801950c:	fb08 5707 	mla	r7, r8, r7, r5
 8019510:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8019514:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019518:	10cd      	asrs	r5, r1, #3
 801951a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801951e:	ea43 0e0e 	orr.w	lr, r3, lr
 8019522:	00c9      	lsls	r1, r1, #3
 8019524:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019528:	4357      	muls	r7, r2
 801952a:	fa1f f38e 	uxth.w	r3, lr
 801952e:	b2c9      	uxtb	r1, r1
 8019530:	f107 0801 	add.w	r8, r7, #1
 8019534:	121c      	asrs	r4, r3, #8
 8019536:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801953a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801953e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8019542:	b2ff      	uxtb	r7, r7
 8019544:	fb10 f007 	smulbb	r0, r0, r7
 8019548:	fb11 f107 	smulbb	r1, r1, r7
 801954c:	fb04 0402 	mla	r4, r4, r2, r0
 8019550:	10d8      	asrs	r0, r3, #3
 8019552:	fb15 f507 	smulbb	r5, r5, r7
 8019556:	00db      	lsls	r3, r3, #3
 8019558:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801955c:	b2a4      	uxth	r4, r4
 801955e:	b2db      	uxtb	r3, r3
 8019560:	fb00 5002 	mla	r0, r0, r2, r5
 8019564:	fb03 1202 	mla	r2, r3, r2, r1
 8019568:	1c63      	adds	r3, r4, #1
 801956a:	b280      	uxth	r0, r0
 801956c:	b292      	uxth	r2, r2
 801956e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8019572:	1c51      	adds	r1, r2, #1
 8019574:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8019578:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801957c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019580:	4313      	orrs	r3, r2
 8019582:	1c42      	adds	r2, r0, #1
 8019584:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8019588:	9a03      	ldr	r2, [sp, #12]
 801958a:	0940      	lsrs	r0, r0, #5
 801958c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019590:	4303      	orrs	r3, r0
 8019592:	8013      	strh	r3, [r2, #0]
 8019594:	b005      	add	sp, #20
 8019596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801959a:	280f      	cmp	r0, #15
 801959c:	f63f af33 	bhi.w	8019406 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80195a0:	4677      	mov	r7, lr
 80195a2:	4675      	mov	r5, lr
 80195a4:	4672      	mov	r2, lr
 80195a6:	46f3      	mov	fp, lr
 80195a8:	e753      	b.n	8019452 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80195aa:	bf00      	nop
 80195ac:	08022952 	.word	0x08022952
 80195b0:	08022f15 	.word	0x08022f15
 80195b4:	08022a3b 	.word	0x08022a3b

080195b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80195b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195bc:	ed2d 8b08 	vpush	{d8-d11}
 80195c0:	b097      	sub	sp, #92	; 0x5c
 80195c2:	eeb0 aa40 	vmov.f32	s20, s0
 80195c6:	eef0 9a60 	vmov.f32	s19, s1
 80195ca:	9214      	str	r2, [sp, #80]	; 0x50
 80195cc:	eeb0 9a41 	vmov.f32	s18, s2
 80195d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80195d2:	eeb0 8a62 	vmov.f32	s16, s5
 80195d6:	9308      	str	r3, [sp, #32]
 80195d8:	eef0 8a43 	vmov.f32	s17, s6
 80195dc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80195e0:	eef0 ba44 	vmov.f32	s23, s8
 80195e4:	9015      	str	r0, [sp, #84]	; 0x54
 80195e6:	eeb0 ba64 	vmov.f32	s22, s9
 80195ea:	9312      	str	r3, [sp, #72]	; 0x48
 80195ec:	eef0 aa45 	vmov.f32	s21, s10
 80195f0:	6850      	ldr	r0, [r2, #4]
 80195f2:	9111      	str	r1, [sp, #68]	; 0x44
 80195f4:	6812      	ldr	r2, [r2, #0]
 80195f6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80195fa:	fb00 1303 	mla	r3, r0, r3, r1
 80195fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019602:	9309      	str	r3, [sp, #36]	; 0x24
 8019604:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	930b      	str	r3, [sp, #44]	; 0x2c
 801960a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	930c      	str	r3, [sp, #48]	; 0x30
 8019610:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019614:	930a      	str	r3, [sp, #40]	; 0x28
 8019616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019618:	2b00      	cmp	r3, #0
 801961a:	dc03      	bgt.n	8019624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801961c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801961e:	2b00      	cmp	r3, #0
 8019620:	f340 83cd 	ble.w	8019dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8019624:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019626:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801962a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801962e:	1e48      	subs	r0, r1, #1
 8019630:	1e55      	subs	r5, r2, #1
 8019632:	9b08      	ldr	r3, [sp, #32]
 8019634:	2b00      	cmp	r3, #0
 8019636:	f340 81a5 	ble.w	8019984 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801963a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801963c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801963e:	1436      	asrs	r6, r6, #16
 8019640:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019644:	d406      	bmi.n	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019646:	4286      	cmp	r6, r0
 8019648:	da04      	bge.n	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801964a:	2b00      	cmp	r3, #0
 801964c:	db02      	blt.n	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801964e:	42ab      	cmp	r3, r5
 8019650:	f2c0 8199 	blt.w	8019986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8019654:	3601      	adds	r6, #1
 8019656:	f100 8186 	bmi.w	8019966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801965a:	42b1      	cmp	r1, r6
 801965c:	f2c0 8183 	blt.w	8019966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8019660:	3301      	adds	r3, #1
 8019662:	f100 8180 	bmi.w	8019966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8019666:	429a      	cmp	r2, r3
 8019668:	f2c0 817d 	blt.w	8019966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801966c:	9b08      	ldr	r3, [sp, #32]
 801966e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8019672:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019674:	9313      	str	r3, [sp, #76]	; 0x4c
 8019676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019678:	2b00      	cmp	r3, #0
 801967a:	f340 81a6 	ble.w	80199ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801967e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019680:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8019682:	1418      	asrs	r0, r3, #16
 8019684:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019686:	142d      	asrs	r5, r5, #16
 8019688:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801968c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801968e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8019692:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019694:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019698:	f100 81fa 	bmi.w	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801969c:	f102 3eff 	add.w	lr, r2, #4294967295
 80196a0:	4575      	cmp	r5, lr
 80196a2:	f280 81f5 	bge.w	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80196a6:	2800      	cmp	r0, #0
 80196a8:	f2c0 81f2 	blt.w	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80196ac:	f103 3eff 	add.w	lr, r3, #4294967295
 80196b0:	4570      	cmp	r0, lr
 80196b2:	f280 81ed 	bge.w	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80196b6:	b212      	sxth	r2, r2
 80196b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196ba:	fa1f fe81 	uxth.w	lr, r1
 80196be:	fb00 5002 	mla	r0, r0, r2, r5
 80196c2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80196c6:	eb03 0a00 	add.w	sl, r3, r0
 80196ca:	f813 9000 	ldrb.w	r9, [r3, r0]
 80196ce:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80196d2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80196d6:	b29b      	uxth	r3, r3
 80196d8:	f1bc 0f00 	cmp.w	ip, #0
 80196dc:	f000 81bb 	beq.w	8019a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80196e0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80196e4:	eb0a 0b02 	add.w	fp, sl, r2
 80196e8:	fa1f fa8c 	uxth.w	sl, ip
 80196ec:	940d      	str	r4, [sp, #52]	; 0x34
 80196ee:	fb0a fe0e 	mul.w	lr, sl, lr
 80196f2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80196f6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80196fa:	eba5 050e 	sub.w	r5, r5, lr
 80196fe:	940e      	str	r4, [sp, #56]	; 0x38
 8019700:	fa1f fa8a 	uxth.w	sl, sl
 8019704:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019706:	b2ad      	uxth	r5, r5
 8019708:	eba3 030a 	sub.w	r3, r3, sl
 801970c:	fb08 f505 	mul.w	r5, r8, r5
 8019710:	b29b      	uxth	r3, r3
 8019712:	fb09 5303 	mla	r3, r9, r3, r5
 8019716:	fb0a 3304 	mla	r3, sl, r4, r3
 801971a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801971c:	fb0e 3304 	mla	r3, lr, r4, r3
 8019720:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019724:	2b00      	cmp	r3, #0
 8019726:	f000 8111 	beq.w	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801972a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801972c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019730:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8019734:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8019738:	f000 8192 	beq.w	8019a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801973c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8019740:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019744:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019748:	fb0a fe0e 	mul.w	lr, sl, lr
 801974c:	fb09 f000 	mul.w	r0, r9, r0
 8019750:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8019754:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019758:	f100 0b20 	add.w	fp, r0, #32
 801975c:	44ce      	add	lr, r9
 801975e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8019762:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8019766:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801976a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801976e:	ea4e 0909 	orr.w	r9, lr, r9
 8019772:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019776:	8868      	ldrh	r0, [r5, #2]
 8019778:	d019      	beq.n	80197ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801977a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801977e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019782:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019786:	fb0a fe0e 	mul.w	lr, sl, lr
 801978a:	fb08 f800 	mul.w	r8, r8, r0
 801978e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8019792:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019796:	f108 0b20 	add.w	fp, r8, #32
 801979a:	4486      	add	lr, r0
 801979c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80197a0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80197a4:	0a00      	lsrs	r0, r0, #8
 80197a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80197aa:	ea4e 0000 	orr.w	r0, lr, r0
 80197ae:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80197b2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80197b6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80197ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80197be:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80197c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80197c6:	ea4e 0909 	orr.w	r9, lr, r9
 80197ca:	ea4a 0000 	orr.w	r0, sl, r0
 80197ce:	f1bc 0f00 	cmp.w	ip, #0
 80197d2:	f000 8147 	beq.w	8019a64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80197d6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80197da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80197dc:	3a01      	subs	r2, #1
 80197de:	2cff      	cmp	r4, #255	; 0xff
 80197e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80197e4:	f102 0202 	add.w	r2, r2, #2
 80197e8:	eb05 0e02 	add.w	lr, r5, r2
 80197ec:	5aaa      	ldrh	r2, [r5, r2]
 80197ee:	d018      	beq.n	8019822 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80197f0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80197f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80197f8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80197fc:	fb04 fa02 	mul.w	sl, r4, r2
 8019800:	fb08 f805 	mul.w	r8, r8, r5
 8019804:	f10a 0520 	add.w	r5, sl, #32
 8019808:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801980c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019810:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8019814:	4442      	add	r2, r8
 8019816:	0a2d      	lsrs	r5, r5, #8
 8019818:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801981c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019820:	432a      	orrs	r2, r5
 8019822:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019824:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8019828:	2cff      	cmp	r4, #255	; 0xff
 801982a:	d01a      	beq.n	8019862 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 801982c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8019830:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019834:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019838:	fb04 fa05 	mul.w	sl, r4, r5
 801983c:	fb08 f80e 	mul.w	r8, r8, lr
 8019840:	f10a 0e20 	add.w	lr, sl, #32
 8019844:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8019848:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801984c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8019850:	4445      	add	r5, r8
 8019852:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019856:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801985a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801985e:	ea45 050e 	orr.w	r5, r5, lr
 8019862:	fb1c fe01 	smulbb	lr, ip, r1
 8019866:	f1cc 0810 	rsb	r8, ip, #16
 801986a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801986e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019872:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8019876:	eba8 0801 	sub.w	r8, r8, r1
 801987a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801987e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019882:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8019886:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801988a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801988e:	ea4a 0202 	orr.w	r2, sl, r2
 8019892:	4341      	muls	r1, r0
 8019894:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8019898:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801989c:	fb09 1108 	mla	r1, r9, r8, r1
 80198a0:	ea4b 0505 	orr.w	r5, fp, r5
 80198a4:	fb0c 1102 	mla	r1, ip, r2, r1
 80198a8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80198ac:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80198b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80198b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80198b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80198bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80198c0:	fa1f f28e 	uxth.w	r2, lr
 80198c4:	2bff      	cmp	r3, #255	; 0xff
 80198c6:	d103      	bne.n	80198d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80198c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80198ca:	29ff      	cmp	r1, #255	; 0xff
 80198cc:	f000 80de 	beq.w	8019a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80198d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80198d2:	8838      	ldrh	r0, [r7, #0]
 80198d4:	434b      	muls	r3, r1
 80198d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80198d8:	1205      	asrs	r5, r0, #8
 80198da:	f103 0c01 	add.w	ip, r3, #1
 80198de:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80198e2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80198e6:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 80198ea:	1213      	asrs	r3, r2, #8
 80198ec:	fa5f fc8c 	uxtb.w	ip, ip
 80198f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80198f4:	fb15 f50c 	smulbb	r5, r5, ip
 80198f8:	fb03 5301 	mla	r3, r3, r1, r5
 80198fc:	10d1      	asrs	r1, r2, #3
 80198fe:	00d2      	lsls	r2, r2, #3
 8019900:	b29d      	uxth	r5, r3
 8019902:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019906:	10c3      	asrs	r3, r0, #3
 8019908:	00c0      	lsls	r0, r0, #3
 801990a:	b2d2      	uxtb	r2, r2
 801990c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019910:	b2c0      	uxtb	r0, r0
 8019912:	fb13 f30c 	smulbb	r3, r3, ip
 8019916:	fb10 f00c 	smulbb	r0, r0, ip
 801991a:	fb01 3104 	mla	r1, r1, r4, r3
 801991e:	1c6b      	adds	r3, r5, #1
 8019920:	fb02 0204 	mla	r2, r2, r4, r0
 8019924:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8019928:	b292      	uxth	r2, r2
 801992a:	b289      	uxth	r1, r1
 801992c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8019930:	1c50      	adds	r0, r2, #1
 8019932:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019936:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801993a:	4313      	orrs	r3, r2
 801993c:	1c4a      	adds	r2, r1, #1
 801993e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019942:	0949      	lsrs	r1, r1, #5
 8019944:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019948:	430b      	orrs	r3, r1
 801994a:	803b      	strh	r3, [r7, #0]
 801994c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801994e:	3702      	adds	r7, #2
 8019950:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019952:	4413      	add	r3, r2
 8019954:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019956:	9329      	str	r3, [sp, #164]	; 0xa4
 8019958:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801995a:	441a      	add	r2, r3
 801995c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801995e:	3b01      	subs	r3, #1
 8019960:	922a      	str	r2, [sp, #168]	; 0xa8
 8019962:	9313      	str	r3, [sp, #76]	; 0x4c
 8019964:	e687      	b.n	8019676 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8019966:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019968:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801996a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801996c:	4433      	add	r3, r6
 801996e:	9329      	str	r3, [sp, #164]	; 0xa4
 8019970:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019972:	441c      	add	r4, r3
 8019974:	9b08      	ldr	r3, [sp, #32]
 8019976:	3b01      	subs	r3, #1
 8019978:	942a      	str	r4, [sp, #168]	; 0xa8
 801997a:	9308      	str	r3, [sp, #32]
 801997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801997e:	3302      	adds	r3, #2
 8019980:	9309      	str	r3, [sp, #36]	; 0x24
 8019982:	e656      	b.n	8019632 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019984:	d028      	beq.n	80199d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8019986:	9b08      	ldr	r3, [sp, #32]
 8019988:	982b      	ldr	r0, [sp, #172]	; 0xac
 801998a:	3b01      	subs	r3, #1
 801998c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801998e:	fb00 5003 	mla	r0, r0, r3, r5
 8019992:	1400      	asrs	r0, r0, #16
 8019994:	f53f ae6a 	bmi.w	801966c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019998:	3901      	subs	r1, #1
 801999a:	4288      	cmp	r0, r1
 801999c:	f6bf ae66 	bge.w	801966c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80199a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80199a2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80199a4:	fb01 0303 	mla	r3, r1, r3, r0
 80199a8:	141b      	asrs	r3, r3, #16
 80199aa:	f53f ae5f 	bmi.w	801966c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80199ae:	3a01      	subs	r2, #1
 80199b0:	4293      	cmp	r3, r2
 80199b2:	f6bf ae5b 	bge.w	801966c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80199b6:	9b08      	ldr	r3, [sp, #32]
 80199b8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80199bc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80199c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80199c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f300 8082 	bgt.w	8019ace <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80199ca:	9b08      	ldr	r3, [sp, #32]
 80199cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80199d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80199d6:	9309      	str	r3, [sp, #36]	; 0x24
 80199d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199da:	2b00      	cmp	r3, #0
 80199dc:	f340 81ef 	ble.w	8019dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80199e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80199e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80199e6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80199ea:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80199ee:	eef0 6a48 	vmov.f32	s13, s16
 80199f2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80199f6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80199fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199fe:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8019a02:	eef0 6a68 	vmov.f32	s13, s17
 8019a06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a0a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8019a0e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019a12:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019a16:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019a1a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019a1e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019a22:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019a26:	ee18 2a10 	vmov	r2, s16
 8019a2a:	eeb0 8a47 	vmov.f32	s16, s14
 8019a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a32:	ee18 2a90 	vmov	r2, s17
 8019a36:	932b      	str	r3, [sp, #172]	; 0xac
 8019a38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a3a:	eef0 8a67 	vmov.f32	s17, s15
 8019a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a42:	932c      	str	r3, [sp, #176]	; 0xb0
 8019a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a48:	3b01      	subs	r3, #1
 8019a4a:	9311      	str	r3, [sp, #68]	; 0x44
 8019a4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a4e:	bf08      	it	eq
 8019a50:	4613      	moveq	r3, r2
 8019a52:	9308      	str	r3, [sp, #32]
 8019a54:	e5df      	b.n	8019616 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019a56:	fb08 f505 	mul.w	r5, r8, r5
 8019a5a:	fb09 5303 	mla	r3, r9, r3, r5
 8019a5e:	e65f      	b.n	8019720 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8019a60:	4681      	mov	r9, r0
 8019a62:	e686      	b.n	8019772 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8019a64:	f1c1 0210 	rsb	r2, r1, #16
 8019a68:	4341      	muls	r1, r0
 8019a6a:	fb09 1902 	mla	r9, r9, r2, r1
 8019a6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019a72:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8019a76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019a7a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019a7e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019a82:	ea42 0909 	orr.w	r9, r2, r9
 8019a86:	fa1f f289 	uxth.w	r2, r9
 8019a8a:	e71b      	b.n	80198c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019a8c:	803a      	strh	r2, [r7, #0]
 8019a8e:	e75d      	b.n	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019a90:	f115 0e01 	adds.w	lr, r5, #1
 8019a94:	f53f af5a 	bmi.w	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019a98:	4572      	cmp	r2, lr
 8019a9a:	f6ff af57 	blt.w	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019a9e:	f110 0e01 	adds.w	lr, r0, #1
 8019aa2:	f53f af53 	bmi.w	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019aa6:	4573      	cmp	r3, lr
 8019aa8:	f6ff af50 	blt.w	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019aac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019aae:	b21b      	sxth	r3, r3
 8019ab0:	b212      	sxth	r2, r2
 8019ab2:	9502      	str	r5, [sp, #8]
 8019ab4:	9301      	str	r3, [sp, #4]
 8019ab6:	9200      	str	r2, [sp, #0]
 8019ab8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8019abc:	e9cd c405 	strd	ip, r4, [sp, #20]
 8019ac0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8019ac4:	4639      	mov	r1, r7
 8019ac6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019ac8:	f7ff fbd0 	bl	801926c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8019acc:	e73e      	b.n	801994c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8019ace:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019ad0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019ad4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019ad6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8019ada:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019adc:	fa1f fc82 	uxth.w	ip, r2
 8019ae0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019ae4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019ae6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8019aea:	141f      	asrs	r7, r3, #16
 8019aec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019aee:	141b      	asrs	r3, r3, #16
 8019af0:	fb01 3707 	mla	r7, r1, r7, r3
 8019af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019af6:	eb03 0a07 	add.w	sl, r3, r7
 8019afa:	f813 9007 	ldrb.w	r9, [r3, r7]
 8019afe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8019b02:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	2d00      	cmp	r5, #0
 8019b0a:	f000 813d 	beq.w	8019d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8019b0e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8019b12:	eb0a 0b01 	add.w	fp, sl, r1
 8019b16:	fa1f fa85 	uxth.w	sl, r5
 8019b1a:	940f      	str	r4, [sp, #60]	; 0x3c
 8019b1c:	fb0a fc0c 	mul.w	ip, sl, ip
 8019b20:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019b24:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8019b28:	eba0 000c 	sub.w	r0, r0, ip
 8019b2c:	9410      	str	r4, [sp, #64]	; 0x40
 8019b2e:	fa1f fa8a 	uxth.w	sl, sl
 8019b32:	b280      	uxth	r0, r0
 8019b34:	eba3 030a 	sub.w	r3, r3, sl
 8019b38:	fb08 f000 	mul.w	r0, r8, r0
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	fb09 0303 	mla	r3, r9, r3, r0
 8019b42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019b44:	fb0a 3300 	mla	r3, sl, r0, r3
 8019b48:	fb0c 3304 	mla	r3, ip, r4, r3
 8019b4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	f000 810b 	beq.w	8019d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8019b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019b58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019b5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019b5e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8019b62:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8019b66:	f000 8114 	beq.w	8019d92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8019b6a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019b6e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019b72:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019b76:	fb0a fc0c 	mul.w	ip, sl, ip
 8019b7a:	fb09 f707 	mul.w	r7, r9, r7
 8019b7e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8019b82:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019b86:	f107 0b20 	add.w	fp, r7, #32
 8019b8a:	44cc      	add	ip, r9
 8019b8c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8019b90:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019b94:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019b98:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019b9c:	ea4c 0909 	orr.w	r9, ip, r9
 8019ba0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019ba4:	8847      	ldrh	r7, [r0, #2]
 8019ba6:	d019      	beq.n	8019bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8019ba8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019bac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019bb0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019bb4:	fb0a fc0c 	mul.w	ip, sl, ip
 8019bb8:	fb08 f807 	mul.w	r8, r8, r7
 8019bbc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8019bc0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019bc4:	f108 0b20 	add.w	fp, r8, #32
 8019bc8:	44bc      	add	ip, r7
 8019bca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8019bce:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019bd2:	0a3f      	lsrs	r7, r7, #8
 8019bd4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019bd8:	ea4c 0707 	orr.w	r7, ip, r7
 8019bdc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8019be0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019be4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8019be8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8019bec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8019bf0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019bf4:	ea4c 0909 	orr.w	r9, ip, r9
 8019bf8:	ea4a 0707 	orr.w	r7, sl, r7
 8019bfc:	2d00      	cmp	r5, #0
 8019bfe:	f000 80ca 	beq.w	8019d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8019c02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8019c06:	3901      	subs	r1, #1
 8019c08:	0049      	lsls	r1, r1, #1
 8019c0a:	3102      	adds	r1, #2
 8019c0c:	eb00 0c01 	add.w	ip, r0, r1
 8019c10:	5a41      	ldrh	r1, [r0, r1]
 8019c12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019c14:	28ff      	cmp	r0, #255	; 0xff
 8019c16:	d019      	beq.n	8019c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8019c18:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8019c1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019c1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019c22:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019c26:	fb04 fa01 	mul.w	sl, r4, r1
 8019c2a:	fb08 f800 	mul.w	r8, r8, r0
 8019c2e:	f10a 0020 	add.w	r0, sl, #32
 8019c32:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8019c36:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019c3a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8019c3e:	4441      	add	r1, r8
 8019c40:	0a00      	lsrs	r0, r0, #8
 8019c42:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8019c46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019c4a:	4301      	orrs	r1, r0
 8019c4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019c4e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8019c52:	2cff      	cmp	r4, #255	; 0xff
 8019c54:	d01a      	beq.n	8019c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8019c56:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8019c5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019c5e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019c62:	fb04 fa00 	mul.w	sl, r4, r0
 8019c66:	fb08 f80c 	mul.w	r8, r8, ip
 8019c6a:	f10a 0c20 	add.w	ip, sl, #32
 8019c6e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8019c72:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019c76:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8019c7a:	4440      	add	r0, r8
 8019c7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019c80:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8019c84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8019c88:	ea40 000c 	orr.w	r0, r0, ip
 8019c8c:	fb15 fc02 	smulbb	ip, r5, r2
 8019c90:	f1c5 0810 	rsb	r8, r5, #16
 8019c94:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8019c98:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019c9c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8019ca0:	eba8 0802 	sub.w	r8, r8, r2
 8019ca4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8019ca8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019cac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8019cb0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019cb4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8019cb8:	ea4a 0101 	orr.w	r1, sl, r1
 8019cbc:	437a      	muls	r2, r7
 8019cbe:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8019cc2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019cc6:	fb09 2208 	mla	r2, r9, r8, r2
 8019cca:	ea4b 0000 	orr.w	r0, fp, r0
 8019cce:	fb05 2201 	mla	r2, r5, r1, r2
 8019cd2:	fb0c 2200 	mla	r2, ip, r0, r2
 8019cd6:	0d57      	lsrs	r7, r2, #21
 8019cd8:	0952      	lsrs	r2, r2, #5
 8019cda:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019cde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019ce2:	433a      	orrs	r2, r7
 8019ce4:	2bff      	cmp	r3, #255	; 0xff
 8019ce6:	b292      	uxth	r2, r2
 8019ce8:	d102      	bne.n	8019cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8019cea:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019cec:	29ff      	cmp	r1, #255	; 0xff
 8019cee:	d063      	beq.n	8019db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8019cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019cf2:	1215      	asrs	r5, r2, #8
 8019cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8019cf8:	4343      	muls	r3, r0
 8019cfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019cfc:	10cf      	asrs	r7, r1, #3
 8019cfe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019d02:	1c58      	adds	r0, r3, #1
 8019d04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d08:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8019d0c:	1208      	asrs	r0, r1, #8
 8019d0e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8019d12:	00c9      	lsls	r1, r1, #3
 8019d14:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019d18:	b2db      	uxtb	r3, r3
 8019d1a:	b2c9      	uxtb	r1, r1
 8019d1c:	fb10 f003 	smulbb	r0, r0, r3
 8019d20:	fb11 f103 	smulbb	r1, r1, r3
 8019d24:	fb05 0504 	mla	r5, r5, r4, r0
 8019d28:	10d0      	asrs	r0, r2, #3
 8019d2a:	fb17 f703 	smulbb	r7, r7, r3
 8019d2e:	00d2      	lsls	r2, r2, #3
 8019d30:	b2ad      	uxth	r5, r5
 8019d32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019d36:	b2d2      	uxtb	r2, r2
 8019d38:	fb00 7004 	mla	r0, r0, r4, r7
 8019d3c:	1c6b      	adds	r3, r5, #1
 8019d3e:	fb02 1204 	mla	r2, r2, r4, r1
 8019d42:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019d46:	b292      	uxth	r2, r2
 8019d48:	b280      	uxth	r0, r0
 8019d4a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8019d4e:	1c57      	adds	r7, r2, #1
 8019d50:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8019d54:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019d58:	433d      	orrs	r5, r7
 8019d5a:	1c47      	adds	r7, r0, #1
 8019d5c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8019d60:	097f      	lsrs	r7, r7, #5
 8019d62:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019d66:	433d      	orrs	r5, r7
 8019d68:	f8ae 5000 	strh.w	r5, [lr]
 8019d6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d6e:	f10e 0e02 	add.w	lr, lr, #2
 8019d72:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019d74:	4413      	add	r3, r2
 8019d76:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019d78:	9329      	str	r3, [sp, #164]	; 0xa4
 8019d7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d7c:	441a      	add	r2, r3
 8019d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019d80:	3b01      	subs	r3, #1
 8019d82:	922a      	str	r2, [sp, #168]	; 0xa8
 8019d84:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d86:	e61c      	b.n	80199c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8019d88:	fb08 f000 	mul.w	r0, r8, r0
 8019d8c:	fb09 0303 	mla	r3, r9, r3, r0
 8019d90:	e6dc      	b.n	8019b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8019d92:	46b9      	mov	r9, r7
 8019d94:	e704      	b.n	8019ba0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8019d96:	f1c2 0110 	rsb	r1, r2, #16
 8019d9a:	437a      	muls	r2, r7
 8019d9c:	fb09 2901 	mla	r9, r9, r1, r2
 8019da0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019da4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8019da8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8019dac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019db0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019db4:	4302      	orrs	r2, r0
 8019db6:	e795      	b.n	8019ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8019db8:	f8ae 2000 	strh.w	r2, [lr]
 8019dbc:	e7d6      	b.n	8019d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8019dbe:	b017      	add	sp, #92	; 0x5c
 8019dc0:	ecbd 8b08 	vpop	{d8-d11}
 8019dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8019dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dcc:	b085      	sub	sp, #20
 8019dce:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8019dd2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8019dd6:	9103      	str	r1, [sp, #12]
 8019dd8:	2d00      	cmp	r5, #0
 8019dda:	fb05 7106 	mla	r1, r5, r6, r7
 8019dde:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8019de2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8019de6:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8019dea:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8019dee:	eb02 0901 	add.w	r9, r2, r1
 8019df2:	9401      	str	r4, [sp, #4]
 8019df4:	f2c0 80c0 	blt.w	8019f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8019df8:	45a8      	cmp	r8, r5
 8019dfa:	f340 80bd 	ble.w	8019f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8019dfe:	2f00      	cmp	r7, #0
 8019e00:	f2c0 80b6 	blt.w	8019f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8019e04:	42be      	cmp	r6, r7
 8019e06:	f340 80b3 	ble.w	8019f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8019e0a:	f812 c001 	ldrb.w	ip, [r2, r1]
 8019e0e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8019e12:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019e16:	d019      	beq.n	8019e4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8019e18:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8019e1c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8019e20:	435a      	muls	r2, r3
 8019e22:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8019e26:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8019e2a:	fb0c f403 	mul.w	r4, ip, r3
 8019e2e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8019e32:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019e36:	441a      	add	r2, r3
 8019e38:	f104 0320 	add.w	r3, r4, #32
 8019e3c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8019e40:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8019e44:	0a1b      	lsrs	r3, r3, #8
 8019e46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019e4a:	4319      	orrs	r1, r3
 8019e4c:	b289      	uxth	r1, r1
 8019e4e:	1c7b      	adds	r3, r7, #1
 8019e50:	f100 8097 	bmi.w	8019f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8019e54:	429e      	cmp	r6, r3
 8019e56:	f340 8094 	ble.w	8019f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	f000 8094 	beq.w	8019f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8019e60:	f899 4001 	ldrb.w	r4, [r9, #1]
 8019e64:	9b01      	ldr	r3, [sp, #4]
 8019e66:	2cff      	cmp	r4, #255	; 0xff
 8019e68:	885b      	ldrh	r3, [r3, #2]
 8019e6a:	d01b      	beq.n	8019ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8019e6c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8019e70:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019e74:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019e78:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019e7c:	fb0a f202 	mul.w	r2, sl, r2
 8019e80:	fb04 fa03 	mul.w	sl, r4, r3
 8019e84:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8019e88:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019e8c:	441a      	add	r2, r3
 8019e8e:	f10a 0320 	add.w	r3, sl, #32
 8019e92:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8019e96:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8019e9a:	0a1b      	lsrs	r3, r3, #8
 8019e9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019ea0:	ea4b 0303 	orr.w	r3, fp, r3
 8019ea4:	b29b      	uxth	r3, r3
 8019ea6:	3501      	adds	r5, #1
 8019ea8:	d474      	bmi.n	8019f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8019eaa:	45a8      	cmp	r8, r5
 8019eac:	dd72      	ble.n	8019f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8019eae:	f1be 0f00 	cmp.w	lr, #0
 8019eb2:	f000 8111 	beq.w	801a0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8019eb6:	2f00      	cmp	r7, #0
 8019eb8:	db69      	blt.n	8019f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8019eba:	42be      	cmp	r6, r7
 8019ebc:	dd67      	ble.n	8019f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8019ebe:	f819 5006 	ldrb.w	r5, [r9, r6]
 8019ec2:	9a01      	ldr	r2, [sp, #4]
 8019ec4:	2dff      	cmp	r5, #255	; 0xff
 8019ec6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8019eca:	d01c      	beq.n	8019f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8019ecc:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8019ed0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019ed4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019ed8:	fb08 f802 	mul.w	r8, r8, r2
 8019edc:	fb05 fa0b 	mul.w	sl, r5, fp
 8019ee0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019ee4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8019ee8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019eec:	4490      	add	r8, r2
 8019eee:	f10a 0220 	add.w	r2, sl, #32
 8019ef2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8019ef6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8019efa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019efe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019f02:	ea4b 0b0a 	orr.w	fp, fp, sl
 8019f06:	fa1f fb8b 	uxth.w	fp, fp
 8019f0a:	3701      	adds	r7, #1
 8019f0c:	d447      	bmi.n	8019f9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8019f0e:	42be      	cmp	r6, r7
 8019f10:	dd45      	ble.n	8019f9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8019f12:	2800      	cmp	r0, #0
 8019f14:	d046      	beq.n	8019fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8019f16:	3601      	adds	r6, #1
 8019f18:	9a01      	ldr	r2, [sp, #4]
 8019f1a:	f819 7006 	ldrb.w	r7, [r9, r6]
 8019f1e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8019f22:	2fff      	cmp	r7, #255	; 0xff
 8019f24:	d01a      	beq.n	8019f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8019f26:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8019f2a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8019f2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019f32:	fb08 f806 	mul.w	r8, r8, r6
 8019f36:	fb07 f902 	mul.w	r9, r7, r2
 8019f3a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8019f3e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8019f42:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019f46:	44b0      	add	r8, r6
 8019f48:	f109 0620 	add.w	r6, r9, #32
 8019f4c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8019f50:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8019f54:	0a36      	lsrs	r6, r6, #8
 8019f56:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019f5a:	4332      	orrs	r2, r6
 8019f5c:	b292      	uxth	r2, r2
 8019f5e:	280f      	cmp	r0, #15
 8019f60:	d922      	bls.n	8019fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8019f62:	4b61      	ldr	r3, [pc, #388]	; (801a0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8019f64:	f240 210d 	movw	r1, #525	; 0x20d
 8019f68:	4a60      	ldr	r2, [pc, #384]	; (801a0ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8019f6a:	4861      	ldr	r0, [pc, #388]	; (801a0f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8019f6c:	f004 f9ec 	bl	801e348 <__assert_func>
 8019f70:	f04f 0c00 	mov.w	ip, #0
 8019f74:	4661      	mov	r1, ip
 8019f76:	e76a      	b.n	8019e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8019f78:	2400      	movs	r4, #0
 8019f7a:	46a4      	mov	ip, r4
 8019f7c:	4623      	mov	r3, r4
 8019f7e:	4621      	mov	r1, r4
 8019f80:	e791      	b.n	8019ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8019f82:	2400      	movs	r4, #0
 8019f84:	4623      	mov	r3, r4
 8019f86:	e78e      	b.n	8019ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8019f88:	4604      	mov	r4, r0
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	e78b      	b.n	8019ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8019f8e:	2500      	movs	r5, #0
 8019f90:	46ab      	mov	fp, r5
 8019f92:	e7ba      	b.n	8019f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8019f94:	2700      	movs	r7, #0
 8019f96:	463d      	mov	r5, r7
 8019f98:	463a      	mov	r2, r7
 8019f9a:	46bb      	mov	fp, r7
 8019f9c:	e7df      	b.n	8019f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8019f9e:	2700      	movs	r7, #0
 8019fa0:	463a      	mov	r2, r7
 8019fa2:	e7dc      	b.n	8019f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8019fa4:	4607      	mov	r7, r0
 8019fa6:	4602      	mov	r2, r0
 8019fa8:	f1be 0f0f 	cmp.w	lr, #15
 8019fac:	d8d9      	bhi.n	8019f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8019fae:	b286      	uxth	r6, r0
 8019fb0:	fa1f f98e 	uxth.w	r9, lr
 8019fb4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8019fb8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019fbc:	fb06 f809 	mul.w	r8, r6, r9
 8019fc0:	0136      	lsls	r6, r6, #4
 8019fc2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019fc6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8019fca:	9601      	str	r6, [sp, #4]
 8019fcc:	ea4a 0101 	orr.w	r1, sl, r1
 8019fd0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8019fd4:	fa1f f689 	uxth.w	r6, r9
 8019fd8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019fdc:	fb10 f90e 	smulbb	r9, r0, lr
 8019fe0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019fe4:	9602      	str	r6, [sp, #8]
 8019fe6:	460e      	mov	r6, r1
 8019fe8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8019fec:	f1ce 0110 	rsb	r1, lr, #16
 8019ff0:	ea4a 0303 	orr.w	r3, sl, r3
 8019ff4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8019ff8:	1a09      	subs	r1, r1, r0
 8019ffa:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8019ffe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a002:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a006:	4343      	muls	r3, r0
 801a008:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801a00c:	ea4a 0202 	orr.w	r2, sl, r2
 801a010:	9802      	ldr	r0, [sp, #8]
 801a012:	fb01 3106 	mla	r1, r1, r6, r3
 801a016:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801a01a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801a01e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801a022:	fb09 1302 	mla	r3, r9, r2, r1
 801a026:	9901      	ldr	r1, [sp, #4]
 801a028:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a02c:	9a03      	ldr	r2, [sp, #12]
 801a02e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801a032:	ea4a 0b0b 	orr.w	fp, sl, fp
 801a036:	8812      	ldrh	r2, [r2, #0]
 801a038:	1a09      	subs	r1, r1, r0
 801a03a:	9801      	ldr	r0, [sp, #4]
 801a03c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801a040:	eba0 0608 	sub.w	r6, r0, r8
 801a044:	b289      	uxth	r1, r1
 801a046:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801a04a:	b2b6      	uxth	r6, r6
 801a04c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801a050:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a054:	4374      	muls	r4, r6
 801a056:	10d0      	asrs	r0, r2, #3
 801a058:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a05c:	fb0c 4401 	mla	r4, ip, r1, r4
 801a060:	9902      	ldr	r1, [sp, #8]
 801a062:	ea43 0e0e 	orr.w	lr, r3, lr
 801a066:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a06a:	fb01 4505 	mla	r5, r1, r5, r4
 801a06e:	1211      	asrs	r1, r2, #8
 801a070:	00d2      	lsls	r2, r2, #3
 801a072:	fb08 5707 	mla	r7, r8, r7, r5
 801a076:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a07a:	b2d2      	uxtb	r2, r2
 801a07c:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801a080:	fa1f f38e 	uxth.w	r3, lr
 801a084:	b2ff      	uxtb	r7, r7
 801a086:	4379      	muls	r1, r7
 801a088:	4378      	muls	r0, r7
 801a08a:	4357      	muls	r7, r2
 801a08c:	1c4a      	adds	r2, r1, #1
 801a08e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801a092:	1219      	asrs	r1, r3, #8
 801a094:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a098:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801a09c:	4a15      	ldr	r2, [pc, #84]	; (801a0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 801a09e:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a0a2:	1c42      	adds	r2, r0, #1
 801a0a4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a0a8:	10da      	asrs	r2, r3, #3
 801a0aa:	00db      	lsls	r3, r3, #3
 801a0ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a0b0:	b2db      	uxtb	r3, r3
 801a0b2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a0b6:	00d2      	lsls	r2, r2, #3
 801a0b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a0bc:	430a      	orrs	r2, r1
 801a0be:	1c79      	adds	r1, r7, #1
 801a0c0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801a0c4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801a0c8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801a0cc:	4313      	orrs	r3, r2
 801a0ce:	9a03      	ldr	r2, [sp, #12]
 801a0d0:	8013      	strh	r3, [r2, #0]
 801a0d2:	b005      	add	sp, #20
 801a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d8:	280f      	cmp	r0, #15
 801a0da:	f63f af42 	bhi.w	8019f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801a0de:	4677      	mov	r7, lr
 801a0e0:	4675      	mov	r5, lr
 801a0e2:	4672      	mov	r2, lr
 801a0e4:	46f3      	mov	fp, lr
 801a0e6:	e762      	b.n	8019fae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801a0e8:	08022952 	.word	0x08022952
 801a0ec:	08022f15 	.word	0x08022f15
 801a0f0:	08022a3b 	.word	0x08022a3b
 801a0f4:	fffff800 	.word	0xfffff800

0801a0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fc:	ed2d 8b08 	vpush	{d8-d11}
 801a100:	b093      	sub	sp, #76	; 0x4c
 801a102:	eeb0 aa40 	vmov.f32	s20, s0
 801a106:	eef0 9a60 	vmov.f32	s19, s1
 801a10a:	9210      	str	r2, [sp, #64]	; 0x40
 801a10c:	eeb0 9a41 	vmov.f32	s18, s2
 801a110:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a112:	eeb0 8a62 	vmov.f32	s16, s5
 801a116:	9011      	str	r0, [sp, #68]	; 0x44
 801a118:	eef0 8a43 	vmov.f32	s17, s6
 801a11c:	6850      	ldr	r0, [r2, #4]
 801a11e:	eef0 ba44 	vmov.f32	s23, s8
 801a122:	910e      	str	r1, [sp, #56]	; 0x38
 801a124:	eeb0 ba64 	vmov.f32	s22, s9
 801a128:	9306      	str	r3, [sp, #24]
 801a12a:	eef0 aa45 	vmov.f32	s21, s10
 801a12e:	6812      	ldr	r2, [r2, #0]
 801a130:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a134:	fb00 1303 	mla	r3, r0, r3, r1
 801a138:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a13c:	9307      	str	r3, [sp, #28]
 801a13e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	9308      	str	r3, [sp, #32]
 801a144:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a146:	685b      	ldr	r3, [r3, #4]
 801a148:	9309      	str	r3, [sp, #36]	; 0x24
 801a14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	dc03      	bgt.n	801a158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a152:	2b00      	cmp	r3, #0
 801a154:	f340 83b8 	ble.w	801a8c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 801a158:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a15a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a15e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a162:	1e48      	subs	r0, r1, #1
 801a164:	1e55      	subs	r5, r2, #1
 801a166:	9b06      	ldr	r3, [sp, #24]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f340 819b 	ble.w	801a4a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801a16e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801a170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a172:	1436      	asrs	r6, r6, #16
 801a174:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a178:	d406      	bmi.n	801a188 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a17a:	4286      	cmp	r6, r0
 801a17c:	da04      	bge.n	801a188 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a17e:	2b00      	cmp	r3, #0
 801a180:	db02      	blt.n	801a188 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a182:	42ab      	cmp	r3, r5
 801a184:	f2c0 818f 	blt.w	801a4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801a188:	3601      	adds	r6, #1
 801a18a:	f100 817c 	bmi.w	801a486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801a18e:	42b1      	cmp	r1, r6
 801a190:	f2c0 8179 	blt.w	801a486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801a194:	3301      	adds	r3, #1
 801a196:	f100 8176 	bmi.w	801a486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801a19a:	429a      	cmp	r2, r3
 801a19c:	f2c0 8173 	blt.w	801a486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801a1a0:	9b06      	ldr	r3, [sp, #24]
 801a1a2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a1a6:	9f07      	ldr	r7, [sp, #28]
 801a1a8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	f340 819c 	ble.w	801a4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801a1b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a1b4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801a1b6:	1418      	asrs	r0, r3, #16
 801a1b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a1ba:	142d      	asrs	r5, r5, #16
 801a1bc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801a1c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a1c2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801a1c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a1c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a1cc:	f100 81f0 	bmi.w	801a5b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801a1d0:	f102 3eff 	add.w	lr, r2, #4294967295
 801a1d4:	4575      	cmp	r5, lr
 801a1d6:	f280 81eb 	bge.w	801a5b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801a1da:	2800      	cmp	r0, #0
 801a1dc:	f2c0 81e8 	blt.w	801a5b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801a1e0:	f103 3eff 	add.w	lr, r3, #4294967295
 801a1e4:	4570      	cmp	r0, lr
 801a1e6:	f280 81e3 	bge.w	801a5b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801a1ea:	b212      	sxth	r2, r2
 801a1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ee:	fa1f fe81 	uxth.w	lr, r1
 801a1f2:	fb00 5002 	mla	r0, r0, r2, r5
 801a1f6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801a1fa:	eb03 0a00 	add.w	sl, r3, r0
 801a1fe:	f813 9000 	ldrb.w	r9, [r3, r0]
 801a202:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801a206:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	f1bc 0f00 	cmp.w	ip, #0
 801a210:	f000 81b1 	beq.w	801a576 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 801a214:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801a218:	eb0a 0b02 	add.w	fp, sl, r2
 801a21c:	fa1f fa8c 	uxth.w	sl, ip
 801a220:	940a      	str	r4, [sp, #40]	; 0x28
 801a222:	fb0a fe0e 	mul.w	lr, sl, lr
 801a226:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a22a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801a22e:	eba5 050e 	sub.w	r5, r5, lr
 801a232:	940b      	str	r4, [sp, #44]	; 0x2c
 801a234:	fa1f fa8a 	uxth.w	sl, sl
 801a238:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a23a:	b2ad      	uxth	r5, r5
 801a23c:	eba3 030a 	sub.w	r3, r3, sl
 801a240:	fb08 f505 	mul.w	r5, r8, r5
 801a244:	b29b      	uxth	r3, r3
 801a246:	fb09 5303 	mla	r3, r9, r3, r5
 801a24a:	fb0a 3304 	mla	r3, sl, r4, r3
 801a24e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a250:	fb0e 3304 	mla	r3, lr, r4, r3
 801a254:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a258:	2b00      	cmp	r3, #0
 801a25a:	f000 8107 	beq.w	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a25e:	9c08      	ldr	r4, [sp, #32]
 801a260:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a264:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801a268:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801a26c:	f000 8188 	beq.w	801a580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801a270:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801a274:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a278:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a27c:	fb0a fe0e 	mul.w	lr, sl, lr
 801a280:	fb09 f000 	mul.w	r0, r9, r0
 801a284:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801a288:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a28c:	f100 0b20 	add.w	fp, r0, #32
 801a290:	44ce      	add	lr, r9
 801a292:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801a296:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801a29a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a29e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a2a2:	ea4e 0909 	orr.w	r9, lr, r9
 801a2a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a2aa:	8868      	ldrh	r0, [r5, #2]
 801a2ac:	d019      	beq.n	801a2e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801a2ae:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801a2b2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a2b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a2ba:	fb0a fe0e 	mul.w	lr, sl, lr
 801a2be:	fb08 f800 	mul.w	r8, r8, r0
 801a2c2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801a2c6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a2ca:	f108 0b20 	add.w	fp, r8, #32
 801a2ce:	4486      	add	lr, r0
 801a2d0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801a2d4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801a2d8:	0a00      	lsrs	r0, r0, #8
 801a2da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a2de:	ea4e 0000 	orr.w	r0, lr, r0
 801a2e2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801a2e6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a2ea:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801a2ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a2f2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a2f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a2fa:	ea4e 0909 	orr.w	r9, lr, r9
 801a2fe:	ea4a 0000 	orr.w	r0, sl, r0
 801a302:	f1bc 0f00 	cmp.w	ip, #0
 801a306:	f000 813d 	beq.w	801a584 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801a30a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801a30e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a310:	3a01      	subs	r2, #1
 801a312:	2cff      	cmp	r4, #255	; 0xff
 801a314:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a318:	f102 0202 	add.w	r2, r2, #2
 801a31c:	eb05 0e02 	add.w	lr, r5, r2
 801a320:	5aaa      	ldrh	r2, [r5, r2]
 801a322:	d018      	beq.n	801a356 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a324:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801a328:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a32c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801a330:	fb04 fa02 	mul.w	sl, r4, r2
 801a334:	fb08 f805 	mul.w	r8, r8, r5
 801a338:	f10a 0520 	add.w	r5, sl, #32
 801a33c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801a340:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801a344:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801a348:	4442      	add	r2, r8
 801a34a:	0a2d      	lsrs	r5, r5, #8
 801a34c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801a350:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a354:	432a      	orrs	r2, r5
 801a356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a358:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801a35c:	2cff      	cmp	r4, #255	; 0xff
 801a35e:	d01a      	beq.n	801a396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a360:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801a364:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a368:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801a36c:	fb04 fa05 	mul.w	sl, r4, r5
 801a370:	fb08 f80e 	mul.w	r8, r8, lr
 801a374:	f10a 0e20 	add.w	lr, sl, #32
 801a378:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801a37c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801a380:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801a384:	4445      	add	r5, r8
 801a386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a38a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801a38e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801a392:	ea45 050e 	orr.w	r5, r5, lr
 801a396:	fb1c fe01 	smulbb	lr, ip, r1
 801a39a:	f1cc 0810 	rsb	r8, ip, #16
 801a39e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801a3a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a3a6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801a3aa:	eba8 0801 	sub.w	r8, r8, r1
 801a3ae:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801a3b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a3b6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801a3ba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801a3be:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801a3c2:	ea4a 0202 	orr.w	r2, sl, r2
 801a3c6:	4341      	muls	r1, r0
 801a3c8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801a3cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a3d0:	fb09 1108 	mla	r1, r9, r8, r1
 801a3d4:	ea4b 0505 	orr.w	r5, fp, r5
 801a3d8:	fb0c 1102 	mla	r1, ip, r2, r1
 801a3dc:	fb0e 1e05 	mla	lr, lr, r5, r1
 801a3e0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801a3e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801a3e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a3ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a3f0:	ea42 0e0e 	orr.w	lr, r2, lr
 801a3f4:	fa1f f28e 	uxth.w	r2, lr
 801a3f8:	2bff      	cmp	r3, #255	; 0xff
 801a3fa:	f000 80d7 	beq.w	801a5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801a3fe:	f8b7 c000 	ldrh.w	ip, [r7]
 801a402:	43db      	mvns	r3, r3
 801a404:	ea4f 202c 	mov.w	r0, ip, asr #8
 801a408:	fa5f fe83 	uxtb.w	lr, r3
 801a40c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a410:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a414:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801a418:	fb00 f00e 	mul.w	r0, r0, lr
 801a41c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a420:	b2db      	uxtb	r3, r3
 801a422:	1c41      	adds	r1, r0, #1
 801a424:	fb05 f50e 	mul.w	r5, r5, lr
 801a428:	fb03 f30e 	mul.w	r3, r3, lr
 801a42c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801a430:	1210      	asrs	r0, r2, #8
 801a432:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a436:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801a43a:	496c      	ldr	r1, [pc, #432]	; (801a5ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 801a43c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801a440:	1c69      	adds	r1, r5, #1
 801a442:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a446:	10d1      	asrs	r1, r2, #3
 801a448:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a44c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a450:	00c9      	lsls	r1, r1, #3
 801a452:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a456:	4301      	orrs	r1, r0
 801a458:	1c58      	adds	r0, r3, #1
 801a45a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a45e:	00d3      	lsls	r3, r2, #3
 801a460:	b2db      	uxtb	r3, r3
 801a462:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a466:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801a46a:	803b      	strh	r3, [r7, #0]
 801a46c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a46e:	3702      	adds	r7, #2
 801a470:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a472:	4413      	add	r3, r2
 801a474:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a476:	9325      	str	r3, [sp, #148]	; 0x94
 801a478:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a47a:	441a      	add	r2, r3
 801a47c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a47e:	3b01      	subs	r3, #1
 801a480:	9226      	str	r2, [sp, #152]	; 0x98
 801a482:	930f      	str	r3, [sp, #60]	; 0x3c
 801a484:	e691      	b.n	801a1aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a486:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a488:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801a48a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801a48c:	4433      	add	r3, r6
 801a48e:	9325      	str	r3, [sp, #148]	; 0x94
 801a490:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a492:	441c      	add	r4, r3
 801a494:	9b06      	ldr	r3, [sp, #24]
 801a496:	3b01      	subs	r3, #1
 801a498:	9426      	str	r4, [sp, #152]	; 0x98
 801a49a:	9306      	str	r3, [sp, #24]
 801a49c:	9b07      	ldr	r3, [sp, #28]
 801a49e:	3302      	adds	r3, #2
 801a4a0:	9307      	str	r3, [sp, #28]
 801a4a2:	e660      	b.n	801a166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a4a4:	d028      	beq.n	801a4f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801a4a6:	9b06      	ldr	r3, [sp, #24]
 801a4a8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a4aa:	3b01      	subs	r3, #1
 801a4ac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801a4ae:	fb00 5003 	mla	r0, r0, r3, r5
 801a4b2:	1400      	asrs	r0, r0, #16
 801a4b4:	f53f ae74 	bmi.w	801a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a4b8:	3901      	subs	r1, #1
 801a4ba:	4288      	cmp	r0, r1
 801a4bc:	f6bf ae70 	bge.w	801a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a4c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a4c2:	9826      	ldr	r0, [sp, #152]	; 0x98
 801a4c4:	fb01 0303 	mla	r3, r1, r3, r0
 801a4c8:	141b      	asrs	r3, r3, #16
 801a4ca:	f53f ae69 	bmi.w	801a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a4ce:	3a01      	subs	r2, #1
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	f6bf ae65 	bge.w	801a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a4d6:	9b06      	ldr	r3, [sp, #24]
 801a4d8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a4dc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801a4e0:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	f300 8083 	bgt.w	801a5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 801a4ea:	9b06      	ldr	r3, [sp, #24]
 801a4ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a4f0:	9b07      	ldr	r3, [sp, #28]
 801a4f2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a4f6:	9307      	str	r3, [sp, #28]
 801a4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	f340 81e4 	ble.w	801a8c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 801a500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a504:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a506:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a50a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a50e:	eef0 6a48 	vmov.f32	s13, s16
 801a512:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a516:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a51a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a51e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801a522:	eef0 6a68 	vmov.f32	s13, s17
 801a526:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a52a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801a52e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a532:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a536:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a53a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a53e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a542:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a546:	ee18 2a10 	vmov	r2, s16
 801a54a:	eeb0 8a47 	vmov.f32	s16, s14
 801a54e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a552:	ee18 2a90 	vmov	r2, s17
 801a556:	9327      	str	r3, [sp, #156]	; 0x9c
 801a558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a55a:	eef0 8a67 	vmov.f32	s17, s15
 801a55e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a562:	9328      	str	r3, [sp, #160]	; 0xa0
 801a564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a568:	3b01      	subs	r3, #1
 801a56a:	930e      	str	r3, [sp, #56]	; 0x38
 801a56c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a56e:	bf08      	it	eq
 801a570:	4613      	moveq	r3, r2
 801a572:	9306      	str	r3, [sp, #24]
 801a574:	e5e9      	b.n	801a14a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a576:	fb08 f505 	mul.w	r5, r8, r5
 801a57a:	fb09 5303 	mla	r3, r9, r3, r5
 801a57e:	e669      	b.n	801a254 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a580:	4681      	mov	r9, r0
 801a582:	e690      	b.n	801a2a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801a584:	f1c1 0210 	rsb	r2, r1, #16
 801a588:	4341      	muls	r1, r0
 801a58a:	fb09 1902 	mla	r9, r9, r2, r1
 801a58e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a592:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801a596:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a59a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a59e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a5a2:	ea42 0909 	orr.w	r9, r2, r9
 801a5a6:	fa1f f289 	uxth.w	r2, r9
 801a5aa:	e725      	b.n	801a3f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801a5ac:	803a      	strh	r2, [r7, #0]
 801a5ae:	e75d      	b.n	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5b0:	f115 0e01 	adds.w	lr, r5, #1
 801a5b4:	f53f af5a 	bmi.w	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5b8:	4572      	cmp	r2, lr
 801a5ba:	f6ff af57 	blt.w	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5be:	f110 0e01 	adds.w	lr, r0, #1
 801a5c2:	f53f af53 	bmi.w	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5c6:	4573      	cmp	r3, lr
 801a5c8:	f6ff af50 	blt.w	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5cc:	b21b      	sxth	r3, r3
 801a5ce:	b212      	sxth	r2, r2
 801a5d0:	9301      	str	r3, [sp, #4]
 801a5d2:	9200      	str	r2, [sp, #0]
 801a5d4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801a5d8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801a5dc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801a5e0:	4639      	mov	r1, r7
 801a5e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a5e4:	f7ff fbf0 	bl	8019dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801a5e8:	e740      	b.n	801a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801a5ea:	bf00      	nop
 801a5ec:	fffff800 	.word	0xfffff800
 801a5f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a5f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a5f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a5f8:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801a5fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a5fe:	fa1f fc82 	uxth.w	ip, r2
 801a602:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a608:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801a60c:	141f      	asrs	r7, r3, #16
 801a60e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a610:	141b      	asrs	r3, r3, #16
 801a612:	fb01 3707 	mla	r7, r1, r7, r3
 801a616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a618:	eb03 0a07 	add.w	sl, r3, r7
 801a61c:	f813 9007 	ldrb.w	r9, [r3, r7]
 801a620:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a624:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a628:	b29b      	uxth	r3, r3
 801a62a:	2d00      	cmp	r5, #0
 801a62c:	f000 8131 	beq.w	801a892 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 801a630:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801a634:	eb0a 0b01 	add.w	fp, sl, r1
 801a638:	fa1f fa85 	uxth.w	sl, r5
 801a63c:	940c      	str	r4, [sp, #48]	; 0x30
 801a63e:	fb0a fc0c 	mul.w	ip, sl, ip
 801a642:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a646:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801a64a:	eba0 000c 	sub.w	r0, r0, ip
 801a64e:	940d      	str	r4, [sp, #52]	; 0x34
 801a650:	fa1f fa8a 	uxth.w	sl, sl
 801a654:	b280      	uxth	r0, r0
 801a656:	eba3 030a 	sub.w	r3, r3, sl
 801a65a:	fb08 f000 	mul.w	r0, r8, r0
 801a65e:	b29b      	uxth	r3, r3
 801a660:	fb09 0303 	mla	r3, r9, r3, r0
 801a664:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a666:	fb0a 3300 	mla	r3, sl, r0, r3
 801a66a:	fb0c 3304 	mla	r3, ip, r4, r3
 801a66e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a672:	2b00      	cmp	r3, #0
 801a674:	f000 80ff 	beq.w	801a876 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 801a678:	9808      	ldr	r0, [sp, #32]
 801a67a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a67e:	9c08      	ldr	r4, [sp, #32]
 801a680:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801a684:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801a688:	f000 8108 	beq.w	801a89c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801a68c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a690:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a694:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a698:	fb0a fc0c 	mul.w	ip, sl, ip
 801a69c:	fb09 f707 	mul.w	r7, r9, r7
 801a6a0:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801a6a4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a6a8:	f107 0b20 	add.w	fp, r7, #32
 801a6ac:	44cc      	add	ip, r9
 801a6ae:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801a6b2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a6b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a6ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a6be:	ea4c 0909 	orr.w	r9, ip, r9
 801a6c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a6c6:	8847      	ldrh	r7, [r0, #2]
 801a6c8:	d019      	beq.n	801a6fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 801a6ca:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a6ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a6d2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a6d6:	fb0a fc0c 	mul.w	ip, sl, ip
 801a6da:	fb08 f807 	mul.w	r8, r8, r7
 801a6de:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801a6e2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a6e6:	f108 0b20 	add.w	fp, r8, #32
 801a6ea:	44bc      	add	ip, r7
 801a6ec:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801a6f0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a6f4:	0a3f      	lsrs	r7, r7, #8
 801a6f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a6fa:	ea4c 0707 	orr.w	r7, ip, r7
 801a6fe:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801a702:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a706:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801a70a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a70e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a712:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a716:	ea4c 0909 	orr.w	r9, ip, r9
 801a71a:	ea4a 0707 	orr.w	r7, sl, r7
 801a71e:	2d00      	cmp	r5, #0
 801a720:	f000 80be 	beq.w	801a8a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801a724:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801a728:	3901      	subs	r1, #1
 801a72a:	0049      	lsls	r1, r1, #1
 801a72c:	3102      	adds	r1, #2
 801a72e:	eb00 0c01 	add.w	ip, r0, r1
 801a732:	5a41      	ldrh	r1, [r0, r1]
 801a734:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a736:	28ff      	cmp	r0, #255	; 0xff
 801a738:	d019      	beq.n	801a76e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 801a73a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801a73e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a740:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a744:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801a748:	fb04 fa01 	mul.w	sl, r4, r1
 801a74c:	fb08 f800 	mul.w	r8, r8, r0
 801a750:	f10a 0020 	add.w	r0, sl, #32
 801a754:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801a758:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801a75c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801a760:	4441      	add	r1, r8
 801a762:	0a00      	lsrs	r0, r0, #8
 801a764:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a768:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a76c:	4301      	orrs	r1, r0
 801a76e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a770:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801a774:	2cff      	cmp	r4, #255	; 0xff
 801a776:	d01a      	beq.n	801a7ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 801a778:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801a77c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a780:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801a784:	fb04 fa00 	mul.w	sl, r4, r0
 801a788:	fb08 f80c 	mul.w	r8, r8, ip
 801a78c:	f10a 0c20 	add.w	ip, sl, #32
 801a790:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801a794:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801a798:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801a79c:	4440      	add	r0, r8
 801a79e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a7a2:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801a7a6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a7aa:	ea40 000c 	orr.w	r0, r0, ip
 801a7ae:	fb15 fc02 	smulbb	ip, r5, r2
 801a7b2:	f1c5 0810 	rsb	r8, r5, #16
 801a7b6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801a7ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a7be:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801a7c2:	eba8 0802 	sub.w	r8, r8, r2
 801a7c6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801a7ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a7ce:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801a7d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a7d6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801a7da:	ea4a 0101 	orr.w	r1, sl, r1
 801a7de:	437a      	muls	r2, r7
 801a7e0:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801a7e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a7e8:	fb09 2208 	mla	r2, r9, r8, r2
 801a7ec:	ea4b 0000 	orr.w	r0, fp, r0
 801a7f0:	fb05 2201 	mla	r2, r5, r1, r2
 801a7f4:	fb0c 2200 	mla	r2, ip, r0, r2
 801a7f8:	0d57      	lsrs	r7, r2, #21
 801a7fa:	0952      	lsrs	r2, r2, #5
 801a7fc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a800:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a804:	433a      	orrs	r2, r7
 801a806:	2bff      	cmp	r3, #255	; 0xff
 801a808:	b292      	uxth	r2, r2
 801a80a:	d05a      	beq.n	801a8c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 801a80c:	f8be 7000 	ldrh.w	r7, [lr]
 801a810:	43db      	mvns	r3, r3
 801a812:	4c30      	ldr	r4, [pc, #192]	; (801a8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 801a814:	1238      	asrs	r0, r7, #8
 801a816:	fa5f fc83 	uxtb.w	ip, r3
 801a81a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a81e:	10fd      	asrs	r5, r7, #3
 801a820:	00fb      	lsls	r3, r7, #3
 801a822:	fb00 f00c 	mul.w	r0, r0, ip
 801a826:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a82a:	b2db      	uxtb	r3, r3
 801a82c:	fb05 f10c 	mul.w	r1, r5, ip
 801a830:	1c45      	adds	r5, r0, #1
 801a832:	fb03 f30c 	mul.w	r3, r3, ip
 801a836:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a83a:	1215      	asrs	r5, r2, #8
 801a83c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a840:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a844:	1c4d      	adds	r5, r1, #1
 801a846:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801a84a:	10d1      	asrs	r1, r2, #3
 801a84c:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801a850:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a854:	00d2      	lsls	r2, r2, #3
 801a856:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a85a:	00c9      	lsls	r1, r1, #3
 801a85c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a860:	4308      	orrs	r0, r1
 801a862:	1c59      	adds	r1, r3, #1
 801a864:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a868:	b2d1      	uxtb	r1, r2
 801a86a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a86e:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801a872:	f8ae 0000 	strh.w	r0, [lr]
 801a876:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a878:	f10e 0e02 	add.w	lr, lr, #2
 801a87c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a87e:	4413      	add	r3, r2
 801a880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a882:	9325      	str	r3, [sp, #148]	; 0x94
 801a884:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a886:	441a      	add	r2, r3
 801a888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a88a:	3b01      	subs	r3, #1
 801a88c:	9226      	str	r2, [sp, #152]	; 0x98
 801a88e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a890:	e627      	b.n	801a4e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801a892:	fb08 f000 	mul.w	r0, r8, r0
 801a896:	fb09 0303 	mla	r3, r9, r3, r0
 801a89a:	e6e8      	b.n	801a66e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 801a89c:	46b9      	mov	r9, r7
 801a89e:	e710      	b.n	801a6c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 801a8a0:	f1c2 0110 	rsb	r1, r2, #16
 801a8a4:	437a      	muls	r2, r7
 801a8a6:	fb09 2901 	mla	r9, r9, r1, r2
 801a8aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a8ae:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801a8b2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801a8b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a8ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a8be:	4302      	orrs	r2, r0
 801a8c0:	e7a1      	b.n	801a806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 801a8c2:	f8ae 2000 	strh.w	r2, [lr]
 801a8c6:	e7d6      	b.n	801a876 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 801a8c8:	b013      	add	sp, #76	; 0x4c
 801a8ca:	ecbd 8b08 	vpop	{d8-d11}
 801a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d2:	bf00      	nop
 801a8d4:	fffff800 	.word	0xfffff800

0801a8d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8dc:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801a8e0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801a8e4:	fb0c 4e03 	mla	lr, ip, r3, r4
 801a8e8:	f1bc 0f00 	cmp.w	ip, #0
 801a8ec:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801a8f0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801a8f4:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801a8f8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801a8fc:	8808      	ldrh	r0, [r1, #0]
 801a8fe:	db2f      	blt.n	801a960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a900:	45e2      	cmp	sl, ip
 801a902:	dd2d      	ble.n	801a960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a904:	2c00      	cmp	r4, #0
 801a906:	db29      	blt.n	801a95c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a908:	42a3      	cmp	r3, r4
 801a90a:	dd27      	ble.n	801a95c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a90c:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801a910:	1c62      	adds	r2, r4, #1
 801a912:	d428      	bmi.n	801a966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a914:	4293      	cmp	r3, r2
 801a916:	dd26      	ble.n	801a966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a918:	b32f      	cbz	r7, 801a966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a91a:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801a91e:	f11c 0c01 	adds.w	ip, ip, #1
 801a922:	d424      	bmi.n	801a96e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a924:	45e2      	cmp	sl, ip
 801a926:	dd22      	ble.n	801a96e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a928:	2e00      	cmp	r6, #0
 801a92a:	f000 809c 	beq.w	801aa66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 801a92e:	2c00      	cmp	r4, #0
 801a930:	db1b      	blt.n	801a96a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a932:	42a3      	cmp	r3, r4
 801a934:	dd19      	ble.n	801a96a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a936:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801a93a:	3401      	adds	r4, #1
 801a93c:	d41a      	bmi.n	801a974 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a93e:	42a3      	cmp	r3, r4
 801a940:	dd18      	ble.n	801a974 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a942:	b1cf      	cbz	r7, 801a978 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801a944:	3301      	adds	r3, #1
 801a946:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801a94a:	2f0f      	cmp	r7, #15
 801a94c:	d915      	bls.n	801a97a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801a94e:	4b49      	ldr	r3, [pc, #292]	; (801aa74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801a950:	f240 11ef 	movw	r1, #495	; 0x1ef
 801a954:	4a48      	ldr	r2, [pc, #288]	; (801aa78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801a956:	4849      	ldr	r0, [pc, #292]	; (801aa7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801a958:	f003 fcf6 	bl	801e348 <__assert_func>
 801a95c:	4681      	mov	r9, r0
 801a95e:	e7d7      	b.n	801a910 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801a960:	4686      	mov	lr, r0
 801a962:	4681      	mov	r9, r0
 801a964:	e7db      	b.n	801a91e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801a966:	4686      	mov	lr, r0
 801a968:	e7d9      	b.n	801a91e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801a96a:	4684      	mov	ip, r0
 801a96c:	e7e5      	b.n	801a93a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801a96e:	4603      	mov	r3, r0
 801a970:	4684      	mov	ip, r0
 801a972:	e7ea      	b.n	801a94a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801a974:	4603      	mov	r3, r0
 801a976:	e7e8      	b.n	801a94a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801a978:	4603      	mov	r3, r0
 801a97a:	2e0f      	cmp	r6, #15
 801a97c:	d8e7      	bhi.n	801a94e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801a97e:	fb17 f806 	smulbb	r8, r7, r6
 801a982:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801a986:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801a98a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a98e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801a992:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801a996:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a99a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a99e:	ea44 0909 	orr.w	r9, r4, r9
 801a9a2:	f1c6 0410 	rsb	r4, r6, #16
 801a9a6:	041a      	lsls	r2, r3, #16
 801a9a8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a9ac:	1be4      	subs	r4, r4, r7
 801a9ae:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801a9b2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a9b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a9ba:	fb07 fe0e 	mul.w	lr, r7, lr
 801a9be:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801a9c2:	4313      	orrs	r3, r2
 801a9c4:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801a9c8:	fb04 e409 	mla	r4, r4, r9, lr
 801a9cc:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801a9d0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a9d4:	b2af      	uxth	r7, r5
 801a9d6:	fb08 4303 	mla	r3, r8, r3, r4
 801a9da:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801a9de:	43ed      	mvns	r5, r5
 801a9e0:	4322      	orrs	r2, r4
 801a9e2:	b2ed      	uxtb	r5, r5
 801a9e4:	fb06 3202 	mla	r2, r6, r2, r3
 801a9e8:	10c6      	asrs	r6, r0, #3
 801a9ea:	0d53      	lsrs	r3, r2, #21
 801a9ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a9f0:	0952      	lsrs	r2, r2, #5
 801a9f2:	fb16 f605 	smulbb	r6, r6, r5
 801a9f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a9fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a9fe:	431a      	orrs	r2, r3
 801aa00:	b293      	uxth	r3, r2
 801aa02:	1202      	asrs	r2, r0, #8
 801aa04:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801aa08:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801aa0c:	00dc      	lsls	r4, r3, #3
 801aa0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aa12:	fb12 f205 	smulbb	r2, r2, r5
 801aa16:	b2e4      	uxtb	r4, r4
 801aa18:	fb0c 2c07 	mla	ip, ip, r7, r2
 801aa1c:	10da      	asrs	r2, r3, #3
 801aa1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801aa22:	fa1f fc8c 	uxth.w	ip, ip
 801aa26:	fb02 6207 	mla	r2, r2, r7, r6
 801aa2a:	f10c 0301 	add.w	r3, ip, #1
 801aa2e:	b296      	uxth	r6, r2
 801aa30:	00c2      	lsls	r2, r0, #3
 801aa32:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801aa36:	b2d2      	uxtb	r2, r2
 801aa38:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801aa3c:	fb12 f205 	smulbb	r2, r2, r5
 801aa40:	fb04 2207 	mla	r2, r4, r7, r2
 801aa44:	b292      	uxth	r2, r2
 801aa46:	1c50      	adds	r0, r2, #1
 801aa48:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801aa4c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801aa50:	4313      	orrs	r3, r2
 801aa52:	1c72      	adds	r2, r6, #1
 801aa54:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801aa58:	0952      	lsrs	r2, r2, #5
 801aa5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aa5e:	4313      	orrs	r3, r2
 801aa60:	800b      	strh	r3, [r1, #0]
 801aa62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa66:	2f0f      	cmp	r7, #15
 801aa68:	f63f af71 	bhi.w	801a94e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	4684      	mov	ip, r0
 801aa70:	e785      	b.n	801a97e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801aa72:	bf00      	nop
 801aa74:	08022952 	.word	0x08022952
 801aa78:	08022fbe 	.word	0x08022fbe
 801aa7c:	08022a3b 	.word	0x08022a3b

0801aa80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa84:	ed2d 8b08 	vpush	{d8-d11}
 801aa88:	b093      	sub	sp, #76	; 0x4c
 801aa8a:	461d      	mov	r5, r3
 801aa8c:	eeb0 aa40 	vmov.f32	s20, s0
 801aa90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aa92:	eef0 9a60 	vmov.f32	s19, s1
 801aa96:	9210      	str	r2, [sp, #64]	; 0x40
 801aa98:	eeb0 9a41 	vmov.f32	s18, s2
 801aa9c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 801aaa0:	eeb0 8a62 	vmov.f32	s16, s5
 801aaa4:	910a      	str	r1, [sp, #40]	; 0x28
 801aaa6:	eef0 8a43 	vmov.f32	s17, s6
 801aaaa:	920b      	str	r2, [sp, #44]	; 0x2c
 801aaac:	eef0 ba44 	vmov.f32	s23, s8
 801aab0:	6859      	ldr	r1, [r3, #4]
 801aab2:	eeb0 ba64 	vmov.f32	s22, s9
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	eef0 aa45 	vmov.f32	s21, s10
 801aabc:	9011      	str	r0, [sp, #68]	; 0x44
 801aabe:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 801aac2:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801aac6:	fb01 2707 	mla	r7, r1, r7, r2
 801aaca:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801aace:	9307      	str	r3, [sp, #28]
 801aad0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	9309      	str	r3, [sp, #36]	; 0x24
 801aad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aad8:	43db      	mvns	r3, r3
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	9308      	str	r3, [sp, #32]
 801aade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	dc03      	bgt.n	801aaec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	f340 8205 	ble.w	801aef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801aaec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aaee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aaf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aaf6:	1e48      	subs	r0, r1, #1
 801aaf8:	f102 3cff 	add.w	ip, r2, #4294967295
 801aafc:	2d00      	cmp	r5, #0
 801aafe:	f340 80da 	ble.w	801acb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ab02:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ab06:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ab0a:	d406      	bmi.n	801ab1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ab0c:	4586      	cmp	lr, r0
 801ab0e:	da04      	bge.n	801ab1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	db02      	blt.n	801ab1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ab14:	4563      	cmp	r3, ip
 801ab16:	f2c0 80cf 	blt.w	801acb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ab1a:	f11e 0e01 	adds.w	lr, lr, #1
 801ab1e:	f100 80c1 	bmi.w	801aca4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ab22:	4571      	cmp	r1, lr
 801ab24:	f2c0 80be 	blt.w	801aca4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ab28:	3301      	adds	r3, #1
 801ab2a:	f100 80bb 	bmi.w	801aca4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	f2c0 80b8 	blt.w	801aca4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ab34:	46a9      	mov	r9, r5
 801ab36:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ab3a:	f1b9 0f00 	cmp.w	r9, #0
 801ab3e:	f340 80d8 	ble.w	801acf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801ab42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ab44:	1421      	asrs	r1, r4, #16
 801ab46:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ab4a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ab4e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ab52:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ab56:	f100 8112 	bmi.w	801ad7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ab5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ab5e:	4551      	cmp	r1, sl
 801ab60:	f280 810d 	bge.w	801ad7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ab64:	2800      	cmp	r0, #0
 801ab66:	f2c0 810a 	blt.w	801ad7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ab6a:	f103 3aff 	add.w	sl, r3, #4294967295
 801ab6e:	4550      	cmp	r0, sl
 801ab70:	f280 8105 	bge.w	801ad7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ab74:	fa0f f38e 	sxth.w	r3, lr
 801ab78:	fb00 1103 	mla	r1, r0, r3, r1
 801ab7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab7e:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801ab82:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801ab86:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801ab8a:	f1bc 0f00 	cmp.w	ip, #0
 801ab8e:	d007      	beq.n	801aba0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801ab90:	005b      	lsls	r3, r3, #1
 801ab92:	eb0a 0003 	add.w	r0, sl, r3
 801ab96:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801ab9a:	930c      	str	r3, [sp, #48]	; 0x30
 801ab9c:	8843      	ldrh	r3, [r0, #2]
 801ab9e:	930d      	str	r3, [sp, #52]	; 0x34
 801aba0:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801aba4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801aba8:	fb12 f30c 	smulbb	r3, r2, ip
 801abac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801abb0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801abb4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801abb8:	10db      	asrs	r3, r3, #3
 801abba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801abbe:	ea40 000e 	orr.w	r0, r0, lr
 801abc2:	f1cc 0e10 	rsb	lr, ip, #16
 801abc6:	ea4a 0101 	orr.w	r1, sl, r1
 801abca:	9f08      	ldr	r7, [sp, #32]
 801abcc:	ebae 0e02 	sub.w	lr, lr, r2
 801abd0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801abd4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801abd8:	4351      	muls	r1, r2
 801abda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abdc:	fb0e 1e00 	mla	lr, lr, r0, r1
 801abe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801abe2:	0410      	lsls	r0, r2, #16
 801abe4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801abe8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801abec:	4310      	orrs	r0, r2
 801abee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abf0:	0412      	lsls	r2, r2, #16
 801abf2:	fb03 e000 	mla	r0, r3, r0, lr
 801abf6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801abfa:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801abfe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ac02:	f8b8 c000 	ldrh.w	ip, [r8]
 801ac06:	ea42 020e 	orr.w	r2, r2, lr
 801ac0a:	ea4f 212c 	mov.w	r1, ip, asr #8
 801ac0e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801ac12:	fb03 0302 	mla	r3, r3, r2, r0
 801ac16:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ac1a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ac1e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ac22:	fb11 f107 	smulbb	r1, r1, r7
 801ac26:	0d5a      	lsrs	r2, r3, #21
 801ac28:	095b      	lsrs	r3, r3, #5
 801ac2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ac2e:	fa5f fc8c 	uxtb.w	ip, ip
 801ac32:	fb1e fe07 	smulbb	lr, lr, r7
 801ac36:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ac3a:	fb1c fc07 	smulbb	ip, ip, r7
 801ac3e:	4313      	orrs	r3, r2
 801ac40:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ac44:	b29b      	uxth	r3, r3
 801ac46:	1218      	asrs	r0, r3, #8
 801ac48:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ac4c:	fb00 1002 	mla	r0, r0, r2, r1
 801ac50:	10d9      	asrs	r1, r3, #3
 801ac52:	00db      	lsls	r3, r3, #3
 801ac54:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ac58:	b280      	uxth	r0, r0
 801ac5a:	b2db      	uxtb	r3, r3
 801ac5c:	fb01 e102 	mla	r1, r1, r2, lr
 801ac60:	fb03 c202 	mla	r2, r3, r2, ip
 801ac64:	1c43      	adds	r3, r0, #1
 801ac66:	b289      	uxth	r1, r1
 801ac68:	b292      	uxth	r2, r2
 801ac6a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ac6e:	f102 0c01 	add.w	ip, r2, #1
 801ac72:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ac76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ac7a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ac7e:	4313      	orrs	r3, r2
 801ac80:	1c4a      	adds	r2, r1, #1
 801ac82:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ac86:	0949      	lsrs	r1, r1, #5
 801ac88:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ac8c:	430b      	orrs	r3, r1
 801ac8e:	f8a8 3000 	strh.w	r3, [r8]
 801ac92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ac94:	f108 0802 	add.w	r8, r8, #2
 801ac98:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac9c:	441c      	add	r4, r3
 801ac9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aca0:	441e      	add	r6, r3
 801aca2:	e74a      	b.n	801ab3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801aca4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aca6:	3d01      	subs	r5, #1
 801aca8:	441c      	add	r4, r3
 801acaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801acac:	441e      	add	r6, r3
 801acae:	9b07      	ldr	r3, [sp, #28]
 801acb0:	3302      	adds	r3, #2
 801acb2:	9307      	str	r3, [sp, #28]
 801acb4:	e722      	b.n	801aafc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801acb6:	d022      	beq.n	801acfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801acb8:	1e6b      	subs	r3, r5, #1
 801acba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801acbc:	fb00 4003 	mla	r0, r0, r3, r4
 801acc0:	1400      	asrs	r0, r0, #16
 801acc2:	f53f af37 	bmi.w	801ab34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801acc6:	3901      	subs	r1, #1
 801acc8:	4288      	cmp	r0, r1
 801acca:	f6bf af33 	bge.w	801ab34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801acce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801acd0:	fb01 6303 	mla	r3, r1, r3, r6
 801acd4:	141b      	asrs	r3, r3, #16
 801acd6:	f53f af2d 	bmi.w	801ab34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801acda:	3a01      	subs	r2, #1
 801acdc:	4293      	cmp	r3, r2
 801acde:	f6bf af29 	bge.w	801ab34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801ace2:	46a8      	mov	r8, r5
 801ace4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801ace8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801acec:	f1b8 0f00 	cmp.w	r8, #0
 801acf0:	dc60      	bgt.n	801adb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801acf2:	9b07      	ldr	r3, [sp, #28]
 801acf4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801acf8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801acfc:	9307      	str	r3, [sp, #28]
 801acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f340 80f8 	ble.w	801aef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801ad06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ad0c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ad10:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ad14:	eef0 6a48 	vmov.f32	s13, s16
 801ad18:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ad1c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ad20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad24:	ee16 4a90 	vmov	r4, s13
 801ad28:	eef0 6a68 	vmov.f32	s13, s17
 801ad2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad30:	ee16 6a90 	vmov	r6, s13
 801ad34:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ad38:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ad3c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ad40:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ad44:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ad48:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ad4c:	ee18 2a10 	vmov	r2, s16
 801ad50:	eeb0 8a47 	vmov.f32	s16, s14
 801ad54:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad58:	ee18 2a90 	vmov	r2, s17
 801ad5c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ad5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ad60:	eef0 8a67 	vmov.f32	s17, s15
 801ad64:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad68:	9328      	str	r3, [sp, #160]	; 0xa0
 801ad6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad6e:	3b01      	subs	r3, #1
 801ad70:	930a      	str	r3, [sp, #40]	; 0x28
 801ad72:	bf08      	it	eq
 801ad74:	4615      	moveq	r5, r2
 801ad76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ad78:	bf18      	it	ne
 801ad7a:	461d      	movne	r5, r3
 801ad7c:	e6af      	b.n	801aade <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ad7e:	f111 0a01 	adds.w	sl, r1, #1
 801ad82:	d486      	bmi.n	801ac92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ad84:	45d6      	cmp	lr, sl
 801ad86:	db84      	blt.n	801ac92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ad88:	f110 0a01 	adds.w	sl, r0, #1
 801ad8c:	d481      	bmi.n	801ac92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ad8e:	4553      	cmp	r3, sl
 801ad90:	f6ff af7f 	blt.w	801ac92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ad94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ad96:	b21b      	sxth	r3, r3
 801ad98:	9101      	str	r1, [sp, #4]
 801ad9a:	4641      	mov	r1, r8
 801ad9c:	9300      	str	r3, [sp, #0]
 801ad9e:	fa0f f38e 	sxth.w	r3, lr
 801ada2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801ada6:	e9cd c704 	strd	ip, r7, [sp, #16]
 801adaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801adae:	f7ff fd93 	bl	801a8d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801adb2:	e76e      	b.n	801ac92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801adb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801adb6:	1430      	asrs	r0, r6, #16
 801adb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801adba:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801adbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801adc2:	1423      	asrs	r3, r4, #16
 801adc4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801adc8:	fb01 3000 	mla	r0, r1, r0, r3
 801adcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801add2:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801add6:	8858      	ldrh	r0, [r3, #2]
 801add8:	f1be 0f00 	cmp.w	lr, #0
 801addc:	d00b      	beq.n	801adf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 801adde:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ade2:	3901      	subs	r1, #1
 801ade4:	0049      	lsls	r1, r1, #1
 801ade6:	3102      	adds	r1, #2
 801ade8:	eb03 0b01 	add.w	fp, r3, r1
 801adec:	5a5b      	ldrh	r3, [r3, r1]
 801adee:	930e      	str	r3, [sp, #56]	; 0x38
 801adf0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801adf4:	930f      	str	r3, [sp, #60]	; 0x3c
 801adf6:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801adfa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801adfe:	fb12 f30e 	smulbb	r3, r2, lr
 801ae02:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ae06:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801ae0a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ae0e:	10db      	asrs	r3, r3, #3
 801ae10:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ae14:	ea41 010c 	orr.w	r1, r1, ip
 801ae18:	f1ce 0c10 	rsb	ip, lr, #16
 801ae1c:	ea4b 0000 	orr.w	r0, fp, r0
 801ae20:	9f08      	ldr	r7, [sp, #32]
 801ae22:	ebac 0c02 	sub.w	ip, ip, r2
 801ae26:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ae2a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae2e:	4350      	muls	r0, r2
 801ae30:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801ae34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae36:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ae3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ae3c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801ae40:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801ae44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae46:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ae4a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ae4e:	0412      	lsls	r2, r2, #16
 801ae50:	ea4b 0101 	orr.w	r1, fp, r1
 801ae54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ae58:	fb03 c101 	mla	r1, r3, r1, ip
 801ae5c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801ae60:	4302      	orrs	r2, r0
 801ae62:	fb03 1202 	mla	r2, r3, r2, r1
 801ae66:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801ae6a:	0952      	lsrs	r2, r2, #5
 801ae6c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ae70:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801ae74:	f8b9 2000 	ldrh.w	r2, [r9]
 801ae78:	ea4b 0303 	orr.w	r3, fp, r3
 801ae7c:	1211      	asrs	r1, r2, #8
 801ae7e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801ae82:	b29b      	uxth	r3, r3
 801ae84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ae88:	00d2      	lsls	r2, r2, #3
 801ae8a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ae8e:	fb11 f107 	smulbb	r1, r1, r7
 801ae92:	1218      	asrs	r0, r3, #8
 801ae94:	fb1c fc07 	smulbb	ip, ip, r7
 801ae98:	b2d2      	uxtb	r2, r2
 801ae9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ae9e:	fb12 f207 	smulbb	r2, r2, r7
 801aea2:	fb00 100a 	mla	r0, r0, sl, r1
 801aea6:	10d9      	asrs	r1, r3, #3
 801aea8:	00db      	lsls	r3, r3, #3
 801aeaa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801aeae:	b280      	uxth	r0, r0
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	fb01 c10a 	mla	r1, r1, sl, ip
 801aeb6:	fb03 230a 	mla	r3, r3, sl, r2
 801aeba:	1c42      	adds	r2, r0, #1
 801aebc:	b289      	uxth	r1, r1
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801aec4:	f101 0c01 	add.w	ip, r1, #1
 801aec8:	1c5a      	adds	r2, r3, #1
 801aeca:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801aece:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801aed2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aed6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aed8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801aedc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801aee0:	441c      	add	r4, r3
 801aee2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801aee6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aee8:	4310      	orrs	r0, r2
 801aeea:	441e      	add	r6, r3
 801aeec:	ea40 000c 	orr.w	r0, r0, ip
 801aef0:	f829 0b02 	strh.w	r0, [r9], #2
 801aef4:	e6fa      	b.n	801acec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801aef6:	b013      	add	sp, #76	; 0x4c
 801aef8:	ecbd 8b08 	vpop	{d8-d11}
 801aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af04:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801af08:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801af0c:	fb06 5c03 	mla	ip, r6, r3, r5
 801af10:	2e00      	cmp	r6, #0
 801af12:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801af16:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801af1a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801af1e:	8808      	ldrh	r0, [r1, #0]
 801af20:	db2e      	blt.n	801af80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801af22:	45b0      	cmp	r8, r6
 801af24:	dd2c      	ble.n	801af80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801af26:	2d00      	cmp	r5, #0
 801af28:	db28      	blt.n	801af7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801af2a:	42ab      	cmp	r3, r5
 801af2c:	dd26      	ble.n	801af7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801af2e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801af32:	1c6a      	adds	r2, r5, #1
 801af34:	d427      	bmi.n	801af86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801af36:	4293      	cmp	r3, r2
 801af38:	dd25      	ble.n	801af86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801af3a:	b324      	cbz	r4, 801af86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801af3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801af40:	3601      	adds	r6, #1
 801af42:	d424      	bmi.n	801af8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801af44:	45b0      	cmp	r8, r6
 801af46:	dd22      	ble.n	801af8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801af48:	b31f      	cbz	r7, 801af92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801af4a:	2d00      	cmp	r5, #0
 801af4c:	db1d      	blt.n	801af8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801af4e:	42ab      	cmp	r3, r5
 801af50:	dd1b      	ble.n	801af8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801af52:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801af56:	3501      	adds	r5, #1
 801af58:	d405      	bmi.n	801af66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801af5a:	42ab      	cmp	r3, r5
 801af5c:	dd03      	ble.n	801af66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801af5e:	b124      	cbz	r4, 801af6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801af60:	3301      	adds	r3, #1
 801af62:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801af66:	2c0f      	cmp	r4, #15
 801af68:	d801      	bhi.n	801af6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801af6a:	2f0f      	cmp	r7, #15
 801af6c:	d914      	bls.n	801af98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801af6e:	4b27      	ldr	r3, [pc, #156]	; (801b00c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801af70:	f240 11ef 	movw	r1, #495	; 0x1ef
 801af74:	4a26      	ldr	r2, [pc, #152]	; (801b010 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801af76:	4827      	ldr	r0, [pc, #156]	; (801b014 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801af78:	f003 f9e6 	bl	801e348 <__assert_func>
 801af7c:	4684      	mov	ip, r0
 801af7e:	e7d8      	b.n	801af32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801af80:	4602      	mov	r2, r0
 801af82:	4684      	mov	ip, r0
 801af84:	e7dc      	b.n	801af40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801af86:	4602      	mov	r2, r0
 801af88:	e7da      	b.n	801af40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801af8a:	4606      	mov	r6, r0
 801af8c:	e7e3      	b.n	801af56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801af8e:	4606      	mov	r6, r0
 801af90:	e7e9      	b.n	801af66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801af92:	2c0f      	cmp	r4, #15
 801af94:	d8eb      	bhi.n	801af6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801af96:	4606      	mov	r6, r0
 801af98:	fb14 f307 	smulbb	r3, r4, r7
 801af9c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801afa0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801afa4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801afa8:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801afac:	10db      	asrs	r3, r3, #3
 801afae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801afb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801afb6:	ea45 0c0c 	orr.w	ip, r5, ip
 801afba:	f1c7 0510 	rsb	r5, r7, #16
 801afbe:	ea4e 0202 	orr.w	r2, lr, r2
 801afc2:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801afc6:	1b2d      	subs	r5, r5, r4
 801afc8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801afcc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801afd0:	4354      	muls	r4, r2
 801afd2:	fb05 450c 	mla	r5, r5, ip, r4
 801afd6:	0404      	lsls	r4, r0, #16
 801afd8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801afdc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801afe0:	4320      	orrs	r0, r4
 801afe2:	fb03 5400 	mla	r4, r3, r0, r5
 801afe6:	0430      	lsls	r0, r6, #16
 801afe8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801afec:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801aff0:	4330      	orrs	r0, r6
 801aff2:	fb07 4000 	mla	r0, r7, r0, r4
 801aff6:	0d43      	lsrs	r3, r0, #21
 801aff8:	0940      	lsrs	r0, r0, #5
 801affa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801affe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b002:	4318      	orrs	r0, r3
 801b004:	8008      	strh	r0, [r1, #0]
 801b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b00a:	bf00      	nop
 801b00c:	08022952 	.word	0x08022952
 801b010:	08022fbe 	.word	0x08022fbe
 801b014:	08022a3b 	.word	0x08022a3b

0801b018 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01c:	ed2d 8b08 	vpush	{d8-d11}
 801b020:	b08f      	sub	sp, #60	; 0x3c
 801b022:	461d      	mov	r5, r3
 801b024:	eeb0 aa40 	vmov.f32	s20, s0
 801b028:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b02a:	eef0 9a60 	vmov.f32	s19, s1
 801b02e:	9107      	str	r1, [sp, #28]
 801b030:	eeb0 9a41 	vmov.f32	s18, s2
 801b034:	6859      	ldr	r1, [r3, #4]
 801b036:	eeb0 8a62 	vmov.f32	s16, s5
 801b03a:	920c      	str	r2, [sp, #48]	; 0x30
 801b03c:	eef0 8a43 	vmov.f32	s17, s6
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	eef0 ba44 	vmov.f32	s23, s8
 801b046:	eeb0 ba64 	vmov.f32	s22, s9
 801b04a:	900d      	str	r0, [sp, #52]	; 0x34
 801b04c:	eef0 aa45 	vmov.f32	s21, s10
 801b050:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 801b054:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 801b058:	fb01 2707 	mla	r7, r1, r7, r2
 801b05c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801b060:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b062:	f8d3 8000 	ldr.w	r8, [r3]
 801b066:	9b07      	ldr	r3, [sp, #28]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	dc03      	bgt.n	801b074 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b06c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b06e:	2b00      	cmp	r3, #0
 801b070:	f340 8182 	ble.w	801b378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b074:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b076:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b07a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b07e:	1e48      	subs	r0, r1, #1
 801b080:	f102 3cff 	add.w	ip, r2, #4294967295
 801b084:	2d00      	cmp	r5, #0
 801b086:	f340 809b 	ble.w	801b1c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 801b08a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b08e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b092:	d406      	bmi.n	801b0a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b094:	4586      	cmp	lr, r0
 801b096:	da04      	bge.n	801b0a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b098:	2b00      	cmp	r3, #0
 801b09a:	db02      	blt.n	801b0a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b09c:	4563      	cmp	r3, ip
 801b09e:	f2c0 8090 	blt.w	801b1c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801b0a2:	f11e 0e01 	adds.w	lr, lr, #1
 801b0a6:	f100 8084 	bmi.w	801b1b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b0aa:	4571      	cmp	r1, lr
 801b0ac:	f2c0 8081 	blt.w	801b1b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b0b0:	3301      	adds	r3, #1
 801b0b2:	d47e      	bmi.n	801b1b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b0b4:	429a      	cmp	r2, r3
 801b0b6:	db7c      	blt.n	801b1b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b0b8:	46aa      	mov	sl, r5
 801b0ba:	46b9      	mov	r9, r7
 801b0bc:	f1ba 0f00 	cmp.w	sl, #0
 801b0c0:	f340 8099 	ble.w	801b1f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801b0c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0c6:	1421      	asrs	r1, r4, #16
 801b0c8:	ea4f 4026 	mov.w	r0, r6, asr #16
 801b0cc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b0d0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801b0d4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801b0d8:	f100 80d1 	bmi.w	801b27e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b0dc:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b0e0:	4559      	cmp	r1, fp
 801b0e2:	f280 80cc 	bge.w	801b27e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b0e6:	2800      	cmp	r0, #0
 801b0e8:	f2c0 80c9 	blt.w	801b27e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b0ec:	f103 3bff 	add.w	fp, r3, #4294967295
 801b0f0:	4558      	cmp	r0, fp
 801b0f2:	f280 80c4 	bge.w	801b27e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801b0f6:	fa0f fe8e 	sxth.w	lr, lr
 801b0fa:	fb00 110e 	mla	r1, r0, lr, r1
 801b0fe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801b102:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801b106:	8841      	ldrh	r1, [r0, #2]
 801b108:	f1bc 0f00 	cmp.w	ip, #0
 801b10c:	d00b      	beq.n	801b126 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b10e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801b112:	3b01      	subs	r3, #1
 801b114:	005b      	lsls	r3, r3, #1
 801b116:	3302      	adds	r3, #2
 801b118:	eb00 0e03 	add.w	lr, r0, r3
 801b11c:	5ac3      	ldrh	r3, [r0, r3]
 801b11e:	9308      	str	r3, [sp, #32]
 801b120:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801b124:	9309      	str	r3, [sp, #36]	; 0x24
 801b126:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801b12a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801b12e:	fb12 f30c 	smulbb	r3, r2, ip
 801b132:	f1cc 0e10 	rsb	lr, ip, #16
 801b136:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b13a:	10db      	asrs	r3, r3, #3
 801b13c:	ebae 0e02 	sub.w	lr, lr, r2
 801b140:	ea40 000b 	orr.w	r0, r0, fp
 801b144:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b148:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b14c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801b150:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b154:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801b158:	ea4b 0101 	orr.w	r1, fp, r1
 801b15c:	4351      	muls	r1, r2
 801b15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b160:	fb0e 1e00 	mla	lr, lr, r0, r1
 801b164:	0410      	lsls	r0, r2, #16
 801b166:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b16a:	9908      	ldr	r1, [sp, #32]
 801b16c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b170:	4310      	orrs	r0, r2
 801b172:	9a08      	ldr	r2, [sp, #32]
 801b174:	0412      	lsls	r2, r2, #16
 801b176:	fb03 e000 	mla	r0, r3, r0, lr
 801b17a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801b17e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801b182:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b186:	ea42 020e 	orr.w	r2, r2, lr
 801b18a:	fb03 0302 	mla	r3, r3, r2, r0
 801b18e:	0d5a      	lsrs	r2, r3, #21
 801b190:	095b      	lsrs	r3, r3, #5
 801b192:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b196:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b19a:	4313      	orrs	r3, r2
 801b19c:	f8a9 3000 	strh.w	r3, [r9]
 801b1a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b1a2:	f109 0902 	add.w	r9, r9, #2
 801b1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b1aa:	441c      	add	r4, r3
 801b1ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b1ae:	441e      	add	r6, r3
 801b1b0:	e784      	b.n	801b0bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b1b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b1b4:	3d01      	subs	r5, #1
 801b1b6:	3702      	adds	r7, #2
 801b1b8:	441c      	add	r4, r3
 801b1ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b1bc:	441e      	add	r6, r3
 801b1be:	e761      	b.n	801b084 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b1c0:	d01d      	beq.n	801b1fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b1c2:	1e6b      	subs	r3, r5, #1
 801b1c4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801b1c6:	fb00 4003 	mla	r0, r0, r3, r4
 801b1ca:	1400      	asrs	r0, r0, #16
 801b1cc:	f53f af74 	bmi.w	801b0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1d0:	3901      	subs	r1, #1
 801b1d2:	4288      	cmp	r0, r1
 801b1d4:	f6bf af70 	bge.w	801b0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1d8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b1da:	fb01 6303 	mla	r3, r1, r3, r6
 801b1de:	141b      	asrs	r3, r3, #16
 801b1e0:	f53f af6a 	bmi.w	801b0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1e4:	3a01      	subs	r2, #1
 801b1e6:	4293      	cmp	r3, r2
 801b1e8:	f6bf af66 	bge.w	801b0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1ec:	46a9      	mov	r9, r5
 801b1ee:	46ba      	mov	sl, r7
 801b1f0:	f1b9 0f00 	cmp.w	r9, #0
 801b1f4:	dc5b      	bgt.n	801b2ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b1f6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b1fa:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801b1fe:	9b07      	ldr	r3, [sp, #28]
 801b200:	2b00      	cmp	r3, #0
 801b202:	f340 80b9 	ble.w	801b378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b20a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b20c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b210:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b214:	eef0 6a48 	vmov.f32	s13, s16
 801b218:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b21c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b220:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b224:	ee16 4a90 	vmov	r4, s13
 801b228:	eef0 6a68 	vmov.f32	s13, s17
 801b22c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b230:	ee16 6a90 	vmov	r6, s13
 801b234:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b238:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b23c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b240:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b244:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b248:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b24c:	ee18 2a10 	vmov	r2, s16
 801b250:	eeb0 8a47 	vmov.f32	s16, s14
 801b254:	fb92 f3f3 	sdiv	r3, r2, r3
 801b258:	ee18 2a90 	vmov	r2, s17
 801b25c:	9323      	str	r3, [sp, #140]	; 0x8c
 801b25e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b260:	eef0 8a67 	vmov.f32	s17, s15
 801b264:	fb92 f3f3 	sdiv	r3, r2, r3
 801b268:	9324      	str	r3, [sp, #144]	; 0x90
 801b26a:	9b07      	ldr	r3, [sp, #28]
 801b26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b26e:	3b01      	subs	r3, #1
 801b270:	9307      	str	r3, [sp, #28]
 801b272:	bf08      	it	eq
 801b274:	4615      	moveq	r5, r2
 801b276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b278:	bf18      	it	ne
 801b27a:	461d      	movne	r5, r3
 801b27c:	e6f3      	b.n	801b066 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b27e:	f111 0b01 	adds.w	fp, r1, #1
 801b282:	d48d      	bmi.n	801b1a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b284:	45de      	cmp	lr, fp
 801b286:	db8b      	blt.n	801b1a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b288:	f110 0b01 	adds.w	fp, r0, #1
 801b28c:	d488      	bmi.n	801b1a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b28e:	455b      	cmp	r3, fp
 801b290:	db86      	blt.n	801b1a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b292:	b21b      	sxth	r3, r3
 801b294:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801b298:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801b29c:	9300      	str	r3, [sp, #0]
 801b29e:	4642      	mov	r2, r8
 801b2a0:	fa0f f38e 	sxth.w	r3, lr
 801b2a4:	4649      	mov	r1, r9
 801b2a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b2a8:	f7ff fe2a 	bl	801af00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801b2ac:	e778      	b.n	801b1a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b2ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2b0:	1420      	asrs	r0, r4, #16
 801b2b2:	1431      	asrs	r1, r6, #16
 801b2b4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801b2b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b2bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b2c0:	fb03 0101 	mla	r1, r3, r1, r0
 801b2c4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801b2c8:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801b2cc:	8841      	ldrh	r1, [r0, #2]
 801b2ce:	f1be 0f00 	cmp.w	lr, #0
 801b2d2:	d00b      	beq.n	801b2ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801b2d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b2d8:	3b01      	subs	r3, #1
 801b2da:	005b      	lsls	r3, r3, #1
 801b2dc:	3302      	adds	r3, #2
 801b2de:	eb00 0b03 	add.w	fp, r0, r3
 801b2e2:	5ac3      	ldrh	r3, [r0, r3]
 801b2e4:	930a      	str	r3, [sp, #40]	; 0x28
 801b2e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801b2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2ec:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801b2f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b2f4:	fb12 f30e 	smulbb	r3, r2, lr
 801b2f8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b2fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b300:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b304:	10db      	asrs	r3, r3, #3
 801b306:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b30a:	ea40 000c 	orr.w	r0, r0, ip
 801b30e:	f1ce 0c10 	rsb	ip, lr, #16
 801b312:	ea4b 0101 	orr.w	r1, fp, r1
 801b316:	f109 39ff 	add.w	r9, r9, #4294967295
 801b31a:	ebac 0c02 	sub.w	ip, ip, r2
 801b31e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801b322:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801b326:	4351      	muls	r1, r2
 801b328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b32a:	fb0c 1c00 	mla	ip, ip, r0, r1
 801b32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b330:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801b334:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801b338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b33a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b33e:	0412      	lsls	r2, r2, #16
 801b340:	ea4b 0000 	orr.w	r0, fp, r0
 801b344:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801b348:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b34c:	fb03 c000 	mla	r0, r3, r0, ip
 801b350:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801b354:	ea42 0b0b 	orr.w	fp, r2, fp
 801b358:	fb03 000b 	mla	r0, r3, fp, r0
 801b35c:	0d43      	lsrs	r3, r0, #21
 801b35e:	0940      	lsrs	r0, r0, #5
 801b360:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b364:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b368:	4318      	orrs	r0, r3
 801b36a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b36c:	441c      	add	r4, r3
 801b36e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b370:	f82a 0b02 	strh.w	r0, [sl], #2
 801b374:	441e      	add	r6, r3
 801b376:	e73b      	b.n	801b1f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b378:	b00f      	add	sp, #60	; 0x3c
 801b37a:	ecbd 8b08 	vpop	{d8-d11}
 801b37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b384 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b388:	880e      	ldrh	r6, [r1, #0]
 801b38a:	b085      	sub	sp, #20
 801b38c:	4690      	mov	r8, r2
 801b38e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801b392:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801b396:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801b39a:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 801b39e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801b3a2:	00f6      	lsls	r6, r6, #3
 801b3a4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801b3a8:	9200      	str	r2, [sp, #0]
 801b3aa:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 801b3ae:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 801b3b2:	9201      	str	r2, [sp, #4]
 801b3b4:	b2f2      	uxtb	r2, r6
 801b3b6:	2c00      	cmp	r4, #0
 801b3b8:	fb04 5603 	mla	r6, r4, r3, r5
 801b3bc:	9202      	str	r2, [sp, #8]
 801b3be:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 801b3c2:	db36      	blt.n	801b432 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 801b3c4:	45a6      	cmp	lr, r4
 801b3c6:	dd34      	ble.n	801b432 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 801b3c8:	2d00      	cmp	r5, #0
 801b3ca:	db30      	blt.n	801b42e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 801b3cc:	42ab      	cmp	r3, r5
 801b3ce:	dd2e      	ble.n	801b42e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 801b3d0:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 801b3d4:	1c6e      	adds	r6, r5, #1
 801b3d6:	d42f      	bmi.n	801b438 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 801b3d8:	42b3      	cmp	r3, r6
 801b3da:	dd2d      	ble.n	801b438 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 801b3dc:	b370      	cbz	r0, 801b43c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 801b3de:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801b3e2:	3401      	adds	r4, #1
 801b3e4:	d42e      	bmi.n	801b444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 801b3e6:	45a6      	cmp	lr, r4
 801b3e8:	dd2c      	ble.n	801b444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 801b3ea:	b377      	cbz	r7, 801b44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 801b3ec:	2d00      	cmp	r5, #0
 801b3ee:	db27      	blt.n	801b440 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 801b3f0:	42ab      	cmp	r3, r5
 801b3f2:	dd25      	ble.n	801b440 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 801b3f4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801b3f8:	3501      	adds	r5, #1
 801b3fa:	d429      	bmi.n	801b450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801b3fc:	42ab      	cmp	r3, r5
 801b3fe:	dd27      	ble.n	801b450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801b400:	b340      	cbz	r0, 801b454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801b402:	3301      	adds	r3, #1
 801b404:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801b408:	280f      	cmp	r0, #15
 801b40a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801b40e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b412:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b416:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801b41a:	d801      	bhi.n	801b420 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 801b41c:	2f0f      	cmp	r7, #15
 801b41e:	d91b      	bls.n	801b458 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 801b420:	4b85      	ldr	r3, [pc, #532]	; (801b638 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 801b422:	f240 210d 	movw	r1, #525	; 0x20d
 801b426:	4a85      	ldr	r2, [pc, #532]	; (801b63c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 801b428:	4885      	ldr	r0, [pc, #532]	; (801b640 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801b42a:	f002 ff8d 	bl	801e348 <__assert_func>
 801b42e:	2200      	movs	r2, #0
 801b430:	e7d0      	b.n	801b3d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 801b432:	2600      	movs	r6, #0
 801b434:	4632      	mov	r2, r6
 801b436:	e7d4      	b.n	801b3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801b438:	2600      	movs	r6, #0
 801b43a:	e7d2      	b.n	801b3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801b43c:	4606      	mov	r6, r0
 801b43e:	e7d0      	b.n	801b3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801b440:	2400      	movs	r4, #0
 801b442:	e7d9      	b.n	801b3f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801b444:	2300      	movs	r3, #0
 801b446:	461c      	mov	r4, r3
 801b448:	e7de      	b.n	801b408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 801b44a:	463b      	mov	r3, r7
 801b44c:	463c      	mov	r4, r7
 801b44e:	e7db      	b.n	801b408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 801b450:	2300      	movs	r3, #0
 801b452:	e7d9      	b.n	801b408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 801b454:	4603      	mov	r3, r0
 801b456:	e7d7      	b.n	801b408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 801b458:	b280      	uxth	r0, r0
 801b45a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b45e:	b2bf      	uxth	r7, r7
 801b460:	fb00 fe07 	mul.w	lr, r0, r7
 801b464:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b468:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801b46c:	eba0 0c0e 	sub.w	ip, r0, lr
 801b470:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801b474:	b2bf      	uxth	r7, r7
 801b476:	fa1f fc8c 	uxth.w	ip, ip
 801b47a:	eba5 0507 	sub.w	r5, r5, r7
 801b47e:	fb0c f00a 	mul.w	r0, ip, sl
 801b482:	b2ad      	uxth	r5, r5
 801b484:	fb05 000b 	mla	r0, r5, fp, r0
 801b488:	fb07 0009 	mla	r0, r7, r9, r0
 801b48c:	fb0e 0008 	mla	r0, lr, r8, r0
 801b490:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b494:	9003      	str	r0, [sp, #12]
 801b496:	d018      	beq.n	801b4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 801b498:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801b49c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b4a0:	fb0b f000 	mul.w	r0, fp, r0
 801b4a4:	fb0b fb02 	mul.w	fp, fp, r2
 801b4a8:	0a02      	lsrs	r2, r0, #8
 801b4aa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801b4ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b4b2:	4402      	add	r2, r0
 801b4b4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801b4b8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801b4bc:	0a12      	lsrs	r2, r2, #8
 801b4be:	0a00      	lsrs	r0, r0, #8
 801b4c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b4c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b4c8:	4302      	orrs	r2, r0
 801b4ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b4ce:	d019      	beq.n	801b504 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 801b4d0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801b4d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b4d8:	fb0a fb0b 	mul.w	fp, sl, fp
 801b4dc:	fb0a fa06 	mul.w	sl, sl, r6
 801b4e0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801b4e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b4e8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801b4ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b4f0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801b4f4:	445e      	add	r6, fp
 801b4f6:	0a00      	lsrs	r0, r0, #8
 801b4f8:	0a36      	lsrs	r6, r6, #8
 801b4fa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b4fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b502:	4306      	orrs	r6, r0
 801b504:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b508:	d019      	beq.n	801b53e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 801b50a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801b50e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b512:	fb09 fa0a 	mul.w	sl, r9, sl
 801b516:	fb09 f904 	mul.w	r9, r9, r4
 801b51a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801b51e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b522:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801b526:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b52a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801b52e:	4454      	add	r4, sl
 801b530:	0a00      	lsrs	r0, r0, #8
 801b532:	0a24      	lsrs	r4, r4, #8
 801b534:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b538:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b53c:	4304      	orrs	r4, r0
 801b53e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b542:	d019      	beq.n	801b578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 801b544:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801b548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b54c:	fb08 f909 	mul.w	r9, r8, r9
 801b550:	fb08 f803 	mul.w	r8, r8, r3
 801b554:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801b558:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801b55c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801b560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b564:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801b568:	444b      	add	r3, r9
 801b56a:	0a00      	lsrs	r0, r0, #8
 801b56c:	0a1b      	lsrs	r3, r3, #8
 801b56e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b572:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b576:	4303      	orrs	r3, r0
 801b578:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b57c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801b580:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b584:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b588:	fb0c f808 	mul.w	r8, ip, r8
 801b58c:	fb0c f606 	mul.w	r6, ip, r6
 801b590:	fb05 8800 	mla	r8, r5, r0, r8
 801b594:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801b598:	fb05 6202 	mla	r2, r5, r2, r6
 801b59c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801b5a0:	fb07 8800 	mla	r8, r7, r0, r8
 801b5a4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801b5a8:	b2ad      	uxth	r5, r5
 801b5aa:	fb0e 8000 	mla	r0, lr, r0, r8
 801b5ae:	0a00      	lsrs	r0, r0, #8
 801b5b0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801b5b4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801b5b8:	9c00      	ldr	r4, [sp, #0]
 801b5ba:	fb07 2700 	mla	r7, r7, r0, r2
 801b5be:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801b5c2:	9b03      	ldr	r3, [sp, #12]
 801b5c4:	fb0e 7000 	mla	r0, lr, r0, r7
 801b5c8:	436b      	muls	r3, r5
 801b5ca:	0a00      	lsrs	r0, r0, #8
 801b5cc:	1c5a      	adds	r2, r3, #1
 801b5ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b5d2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b5d6:	ea48 0000 	orr.w	r0, r8, r0
 801b5da:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801b5de:	0c03      	lsrs	r3, r0, #16
 801b5e0:	b2d2      	uxtb	r2, r2
 801b5e2:	fb14 f602 	smulbb	r6, r4, r2
 801b5e6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801b5ea:	b2c0      	uxtb	r0, r0
 801b5ec:	fb03 6305 	mla	r3, r3, r5, r6
 801b5f0:	b29e      	uxth	r6, r3
 801b5f2:	9b01      	ldr	r3, [sp, #4]
 801b5f4:	fb13 f302 	smulbb	r3, r3, r2
 801b5f8:	fb04 3405 	mla	r4, r4, r5, r3
 801b5fc:	9b02      	ldr	r3, [sp, #8]
 801b5fe:	fb13 f202 	smulbb	r2, r3, r2
 801b602:	b2a4      	uxth	r4, r4
 801b604:	1c73      	adds	r3, r6, #1
 801b606:	fb00 2005 	mla	r0, r0, r5, r2
 801b60a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801b60e:	b280      	uxth	r0, r0
 801b610:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b614:	1c42      	adds	r2, r0, #1
 801b616:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b61a:	1c62      	adds	r2, r4, #1
 801b61c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b620:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801b624:	0952      	lsrs	r2, r2, #5
 801b626:	4303      	orrs	r3, r0
 801b628:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b62c:	4313      	orrs	r3, r2
 801b62e:	800b      	strh	r3, [r1, #0]
 801b630:	b005      	add	sp, #20
 801b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b636:	bf00      	nop
 801b638:	08022952 	.word	0x08022952
 801b63c:	08022f15 	.word	0x08022f15
 801b640:	08022a3b 	.word	0x08022a3b

0801b644 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b648:	ed2d 8b08 	vpush	{d8-d11}
 801b64c:	b09d      	sub	sp, #116	; 0x74
 801b64e:	eeb0 aa40 	vmov.f32	s20, s0
 801b652:	eef0 9a60 	vmov.f32	s19, s1
 801b656:	9219      	str	r2, [sp, #100]	; 0x64
 801b658:	eeb0 9a41 	vmov.f32	s18, s2
 801b65c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801b65e:	eeb0 8a62 	vmov.f32	s16, s5
 801b662:	9307      	str	r3, [sp, #28]
 801b664:	eef0 8a43 	vmov.f32	s17, s6
 801b668:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801b66c:	eef0 ba44 	vmov.f32	s23, s8
 801b670:	901b      	str	r0, [sp, #108]	; 0x6c
 801b672:	eeb0 ba64 	vmov.f32	s22, s9
 801b676:	931a      	str	r3, [sp, #104]	; 0x68
 801b678:	eef0 aa45 	vmov.f32	s21, s10
 801b67c:	6850      	ldr	r0, [r2, #4]
 801b67e:	9117      	str	r1, [sp, #92]	; 0x5c
 801b680:	6812      	ldr	r2, [r2, #0]
 801b682:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801b686:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 801b68a:	fb00 1303 	mla	r3, r0, r3, r1
 801b68e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b692:	930a      	str	r3, [sp, #40]	; 0x28
 801b694:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	9310      	str	r3, [sp, #64]	; 0x40
 801b69a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801b69e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	dc03      	bgt.n	801b6ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b6a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f340 837b 	ble.w	801bda4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801b6ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801b6b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b6b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b6b8:	1e48      	subs	r0, r1, #1
 801b6ba:	1e57      	subs	r7, r2, #1
 801b6bc:	9b07      	ldr	r3, [sp, #28]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f340 8194 	ble.w	801b9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801b6c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b6c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b6cc:	d406      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6ce:	4584      	cmp	ip, r0
 801b6d0:	da04      	bge.n	801b6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	db02      	blt.n	801b6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6d6:	42bb      	cmp	r3, r7
 801b6d8:	f2c0 8189 	blt.w	801b9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b6dc:	f11c 0c01 	adds.w	ip, ip, #1
 801b6e0:	f100 8179 	bmi.w	801b9d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b6e4:	4561      	cmp	r1, ip
 801b6e6:	f2c0 8176 	blt.w	801b9d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b6ea:	3301      	adds	r3, #1
 801b6ec:	f100 8173 	bmi.w	801b9d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b6f0:	429a      	cmp	r2, r3
 801b6f2:	f2c0 8170 	blt.w	801b9d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b6f6:	9b07      	ldr	r3, [sp, #28]
 801b6f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b6fa:	9318      	str	r3, [sp, #96]	; 0x60
 801b6fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	f340 8192 	ble.w	801ba28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b704:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801b706:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801b70a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801b70c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801b710:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b714:	1422      	asrs	r2, r4, #16
 801b716:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b71a:	689b      	ldr	r3, [r3, #8]
 801b71c:	f100 81d3 	bmi.w	801bac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b720:	f103 38ff 	add.w	r8, r3, #4294967295
 801b724:	4542      	cmp	r2, r8
 801b726:	f280 81ce 	bge.w	801bac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b72a:	f1bc 0f00 	cmp.w	ip, #0
 801b72e:	f2c0 81ca 	blt.w	801bac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b732:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b736:	45c4      	cmp	ip, r8
 801b738:	f280 81c5 	bge.w	801bac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b73c:	b21b      	sxth	r3, r3
 801b73e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b740:	fb0c 2203 	mla	r2, ip, r3, r2
 801b744:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801b748:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b74c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801b750:	2800      	cmp	r0, #0
 801b752:	f000 81af 	beq.w	801bab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801b756:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b75a:	950c      	str	r5, [sp, #48]	; 0x30
 801b75c:	0e2d      	lsrs	r5, r5, #24
 801b75e:	9513      	str	r5, [sp, #76]	; 0x4c
 801b760:	b181      	cbz	r1, 801b784 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b766:	3b01      	subs	r3, #1
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	3304      	adds	r3, #4
 801b76c:	eb08 0c03 	add.w	ip, r8, r3
 801b770:	f858 3003 	ldr.w	r3, [r8, r3]
 801b774:	9308      	str	r3, [sp, #32]
 801b776:	0e1b      	lsrs	r3, r3, #24
 801b778:	9311      	str	r3, [sp, #68]	; 0x44
 801b77a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801b77e:	930d      	str	r3, [sp, #52]	; 0x34
 801b780:	0e1b      	lsrs	r3, r3, #24
 801b782:	9314      	str	r3, [sp, #80]	; 0x50
 801b784:	b280      	uxth	r0, r0
 801b786:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b788:	b289      	uxth	r1, r1
 801b78a:	fb00 f901 	mul.w	r9, r0, r1
 801b78e:	0100      	lsls	r0, r0, #4
 801b790:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b794:	eba0 0809 	sub.w	r8, r0, r9
 801b798:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b79c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b79e:	b289      	uxth	r1, r1
 801b7a0:	fa1f f888 	uxth.w	r8, r8
 801b7a4:	1a5b      	subs	r3, r3, r1
 801b7a6:	fb08 f000 	mul.w	r0, r8, r0
 801b7aa:	b29b      	uxth	r3, r3
 801b7ac:	fb03 000e 	mla	r0, r3, lr, r0
 801b7b0:	fb01 0005 	mla	r0, r1, r5, r0
 801b7b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b7b6:	fb09 0005 	mla	r0, r9, r5, r0
 801b7ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b7be:	2800      	cmp	r0, #0
 801b7c0:	f000 8100 	beq.w	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801b7c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b7c8:	d01b      	beq.n	801b802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801b7ca:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801b7ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b7d2:	fb0e fa0a 	mul.w	sl, lr, sl
 801b7d6:	fb0e fe02 	mul.w	lr, lr, r2
 801b7da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801b7de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b7e2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b7e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b7ea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b7ee:	4452      	add	r2, sl
 801b7f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b7f4:	0a12      	lsrs	r2, r2, #8
 801b7f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b7fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b7fe:	ea42 020c 	orr.w	r2, r2, ip
 801b802:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b804:	2dff      	cmp	r5, #255	; 0xff
 801b806:	d021      	beq.n	801b84c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b808:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b80a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b80e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b810:	fb05 fb0b 	mul.w	fp, r5, fp
 801b814:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b816:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b81a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b81c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b820:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b824:	fb05 fa0a 	mul.w	sl, r5, sl
 801b828:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b82c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b830:	44de      	add	lr, fp
 801b832:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b836:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b83a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b83e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b842:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b846:	ea4e 050a 	orr.w	r5, lr, sl
 801b84a:	950c      	str	r5, [sp, #48]	; 0x30
 801b84c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b84e:	2dff      	cmp	r5, #255	; 0xff
 801b850:	d021      	beq.n	801b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b852:	9d08      	ldr	r5, [sp, #32]
 801b854:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b858:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b85a:	fb05 fb0b 	mul.w	fp, r5, fp
 801b85e:	9d08      	ldr	r5, [sp, #32]
 801b860:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b864:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b866:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b86a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b86e:	fb05 fa0a 	mul.w	sl, r5, sl
 801b872:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b876:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b87a:	44de      	add	lr, fp
 801b87c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b880:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b884:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b888:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b88c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b890:	ea4e 050a 	orr.w	r5, lr, sl
 801b894:	9508      	str	r5, [sp, #32]
 801b896:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b898:	2dff      	cmp	r5, #255	; 0xff
 801b89a:	d021      	beq.n	801b8e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801b89c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b89e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b8a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b8a4:	fb05 fb0b 	mul.w	fp, r5, fp
 801b8a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b8aa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b8ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b8b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b8b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b8b8:	fb05 fa0a 	mul.w	sl, r5, sl
 801b8bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b8c4:	44de      	add	lr, fp
 801b8c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b8ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b8d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b8da:	ea4e 050a 	orr.w	r5, lr, sl
 801b8de:	950d      	str	r5, [sp, #52]	; 0x34
 801b8e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b8e2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b8e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b8ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801b8ee:	9d08      	ldr	r5, [sp, #32]
 801b8f0:	fb08 fc0c 	mul.w	ip, r8, ip
 801b8f4:	fb03 cc0e 	mla	ip, r3, lr, ip
 801b8f8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801b8fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b8fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b902:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801b906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b908:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b90c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b910:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b912:	fb08 f80e 	mul.w	r8, r8, lr
 801b916:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b91a:	f8b7 e000 	ldrh.w	lr, [r7]
 801b91e:	fb03 8202 	mla	r2, r3, r2, r8
 801b922:	9b08      	ldr	r3, [sp, #32]
 801b924:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b928:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801b92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b92e:	fb01 220a 	mla	r2, r1, sl, r2
 801b932:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801b936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b938:	fb09 2901 	mla	r9, r9, r1, r2
 801b93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b93e:	4343      	muls	r3, r0
 801b940:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b944:	1c58      	adds	r0, r3, #1
 801b946:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b94a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b94e:	ea4c 0c09 	orr.w	ip, ip, r9
 801b952:	ea4f 232e 	mov.w	r3, lr, asr #8
 801b956:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b95a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801b95e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b962:	b2c0      	uxtb	r0, r0
 801b964:	fb11 f102 	smulbb	r1, r1, r2
 801b968:	ea4f 02ee 	mov.w	r2, lr, asr #3
 801b96c:	fb03 1300 	mla	r3, r3, r0, r1
 801b970:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b974:	b299      	uxth	r1, r3
 801b976:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b97a:	fa5f fc8c 	uxtb.w	ip, ip
 801b97e:	fb13 f305 	smulbb	r3, r3, r5
 801b982:	fb1c fc05 	smulbb	ip, ip, r5
 801b986:	fb02 3200 	mla	r2, r2, r0, r3
 801b98a:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 801b98e:	b2db      	uxtb	r3, r3
 801b990:	b292      	uxth	r2, r2
 801b992:	fb03 cc00 	mla	ip, r3, r0, ip
 801b996:	1c4b      	adds	r3, r1, #1
 801b998:	fa1f fc8c 	uxth.w	ip, ip
 801b99c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b9a0:	1c51      	adds	r1, r2, #1
 801b9a2:	f10c 0001 	add.w	r0, ip, #1
 801b9a6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b9aa:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b9ae:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801b9b2:	0952      	lsrs	r2, r2, #5
 801b9b4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b9b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b9bc:	ea43 030c 	orr.w	r3, r3, ip
 801b9c0:	4313      	orrs	r3, r2
 801b9c2:	803b      	strh	r3, [r7, #0]
 801b9c4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801b9c6:	3702      	adds	r7, #2
 801b9c8:	441c      	add	r4, r3
 801b9ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b9cc:	441e      	add	r6, r3
 801b9ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b9d0:	3b01      	subs	r3, #1
 801b9d2:	9318      	str	r3, [sp, #96]	; 0x60
 801b9d4:	e692      	b.n	801b6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801b9d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801b9d8:	441c      	add	r4, r3
 801b9da:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b9dc:	441e      	add	r6, r3
 801b9de:	9b07      	ldr	r3, [sp, #28]
 801b9e0:	3b01      	subs	r3, #1
 801b9e2:	9307      	str	r3, [sp, #28]
 801b9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9e6:	3302      	adds	r3, #2
 801b9e8:	930a      	str	r3, [sp, #40]	; 0x28
 801b9ea:	e667      	b.n	801b6bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b9ec:	d023      	beq.n	801ba36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801b9ee:	9b07      	ldr	r3, [sp, #28]
 801b9f0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801b9f2:	3b01      	subs	r3, #1
 801b9f4:	fb00 4003 	mla	r0, r0, r3, r4
 801b9f8:	1400      	asrs	r0, r0, #16
 801b9fa:	f53f ae7c 	bmi.w	801b6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b9fe:	3901      	subs	r1, #1
 801ba00:	4288      	cmp	r0, r1
 801ba02:	f6bf ae78 	bge.w	801b6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ba06:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801ba08:	fb01 6303 	mla	r3, r1, r3, r6
 801ba0c:	141b      	asrs	r3, r3, #16
 801ba0e:	f53f ae72 	bmi.w	801b6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ba12:	3a01      	subs	r2, #1
 801ba14:	4293      	cmp	r3, r2
 801ba16:	f6bf ae6e 	bge.w	801b6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ba1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ba1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ba22:	f1bb 0f00 	cmp.w	fp, #0
 801ba26:	dc6c      	bgt.n	801bb02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 801ba28:	9b07      	ldr	r3, [sp, #28]
 801ba2a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ba2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba30:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801ba34:	930a      	str	r3, [sp, #40]	; 0x28
 801ba36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	f340 81b3 	ble.w	801bda4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801ba3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ba42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba44:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ba48:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ba4c:	eef0 6a48 	vmov.f32	s13, s16
 801ba50:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ba54:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ba58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba5c:	ee16 4a90 	vmov	r4, s13
 801ba60:	eef0 6a68 	vmov.f32	s13, s17
 801ba64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba68:	ee16 6a90 	vmov	r6, s13
 801ba6c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ba70:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ba74:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ba78:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ba7c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ba80:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ba84:	ee18 2a10 	vmov	r2, s16
 801ba88:	eeb0 8a47 	vmov.f32	s16, s14
 801ba8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba90:	ee18 2a90 	vmov	r2, s17
 801ba94:	9331      	str	r3, [sp, #196]	; 0xc4
 801ba96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba98:	eef0 8a67 	vmov.f32	s17, s15
 801ba9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801baa0:	9332      	str	r3, [sp, #200]	; 0xc8
 801baa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801baa4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801baa6:	3b01      	subs	r3, #1
 801baa8:	9317      	str	r3, [sp, #92]	; 0x5c
 801baaa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801baac:	bf08      	it	eq
 801baae:	4613      	moveq	r3, r2
 801bab0:	9307      	str	r3, [sp, #28]
 801bab2:	e5f5      	b.n	801b6a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bab4:	2900      	cmp	r1, #0
 801bab6:	f43f ae65 	beq.w	801b784 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801baba:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801babe:	9308      	str	r3, [sp, #32]
 801bac0:	0e1b      	lsrs	r3, r3, #24
 801bac2:	9311      	str	r3, [sp, #68]	; 0x44
 801bac4:	e65e      	b.n	801b784 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801bac6:	f112 0801 	adds.w	r8, r2, #1
 801baca:	f53f af7b 	bmi.w	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801bace:	4543      	cmp	r3, r8
 801bad0:	f6ff af78 	blt.w	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801bad4:	f11c 0801 	adds.w	r8, ip, #1
 801bad8:	f53f af74 	bmi.w	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801badc:	45c6      	cmp	lr, r8
 801bade:	f6ff af71 	blt.w	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801bae2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801bae4:	b21b      	sxth	r3, r3
 801bae6:	9201      	str	r2, [sp, #4]
 801bae8:	fa0f f28e 	sxth.w	r2, lr
 801baec:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801baf0:	e9cd c002 	strd	ip, r0, [sp, #8]
 801baf4:	9200      	str	r2, [sp, #0]
 801baf6:	4639      	mov	r1, r7
 801baf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bafa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801bafc:	f7ff fc42 	bl	801b384 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801bb00:	e760      	b.n	801b9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801bb02:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bb04:	1427      	asrs	r7, r4, #16
 801bb06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bb08:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801bb0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bb10:	1433      	asrs	r3, r6, #16
 801bb12:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bb16:	fb01 7303 	mla	r3, r1, r3, r7
 801bb1a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801bb1e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801bb22:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801bb26:	2a00      	cmp	r2, #0
 801bb28:	f000 8133 	beq.w	801bd92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 801bb2c:	687d      	ldr	r5, [r7, #4]
 801bb2e:	950e      	str	r5, [sp, #56]	; 0x38
 801bb30:	0e2d      	lsrs	r5, r5, #24
 801bb32:	9515      	str	r5, [sp, #84]	; 0x54
 801bb34:	b178      	cbz	r0, 801bb56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801bb36:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801bb3a:	3901      	subs	r1, #1
 801bb3c:	0089      	lsls	r1, r1, #2
 801bb3e:	3104      	adds	r1, #4
 801bb40:	eb07 0e01 	add.w	lr, r7, r1
 801bb44:	5879      	ldr	r1, [r7, r1]
 801bb46:	9109      	str	r1, [sp, #36]	; 0x24
 801bb48:	0e09      	lsrs	r1, r1, #24
 801bb4a:	9112      	str	r1, [sp, #72]	; 0x48
 801bb4c:	f8de 1004 	ldr.w	r1, [lr, #4]
 801bb50:	910f      	str	r1, [sp, #60]	; 0x3c
 801bb52:	0e09      	lsrs	r1, r1, #24
 801bb54:	9116      	str	r1, [sp, #88]	; 0x58
 801bb56:	b292      	uxth	r2, r2
 801bb58:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bb5a:	b280      	uxth	r0, r0
 801bb5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bb5e:	fb02 f800 	mul.w	r8, r2, r0
 801bb62:	0112      	lsls	r2, r2, #4
 801bb64:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801bb68:	eba2 0e08 	sub.w	lr, r2, r8
 801bb6c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801bb70:	b280      	uxth	r0, r0
 801bb72:	fa1f fe8e 	uxth.w	lr, lr
 801bb76:	1a12      	subs	r2, r2, r0
 801bb78:	fb0e f101 	mul.w	r1, lr, r1
 801bb7c:	b292      	uxth	r2, r2
 801bb7e:	fb02 110c 	mla	r1, r2, ip, r1
 801bb82:	fb00 1105 	mla	r1, r0, r5, r1
 801bb86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bb88:	fb08 1105 	mla	r1, r8, r5, r1
 801bb8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bb90:	2900      	cmp	r1, #0
 801bb92:	f000 80f5 	beq.w	801bd80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801bb96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bb9a:	d019      	beq.n	801bbd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 801bb9c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801bba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bba4:	fb0c fa0a 	mul.w	sl, ip, sl
 801bba8:	fb0c fc03 	mul.w	ip, ip, r3
 801bbac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bbb0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bbb4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801bbb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbbc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801bbc0:	4453      	add	r3, sl
 801bbc2:	0a3f      	lsrs	r7, r7, #8
 801bbc4:	0a1b      	lsrs	r3, r3, #8
 801bbc6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bbca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbce:	433b      	orrs	r3, r7
 801bbd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bbd2:	2dff      	cmp	r5, #255	; 0xff
 801bbd4:	d020      	beq.n	801bc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 801bbd6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bbd8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801bbdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bbde:	436f      	muls	r7, r5
 801bbe0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bbe2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bbe6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801bbea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bbec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bbf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bbf4:	fb05 fa0a 	mul.w	sl, r5, sl
 801bbf8:	44bc      	add	ip, r7
 801bbfa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bbfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bc12:	ea4c 050a 	orr.w	r5, ip, sl
 801bc16:	950e      	str	r5, [sp, #56]	; 0x38
 801bc18:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc1a:	2dff      	cmp	r5, #255	; 0xff
 801bc1c:	d020      	beq.n	801bc60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801bc1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801bc20:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801bc24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc26:	436f      	muls	r7, r5
 801bc28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801bc2a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bc2e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801bc32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc34:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bc38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc3c:	fb05 fa0a 	mul.w	sl, r5, sl
 801bc40:	44bc      	add	ip, r7
 801bc42:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bc46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bc5a:	ea4c 050a 	orr.w	r5, ip, sl
 801bc5e:	9509      	str	r5, [sp, #36]	; 0x24
 801bc60:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bc62:	2dff      	cmp	r5, #255	; 0xff
 801bc64:	d020      	beq.n	801bca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 801bc66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bc68:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801bc6c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bc6e:	436f      	muls	r7, r5
 801bc70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bc72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bc76:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801bc7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bc7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bc80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc84:	fb05 fa0a 	mul.w	sl, r5, sl
 801bc88:	44bc      	add	ip, r7
 801bc8a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bc8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bca2:	ea4c 050a 	orr.w	r5, ip, sl
 801bca6:	950f      	str	r5, [sp, #60]	; 0x3c
 801bca8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bcaa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801bcae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bcb2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801bcb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801bcb8:	fb0e f707 	mul.w	r7, lr, r7
 801bcbc:	fb02 770c 	mla	r7, r2, ip, r7
 801bcc0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801bcc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bcc6:	fb00 770c 	mla	r7, r0, ip, r7
 801bcca:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801bcce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bcd0:	fb08 770c 	mla	r7, r8, ip, r7
 801bcd4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801bcd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801bcda:	fb0e fe0c 	mul.w	lr, lr, ip
 801bcde:	0a3f      	lsrs	r7, r7, #8
 801bce0:	fb02 e303 	mla	r3, r2, r3, lr
 801bce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bce6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcea:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801bcee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcf0:	fb00 330a 	mla	r3, r0, sl, r3
 801bcf4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801bcf8:	f8b9 0000 	ldrh.w	r0, [r9]
 801bcfc:	fb08 3c0c 	mla	ip, r8, ip, r3
 801bd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd02:	1202      	asrs	r2, r0, #8
 801bd04:	4359      	muls	r1, r3
 801bd06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd0a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bd0e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd12:	1c4b      	adds	r3, r1, #1
 801bd14:	ea47 070c 	orr.w	r7, r7, ip
 801bd18:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801bd1c:	0c3b      	lsrs	r3, r7, #16
 801bd1e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bd22:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801bd26:	b2ff      	uxtb	r7, r7
 801bd28:	fb13 f305 	smulbb	r3, r3, r5
 801bd2c:	b2c9      	uxtb	r1, r1
 801bd2e:	fb17 f705 	smulbb	r7, r7, r5
 801bd32:	fb02 3201 	mla	r2, r2, r1, r3
 801bd36:	10c3      	asrs	r3, r0, #3
 801bd38:	fb1c fc05 	smulbb	ip, ip, r5
 801bd3c:	00c0      	lsls	r0, r0, #3
 801bd3e:	b292      	uxth	r2, r2
 801bd40:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801bd44:	b2c0      	uxtb	r0, r0
 801bd46:	fb03 c301 	mla	r3, r3, r1, ip
 801bd4a:	fb00 7001 	mla	r0, r0, r1, r7
 801bd4e:	1c51      	adds	r1, r2, #1
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	b280      	uxth	r0, r0
 801bd54:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bd58:	f100 0c01 	add.w	ip, r0, #1
 801bd5c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801bd60:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801bd64:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bd68:	ea42 020c 	orr.w	r2, r2, ip
 801bd6c:	f103 0c01 	add.w	ip, r3, #1
 801bd70:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801bd74:	095b      	lsrs	r3, r3, #5
 801bd76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bd7a:	431a      	orrs	r2, r3
 801bd7c:	f8a9 2000 	strh.w	r2, [r9]
 801bd80:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801bd82:	f109 0902 	add.w	r9, r9, #2
 801bd86:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bd8a:	441c      	add	r4, r3
 801bd8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801bd8e:	441e      	add	r6, r3
 801bd90:	e647      	b.n	801ba22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801bd92:	2800      	cmp	r0, #0
 801bd94:	f43f aedf 	beq.w	801bb56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801bd98:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801bd9c:	9109      	str	r1, [sp, #36]	; 0x24
 801bd9e:	0e09      	lsrs	r1, r1, #24
 801bda0:	9112      	str	r1, [sp, #72]	; 0x48
 801bda2:	e6d8      	b.n	801bb56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801bda4:	b01d      	add	sp, #116	; 0x74
 801bda6:	ecbd 8b08 	vpop	{d8-d11}
 801bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bdb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb4:	880e      	ldrh	r6, [r1, #0]
 801bdb6:	b085      	sub	sp, #20
 801bdb8:	4690      	mov	r8, r2
 801bdba:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801bdbe:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801bdc2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801bdc6:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 801bdca:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801bdce:	00f6      	lsls	r6, r6, #3
 801bdd0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801bdd4:	9200      	str	r2, [sp, #0]
 801bdd6:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 801bdda:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 801bdde:	9201      	str	r2, [sp, #4]
 801bde0:	b2f2      	uxtb	r2, r6
 801bde2:	2c00      	cmp	r4, #0
 801bde4:	fb04 5603 	mla	r6, r4, r3, r5
 801bde8:	9202      	str	r2, [sp, #8]
 801bdea:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 801bdee:	db36      	blt.n	801be5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 801bdf0:	45a6      	cmp	lr, r4
 801bdf2:	dd34      	ble.n	801be5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 801bdf4:	2d00      	cmp	r5, #0
 801bdf6:	db30      	blt.n	801be5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 801bdf8:	42ab      	cmp	r3, r5
 801bdfa:	dd2e      	ble.n	801be5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 801bdfc:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 801be00:	1c6e      	adds	r6, r5, #1
 801be02:	d42f      	bmi.n	801be64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 801be04:	42b3      	cmp	r3, r6
 801be06:	dd2d      	ble.n	801be64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 801be08:	b370      	cbz	r0, 801be68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 801be0a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801be0e:	3401      	adds	r4, #1
 801be10:	d42e      	bmi.n	801be70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 801be12:	45a6      	cmp	lr, r4
 801be14:	dd2c      	ble.n	801be70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 801be16:	b377      	cbz	r7, 801be76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 801be18:	2d00      	cmp	r5, #0
 801be1a:	db27      	blt.n	801be6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 801be1c:	42ab      	cmp	r3, r5
 801be1e:	dd25      	ble.n	801be6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 801be20:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801be24:	3501      	adds	r5, #1
 801be26:	d429      	bmi.n	801be7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801be28:	42ab      	cmp	r3, r5
 801be2a:	dd27      	ble.n	801be7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801be2c:	b340      	cbz	r0, 801be80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801be2e:	3301      	adds	r3, #1
 801be30:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801be34:	280f      	cmp	r0, #15
 801be36:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801be3a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801be3e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801be42:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801be46:	d801      	bhi.n	801be4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 801be48:	2f0f      	cmp	r7, #15
 801be4a:	d91b      	bls.n	801be84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 801be4c:	4b7e      	ldr	r3, [pc, #504]	; (801c048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 801be4e:	f240 210d 	movw	r1, #525	; 0x20d
 801be52:	4a7e      	ldr	r2, [pc, #504]	; (801c04c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 801be54:	487e      	ldr	r0, [pc, #504]	; (801c050 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801be56:	f002 fa77 	bl	801e348 <__assert_func>
 801be5a:	2200      	movs	r2, #0
 801be5c:	e7d0      	b.n	801be00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 801be5e:	2600      	movs	r6, #0
 801be60:	4632      	mov	r2, r6
 801be62:	e7d4      	b.n	801be0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801be64:	2600      	movs	r6, #0
 801be66:	e7d2      	b.n	801be0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801be68:	4606      	mov	r6, r0
 801be6a:	e7d0      	b.n	801be0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801be6c:	2400      	movs	r4, #0
 801be6e:	e7d9      	b.n	801be24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 801be70:	2300      	movs	r3, #0
 801be72:	461c      	mov	r4, r3
 801be74:	e7de      	b.n	801be34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 801be76:	463b      	mov	r3, r7
 801be78:	463c      	mov	r4, r7
 801be7a:	e7db      	b.n	801be34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 801be7c:	2300      	movs	r3, #0
 801be7e:	e7d9      	b.n	801be34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 801be80:	4603      	mov	r3, r0
 801be82:	e7d7      	b.n	801be34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 801be84:	b280      	uxth	r0, r0
 801be86:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801be8a:	b2bf      	uxth	r7, r7
 801be8c:	fb00 fe07 	mul.w	lr, r0, r7
 801be90:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801be94:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801be98:	eba0 0c0e 	sub.w	ip, r0, lr
 801be9c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801bea0:	b2bf      	uxth	r7, r7
 801bea2:	fa1f fc8c 	uxth.w	ip, ip
 801bea6:	eba5 0507 	sub.w	r5, r5, r7
 801beaa:	fb0c f00a 	mul.w	r0, ip, sl
 801beae:	b2ad      	uxth	r5, r5
 801beb0:	fb05 000b 	mla	r0, r5, fp, r0
 801beb4:	fb07 0009 	mla	r0, r7, r9, r0
 801beb8:	fb0e 0008 	mla	r0, lr, r8, r0
 801bebc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bec0:	9003      	str	r0, [sp, #12]
 801bec2:	d018      	beq.n	801bef6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 801bec4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801bec8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801becc:	fb0b f000 	mul.w	r0, fp, r0
 801bed0:	fb0b fb02 	mul.w	fp, fp, r2
 801bed4:	0a02      	lsrs	r2, r0, #8
 801bed6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801beda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bede:	4402      	add	r2, r0
 801bee0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801bee4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801bee8:	0a12      	lsrs	r2, r2, #8
 801beea:	0a00      	lsrs	r0, r0, #8
 801beec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bef0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bef4:	4302      	orrs	r2, r0
 801bef6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801befa:	d019      	beq.n	801bf30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 801befc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801bf00:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bf04:	fb0a fb0b 	mul.w	fp, sl, fp
 801bf08:	fb0a fa06 	mul.w	sl, sl, r6
 801bf0c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801bf10:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf14:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801bf18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf1c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801bf20:	445e      	add	r6, fp
 801bf22:	0a00      	lsrs	r0, r0, #8
 801bf24:	0a36      	lsrs	r6, r6, #8
 801bf26:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bf2a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf2e:	4306      	orrs	r6, r0
 801bf30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bf34:	d019      	beq.n	801bf6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 801bf36:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bf3a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bf3e:	fb09 fa0a 	mul.w	sl, r9, sl
 801bf42:	fb09 f904 	mul.w	r9, r9, r4
 801bf46:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bf4a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bf4e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801bf52:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf56:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801bf5a:	4454      	add	r4, sl
 801bf5c:	0a00      	lsrs	r0, r0, #8
 801bf5e:	0a24      	lsrs	r4, r4, #8
 801bf60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bf64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf68:	4304      	orrs	r4, r0
 801bf6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bf6e:	d019      	beq.n	801bfa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 801bf70:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801bf74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf78:	fb08 f909 	mul.w	r9, r8, r9
 801bf7c:	fb08 f803 	mul.w	r8, r8, r3
 801bf80:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801bf84:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bf88:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801bf8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bf90:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801bf94:	444b      	add	r3, r9
 801bf96:	0a00      	lsrs	r0, r0, #8
 801bf98:	0a1b      	lsrs	r3, r3, #8
 801bf9a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bf9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bfa2:	4303      	orrs	r3, r0
 801bfa4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801bfa8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801bfac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bfb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bfb4:	fb0c f808 	mul.w	r8, ip, r8
 801bfb8:	fb0c f606 	mul.w	r6, ip, r6
 801bfbc:	fb05 8800 	mla	r8, r5, r0, r8
 801bfc0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801bfc4:	fb05 6202 	mla	r2, r5, r2, r6
 801bfc8:	9d01      	ldr	r5, [sp, #4]
 801bfca:	fb07 8800 	mla	r8, r7, r0, r8
 801bfce:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801bfd2:	fb0e 8000 	mla	r0, lr, r0, r8
 801bfd6:	0a00      	lsrs	r0, r0, #8
 801bfd8:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801bfdc:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801bfe0:	9c02      	ldr	r4, [sp, #8]
 801bfe2:	fb07 2700 	mla	r7, r7, r0, r2
 801bfe6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801bfea:	9b03      	ldr	r3, [sp, #12]
 801bfec:	fb0e 7000 	mla	r0, lr, r0, r7
 801bff0:	43da      	mvns	r2, r3
 801bff2:	9b00      	ldr	r3, [sp, #0]
 801bff4:	0a00      	lsrs	r0, r0, #8
 801bff6:	b2d2      	uxtb	r2, r2
 801bff8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bffc:	4353      	muls	r3, r2
 801bffe:	4354      	muls	r4, r2
 801c000:	ea48 0000 	orr.w	r0, r8, r0
 801c004:	4355      	muls	r5, r2
 801c006:	4622      	mov	r2, r4
 801c008:	1c5c      	adds	r4, r3, #1
 801c00a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 801c00e:	0c03      	lsrs	r3, r0, #16
 801c010:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c014:	4b0f      	ldr	r3, [pc, #60]	; (801c054 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801c016:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 801c01a:	1c54      	adds	r4, r2, #1
 801c01c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801c020:	b2c2      	uxtb	r2, r0
 801c022:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c026:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c02a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801c02e:	1c6a      	adds	r2, r5, #1
 801c030:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801c034:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c038:	00c0      	lsls	r0, r0, #3
 801c03a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c03e:	4318      	orrs	r0, r3
 801c040:	8008      	strh	r0, [r1, #0]
 801c042:	b005      	add	sp, #20
 801c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c048:	08022952 	.word	0x08022952
 801c04c:	08022f15 	.word	0x08022f15
 801c050:	08022a3b 	.word	0x08022a3b
 801c054:	fffff800 	.word	0xfffff800

0801c058 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c05c:	ed2d 8b08 	vpush	{d8-d11}
 801c060:	b09b      	sub	sp, #108	; 0x6c
 801c062:	eeb0 aa40 	vmov.f32	s20, s0
 801c066:	eef0 9a60 	vmov.f32	s19, s1
 801c06a:	9218      	str	r2, [sp, #96]	; 0x60
 801c06c:	eeb0 9a41 	vmov.f32	s18, s2
 801c070:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801c072:	eeb0 8a62 	vmov.f32	s16, s5
 801c076:	9019      	str	r0, [sp, #100]	; 0x64
 801c078:	eef0 8a43 	vmov.f32	s17, s6
 801c07c:	6850      	ldr	r0, [r2, #4]
 801c07e:	eef0 ba44 	vmov.f32	s23, s8
 801c082:	9116      	str	r1, [sp, #88]	; 0x58
 801c084:	eeb0 ba64 	vmov.f32	s22, s9
 801c088:	9307      	str	r3, [sp, #28]
 801c08a:	eef0 aa45 	vmov.f32	s21, s10
 801c08e:	6812      	ldr	r2, [r2, #0]
 801c090:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801c094:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 801c098:	fb00 1303 	mla	r3, r0, r3, r1
 801c09c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c0a0:	930a      	str	r3, [sp, #40]	; 0x28
 801c0a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	dc03      	bgt.n	801c0b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c0ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	f340 838b 	ble.w	801c7cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 801c0b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c0b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c0bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c0c0:	1e48      	subs	r0, r1, #1
 801c0c2:	1e57      	subs	r7, r2, #1
 801c0c4:	9b07      	ldr	r3, [sp, #28]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	f340 818b 	ble.w	801c3e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c0cc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c0d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c0d4:	d406      	bmi.n	801c0e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c0d6:	4584      	cmp	ip, r0
 801c0d8:	da04      	bge.n	801c0e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	db02      	blt.n	801c0e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c0de:	42bb      	cmp	r3, r7
 801c0e0:	f2c0 8180 	blt.w	801c3e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 801c0e4:	f11c 0c01 	adds.w	ip, ip, #1
 801c0e8:	f100 8170 	bmi.w	801c3cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801c0ec:	4561      	cmp	r1, ip
 801c0ee:	f2c0 816d 	blt.w	801c3cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801c0f2:	3301      	adds	r3, #1
 801c0f4:	f100 816a 	bmi.w	801c3cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801c0f8:	429a      	cmp	r2, r3
 801c0fa:	f2c0 8167 	blt.w	801c3cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801c0fe:	9b07      	ldr	r3, [sp, #28]
 801c100:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c102:	9317      	str	r3, [sp, #92]	; 0x5c
 801c104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c106:	2b00      	cmp	r3, #0
 801c108:	f340 8189 	ble.w	801c41e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c10c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801c10e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c112:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c114:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c118:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c11c:	1422      	asrs	r2, r4, #16
 801c11e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c122:	689b      	ldr	r3, [r3, #8]
 801c124:	f100 81d8 	bmi.w	801c4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801c128:	f103 38ff 	add.w	r8, r3, #4294967295
 801c12c:	4542      	cmp	r2, r8
 801c12e:	f280 81d3 	bge.w	801c4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801c132:	f1bc 0f00 	cmp.w	ip, #0
 801c136:	f2c0 81cf 	blt.w	801c4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801c13a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c13e:	45c4      	cmp	ip, r8
 801c140:	f280 81ca 	bge.w	801c4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801c144:	b21b      	sxth	r3, r3
 801c146:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c148:	fb0c 2203 	mla	r2, ip, r3, r2
 801c14c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801c150:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801c154:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c158:	2900      	cmp	r1, #0
 801c15a:	f000 81a6 	beq.w	801c4aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c15e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c162:	950b      	str	r5, [sp, #44]	; 0x2c
 801c164:	0e2d      	lsrs	r5, r5, #24
 801c166:	9512      	str	r5, [sp, #72]	; 0x48
 801c168:	b180      	cbz	r0, 801c18c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c16a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c16e:	3b01      	subs	r3, #1
 801c170:	009b      	lsls	r3, r3, #2
 801c172:	3304      	adds	r3, #4
 801c174:	eb08 0c03 	add.w	ip, r8, r3
 801c178:	f858 3003 	ldr.w	r3, [r8, r3]
 801c17c:	9308      	str	r3, [sp, #32]
 801c17e:	0e1b      	lsrs	r3, r3, #24
 801c180:	9310      	str	r3, [sp, #64]	; 0x40
 801c182:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c186:	930c      	str	r3, [sp, #48]	; 0x30
 801c188:	0e1b      	lsrs	r3, r3, #24
 801c18a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c18c:	b289      	uxth	r1, r1
 801c18e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c190:	b280      	uxth	r0, r0
 801c192:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c194:	fb01 f900 	mul.w	r9, r1, r0
 801c198:	0109      	lsls	r1, r1, #4
 801c19a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c19e:	eba1 0809 	sub.w	r8, r1, r9
 801c1a2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c1a6:	b280      	uxth	r0, r0
 801c1a8:	fa1f f888 	uxth.w	r8, r8
 801c1ac:	1a09      	subs	r1, r1, r0
 801c1ae:	fb08 f303 	mul.w	r3, r8, r3
 801c1b2:	b289      	uxth	r1, r1
 801c1b4:	fb01 330e 	mla	r3, r1, lr, r3
 801c1b8:	fb00 3305 	mla	r3, r0, r5, r3
 801c1bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c1be:	fb09 3305 	mla	r3, r9, r5, r3
 801c1c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	f000 80f7 	beq.w	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c1cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c1d0:	d01b      	beq.n	801c20a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801c1d2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801c1d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c1da:	fb0e fa0a 	mul.w	sl, lr, sl
 801c1de:	fb0e fe02 	mul.w	lr, lr, r2
 801c1e2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801c1e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c1ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c1ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c1f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c1f6:	4452      	add	r2, sl
 801c1f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1fc:	0a12      	lsrs	r2, r2, #8
 801c1fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c202:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c206:	ea42 020c 	orr.w	r2, r2, ip
 801c20a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c20c:	2dff      	cmp	r5, #255	; 0xff
 801c20e:	d021      	beq.n	801c254 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c210:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c212:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c216:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c218:	fb05 fb0b 	mul.w	fp, r5, fp
 801c21c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c21e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801c222:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c224:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c228:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c22c:	fb05 fa0a 	mul.w	sl, r5, sl
 801c230:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c234:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c238:	44de      	add	lr, fp
 801c23a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c23e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c242:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c246:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c24a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c24e:	ea4e 050a 	orr.w	r5, lr, sl
 801c252:	950b      	str	r5, [sp, #44]	; 0x2c
 801c254:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c256:	2dff      	cmp	r5, #255	; 0xff
 801c258:	d021      	beq.n	801c29e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801c25a:	9d08      	ldr	r5, [sp, #32]
 801c25c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c260:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c262:	fb05 fb0b 	mul.w	fp, r5, fp
 801c266:	9d08      	ldr	r5, [sp, #32]
 801c268:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c26c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c26e:	fb05 fa0e 	mul.w	sl, r5, lr
 801c272:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c276:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c27a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c27e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c282:	44de      	add	lr, fp
 801c284:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c288:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c28c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c294:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c298:	ea4e 050a 	orr.w	r5, lr, sl
 801c29c:	9508      	str	r5, [sp, #32]
 801c29e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c2a0:	2dff      	cmp	r5, #255	; 0xff
 801c2a2:	d021      	beq.n	801c2e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801c2a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c2a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c2aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c2ac:	fb05 fb0b 	mul.w	fp, r5, fp
 801c2b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c2b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801c2b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c2b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c2bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c2c0:	fb05 fa0a 	mul.w	sl, r5, sl
 801c2c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c2cc:	44de      	add	lr, fp
 801c2ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c2d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c2e2:	ea4e 050a 	orr.w	r5, lr, sl
 801c2e6:	950c      	str	r5, [sp, #48]	; 0x30
 801c2e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c2ea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c2ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c2f2:	2bff      	cmp	r3, #255	; 0xff
 801c2f4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801c2f8:	9d08      	ldr	r5, [sp, #32]
 801c2fa:	fb08 fc0c 	mul.w	ip, r8, ip
 801c2fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c302:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801c306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c308:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c30c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801c310:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c312:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c316:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c31a:	fb08 f80e 	mul.w	r8, r8, lr
 801c31e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c322:	fb01 8202 	mla	r2, r1, r2, r8
 801c326:	9908      	ldr	r1, [sp, #32]
 801c328:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c32c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801c330:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c332:	fb00 220a 	mla	r2, r0, sl, r2
 801c336:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c33a:	fb09 2900 	mla	r9, r9, r0, r2
 801c33e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c342:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c346:	ea4c 0c09 	orr.w	ip, ip, r9
 801c34a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801c34e:	f000 80b5 	beq.w	801c4bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 801c352:	8839      	ldrh	r1, [r7, #0]
 801c354:	43db      	mvns	r3, r3
 801c356:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801c35a:	fa5f f883 	uxtb.w	r8, r3
 801c35e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c362:	10c8      	asrs	r0, r1, #3
 801c364:	00cb      	lsls	r3, r1, #3
 801c366:	fb0e fe08 	mul.w	lr, lr, r8
 801c36a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c36e:	b2db      	uxtb	r3, r3
 801c370:	f10e 0101 	add.w	r1, lr, #1
 801c374:	fb00 f008 	mul.w	r0, r0, r8
 801c378:	fb03 f308 	mul.w	r3, r3, r8
 801c37c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801c380:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 801c384:	fa5f fc8c 	uxtb.w	ip, ip
 801c388:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 801c38c:	4960      	ldr	r1, [pc, #384]	; (801c510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 801c38e:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 801c392:	1c59      	adds	r1, r3, #1
 801c394:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c398:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c39c:	1c43      	adds	r3, r0, #1
 801c39e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c3a2:	b2d3      	uxtb	r3, r2
 801c3a4:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 801c3a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c3ac:	00db      	lsls	r3, r3, #3
 801c3ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c3b2:	ea4c 0c03 	orr.w	ip, ip, r3
 801c3b6:	f8a7 c000 	strh.w	ip, [r7]
 801c3ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801c3bc:	3702      	adds	r7, #2
 801c3be:	441c      	add	r4, r3
 801c3c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c3c2:	441e      	add	r6, r3
 801c3c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c3c6:	3b01      	subs	r3, #1
 801c3c8:	9317      	str	r3, [sp, #92]	; 0x5c
 801c3ca:	e69b      	b.n	801c104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801c3cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801c3ce:	441c      	add	r4, r3
 801c3d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c3d2:	441e      	add	r6, r3
 801c3d4:	9b07      	ldr	r3, [sp, #28]
 801c3d6:	3b01      	subs	r3, #1
 801c3d8:	9307      	str	r3, [sp, #28]
 801c3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3dc:	3302      	adds	r3, #2
 801c3de:	930a      	str	r3, [sp, #40]	; 0x28
 801c3e0:	e670      	b.n	801c0c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c3e2:	d023      	beq.n	801c42c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801c3e4:	9b07      	ldr	r3, [sp, #28]
 801c3e6:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801c3e8:	3b01      	subs	r3, #1
 801c3ea:	fb00 4003 	mla	r0, r0, r3, r4
 801c3ee:	1400      	asrs	r0, r0, #16
 801c3f0:	f53f ae85 	bmi.w	801c0fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c3f4:	3901      	subs	r1, #1
 801c3f6:	4288      	cmp	r0, r1
 801c3f8:	f6bf ae81 	bge.w	801c0fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c3fc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801c3fe:	fb01 6303 	mla	r3, r1, r3, r6
 801c402:	141b      	asrs	r3, r3, #16
 801c404:	f53f ae7b 	bmi.w	801c0fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c408:	3a01      	subs	r2, #1
 801c40a:	4293      	cmp	r3, r2
 801c40c:	f6bf ae77 	bge.w	801c0fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c410:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c414:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801c418:	f1bb 0f00 	cmp.w	fp, #0
 801c41c:	dc7a      	bgt.n	801c514 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801c41e:	9b07      	ldr	r3, [sp, #28]
 801c420:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c426:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801c42a:	930a      	str	r3, [sp, #40]	; 0x28
 801c42c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c42e:	2b00      	cmp	r3, #0
 801c430:	f340 81cc 	ble.w	801c7cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 801c434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c438:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c43a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c43e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c442:	eef0 6a48 	vmov.f32	s13, s16
 801c446:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c44a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c44e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c452:	ee16 4a90 	vmov	r4, s13
 801c456:	eef0 6a68 	vmov.f32	s13, s17
 801c45a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c45e:	ee16 6a90 	vmov	r6, s13
 801c462:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c466:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c46a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c46e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c472:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c476:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c47a:	ee18 2a10 	vmov	r2, s16
 801c47e:	eeb0 8a47 	vmov.f32	s16, s14
 801c482:	fb92 f3f3 	sdiv	r3, r2, r3
 801c486:	ee18 2a90 	vmov	r2, s17
 801c48a:	932f      	str	r3, [sp, #188]	; 0xbc
 801c48c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c48e:	eef0 8a67 	vmov.f32	s17, s15
 801c492:	fb92 f3f3 	sdiv	r3, r2, r3
 801c496:	9330      	str	r3, [sp, #192]	; 0xc0
 801c498:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c49a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c49c:	3b01      	subs	r3, #1
 801c49e:	9316      	str	r3, [sp, #88]	; 0x58
 801c4a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c4a2:	bf08      	it	eq
 801c4a4:	4613      	moveq	r3, r2
 801c4a6:	9307      	str	r3, [sp, #28]
 801c4a8:	e5fe      	b.n	801c0a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c4aa:	2800      	cmp	r0, #0
 801c4ac:	f43f ae6e 	beq.w	801c18c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c4b0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c4b4:	9308      	str	r3, [sp, #32]
 801c4b6:	0e1b      	lsrs	r3, r3, #24
 801c4b8:	9310      	str	r3, [sp, #64]	; 0x40
 801c4ba:	e667      	b.n	801c18c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c4bc:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801c4c0:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801c4c4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801c4c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c4cc:	f022 0207 	bic.w	r2, r2, #7
 801c4d0:	431a      	orrs	r2, r3
 801c4d2:	ea42 0c0c 	orr.w	ip, r2, ip
 801c4d6:	e76e      	b.n	801c3b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801c4d8:	f112 0801 	adds.w	r8, r2, #1
 801c4dc:	f53f af6d 	bmi.w	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c4e0:	4543      	cmp	r3, r8
 801c4e2:	f6ff af6a 	blt.w	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c4e6:	f11c 0801 	adds.w	r8, ip, #1
 801c4ea:	f53f af66 	bmi.w	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c4ee:	45c6      	cmp	lr, r8
 801c4f0:	f6ff af63 	blt.w	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c4f4:	b21b      	sxth	r3, r3
 801c4f6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c4fa:	fa0f f28e 	sxth.w	r2, lr
 801c4fe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c502:	9200      	str	r2, [sp, #0]
 801c504:	4639      	mov	r1, r7
 801c506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c508:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c50a:	f7ff fc51 	bl	801bdb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801c50e:	e754      	b.n	801c3ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c510:	fffff800 	.word	0xfffff800
 801c514:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c516:	1421      	asrs	r1, r4, #16
 801c518:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c51a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c51e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801c522:	1433      	asrs	r3, r6, #16
 801c524:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c528:	fb07 1303 	mla	r3, r7, r3, r1
 801c52c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c52e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c532:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c536:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c53a:	2a00      	cmp	r2, #0
 801c53c:	f000 812f 	beq.w	801c79e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 801c540:	684d      	ldr	r5, [r1, #4]
 801c542:	950d      	str	r5, [sp, #52]	; 0x34
 801c544:	0e2d      	lsrs	r5, r5, #24
 801c546:	9514      	str	r5, [sp, #80]	; 0x50
 801c548:	b178      	cbz	r0, 801c56a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801c54a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801c54e:	3f01      	subs	r7, #1
 801c550:	00bf      	lsls	r7, r7, #2
 801c552:	3704      	adds	r7, #4
 801c554:	eb01 0e07 	add.w	lr, r1, r7
 801c558:	59c9      	ldr	r1, [r1, r7]
 801c55a:	9109      	str	r1, [sp, #36]	; 0x24
 801c55c:	0e09      	lsrs	r1, r1, #24
 801c55e:	9111      	str	r1, [sp, #68]	; 0x44
 801c560:	f8de 1004 	ldr.w	r1, [lr, #4]
 801c564:	910e      	str	r1, [sp, #56]	; 0x38
 801c566:	0e09      	lsrs	r1, r1, #24
 801c568:	9115      	str	r1, [sp, #84]	; 0x54
 801c56a:	b292      	uxth	r2, r2
 801c56c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c56e:	b280      	uxth	r0, r0
 801c570:	fb02 f900 	mul.w	r9, r2, r0
 801c574:	0112      	lsls	r2, r2, #4
 801c576:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c57a:	eba2 0e09 	sub.w	lr, r2, r9
 801c57e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c584:	b280      	uxth	r0, r0
 801c586:	fa1f fe8e 	uxth.w	lr, lr
 801c58a:	1a09      	subs	r1, r1, r0
 801c58c:	fb0e f202 	mul.w	r2, lr, r2
 801c590:	b289      	uxth	r1, r1
 801c592:	fb01 220c 	mla	r2, r1, ip, r2
 801c596:	fb00 2205 	mla	r2, r0, r5, r2
 801c59a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c59c:	fb09 2205 	mla	r2, r9, r5, r2
 801c5a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c5a4:	2a00      	cmp	r2, #0
 801c5a6:	f000 80f1 	beq.w	801c78c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801c5aa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c5ae:	d019      	beq.n	801c5e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 801c5b0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c5b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c5b8:	fb0c fa0a 	mul.w	sl, ip, sl
 801c5bc:	fb0c fc03 	mul.w	ip, ip, r3
 801c5c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c5c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c5c8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c5cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5d0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c5d4:	4453      	add	r3, sl
 801c5d6:	0a3f      	lsrs	r7, r7, #8
 801c5d8:	0a1b      	lsrs	r3, r3, #8
 801c5da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c5de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5e2:	433b      	orrs	r3, r7
 801c5e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c5e6:	2dff      	cmp	r5, #255	; 0xff
 801c5e8:	d020      	beq.n	801c62c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 801c5ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c5ec:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c5f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c5f2:	436f      	muls	r7, r5
 801c5f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c5f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c5fa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801c5fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c600:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c608:	fb05 fa0a 	mul.w	sl, r5, sl
 801c60c:	44bc      	add	ip, r7
 801c60e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c612:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c616:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c61a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c61e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c622:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c626:	ea4c 050a 	orr.w	r5, ip, sl
 801c62a:	950d      	str	r5, [sp, #52]	; 0x34
 801c62c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c62e:	2dff      	cmp	r5, #255	; 0xff
 801c630:	d020      	beq.n	801c674 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801c632:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c634:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c638:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c63a:	436f      	muls	r7, r5
 801c63c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c63e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801c642:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c644:	fb05 fa0c 	mul.w	sl, r5, ip
 801c648:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c64c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c650:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c654:	44bc      	add	ip, r7
 801c656:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c65a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c65e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c662:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c666:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c66a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c66e:	ea4c 050a 	orr.w	r5, ip, sl
 801c672:	9509      	str	r5, [sp, #36]	; 0x24
 801c674:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c676:	2dff      	cmp	r5, #255	; 0xff
 801c678:	d020      	beq.n	801c6bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 801c67a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c67c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c680:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c682:	436f      	muls	r7, r5
 801c684:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c686:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c68a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801c68e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c690:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c694:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c698:	fb05 fa0a 	mul.w	sl, r5, sl
 801c69c:	44bc      	add	ip, r7
 801c69e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c6a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c6a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c6aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c6ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c6b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c6b6:	ea4c 050a 	orr.w	r5, ip, sl
 801c6ba:	950e      	str	r5, [sp, #56]	; 0x38
 801c6bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c6be:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c6c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c6c6:	2aff      	cmp	r2, #255	; 0xff
 801c6c8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c6cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c6ce:	fb0e f707 	mul.w	r7, lr, r7
 801c6d2:	fb01 770c 	mla	r7, r1, ip, r7
 801c6d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801c6da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c6dc:	fb00 770c 	mla	r7, r0, ip, r7
 801c6e0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801c6e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c6e6:	fb09 770c 	mla	r7, r9, ip, r7
 801c6ea:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801c6ee:	fb0e fe0c 	mul.w	lr, lr, ip
 801c6f2:	ea4f 2717 	mov.w	r7, r7, lsr #8
 801c6f6:	fb01 e303 	mla	r3, r1, r3, lr
 801c6fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c6fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c700:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801c704:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c706:	fb00 330a 	mla	r3, r0, sl, r3
 801c70a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801c70e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c712:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c716:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c71a:	ea47 070c 	orr.w	r7, r7, ip
 801c71e:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801c722:	d045      	beq.n	801c7b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801c724:	f8b8 1000 	ldrh.w	r1, [r8]
 801c728:	43d2      	mvns	r2, r2
 801c72a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801c72e:	fa5f fe82 	uxtb.w	lr, r2
 801c732:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c736:	10c8      	asrs	r0, r1, #3
 801c738:	00ca      	lsls	r2, r1, #3
 801c73a:	fb0c fc0e 	mul.w	ip, ip, lr
 801c73e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c742:	b2d2      	uxtb	r2, r2
 801c744:	f10c 0101 	add.w	r1, ip, #1
 801c748:	fb00 f00e 	mul.w	r0, r0, lr
 801c74c:	fb02 f20e 	mul.w	r2, r2, lr
 801c750:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801c754:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c758:	b2ff      	uxtb	r7, r7
 801c75a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c75e:	491e      	ldr	r1, [pc, #120]	; (801c7d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 801c760:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801c764:	1c51      	adds	r1, r2, #1
 801c766:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c76a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c76e:	1c42      	adds	r2, r0, #1
 801c770:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 801c774:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c778:	b2df      	uxtb	r7, r3
 801c77a:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801c77e:	00ff      	lsls	r7, r7, #3
 801c780:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c784:	ea4c 0c07 	orr.w	ip, ip, r7
 801c788:	f8a8 c000 	strh.w	ip, [r8]
 801c78c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801c78e:	f108 0802 	add.w	r8, r8, #2
 801c792:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c796:	441c      	add	r4, r3
 801c798:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c79a:	441e      	add	r6, r3
 801c79c:	e63c      	b.n	801c418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c79e:	2800      	cmp	r0, #0
 801c7a0:	f43f aee3 	beq.w	801c56a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801c7a4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801c7a8:	9109      	str	r1, [sp, #36]	; 0x24
 801c7aa:	0e09      	lsrs	r1, r1, #24
 801c7ac:	9111      	str	r1, [sp, #68]	; 0x44
 801c7ae:	e6dc      	b.n	801c56a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801c7b0:	097a      	lsrs	r2, r7, #5
 801c7b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c7b6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801c7ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c7be:	f023 0307 	bic.w	r3, r3, #7
 801c7c2:	4313      	orrs	r3, r2
 801c7c4:	431f      	orrs	r7, r3
 801c7c6:	f8a8 7000 	strh.w	r7, [r8]
 801c7ca:	e7df      	b.n	801c78c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801c7cc:	b01b      	add	sp, #108	; 0x6c
 801c7ce:	ecbd 8b08 	vpop	{d8-d11}
 801c7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7d6:	bf00      	nop
 801c7d8:	fffff800 	.word	0xfffff800

0801c7dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801c7e4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c7e8:	2c00      	cmp	r4, #0
 801c7ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c7ee:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801c7f2:	fb04 ce03 	mla	lr, r4, r3, ip
 801c7f6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c7fa:	db60      	blt.n	801c8be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c7fc:	45a1      	cmp	r9, r4
 801c7fe:	dd5e      	ble.n	801c8be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c800:	f1bc 0f00 	cmp.w	ip, #0
 801c804:	db59      	blt.n	801c8ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c806:	45e0      	cmp	r8, ip
 801c808:	dd57      	ble.n	801c8ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c80a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801c80e:	f01e 0f01 	tst.w	lr, #1
 801c812:	5c16      	ldrb	r6, [r2, r0]
 801c814:	bf0c      	ite	eq
 801c816:	f006 060f 	andeq.w	r6, r6, #15
 801c81a:	1136      	asrne	r6, r6, #4
 801c81c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c820:	b2f6      	uxtb	r6, r6
 801c822:	f11c 0001 	adds.w	r0, ip, #1
 801c826:	d44d      	bmi.n	801c8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c828:	4580      	cmp	r8, r0
 801c82a:	dd4b      	ble.n	801c8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c82c:	2d00      	cmp	r5, #0
 801c82e:	d04b      	beq.n	801c8c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801c830:	f10e 0a01 	add.w	sl, lr, #1
 801c834:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801c838:	f01a 0f01 	tst.w	sl, #1
 801c83c:	5c10      	ldrb	r0, [r2, r0]
 801c83e:	bf0c      	ite	eq
 801c840:	f000 000f 	andeq.w	r0, r0, #15
 801c844:	1100      	asrne	r0, r0, #4
 801c846:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c84a:	b2c0      	uxtb	r0, r0
 801c84c:	3401      	adds	r4, #1
 801c84e:	d43f      	bmi.n	801c8d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c850:	45a1      	cmp	r9, r4
 801c852:	dd3d      	ble.n	801c8d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c854:	2f00      	cmp	r7, #0
 801c856:	f000 809e 	beq.w	801c996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 801c85a:	f1bc 0f00 	cmp.w	ip, #0
 801c85e:	db35      	blt.n	801c8cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c860:	45e0      	cmp	r8, ip
 801c862:	dd33      	ble.n	801c8cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c864:	eb03 090e 	add.w	r9, r3, lr
 801c868:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801c86c:	f019 0f01 	tst.w	r9, #1
 801c870:	5d14      	ldrb	r4, [r2, r4]
 801c872:	bf0c      	ite	eq
 801c874:	f004 040f 	andeq.w	r4, r4, #15
 801c878:	1124      	asrne	r4, r4, #4
 801c87a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c87e:	b2e4      	uxtb	r4, r4
 801c880:	f11c 0c01 	adds.w	ip, ip, #1
 801c884:	d427      	bmi.n	801c8d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c886:	45e0      	cmp	r8, ip
 801c888:	dd25      	ble.n	801c8d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c88a:	b335      	cbz	r5, 801c8da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801c88c:	3301      	adds	r3, #1
 801c88e:	449e      	add	lr, r3
 801c890:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c894:	f01e 0f01 	tst.w	lr, #1
 801c898:	5cd2      	ldrb	r2, [r2, r3]
 801c89a:	bf0c      	ite	eq
 801c89c:	f002 020f 	andeq.w	r2, r2, #15
 801c8a0:	1112      	asrne	r2, r2, #4
 801c8a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c8a6:	b2d3      	uxtb	r3, r2
 801c8a8:	2d0f      	cmp	r5, #15
 801c8aa:	d917      	bls.n	801c8dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801c8ac:	4b3c      	ldr	r3, [pc, #240]	; (801c9a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 801c8ae:	f240 210d 	movw	r1, #525	; 0x20d
 801c8b2:	4a3c      	ldr	r2, [pc, #240]	; (801c9a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801c8b4:	483c      	ldr	r0, [pc, #240]	; (801c9a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801c8b6:	f001 fd47 	bl	801e348 <__assert_func>
 801c8ba:	2600      	movs	r6, #0
 801c8bc:	e7b1      	b.n	801c822 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801c8be:	2000      	movs	r0, #0
 801c8c0:	4606      	mov	r6, r0
 801c8c2:	e7c3      	b.n	801c84c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8c4:	2000      	movs	r0, #0
 801c8c6:	e7c1      	b.n	801c84c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8c8:	4628      	mov	r0, r5
 801c8ca:	e7bf      	b.n	801c84c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8cc:	2400      	movs	r4, #0
 801c8ce:	e7d7      	b.n	801c880 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	461c      	mov	r4, r3
 801c8d4:	e7e8      	b.n	801c8a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	e7e6      	b.n	801c8a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c8da:	462b      	mov	r3, r5
 801c8dc:	2f0f      	cmp	r7, #15
 801c8de:	d8e5      	bhi.n	801c8ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c8e0:	b2ad      	uxth	r5, r5
 801c8e2:	b2bf      	uxth	r7, r7
 801c8e4:	fb05 fc07 	mul.w	ip, r5, r7
 801c8e8:	012d      	lsls	r5, r5, #4
 801c8ea:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801c8ee:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801c8f2:	eba5 050c 	sub.w	r5, r5, ip
 801c8f6:	b2bf      	uxth	r7, r7
 801c8f8:	b2ad      	uxth	r5, r5
 801c8fa:	1bd2      	subs	r2, r2, r7
 801c8fc:	4368      	muls	r0, r5
 801c8fe:	b292      	uxth	r2, r2
 801c900:	fb06 0002 	mla	r0, r6, r2, r0
 801c904:	fb07 0404 	mla	r4, r7, r4, r0
 801c908:	fb0c 4303 	mla	r3, ip, r3, r4
 801c90c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c910:	2b00      	cmp	r3, #0
 801c912:	d03e      	beq.n	801c992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 801c914:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801c918:	4a24      	ldr	r2, [pc, #144]	; (801c9ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 801c91a:	4343      	muls	r3, r0
 801c91c:	6816      	ldr	r6, [r2, #0]
 801c91e:	1c58      	adds	r0, r3, #1
 801c920:	880a      	ldrh	r2, [r1, #0]
 801c922:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c926:	1215      	asrs	r5, r2, #8
 801c928:	1200      	asrs	r0, r0, #8
 801c92a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c92e:	10d7      	asrs	r7, r2, #3
 801c930:	b284      	uxth	r4, r0
 801c932:	43c0      	mvns	r0, r0
 801c934:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c938:	00d2      	lsls	r2, r2, #3
 801c93a:	b2c3      	uxtb	r3, r0
 801c93c:	0a30      	lsrs	r0, r6, #8
 801c93e:	fb15 f503 	smulbb	r5, r5, r3
 801c942:	b2d2      	uxtb	r2, r2
 801c944:	fb17 f703 	smulbb	r7, r7, r3
 801c948:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c94c:	fb12 f303 	smulbb	r3, r2, r3
 801c950:	fb00 5004 	mla	r0, r0, r4, r5
 801c954:	08f5      	lsrs	r5, r6, #3
 801c956:	00f6      	lsls	r6, r6, #3
 801c958:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c95c:	b280      	uxth	r0, r0
 801c95e:	b2f6      	uxtb	r6, r6
 801c960:	fb05 7504 	mla	r5, r5, r4, r7
 801c964:	fb06 3304 	mla	r3, r6, r4, r3
 801c968:	1c44      	adds	r4, r0, #1
 801c96a:	b2ad      	uxth	r5, r5
 801c96c:	b29a      	uxth	r2, r3
 801c96e:	1c6b      	adds	r3, r5, #1
 801c970:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c974:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801c978:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c97c:	095b      	lsrs	r3, r3, #5
 801c97e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c982:	4303      	orrs	r3, r0
 801c984:	1c50      	adds	r0, r2, #1
 801c986:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c98a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c98e:	4313      	orrs	r3, r2
 801c990:	800b      	strh	r3, [r1, #0]
 801c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c996:	2d0f      	cmp	r5, #15
 801c998:	d888      	bhi.n	801c8ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c99a:	463b      	mov	r3, r7
 801c99c:	463c      	mov	r4, r7
 801c99e:	e79f      	b.n	801c8e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801c9a0:	08022952 	.word	0x08022952
 801c9a4:	08022f15 	.word	0x08022f15
 801c9a8:	08022a3b 	.word	0x08022a3b
 801c9ac:	20009bfc 	.word	0x20009bfc

0801c9b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b4:	ed2d 8b08 	vpush	{d8-d11}
 801c9b8:	b097      	sub	sp, #92	; 0x5c
 801c9ba:	eeb0 aa40 	vmov.f32	s20, s0
 801c9be:	eef0 9a60 	vmov.f32	s19, s1
 801c9c2:	9214      	str	r2, [sp, #80]	; 0x50
 801c9c4:	eeb0 9a41 	vmov.f32	s18, s2
 801c9c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c9ca:	eeb0 8a62 	vmov.f32	s16, s5
 801c9ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c9d0:	eef0 8a43 	vmov.f32	s17, s6
 801c9d4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c9d8:	eef0 ba44 	vmov.f32	s23, s8
 801c9dc:	9015      	str	r0, [sp, #84]	; 0x54
 801c9de:	eeb0 ba64 	vmov.f32	s22, s9
 801c9e2:	6850      	ldr	r0, [r2, #4]
 801c9e4:	eef0 aa45 	vmov.f32	s21, s10
 801c9e8:	910d      	str	r1, [sp, #52]	; 0x34
 801c9ea:	930e      	str	r3, [sp, #56]	; 0x38
 801c9ec:	6812      	ldr	r2, [r2, #0]
 801c9ee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c9f2:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 801c9f6:	fb00 1303 	mla	r3, r0, r3, r1
 801c9fa:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 801c9fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ca00:	689b      	ldr	r3, [r3, #8]
 801ca02:	3301      	adds	r3, #1
 801ca04:	f023 0301 	bic.w	r3, r3, #1
 801ca08:	930a      	str	r3, [sp, #40]	; 0x28
 801ca0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ca0c:	681f      	ldr	r7, [r3, #0]
 801ca0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	dc03      	bgt.n	801ca1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ca14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	f340 826b 	ble.w	801cef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 801ca1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ca1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ca22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ca26:	1e48      	subs	r0, r1, #1
 801ca28:	f102 3cff 	add.w	ip, r2, #4294967295
 801ca2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	f340 80f4 	ble.w	801cc1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ca34:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ca38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ca3c:	d406      	bmi.n	801ca4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ca3e:	4586      	cmp	lr, r0
 801ca40:	da04      	bge.n	801ca4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	db02      	blt.n	801ca4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ca46:	4563      	cmp	r3, ip
 801ca48:	f2c0 80e9 	blt.w	801cc1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ca4c:	f11e 0e01 	adds.w	lr, lr, #1
 801ca50:	f100 80da 	bmi.w	801cc08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ca54:	4571      	cmp	r1, lr
 801ca56:	f2c0 80d7 	blt.w	801cc08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	f100 80d4 	bmi.w	801cc08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ca60:	429a      	cmp	r2, r3
 801ca62:	f2c0 80d1 	blt.w	801cc08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ca66:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ca6a:	46d0      	mov	r8, sl
 801ca6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ca70:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca72:	f1b9 0f00 	cmp.w	r9, #0
 801ca76:	f340 80f1 	ble.w	801cc5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801ca7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ca7c:	1430      	asrs	r0, r6, #16
 801ca7e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ca82:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ca86:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ca8a:	1423      	asrs	r3, r4, #16
 801ca8c:	f100 813b 	bmi.w	801cd06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca90:	f10c 3bff 	add.w	fp, ip, #4294967295
 801ca94:	455b      	cmp	r3, fp
 801ca96:	f280 8136 	bge.w	801cd06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	f2c0 8133 	blt.w	801cd06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801caa0:	f10e 3bff 	add.w	fp, lr, #4294967295
 801caa4:	4558      	cmp	r0, fp
 801caa6:	f280 812e 	bge.w	801cd06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801caaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801caac:	fb00 3305 	mla	r3, r0, r5, r3
 801cab0:	0858      	lsrs	r0, r3, #1
 801cab2:	07dd      	lsls	r5, r3, #31
 801cab4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cab8:	bf54      	ite	pl
 801caba:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cabe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cac2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cac6:	fa5f fc8c 	uxtb.w	ip, ip
 801caca:	2a00      	cmp	r2, #0
 801cacc:	f000 810a 	beq.w	801cce4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801cad0:	1c58      	adds	r0, r3, #1
 801cad2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801cad6:	07c0      	lsls	r0, r0, #31
 801cad8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cadc:	bf54      	ite	pl
 801cade:	f00e 0e0f 	andpl.w	lr, lr, #15
 801cae2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801cae6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801caea:	fa5f f08e 	uxtb.w	r0, lr
 801caee:	9010      	str	r0, [sp, #64]	; 0x40
 801caf0:	b1e1      	cbz	r1, 801cb2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801caf2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801caf4:	4403      	add	r3, r0
 801caf6:	0858      	lsrs	r0, r3, #1
 801caf8:	07dd      	lsls	r5, r3, #31
 801cafa:	f103 0301 	add.w	r3, r3, #1
 801cafe:	5c38      	ldrb	r0, [r7, r0]
 801cb00:	bf54      	ite	pl
 801cb02:	f000 000f 	andpl.w	r0, r0, #15
 801cb06:	1100      	asrmi	r0, r0, #4
 801cb08:	07dd      	lsls	r5, r3, #31
 801cb0a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cb0e:	b2c0      	uxtb	r0, r0
 801cb10:	900b      	str	r0, [sp, #44]	; 0x2c
 801cb12:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801cb16:	f817 e000 	ldrb.w	lr, [r7, r0]
 801cb1a:	bf54      	ite	pl
 801cb1c:	f00e 030f 	andpl.w	r3, lr, #15
 801cb20:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801cb24:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cb28:	b2db      	uxtb	r3, r3
 801cb2a:	9311      	str	r3, [sp, #68]	; 0x44
 801cb2c:	b292      	uxth	r2, r2
 801cb2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801cb30:	b289      	uxth	r1, r1
 801cb32:	fb02 f301 	mul.w	r3, r2, r1
 801cb36:	0112      	lsls	r2, r2, #4
 801cb38:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cb3c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801cb40:	1ad2      	subs	r2, r2, r3
 801cb42:	b289      	uxth	r1, r1
 801cb44:	b292      	uxth	r2, r2
 801cb46:	1a40      	subs	r0, r0, r1
 801cb48:	436a      	muls	r2, r5
 801cb4a:	b280      	uxth	r0, r0
 801cb4c:	fb0c 2c00 	mla	ip, ip, r0, r2
 801cb50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb52:	fb01 c102 	mla	r1, r1, r2, ip
 801cb56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb58:	fb03 1302 	mla	r3, r3, r2, r1
 801cb5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d048      	beq.n	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cb64:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cb66:	4a78      	ldr	r2, [pc, #480]	; (801cd48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 801cb68:	434b      	muls	r3, r1
 801cb6a:	f8d2 e000 	ldr.w	lr, [r2]
 801cb6e:	1c59      	adds	r1, r3, #1
 801cb70:	f8b8 2000 	ldrh.w	r2, [r8]
 801cb74:	ea4f 201e 	mov.w	r0, lr, lsr #8
 801cb78:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801cb7c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801cb80:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cb84:	121b      	asrs	r3, r3, #8
 801cb86:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb8a:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801cb8e:	b299      	uxth	r1, r3
 801cb90:	43db      	mvns	r3, r3
 801cb92:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cb96:	00d2      	lsls	r2, r2, #3
 801cb98:	b2db      	uxtb	r3, r3
 801cb9a:	b2d2      	uxtb	r2, r2
 801cb9c:	fb1c fc03 	smulbb	ip, ip, r3
 801cba0:	fb1b fb03 	smulbb	fp, fp, r3
 801cba4:	fb00 c001 	mla	r0, r0, r1, ip
 801cba8:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 801cbac:	fb12 f303 	smulbb	r3, r2, r3
 801cbb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cbb4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cbb8:	b280      	uxth	r0, r0
 801cbba:	fa5f fe8e 	uxtb.w	lr, lr
 801cbbe:	fb0c bc01 	mla	ip, ip, r1, fp
 801cbc2:	fb0e 3101 	mla	r1, lr, r1, r3
 801cbc6:	1c43      	adds	r3, r0, #1
 801cbc8:	fa1f fc8c 	uxth.w	ip, ip
 801cbcc:	b289      	uxth	r1, r1
 801cbce:	f10c 0201 	add.w	r2, ip, #1
 801cbd2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cbd6:	1c4b      	adds	r3, r1, #1
 801cbd8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801cbdc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cbe0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801cbe4:	0952      	lsrs	r2, r2, #5
 801cbe6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801cbea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cbee:	4310      	orrs	r0, r2
 801cbf0:	4308      	orrs	r0, r1
 801cbf2:	f8a8 0000 	strh.w	r0, [r8]
 801cbf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cbf8:	f108 0802 	add.w	r8, r8, #2
 801cbfc:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc00:	441c      	add	r4, r3
 801cc02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cc04:	441e      	add	r6, r3
 801cc06:	e734      	b.n	801ca72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 801cc08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cc0a:	f10a 0a02 	add.w	sl, sl, #2
 801cc0e:	441c      	add	r4, r3
 801cc10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cc12:	441e      	add	r6, r3
 801cc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc16:	3b01      	subs	r3, #1
 801cc18:	9309      	str	r3, [sp, #36]	; 0x24
 801cc1a:	e707      	b.n	801ca2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cc1c:	d023      	beq.n	801cc66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc20:	982b      	ldr	r0, [sp, #172]	; 0xac
 801cc22:	3b01      	subs	r3, #1
 801cc24:	fb00 4003 	mla	r0, r0, r3, r4
 801cc28:	1400      	asrs	r0, r0, #16
 801cc2a:	f53f af1c 	bmi.w	801ca66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cc2e:	3901      	subs	r1, #1
 801cc30:	4288      	cmp	r0, r1
 801cc32:	f6bf af18 	bge.w	801ca66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cc36:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801cc38:	fb01 6303 	mla	r3, r1, r3, r6
 801cc3c:	141b      	asrs	r3, r3, #16
 801cc3e:	f53f af12 	bmi.w	801ca66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cc42:	3a01      	subs	r2, #1
 801cc44:	4293      	cmp	r3, r2
 801cc46:	f6bf af0e 	bge.w	801ca66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cc4a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cc4e:	46d1      	mov	r9, sl
 801cc50:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801cc54:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc56:	f1bb 0f00 	cmp.w	fp, #0
 801cc5a:	dc77      	bgt.n	801cd4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801cc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc5e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801cc62:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801cc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	f340 8142 	ble.w	801cef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 801cc6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc74:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cc78:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cc7c:	eef0 6a48 	vmov.f32	s13, s16
 801cc80:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cc84:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cc88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc8c:	ee16 4a90 	vmov	r4, s13
 801cc90:	eef0 6a68 	vmov.f32	s13, s17
 801cc94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc98:	ee16 6a90 	vmov	r6, s13
 801cc9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cca0:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cca4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cca8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ccac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ccb0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ccb4:	ee18 2a10 	vmov	r2, s16
 801ccb8:	eeb0 8a47 	vmov.f32	s16, s14
 801ccbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccc0:	ee18 2a90 	vmov	r2, s17
 801ccc4:	932b      	str	r3, [sp, #172]	; 0xac
 801ccc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccc8:	eef0 8a67 	vmov.f32	s17, s15
 801cccc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccd0:	932c      	str	r3, [sp, #176]	; 0xb0
 801ccd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ccd6:	3b01      	subs	r3, #1
 801ccd8:	930d      	str	r3, [sp, #52]	; 0x34
 801ccda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccdc:	bf08      	it	eq
 801ccde:	4613      	moveq	r3, r2
 801cce0:	9309      	str	r3, [sp, #36]	; 0x24
 801cce2:	e694      	b.n	801ca0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cce4:	2900      	cmp	r1, #0
 801cce6:	f43f af21 	beq.w	801cb2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ccea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ccec:	4418      	add	r0, r3
 801ccee:	0843      	lsrs	r3, r0, #1
 801ccf0:	07c0      	lsls	r0, r0, #31
 801ccf2:	5cfb      	ldrb	r3, [r7, r3]
 801ccf4:	bf54      	ite	pl
 801ccf6:	f003 030f 	andpl.w	r3, r3, #15
 801ccfa:	111b      	asrmi	r3, r3, #4
 801ccfc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cd00:	b2db      	uxtb	r3, r3
 801cd02:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd04:	e712      	b.n	801cb2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801cd06:	f113 0b01 	adds.w	fp, r3, #1
 801cd0a:	f53f af74 	bmi.w	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cd0e:	45dc      	cmp	ip, fp
 801cd10:	f6ff af71 	blt.w	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cd14:	f110 0b01 	adds.w	fp, r0, #1
 801cd18:	f53f af6d 	bmi.w	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cd1c:	45de      	cmp	lr, fp
 801cd1e:	f6ff af6a 	blt.w	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cd22:	9302      	str	r3, [sp, #8]
 801cd24:	fa0f f38e 	sxth.w	r3, lr
 801cd28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cd2a:	9301      	str	r3, [sp, #4]
 801cd2c:	fa0f f38c 	sxth.w	r3, ip
 801cd30:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801cd34:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801cd38:	9300      	str	r3, [sp, #0]
 801cd3a:	463a      	mov	r2, r7
 801cd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd3e:	4641      	mov	r1, r8
 801cd40:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cd42:	f7ff fd4b 	bl	801c7dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801cd46:	e756      	b.n	801cbf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cd48:	20009bfc 	.word	0x20009bfc
 801cd4c:	1422      	asrs	r2, r4, #16
 801cd4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cd50:	1433      	asrs	r3, r6, #16
 801cd52:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801cd56:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cd5a:	fb05 2303 	mla	r3, r5, r3, r2
 801cd5e:	085a      	lsrs	r2, r3, #1
 801cd60:	07dd      	lsls	r5, r3, #31
 801cd62:	5cba      	ldrb	r2, [r7, r2]
 801cd64:	bf54      	ite	pl
 801cd66:	f002 020f 	andpl.w	r2, r2, #15
 801cd6a:	1112      	asrmi	r2, r2, #4
 801cd6c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cd70:	b2d2      	uxtb	r2, r2
 801cd72:	2900      	cmp	r1, #0
 801cd74:	f000 80a9 	beq.w	801ceca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 801cd78:	f103 0e01 	add.w	lr, r3, #1
 801cd7c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801cd80:	f01e 0f01 	tst.w	lr, #1
 801cd84:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cd88:	bf0c      	ite	eq
 801cd8a:	f00c 0c0f 	andeq.w	ip, ip, #15
 801cd8e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801cd92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd96:	fa5f f58c 	uxtb.w	r5, ip
 801cd9a:	9512      	str	r5, [sp, #72]	; 0x48
 801cd9c:	b308      	cbz	r0, 801cde2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801cd9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801cda0:	442b      	add	r3, r5
 801cda2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cda6:	07dd      	lsls	r5, r3, #31
 801cda8:	f103 0301 	add.w	r3, r3, #1
 801cdac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cdb0:	bf54      	ite	pl
 801cdb2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cdb6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cdba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cdbe:	fa5f f58c 	uxtb.w	r5, ip
 801cdc2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cdc6:	950c      	str	r5, [sp, #48]	; 0x30
 801cdc8:	07dd      	lsls	r5, r3, #31
 801cdca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cdce:	bf54      	ite	pl
 801cdd0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cdd4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cdd8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cddc:	fa5f f38c 	uxtb.w	r3, ip
 801cde0:	9313      	str	r3, [sp, #76]	; 0x4c
 801cde2:	b289      	uxth	r1, r1
 801cde4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cde6:	b280      	uxth	r0, r0
 801cde8:	fb01 f300 	mul.w	r3, r1, r0
 801cdec:	0109      	lsls	r1, r1, #4
 801cdee:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801cdf2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801cdf6:	1ac9      	subs	r1, r1, r3
 801cdf8:	b280      	uxth	r0, r0
 801cdfa:	b289      	uxth	r1, r1
 801cdfc:	ebac 0c00 	sub.w	ip, ip, r0
 801ce00:	4369      	muls	r1, r5
 801ce02:	fa1f fc8c 	uxth.w	ip, ip
 801ce06:	fb02 120c 	mla	r2, r2, ip, r1
 801ce0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ce0c:	fb00 2001 	mla	r0, r0, r1, r2
 801ce10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce12:	fb03 0302 	mla	r3, r3, r2, r0
 801ce16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d04c      	beq.n	801ceb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801ce1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ce20:	4a36      	ldr	r2, [pc, #216]	; (801cefc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 801ce22:	434b      	muls	r3, r1
 801ce24:	f8d2 e000 	ldr.w	lr, [r2]
 801ce28:	1c59      	adds	r1, r3, #1
 801ce2a:	f8b9 2000 	ldrh.w	r2, [r9]
 801ce2e:	ea4f 201e 	mov.w	r0, lr, lsr #8
 801ce32:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ce36:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801ce3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ce3e:	121b      	asrs	r3, r3, #8
 801ce40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ce44:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801ce48:	b299      	uxth	r1, r3
 801ce4a:	43db      	mvns	r3, r3
 801ce4c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ce50:	00d2      	lsls	r2, r2, #3
 801ce52:	b2db      	uxtb	r3, r3
 801ce54:	b2d2      	uxtb	r2, r2
 801ce56:	fb1c fc03 	smulbb	ip, ip, r3
 801ce5a:	fb18 f803 	smulbb	r8, r8, r3
 801ce5e:	fb00 c001 	mla	r0, r0, r1, ip
 801ce62:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 801ce66:	fb12 f203 	smulbb	r2, r2, r3
 801ce6a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ce6e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ce72:	b280      	uxth	r0, r0
 801ce74:	fa5f fe8e 	uxtb.w	lr, lr
 801ce78:	fb0c 8c01 	mla	ip, ip, r1, r8
 801ce7c:	fb0e 2201 	mla	r2, lr, r1, r2
 801ce80:	fa1f fc8c 	uxth.w	ip, ip
 801ce84:	b292      	uxth	r2, r2
 801ce86:	f10c 0801 	add.w	r8, ip, #1
 801ce8a:	1c51      	adds	r1, r2, #1
 801ce8c:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801ce90:	f100 0801 	add.w	r8, r0, #1
 801ce94:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ce98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ce9c:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801cea0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cea4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cea8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ceac:	ea4c 0c00 	orr.w	ip, ip, r0
 801ceb0:	ea4c 0c02 	orr.w	ip, ip, r2
 801ceb4:	f8a9 c000 	strh.w	ip, [r9]
 801ceb8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ceba:	f109 0902 	add.w	r9, r9, #2
 801cebe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cec2:	441c      	add	r4, r3
 801cec4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cec6:	441e      	add	r6, r3
 801cec8:	e6c5      	b.n	801cc56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ceca:	2800      	cmp	r0, #0
 801cecc:	d089      	beq.n	801cde2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801cece:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ced0:	442b      	add	r3, r5
 801ced2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ced6:	07db      	lsls	r3, r3, #31
 801ced8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cedc:	bf54      	ite	pl
 801cede:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cee2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cee6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ceea:	fa5f f38c 	uxtb.w	r3, ip
 801ceee:	930c      	str	r3, [sp, #48]	; 0x30
 801cef0:	e777      	b.n	801cde2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801cef2:	b017      	add	sp, #92	; 0x5c
 801cef4:	ecbd 8b08 	vpop	{d8-d11}
 801cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cefc:	20009bfc 	.word	0x20009bfc

0801cf00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf04:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801cf08:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801cf0c:	2c00      	cmp	r4, #0
 801cf0e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cf12:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cf16:	fb04 ce03 	mla	lr, r4, r3, ip
 801cf1a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801cf1e:	db60      	blt.n	801cfe2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801cf20:	45a1      	cmp	r9, r4
 801cf22:	dd5e      	ble.n	801cfe2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801cf24:	f1bc 0f00 	cmp.w	ip, #0
 801cf28:	db59      	blt.n	801cfde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801cf2a:	45e0      	cmp	r8, ip
 801cf2c:	dd57      	ble.n	801cfde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801cf2e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801cf32:	f01e 0f01 	tst.w	lr, #1
 801cf36:	5c16      	ldrb	r6, [r2, r0]
 801cf38:	bf0c      	ite	eq
 801cf3a:	f006 060f 	andeq.w	r6, r6, #15
 801cf3e:	1136      	asrne	r6, r6, #4
 801cf40:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cf44:	b2f6      	uxtb	r6, r6
 801cf46:	f11c 0001 	adds.w	r0, ip, #1
 801cf4a:	d44d      	bmi.n	801cfe8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801cf4c:	4580      	cmp	r8, r0
 801cf4e:	dd4b      	ble.n	801cfe8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801cf50:	2d00      	cmp	r5, #0
 801cf52:	d04b      	beq.n	801cfec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801cf54:	f10e 0a01 	add.w	sl, lr, #1
 801cf58:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801cf5c:	f01a 0f01 	tst.w	sl, #1
 801cf60:	5c10      	ldrb	r0, [r2, r0]
 801cf62:	bf0c      	ite	eq
 801cf64:	f000 000f 	andeq.w	r0, r0, #15
 801cf68:	1100      	asrne	r0, r0, #4
 801cf6a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cf6e:	b2c0      	uxtb	r0, r0
 801cf70:	3401      	adds	r4, #1
 801cf72:	d43f      	bmi.n	801cff4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801cf74:	45a1      	cmp	r9, r4
 801cf76:	dd3d      	ble.n	801cff4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801cf78:	2f00      	cmp	r7, #0
 801cf7a:	f000 8097 	beq.w	801d0ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801cf7e:	f1bc 0f00 	cmp.w	ip, #0
 801cf82:	db35      	blt.n	801cff0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801cf84:	45e0      	cmp	r8, ip
 801cf86:	dd33      	ble.n	801cff0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801cf88:	eb03 090e 	add.w	r9, r3, lr
 801cf8c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801cf90:	f019 0f01 	tst.w	r9, #1
 801cf94:	5d14      	ldrb	r4, [r2, r4]
 801cf96:	bf0c      	ite	eq
 801cf98:	f004 040f 	andeq.w	r4, r4, #15
 801cf9c:	1124      	asrne	r4, r4, #4
 801cf9e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cfa2:	b2e4      	uxtb	r4, r4
 801cfa4:	f11c 0c01 	adds.w	ip, ip, #1
 801cfa8:	d427      	bmi.n	801cffa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801cfaa:	45e0      	cmp	r8, ip
 801cfac:	dd25      	ble.n	801cffa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801cfae:	b335      	cbz	r5, 801cffe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801cfb0:	3301      	adds	r3, #1
 801cfb2:	449e      	add	lr, r3
 801cfb4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cfb8:	f01e 0f01 	tst.w	lr, #1
 801cfbc:	5cd2      	ldrb	r2, [r2, r3]
 801cfbe:	bf0c      	ite	eq
 801cfc0:	f002 020f 	andeq.w	r2, r2, #15
 801cfc4:	1112      	asrne	r2, r2, #4
 801cfc6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cfca:	b2d3      	uxtb	r3, r2
 801cfcc:	2d0f      	cmp	r5, #15
 801cfce:	d917      	bls.n	801d000 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801cfd0:	4b39      	ldr	r3, [pc, #228]	; (801d0b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 801cfd2:	f240 210d 	movw	r1, #525	; 0x20d
 801cfd6:	4a39      	ldr	r2, [pc, #228]	; (801d0bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801cfd8:	4839      	ldr	r0, [pc, #228]	; (801d0c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801cfda:	f001 f9b5 	bl	801e348 <__assert_func>
 801cfde:	2600      	movs	r6, #0
 801cfe0:	e7b1      	b.n	801cf46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801cfe2:	2000      	movs	r0, #0
 801cfe4:	4606      	mov	r6, r0
 801cfe6:	e7c3      	b.n	801cf70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cfe8:	2000      	movs	r0, #0
 801cfea:	e7c1      	b.n	801cf70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cfec:	4628      	mov	r0, r5
 801cfee:	e7bf      	b.n	801cf70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cff0:	2400      	movs	r4, #0
 801cff2:	e7d7      	b.n	801cfa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801cff4:	2300      	movs	r3, #0
 801cff6:	461c      	mov	r4, r3
 801cff8:	e7e8      	b.n	801cfcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801cffa:	2300      	movs	r3, #0
 801cffc:	e7e6      	b.n	801cfcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801cffe:	462b      	mov	r3, r5
 801d000:	2f0f      	cmp	r7, #15
 801d002:	d8e5      	bhi.n	801cfd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801d004:	b2ad      	uxth	r5, r5
 801d006:	b2bf      	uxth	r7, r7
 801d008:	fb05 fc07 	mul.w	ip, r5, r7
 801d00c:	012d      	lsls	r5, r5, #4
 801d00e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801d012:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801d016:	eba5 050c 	sub.w	r5, r5, ip
 801d01a:	b2bf      	uxth	r7, r7
 801d01c:	b2ad      	uxth	r5, r5
 801d01e:	1bd2      	subs	r2, r2, r7
 801d020:	4368      	muls	r0, r5
 801d022:	b292      	uxth	r2, r2
 801d024:	fb06 0002 	mla	r0, r6, r2, r0
 801d028:	fb07 0404 	mla	r4, r7, r4, r0
 801d02c:	fb0c 4303 	mla	r3, ip, r3, r4
 801d030:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d034:	2b00      	cmp	r3, #0
 801d036:	d037      	beq.n	801d0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 801d038:	4a22      	ldr	r2, [pc, #136]	; (801d0c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801d03a:	b298      	uxth	r0, r3
 801d03c:	43db      	mvns	r3, r3
 801d03e:	6816      	ldr	r6, [r2, #0]
 801d040:	880a      	ldrh	r2, [r1, #0]
 801d042:	b2db      	uxtb	r3, r3
 801d044:	0a34      	lsrs	r4, r6, #8
 801d046:	1215      	asrs	r5, r2, #8
 801d048:	10d7      	asrs	r7, r2, #3
 801d04a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d04e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d052:	00d2      	lsls	r2, r2, #3
 801d054:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d058:	fb15 f503 	smulbb	r5, r5, r3
 801d05c:	b2d2      	uxtb	r2, r2
 801d05e:	fb17 f703 	smulbb	r7, r7, r3
 801d062:	fb04 5400 	mla	r4, r4, r0, r5
 801d066:	08f5      	lsrs	r5, r6, #3
 801d068:	fb12 f303 	smulbb	r3, r2, r3
 801d06c:	00f6      	lsls	r6, r6, #3
 801d06e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d072:	b2a4      	uxth	r4, r4
 801d074:	b2f6      	uxtb	r6, r6
 801d076:	fb05 7500 	mla	r5, r5, r0, r7
 801d07a:	1c62      	adds	r2, r4, #1
 801d07c:	fb06 3000 	mla	r0, r6, r0, r3
 801d080:	b2ad      	uxth	r5, r5
 801d082:	b280      	uxth	r0, r0
 801d084:	1c6b      	adds	r3, r5, #1
 801d086:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801d08a:	1c42      	adds	r2, r0, #1
 801d08c:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801d090:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d094:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d098:	095b      	lsrs	r3, r3, #5
 801d09a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801d09e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d0a2:	4323      	orrs	r3, r4
 801d0a4:	4303      	orrs	r3, r0
 801d0a6:	800b      	strh	r3, [r1, #0]
 801d0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0ac:	2d0f      	cmp	r5, #15
 801d0ae:	d88f      	bhi.n	801cfd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801d0b0:	463b      	mov	r3, r7
 801d0b2:	463c      	mov	r4, r7
 801d0b4:	e7a6      	b.n	801d004 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801d0b6:	bf00      	nop
 801d0b8:	08022952 	.word	0x08022952
 801d0bc:	08022f15 	.word	0x08022f15
 801d0c0:	08022a3b 	.word	0x08022a3b
 801d0c4:	20009bfc 	.word	0x20009bfc

0801d0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0cc:	ed2d 8b08 	vpush	{d8-d11}
 801d0d0:	b093      	sub	sp, #76	; 0x4c
 801d0d2:	461d      	mov	r5, r3
 801d0d4:	eeb0 aa40 	vmov.f32	s20, s0
 801d0d8:	920c      	str	r2, [sp, #48]	; 0x30
 801d0da:	eef0 9a60 	vmov.f32	s19, s1
 801d0de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d0e0:	eeb0 9a41 	vmov.f32	s18, s2
 801d0e4:	9011      	str	r0, [sp, #68]	; 0x44
 801d0e6:	eeb0 8a62 	vmov.f32	s16, s5
 801d0ea:	6850      	ldr	r0, [r2, #4]
 801d0ec:	eef0 8a43 	vmov.f32	s17, s6
 801d0f0:	9107      	str	r1, [sp, #28]
 801d0f2:	eef0 ba44 	vmov.f32	s23, s8
 801d0f6:	6812      	ldr	r2, [r2, #0]
 801d0f8:	eeb0 ba64 	vmov.f32	s22, s9
 801d0fc:	eef0 aa45 	vmov.f32	s21, s10
 801d100:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d104:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801d108:	fb00 1303 	mla	r3, r0, r3, r1
 801d10c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801d110:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d112:	689b      	ldr	r3, [r3, #8]
 801d114:	3301      	adds	r3, #1
 801d116:	f023 0301 	bic.w	r3, r3, #1
 801d11a:	9306      	str	r3, [sp, #24]
 801d11c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d11e:	681f      	ldr	r7, [r3, #0]
 801d120:	9b07      	ldr	r3, [sp, #28]
 801d122:	2b00      	cmp	r3, #0
 801d124:	dc03      	bgt.n	801d12e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d128:	2b00      	cmp	r3, #0
 801d12a:	f340 8262 	ble.w	801d5f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 801d12e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d130:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d134:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d138:	1e48      	subs	r0, r1, #1
 801d13a:	f102 3cff 	add.w	ip, r2, #4294967295
 801d13e:	2d00      	cmp	r5, #0
 801d140:	f340 80ee 	ble.w	801d320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801d144:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d148:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d14c:	d406      	bmi.n	801d15c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d14e:	4586      	cmp	lr, r0
 801d150:	da04      	bge.n	801d15c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d152:	2b00      	cmp	r3, #0
 801d154:	db02      	blt.n	801d15c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d156:	4563      	cmp	r3, ip
 801d158:	f2c0 80e3 	blt.w	801d322 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801d15c:	f11e 0e01 	adds.w	lr, lr, #1
 801d160:	f100 80d6 	bmi.w	801d310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d164:	4571      	cmp	r1, lr
 801d166:	f2c0 80d3 	blt.w	801d310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d16a:	3301      	adds	r3, #1
 801d16c:	f100 80d0 	bmi.w	801d310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d170:	429a      	cmp	r2, r3
 801d172:	f2c0 80cd 	blt.w	801d310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d176:	46c8      	mov	r8, r9
 801d178:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801d17c:	9509      	str	r5, [sp, #36]	; 0x24
 801d17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d180:	2b00      	cmp	r3, #0
 801d182:	f340 80eb 	ble.w	801d35c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d186:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d18a:	1430      	asrs	r0, r6, #16
 801d18c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d190:	9308      	str	r3, [sp, #32]
 801d192:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d194:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d198:	1423      	asrs	r3, r4, #16
 801d19a:	f100 813c 	bmi.w	801d416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d19e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801d1a2:	455b      	cmp	r3, fp
 801d1a4:	f280 8137 	bge.w	801d416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d1a8:	2800      	cmp	r0, #0
 801d1aa:	f2c0 8134 	blt.w	801d416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d1ae:	f10e 3bff 	add.w	fp, lr, #4294967295
 801d1b2:	4558      	cmp	r0, fp
 801d1b4:	f280 812f 	bge.w	801d416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d1b8:	9a06      	ldr	r2, [sp, #24]
 801d1ba:	fb00 3302 	mla	r3, r0, r2, r3
 801d1be:	0858      	lsrs	r0, r3, #1
 801d1c0:	07da      	lsls	r2, r3, #31
 801d1c2:	9a08      	ldr	r2, [sp, #32]
 801d1c4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d1c8:	bf54      	ite	pl
 801d1ca:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d1ce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d1d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d1d6:	fa5f fc8c 	uxtb.w	ip, ip
 801d1da:	2a00      	cmp	r2, #0
 801d1dc:	f000 8102 	beq.w	801d3e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d1e0:	1c58      	adds	r0, r3, #1
 801d1e2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d1e6:	07c0      	lsls	r0, r0, #31
 801d1e8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d1ec:	bf54      	ite	pl
 801d1ee:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d1f2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d1f6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d1fa:	fa5f fe8e 	uxtb.w	lr, lr
 801d1fe:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d202:	b1b9      	cbz	r1, 801d234 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d204:	4453      	add	r3, sl
 801d206:	0858      	lsrs	r0, r3, #1
 801d208:	07da      	lsls	r2, r3, #31
 801d20a:	5c38      	ldrb	r0, [r7, r0]
 801d20c:	bf54      	ite	pl
 801d20e:	f000 000f 	andpl.w	r0, r0, #15
 801d212:	1100      	asrmi	r0, r0, #4
 801d214:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d218:	b2c0      	uxtb	r0, r0
 801d21a:	900a      	str	r0, [sp, #40]	; 0x28
 801d21c:	1c58      	adds	r0, r3, #1
 801d21e:	0843      	lsrs	r3, r0, #1
 801d220:	07c2      	lsls	r2, r0, #31
 801d222:	5cfb      	ldrb	r3, [r7, r3]
 801d224:	bf54      	ite	pl
 801d226:	f003 030f 	andpl.w	r3, r3, #15
 801d22a:	111b      	asrmi	r3, r3, #4
 801d22c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d230:	b2db      	uxtb	r3, r3
 801d232:	930e      	str	r3, [sp, #56]	; 0x38
 801d234:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d238:	b289      	uxth	r1, r1
 801d23a:	fb02 f301 	mul.w	r3, r2, r1
 801d23e:	0112      	lsls	r2, r2, #4
 801d240:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d244:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d248:	1ad2      	subs	r2, r2, r3
 801d24a:	b289      	uxth	r1, r1
 801d24c:	b292      	uxth	r2, r2
 801d24e:	1a40      	subs	r0, r0, r1
 801d250:	fa1f fe80 	uxth.w	lr, r0
 801d254:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d256:	4342      	muls	r2, r0
 801d258:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d25e:	fb01 c102 	mla	r1, r1, r2, ip
 801d262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d264:	fb03 1302 	mla	r3, r3, r2, r1
 801d268:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d045      	beq.n	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d270:	4a79      	ldr	r2, [pc, #484]	; (801d458 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 801d272:	2bff      	cmp	r3, #255	; 0xff
 801d274:	6811      	ldr	r1, [r2, #0]
 801d276:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 801d27a:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 801d27e:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d282:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d286:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d28a:	b2c9      	uxtb	r1, r1
 801d28c:	f000 80bb 	beq.w	801d406 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d290:	f8b8 c000 	ldrh.w	ip, [r8]
 801d294:	fa1f fb83 	uxth.w	fp, r3
 801d298:	43db      	mvns	r3, r3
 801d29a:	fb1e fe0b 	smulbb	lr, lr, fp
 801d29e:	ea4f 202c 	mov.w	r0, ip, asr #8
 801d2a2:	fb12 f20b 	smulbb	r2, r2, fp
 801d2a6:	b2db      	uxtb	r3, r3
 801d2a8:	fb11 f10b 	smulbb	r1, r1, fp
 801d2ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d2b0:	fb00 e003 	mla	r0, r0, r3, lr
 801d2b4:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801d2b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d2bc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d2c0:	b280      	uxth	r0, r0
 801d2c2:	fa5f fc8c 	uxtb.w	ip, ip
 801d2c6:	fb0e 2203 	mla	r2, lr, r3, r2
 801d2ca:	fb0c 1303 	mla	r3, ip, r3, r1
 801d2ce:	1c41      	adds	r1, r0, #1
 801d2d0:	b292      	uxth	r2, r2
 801d2d2:	b29b      	uxth	r3, r3
 801d2d4:	f102 0e01 	add.w	lr, r2, #1
 801d2d8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801d2dc:	1c59      	adds	r1, r3, #1
 801d2de:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801d2e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d2e6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d2ea:	0952      	lsrs	r2, r2, #5
 801d2ec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d2f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d2f4:	4310      	orrs	r0, r2
 801d2f6:	4318      	orrs	r0, r3
 801d2f8:	f8a8 0000 	strh.w	r0, [r8]
 801d2fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d2fe:	f108 0802 	add.w	r8, r8, #2
 801d302:	441c      	add	r4, r3
 801d304:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d306:	441e      	add	r6, r3
 801d308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d30a:	3b01      	subs	r3, #1
 801d30c:	9309      	str	r3, [sp, #36]	; 0x24
 801d30e:	e736      	b.n	801d17e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d310:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d312:	3d01      	subs	r5, #1
 801d314:	f109 0902 	add.w	r9, r9, #2
 801d318:	441c      	add	r4, r3
 801d31a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d31c:	441e      	add	r6, r3
 801d31e:	e70e      	b.n	801d13e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d320:	d020      	beq.n	801d364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801d322:	1e6b      	subs	r3, r5, #1
 801d324:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d326:	fb00 4003 	mla	r0, r0, r3, r4
 801d32a:	1400      	asrs	r0, r0, #16
 801d32c:	f53f af23 	bmi.w	801d176 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d330:	3901      	subs	r1, #1
 801d332:	4288      	cmp	r0, r1
 801d334:	f6bf af1f 	bge.w	801d176 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d338:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d33a:	fb01 6303 	mla	r3, r1, r3, r6
 801d33e:	141b      	asrs	r3, r3, #16
 801d340:	f53f af19 	bmi.w	801d176 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d344:	3a01      	subs	r2, #1
 801d346:	4293      	cmp	r3, r2
 801d348:	f6bf af15 	bge.w	801d176 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d34c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d350:	46aa      	mov	sl, r5
 801d352:	46c8      	mov	r8, r9
 801d354:	9308      	str	r3, [sp, #32]
 801d356:	f1ba 0f00 	cmp.w	sl, #0
 801d35a:	dc7f      	bgt.n	801d45c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801d35c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801d360:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801d364:	9b07      	ldr	r3, [sp, #28]
 801d366:	2b00      	cmp	r3, #0
 801d368:	f340 8143 	ble.w	801d5f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 801d36c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d370:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d372:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d376:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d37a:	eef0 6a48 	vmov.f32	s13, s16
 801d37e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d382:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d386:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d38a:	ee16 4a90 	vmov	r4, s13
 801d38e:	eef0 6a68 	vmov.f32	s13, s17
 801d392:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d396:	ee16 6a90 	vmov	r6, s13
 801d39a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d39e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d3a2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d3a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d3aa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d3ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d3b2:	ee18 2a10 	vmov	r2, s16
 801d3b6:	eeb0 8a47 	vmov.f32	s16, s14
 801d3ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3be:	ee18 2a90 	vmov	r2, s17
 801d3c2:	9327      	str	r3, [sp, #156]	; 0x9c
 801d3c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d3c6:	eef0 8a67 	vmov.f32	s17, s15
 801d3ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3ce:	9328      	str	r3, [sp, #160]	; 0xa0
 801d3d0:	9b07      	ldr	r3, [sp, #28]
 801d3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d3d4:	3b01      	subs	r3, #1
 801d3d6:	9307      	str	r3, [sp, #28]
 801d3d8:	bf08      	it	eq
 801d3da:	4615      	moveq	r5, r2
 801d3dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d3de:	bf18      	it	ne
 801d3e0:	461d      	movne	r5, r3
 801d3e2:	e69d      	b.n	801d120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d3e4:	2900      	cmp	r1, #0
 801d3e6:	f43f af25 	beq.w	801d234 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d3ea:	eb0a 0003 	add.w	r0, sl, r3
 801d3ee:	0843      	lsrs	r3, r0, #1
 801d3f0:	07c0      	lsls	r0, r0, #31
 801d3f2:	5cfb      	ldrb	r3, [r7, r3]
 801d3f4:	bf54      	ite	pl
 801d3f6:	f003 030f 	andpl.w	r3, r3, #15
 801d3fa:	111b      	asrmi	r3, r3, #4
 801d3fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d400:	b2db      	uxtb	r3, r3
 801d402:	930a      	str	r3, [sp, #40]	; 0x28
 801d404:	e716      	b.n	801d234 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d406:	00d2      	lsls	r2, r2, #3
 801d408:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801d40c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 801d410:	f8a8 1000 	strh.w	r1, [r8]
 801d414:	e772      	b.n	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d416:	f113 0b01 	adds.w	fp, r3, #1
 801d41a:	f53f af6f 	bmi.w	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d41e:	45dc      	cmp	ip, fp
 801d420:	f6ff af6c 	blt.w	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d424:	f110 0b01 	adds.w	fp, r0, #1
 801d428:	f53f af68 	bmi.w	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d42c:	45de      	cmp	lr, fp
 801d42e:	f6ff af65 	blt.w	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d432:	9302      	str	r3, [sp, #8]
 801d434:	fa0f f38e 	sxth.w	r3, lr
 801d438:	9a08      	ldr	r2, [sp, #32]
 801d43a:	9301      	str	r3, [sp, #4]
 801d43c:	fa0f f38c 	sxth.w	r3, ip
 801d440:	9105      	str	r1, [sp, #20]
 801d442:	4641      	mov	r1, r8
 801d444:	9300      	str	r3, [sp, #0]
 801d446:	4653      	mov	r3, sl
 801d448:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d44c:	463a      	mov	r2, r7
 801d44e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d450:	f7ff fd56 	bl	801cf00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801d454:	e752      	b.n	801d2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d456:	bf00      	nop
 801d458:	20009bfc 	.word	0x20009bfc
 801d45c:	1422      	asrs	r2, r4, #16
 801d45e:	9906      	ldr	r1, [sp, #24]
 801d460:	1433      	asrs	r3, r6, #16
 801d462:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801d466:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d46a:	fb01 2303 	mla	r3, r1, r3, r2
 801d46e:	085a      	lsrs	r2, r3, #1
 801d470:	07d9      	lsls	r1, r3, #31
 801d472:	5cba      	ldrb	r2, [r7, r2]
 801d474:	bf54      	ite	pl
 801d476:	f002 020f 	andpl.w	r2, r2, #15
 801d47a:	1112      	asrmi	r2, r2, #4
 801d47c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d480:	b2d2      	uxtb	r2, r2
 801d482:	2800      	cmp	r0, #0
 801d484:	f000 809c 	beq.w	801d5c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 801d488:	f103 0e01 	add.w	lr, r3, #1
 801d48c:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801d490:	f01e 0f01 	tst.w	lr, #1
 801d494:	5c79      	ldrb	r1, [r7, r1]
 801d496:	bf0c      	ite	eq
 801d498:	f001 010f 	andeq.w	r1, r1, #15
 801d49c:	1109      	asrne	r1, r1, #4
 801d49e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4a2:	b2c9      	uxtb	r1, r1
 801d4a4:	910f      	str	r1, [sp, #60]	; 0x3c
 801d4a6:	f1bc 0f00 	cmp.w	ip, #0
 801d4aa:	d01a      	beq.n	801d4e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801d4ac:	9908      	ldr	r1, [sp, #32]
 801d4ae:	440b      	add	r3, r1
 801d4b0:	0859      	lsrs	r1, r3, #1
 801d4b2:	f013 0f01 	tst.w	r3, #1
 801d4b6:	f103 0301 	add.w	r3, r3, #1
 801d4ba:	5c79      	ldrb	r1, [r7, r1]
 801d4bc:	bf0c      	ite	eq
 801d4be:	f001 010f 	andeq.w	r1, r1, #15
 801d4c2:	1109      	asrne	r1, r1, #4
 801d4c4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4c8:	b2c9      	uxtb	r1, r1
 801d4ca:	910b      	str	r1, [sp, #44]	; 0x2c
 801d4cc:	0859      	lsrs	r1, r3, #1
 801d4ce:	07db      	lsls	r3, r3, #31
 801d4d0:	5c79      	ldrb	r1, [r7, r1]
 801d4d2:	bf54      	ite	pl
 801d4d4:	f001 010f 	andpl.w	r1, r1, #15
 801d4d8:	1109      	asrmi	r1, r1, #4
 801d4da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4de:	b2c9      	uxtb	r1, r1
 801d4e0:	9110      	str	r1, [sp, #64]	; 0x40
 801d4e2:	b280      	uxth	r0, r0
 801d4e4:	fa1f fc8c 	uxth.w	ip, ip
 801d4e8:	fb00 f30c 	mul.w	r3, r0, ip
 801d4ec:	0100      	lsls	r0, r0, #4
 801d4ee:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801d4f2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d4f6:	1ac0      	subs	r0, r0, r3
 801d4f8:	fa1f fc8c 	uxth.w	ip, ip
 801d4fc:	b280      	uxth	r0, r0
 801d4fe:	eba1 010c 	sub.w	r1, r1, ip
 801d502:	fa1f fe81 	uxth.w	lr, r1
 801d506:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d508:	4348      	muls	r0, r1
 801d50a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d50c:	fb02 020e 	mla	r2, r2, lr, r0
 801d510:	fb0c 2c01 	mla	ip, ip, r1, r2
 801d514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d516:	fb03 c302 	mla	r3, r3, r2, ip
 801d51a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d045      	beq.n	801d5ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d522:	4a36      	ldr	r2, [pc, #216]	; (801d5fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 801d524:	2bff      	cmp	r3, #255	; 0xff
 801d526:	6811      	ldr	r1, [r2, #0]
 801d528:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 801d52c:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 801d530:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d534:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d538:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d53c:	b2c9      	uxtb	r1, r1
 801d53e:	d050      	beq.n	801d5e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 801d540:	f8b8 c000 	ldrh.w	ip, [r8]
 801d544:	fa1f fb83 	uxth.w	fp, r3
 801d548:	43db      	mvns	r3, r3
 801d54a:	fb1e fe0b 	smulbb	lr, lr, fp
 801d54e:	ea4f 202c 	mov.w	r0, ip, asr #8
 801d552:	fb12 f20b 	smulbb	r2, r2, fp
 801d556:	b2db      	uxtb	r3, r3
 801d558:	fb11 f10b 	smulbb	r1, r1, fp
 801d55c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d560:	fb00 e003 	mla	r0, r0, r3, lr
 801d564:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801d568:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d56c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d570:	b280      	uxth	r0, r0
 801d572:	fa5f fc8c 	uxtb.w	ip, ip
 801d576:	fb0e 2203 	mla	r2, lr, r3, r2
 801d57a:	fb0c 1103 	mla	r1, ip, r3, r1
 801d57e:	b292      	uxth	r2, r2
 801d580:	b289      	uxth	r1, r1
 801d582:	f102 0e01 	add.w	lr, r2, #1
 801d586:	1c4b      	adds	r3, r1, #1
 801d588:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801d58c:	f100 0e01 	add.w	lr, r0, #1
 801d590:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d594:	0952      	lsrs	r2, r2, #5
 801d596:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801d59a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801d59e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d5a2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d5a6:	4302      	orrs	r2, r0
 801d5a8:	430a      	orrs	r2, r1
 801d5aa:	f8a8 2000 	strh.w	r2, [r8]
 801d5ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d5b0:	f108 0802 	add.w	r8, r8, #2
 801d5b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d5b8:	441c      	add	r4, r3
 801d5ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d5bc:	441e      	add	r6, r3
 801d5be:	e6ca      	b.n	801d356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801d5c0:	f1bc 0f00 	cmp.w	ip, #0
 801d5c4:	d08d      	beq.n	801d4e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801d5c6:	9908      	ldr	r1, [sp, #32]
 801d5c8:	440b      	add	r3, r1
 801d5ca:	0859      	lsrs	r1, r3, #1
 801d5cc:	07db      	lsls	r3, r3, #31
 801d5ce:	5c79      	ldrb	r1, [r7, r1]
 801d5d0:	bf54      	ite	pl
 801d5d2:	f001 010f 	andpl.w	r1, r1, #15
 801d5d6:	1109      	asrmi	r1, r1, #4
 801d5d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d5dc:	b2c9      	uxtb	r1, r1
 801d5de:	910b      	str	r1, [sp, #44]	; 0x2c
 801d5e0:	e77f      	b.n	801d4e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801d5e2:	00d2      	lsls	r2, r2, #3
 801d5e4:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801d5e8:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 801d5ec:	f8a8 1000 	strh.w	r1, [r8]
 801d5f0:	e7dd      	b.n	801d5ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d5f2:	b013      	add	sp, #76	; 0x4c
 801d5f4:	ecbd 8b08 	vpop	{d8-d11}
 801d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5fc:	20009bfc 	.word	0x20009bfc

0801d600 <CRC_Lock>:
 801d600:	4a1d      	ldr	r2, [pc, #116]	; (801d678 <CRC_Lock+0x78>)
 801d602:	b530      	push	{r4, r5, lr}
 801d604:	6813      	ldr	r3, [r2, #0]
 801d606:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d60a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d60e:	f023 0301 	bic.w	r3, r3, #1
 801d612:	6013      	str	r3, [r2, #0]
 801d614:	4b19      	ldr	r3, [pc, #100]	; (801d67c <CRC_Lock+0x7c>)
 801d616:	681a      	ldr	r2, [r3, #0]
 801d618:	4022      	ands	r2, r4
 801d61a:	42aa      	cmp	r2, r5
 801d61c:	d005      	beq.n	801d62a <CRC_Lock+0x2a>
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d624:	4023      	ands	r3, r4
 801d626:	4293      	cmp	r3, r2
 801d628:	d11d      	bne.n	801d666 <CRC_Lock+0x66>
 801d62a:	4b15      	ldr	r3, [pc, #84]	; (801d680 <CRC_Lock+0x80>)
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	b9d3      	cbnz	r3, 801d666 <CRC_Lock+0x66>
 801d630:	4a14      	ldr	r2, [pc, #80]	; (801d684 <CRC_Lock+0x84>)
 801d632:	6813      	ldr	r3, [r2, #0]
 801d634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d638:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d63c:	d006      	beq.n	801d64c <CRC_Lock+0x4c>
 801d63e:	6813      	ldr	r3, [r2, #0]
 801d640:	f240 4283 	movw	r2, #1155	; 0x483
 801d644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d648:	4293      	cmp	r3, r2
 801d64a:	d10c      	bne.n	801d666 <CRC_Lock+0x66>
 801d64c:	4b0e      	ldr	r3, [pc, #56]	; (801d688 <CRC_Lock+0x88>)
 801d64e:	2201      	movs	r2, #1
 801d650:	601a      	str	r2, [r3, #0]
 801d652:	681a      	ldr	r2, [r3, #0]
 801d654:	2a00      	cmp	r2, #0
 801d656:	d1fc      	bne.n	801d652 <CRC_Lock+0x52>
 801d658:	4b0c      	ldr	r3, [pc, #48]	; (801d68c <CRC_Lock+0x8c>)
 801d65a:	6018      	str	r0, [r3, #0]
 801d65c:	6818      	ldr	r0, [r3, #0]
 801d65e:	1a43      	subs	r3, r0, r1
 801d660:	4258      	negs	r0, r3
 801d662:	4158      	adcs	r0, r3
 801d664:	bd30      	pop	{r4, r5, pc}
 801d666:	4b0a      	ldr	r3, [pc, #40]	; (801d690 <CRC_Lock+0x90>)
 801d668:	2201      	movs	r2, #1
 801d66a:	601a      	str	r2, [r3, #0]
 801d66c:	681a      	ldr	r2, [r3, #0]
 801d66e:	2a00      	cmp	r2, #0
 801d670:	d1fc      	bne.n	801d66c <CRC_Lock+0x6c>
 801d672:	4b08      	ldr	r3, [pc, #32]	; (801d694 <CRC_Lock+0x94>)
 801d674:	e7f1      	b.n	801d65a <CRC_Lock+0x5a>
 801d676:	bf00      	nop
 801d678:	e0002000 	.word	0xe0002000
 801d67c:	e000ed00 	.word	0xe000ed00
 801d680:	e0042000 	.word	0xe0042000
 801d684:	5c001000 	.word	0x5c001000
 801d688:	58024c08 	.word	0x58024c08
 801d68c:	58024c00 	.word	0x58024c00
 801d690:	40023008 	.word	0x40023008
 801d694:	40023000 	.word	0x40023000

0801d698 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d698:	6101      	str	r1, [r0, #16]
 801d69a:	4770      	bx	lr

0801d69c <_ZN8touchgfx8Gestures4tickEv>:
 801d69c:	7b83      	ldrb	r3, [r0, #14]
 801d69e:	b14b      	cbz	r3, 801d6b4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d6a0:	8903      	ldrh	r3, [r0, #8]
 801d6a2:	3301      	adds	r3, #1
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	2b07      	cmp	r3, #7
 801d6a8:	8103      	strh	r3, [r0, #8]
 801d6aa:	bf81      	itttt	hi
 801d6ac:	2300      	movhi	r3, #0
 801d6ae:	8143      	strhhi	r3, [r0, #10]
 801d6b0:	8183      	strhhi	r3, [r0, #12]
 801d6b2:	7383      	strbhi	r3, [r0, #14]
 801d6b4:	4770      	bx	lr
	...

0801d6b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d6b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d6bc:	4604      	mov	r4, r0
 801d6be:	4698      	mov	r8, r3
 801d6c0:	8880      	ldrh	r0, [r0, #4]
 801d6c2:	4617      	mov	r7, r2
 801d6c4:	4b1d      	ldr	r3, [pc, #116]	; (801d73c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801d6c6:	460e      	mov	r6, r1
 801d6c8:	f8ad 0006 	strh.w	r0, [sp, #6]
 801d6cc:	eba8 0000 	sub.w	r0, r8, r0
 801d6d0:	9300      	str	r3, [sp, #0]
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	b280      	uxth	r0, r0
 801d6d6:	8aa2      	ldrh	r2, [r4, #20]
 801d6d8:	f88d 3004 	strb.w	r3, [sp, #4]
 801d6dc:	b203      	sxth	r3, r0
 801d6de:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d6e2:	88e1      	ldrh	r1, [r4, #6]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d6ea:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d6ee:	bfb8      	it	lt
 801d6f0:	4240      	neglt	r0, r0
 801d6f2:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d6f6:	bfb8      	it	lt
 801d6f8:	b203      	sxthlt	r3, r0
 801d6fa:	4293      	cmp	r3, r2
 801d6fc:	dc08      	bgt.n	801d710 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801d6fe:	1a69      	subs	r1, r5, r1
 801d700:	b289      	uxth	r1, r1
 801d702:	b20b      	sxth	r3, r1
 801d704:	2b00      	cmp	r3, #0
 801d706:	bfbc      	itt	lt
 801d708:	4249      	neglt	r1, r1
 801d70a:	b20b      	sxthlt	r3, r1
 801d70c:	429a      	cmp	r2, r3
 801d70e:	da13      	bge.n	801d738 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801d710:	6920      	ldr	r0, [r4, #16]
 801d712:	4669      	mov	r1, sp
 801d714:	eba8 0606 	sub.w	r6, r8, r6
 801d718:	1bef      	subs	r7, r5, r7
 801d71a:	6803      	ldr	r3, [r0, #0]
 801d71c:	685b      	ldr	r3, [r3, #4]
 801d71e:	4798      	blx	r3
 801d720:	2300      	movs	r3, #0
 801d722:	2001      	movs	r0, #1
 801d724:	8166      	strh	r6, [r4, #10]
 801d726:	8123      	strh	r3, [r4, #8]
 801d728:	81a7      	strh	r7, [r4, #12]
 801d72a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d72e:	80e5      	strh	r5, [r4, #6]
 801d730:	73a0      	strb	r0, [r4, #14]
 801d732:	b004      	add	sp, #16
 801d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d738:	2000      	movs	r0, #0
 801d73a:	e7fa      	b.n	801d732 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801d73c:	08021d94 	.word	0x08021d94

0801d740 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d740:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d742:	461e      	mov	r6, r3
 801d744:	1e4b      	subs	r3, r1, #1
 801d746:	b085      	sub	sp, #20
 801d748:	4604      	mov	r4, r0
 801d74a:	2b01      	cmp	r3, #1
 801d74c:	460d      	mov	r5, r1
 801d74e:	4617      	mov	r7, r2
 801d750:	d84b      	bhi.n	801d7ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d752:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d756:	1cd3      	adds	r3, r2, #3
 801d758:	b29b      	uxth	r3, r3
 801d75a:	2b06      	cmp	r3, #6
 801d75c:	d916      	bls.n	801d78c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d75e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d800 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d762:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d766:	f8cd c004 	str.w	ip, [sp, #4]
 801d76a:	f04f 0c00 	mov.w	ip, #0
 801d76e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d772:	6900      	ldr	r0, [r0, #16]
 801d774:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d778:	a901      	add	r1, sp, #4
 801d77a:	f88d c008 	strb.w	ip, [sp, #8]
 801d77e:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d782:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d786:	6803      	ldr	r3, [r0, #0]
 801d788:	689b      	ldr	r3, [r3, #8]
 801d78a:	4798      	blx	r3
 801d78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d790:	1cd3      	adds	r3, r2, #3
 801d792:	b29b      	uxth	r3, r3
 801d794:	2b06      	cmp	r3, #6
 801d796:	d916      	bls.n	801d7c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d798:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d800 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d79c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d7a0:	f8cd c004 	str.w	ip, [sp, #4]
 801d7a4:	f04f 0c01 	mov.w	ip, #1
 801d7a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d7ac:	6920      	ldr	r0, [r4, #16]
 801d7ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d7b2:	a901      	add	r1, sp, #4
 801d7b4:	f88d c008 	strb.w	ip, [sp, #8]
 801d7b8:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d7bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d7c0:	6803      	ldr	r3, [r0, #0]
 801d7c2:	689b      	ldr	r3, [r3, #8]
 801d7c4:	4798      	blx	r3
 801d7c6:	4b0d      	ldr	r3, [pc, #52]	; (801d7fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d7c8:	a901      	add	r1, sp, #4
 801d7ca:	6920      	ldr	r0, [r4, #16]
 801d7cc:	9301      	str	r3, [sp, #4]
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	f88d 5008 	strb.w	r5, [sp, #8]
 801d7d4:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d7d8:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d7dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d7e0:	6803      	ldr	r3, [r0, #0]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	4798      	blx	r3
 801d7e6:	b005      	add	sp, #20
 801d7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7ea:	2900      	cmp	r1, #0
 801d7ec:	d1eb      	bne.n	801d7c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d7ee:	80a2      	strh	r2, [r4, #4]
 801d7f0:	80c6      	strh	r6, [r0, #6]
 801d7f2:	60a1      	str	r1, [r4, #8]
 801d7f4:	81a1      	strh	r1, [r4, #12]
 801d7f6:	73a1      	strb	r1, [r4, #14]
 801d7f8:	e7e5      	b.n	801d7c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d7fa:	bf00      	nop
 801d7fc:	08021d80 	.word	0x08021d80
 801d800:	08021da8 	.word	0x08021da8

0801d804 <__aeabi_atexit>:
 801d804:	460b      	mov	r3, r1
 801d806:	4601      	mov	r1, r0
 801d808:	4618      	mov	r0, r3
 801d80a:	f000 bdc1 	b.w	801e390 <__cxa_atexit>

0801d80e <_ZdlPvj>:
 801d80e:	f000 b812 	b.w	801d836 <_ZdlPv>

0801d812 <__cxa_guard_acquire>:
 801d812:	6803      	ldr	r3, [r0, #0]
 801d814:	07db      	lsls	r3, r3, #31
 801d816:	d406      	bmi.n	801d826 <__cxa_guard_acquire+0x14>
 801d818:	7843      	ldrb	r3, [r0, #1]
 801d81a:	b103      	cbz	r3, 801d81e <__cxa_guard_acquire+0xc>
 801d81c:	deff      	udf	#255	; 0xff
 801d81e:	2301      	movs	r3, #1
 801d820:	7043      	strb	r3, [r0, #1]
 801d822:	4618      	mov	r0, r3
 801d824:	4770      	bx	lr
 801d826:	2000      	movs	r0, #0
 801d828:	4770      	bx	lr

0801d82a <__cxa_guard_release>:
 801d82a:	2301      	movs	r3, #1
 801d82c:	6003      	str	r3, [r0, #0]
 801d82e:	4770      	bx	lr

0801d830 <__cxa_pure_virtual>:
 801d830:	b508      	push	{r3, lr}
 801d832:	f000 f80f 	bl	801d854 <_ZSt9terminatev>

0801d836 <_ZdlPv>:
 801d836:	f000 bdfd 	b.w	801e434 <free>

0801d83a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d83a:	b508      	push	{r3, lr}
 801d83c:	4780      	blx	r0
 801d83e:	f000 fd7b 	bl	801e338 <abort>
	...

0801d844 <_ZSt13get_terminatev>:
 801d844:	4b02      	ldr	r3, [pc, #8]	; (801d850 <_ZSt13get_terminatev+0xc>)
 801d846:	6818      	ldr	r0, [r3, #0]
 801d848:	f3bf 8f5b 	dmb	ish
 801d84c:	4770      	bx	lr
 801d84e:	bf00      	nop
 801d850:	2000008c 	.word	0x2000008c

0801d854 <_ZSt9terminatev>:
 801d854:	b508      	push	{r3, lr}
 801d856:	f7ff fff5 	bl	801d844 <_ZSt13get_terminatev>
 801d85a:	f7ff ffee 	bl	801d83a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801d860 <sinf>:
 801d860:	ee10 3a10 	vmov	r3, s0
 801d864:	b507      	push	{r0, r1, r2, lr}
 801d866:	4a1d      	ldr	r2, [pc, #116]	; (801d8dc <sinf+0x7c>)
 801d868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d86c:	4293      	cmp	r3, r2
 801d86e:	dc05      	bgt.n	801d87c <sinf+0x1c>
 801d870:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801d8e0 <sinf+0x80>
 801d874:	2000      	movs	r0, #0
 801d876:	f000 fc5b 	bl	801e130 <__kernel_sinf>
 801d87a:	e004      	b.n	801d886 <sinf+0x26>
 801d87c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d880:	db04      	blt.n	801d88c <sinf+0x2c>
 801d882:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d886:	b003      	add	sp, #12
 801d888:	f85d fb04 	ldr.w	pc, [sp], #4
 801d88c:	4668      	mov	r0, sp
 801d88e:	f000 f829 	bl	801d8e4 <__ieee754_rem_pio2f>
 801d892:	f000 0003 	and.w	r0, r0, #3
 801d896:	2801      	cmp	r0, #1
 801d898:	d008      	beq.n	801d8ac <sinf+0x4c>
 801d89a:	2802      	cmp	r0, #2
 801d89c:	d00d      	beq.n	801d8ba <sinf+0x5a>
 801d89e:	b9b0      	cbnz	r0, 801d8ce <sinf+0x6e>
 801d8a0:	eddd 0a01 	vldr	s1, [sp, #4]
 801d8a4:	ed9d 0a00 	vldr	s0, [sp]
 801d8a8:	2001      	movs	r0, #1
 801d8aa:	e7e4      	b.n	801d876 <sinf+0x16>
 801d8ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801d8b0:	ed9d 0a00 	vldr	s0, [sp]
 801d8b4:	f000 f952 	bl	801db5c <__kernel_cosf>
 801d8b8:	e7e5      	b.n	801d886 <sinf+0x26>
 801d8ba:	eddd 0a01 	vldr	s1, [sp, #4]
 801d8be:	ed9d 0a00 	vldr	s0, [sp]
 801d8c2:	2001      	movs	r0, #1
 801d8c4:	f000 fc34 	bl	801e130 <__kernel_sinf>
 801d8c8:	eeb1 0a40 	vneg.f32	s0, s0
 801d8cc:	e7db      	b.n	801d886 <sinf+0x26>
 801d8ce:	eddd 0a01 	vldr	s1, [sp, #4]
 801d8d2:	ed9d 0a00 	vldr	s0, [sp]
 801d8d6:	f000 f941 	bl	801db5c <__kernel_cosf>
 801d8da:	e7f5      	b.n	801d8c8 <sinf+0x68>
 801d8dc:	3f490fd8 	.word	0x3f490fd8
 801d8e0:	00000000 	.word	0x00000000

0801d8e4 <__ieee754_rem_pio2f>:
 801d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8e6:	ee10 6a10 	vmov	r6, s0
 801d8ea:	4b8e      	ldr	r3, [pc, #568]	; (801db24 <__ieee754_rem_pio2f+0x240>)
 801d8ec:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801d8f0:	429d      	cmp	r5, r3
 801d8f2:	b087      	sub	sp, #28
 801d8f4:	eef0 7a40 	vmov.f32	s15, s0
 801d8f8:	4604      	mov	r4, r0
 801d8fa:	dc05      	bgt.n	801d908 <__ieee754_rem_pio2f+0x24>
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	ed80 0a00 	vstr	s0, [r0]
 801d902:	6043      	str	r3, [r0, #4]
 801d904:	2000      	movs	r0, #0
 801d906:	e01a      	b.n	801d93e <__ieee754_rem_pio2f+0x5a>
 801d908:	4b87      	ldr	r3, [pc, #540]	; (801db28 <__ieee754_rem_pio2f+0x244>)
 801d90a:	429d      	cmp	r5, r3
 801d90c:	dc46      	bgt.n	801d99c <__ieee754_rem_pio2f+0xb8>
 801d90e:	2e00      	cmp	r6, #0
 801d910:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801db2c <__ieee754_rem_pio2f+0x248>
 801d914:	4b86      	ldr	r3, [pc, #536]	; (801db30 <__ieee754_rem_pio2f+0x24c>)
 801d916:	f025 050f 	bic.w	r5, r5, #15
 801d91a:	dd1f      	ble.n	801d95c <__ieee754_rem_pio2f+0x78>
 801d91c:	429d      	cmp	r5, r3
 801d91e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d922:	d00e      	beq.n	801d942 <__ieee754_rem_pio2f+0x5e>
 801d924:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801db34 <__ieee754_rem_pio2f+0x250>
 801d928:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801d92c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d930:	ed80 0a00 	vstr	s0, [r0]
 801d934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d938:	2001      	movs	r0, #1
 801d93a:	edc4 7a01 	vstr	s15, [r4, #4]
 801d93e:	b007      	add	sp, #28
 801d940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d942:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801db38 <__ieee754_rem_pio2f+0x254>
 801d946:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801db3c <__ieee754_rem_pio2f+0x258>
 801d94a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d94e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801d952:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d956:	edc0 6a00 	vstr	s13, [r0]
 801d95a:	e7eb      	b.n	801d934 <__ieee754_rem_pio2f+0x50>
 801d95c:	429d      	cmp	r5, r3
 801d95e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d962:	d00e      	beq.n	801d982 <__ieee754_rem_pio2f+0x9e>
 801d964:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801db34 <__ieee754_rem_pio2f+0x250>
 801d968:	ee37 0a87 	vadd.f32	s0, s15, s14
 801d96c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d970:	ed80 0a00 	vstr	s0, [r0]
 801d974:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d978:	f04f 30ff 	mov.w	r0, #4294967295
 801d97c:	edc4 7a01 	vstr	s15, [r4, #4]
 801d980:	e7dd      	b.n	801d93e <__ieee754_rem_pio2f+0x5a>
 801d982:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801db38 <__ieee754_rem_pio2f+0x254>
 801d986:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801db3c <__ieee754_rem_pio2f+0x258>
 801d98a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d98e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801d992:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d996:	edc0 6a00 	vstr	s13, [r0]
 801d99a:	e7eb      	b.n	801d974 <__ieee754_rem_pio2f+0x90>
 801d99c:	4b68      	ldr	r3, [pc, #416]	; (801db40 <__ieee754_rem_pio2f+0x25c>)
 801d99e:	429d      	cmp	r5, r3
 801d9a0:	dc72      	bgt.n	801da88 <__ieee754_rem_pio2f+0x1a4>
 801d9a2:	f000 fc0d 	bl	801e1c0 <fabsf>
 801d9a6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801db44 <__ieee754_rem_pio2f+0x260>
 801d9aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d9ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d9b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d9b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d9ba:	ee17 0a90 	vmov	r0, s15
 801d9be:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801db2c <__ieee754_rem_pio2f+0x248>
 801d9c2:	eea7 0a67 	vfms.f32	s0, s14, s15
 801d9c6:	281f      	cmp	r0, #31
 801d9c8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801db34 <__ieee754_rem_pio2f+0x250>
 801d9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9d0:	eeb1 6a47 	vneg.f32	s12, s14
 801d9d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d9d8:	ee16 2a90 	vmov	r2, s13
 801d9dc:	dc1c      	bgt.n	801da18 <__ieee754_rem_pio2f+0x134>
 801d9de:	495a      	ldr	r1, [pc, #360]	; (801db48 <__ieee754_rem_pio2f+0x264>)
 801d9e0:	1e47      	subs	r7, r0, #1
 801d9e2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801d9e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801d9ea:	428b      	cmp	r3, r1
 801d9ec:	d014      	beq.n	801da18 <__ieee754_rem_pio2f+0x134>
 801d9ee:	6022      	str	r2, [r4, #0]
 801d9f0:	ed94 7a00 	vldr	s14, [r4]
 801d9f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d9f8:	2e00      	cmp	r6, #0
 801d9fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d9fe:	ed84 0a01 	vstr	s0, [r4, #4]
 801da02:	da9c      	bge.n	801d93e <__ieee754_rem_pio2f+0x5a>
 801da04:	eeb1 7a47 	vneg.f32	s14, s14
 801da08:	eeb1 0a40 	vneg.f32	s0, s0
 801da0c:	ed84 7a00 	vstr	s14, [r4]
 801da10:	ed84 0a01 	vstr	s0, [r4, #4]
 801da14:	4240      	negs	r0, r0
 801da16:	e792      	b.n	801d93e <__ieee754_rem_pio2f+0x5a>
 801da18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801da1c:	15eb      	asrs	r3, r5, #23
 801da1e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801da22:	2d08      	cmp	r5, #8
 801da24:	dde3      	ble.n	801d9ee <__ieee754_rem_pio2f+0x10a>
 801da26:	eddf 7a44 	vldr	s15, [pc, #272]	; 801db38 <__ieee754_rem_pio2f+0x254>
 801da2a:	eef0 6a40 	vmov.f32	s13, s0
 801da2e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801da32:	ee30 0a66 	vsub.f32	s0, s0, s13
 801da36:	eea6 0a27 	vfma.f32	s0, s12, s15
 801da3a:	eddf 7a40 	vldr	s15, [pc, #256]	; 801db3c <__ieee754_rem_pio2f+0x258>
 801da3e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801da42:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801da46:	eef0 7a40 	vmov.f32	s15, s0
 801da4a:	ee15 2a90 	vmov	r2, s11
 801da4e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801da52:	1a5b      	subs	r3, r3, r1
 801da54:	2b19      	cmp	r3, #25
 801da56:	dc04      	bgt.n	801da62 <__ieee754_rem_pio2f+0x17e>
 801da58:	edc4 5a00 	vstr	s11, [r4]
 801da5c:	eeb0 0a66 	vmov.f32	s0, s13
 801da60:	e7c6      	b.n	801d9f0 <__ieee754_rem_pio2f+0x10c>
 801da62:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801db4c <__ieee754_rem_pio2f+0x268>
 801da66:	eeb0 0a66 	vmov.f32	s0, s13
 801da6a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801da6e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801da72:	eddf 6a37 	vldr	s13, [pc, #220]	; 801db50 <__ieee754_rem_pio2f+0x26c>
 801da76:	eee6 7a25 	vfma.f32	s15, s12, s11
 801da7a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801da7e:	ee30 7a67 	vsub.f32	s14, s0, s15
 801da82:	ed84 7a00 	vstr	s14, [r4]
 801da86:	e7b3      	b.n	801d9f0 <__ieee754_rem_pio2f+0x10c>
 801da88:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801da8c:	db06      	blt.n	801da9c <__ieee754_rem_pio2f+0x1b8>
 801da8e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801da92:	edc0 7a01 	vstr	s15, [r0, #4]
 801da96:	edc0 7a00 	vstr	s15, [r0]
 801da9a:	e733      	b.n	801d904 <__ieee754_rem_pio2f+0x20>
 801da9c:	15ea      	asrs	r2, r5, #23
 801da9e:	3a86      	subs	r2, #134	; 0x86
 801daa0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801daa4:	ee07 3a90 	vmov	s15, r3
 801daa8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801daac:	eddf 6a29 	vldr	s13, [pc, #164]	; 801db54 <__ieee754_rem_pio2f+0x270>
 801dab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dab8:	ed8d 7a03 	vstr	s14, [sp, #12]
 801dabc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dac0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dac4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dacc:	ed8d 7a04 	vstr	s14, [sp, #16]
 801dad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 801dad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dadc:	edcd 7a05 	vstr	s15, [sp, #20]
 801dae0:	d11e      	bne.n	801db20 <__ieee754_rem_pio2f+0x23c>
 801dae2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daea:	bf14      	ite	ne
 801daec:	2302      	movne	r3, #2
 801daee:	2301      	moveq	r3, #1
 801daf0:	4919      	ldr	r1, [pc, #100]	; (801db58 <__ieee754_rem_pio2f+0x274>)
 801daf2:	9101      	str	r1, [sp, #4]
 801daf4:	2102      	movs	r1, #2
 801daf6:	9100      	str	r1, [sp, #0]
 801daf8:	a803      	add	r0, sp, #12
 801dafa:	4621      	mov	r1, r4
 801dafc:	f000 f88e 	bl	801dc1c <__kernel_rem_pio2f>
 801db00:	2e00      	cmp	r6, #0
 801db02:	f6bf af1c 	bge.w	801d93e <__ieee754_rem_pio2f+0x5a>
 801db06:	edd4 7a00 	vldr	s15, [r4]
 801db0a:	eef1 7a67 	vneg.f32	s15, s15
 801db0e:	edc4 7a00 	vstr	s15, [r4]
 801db12:	edd4 7a01 	vldr	s15, [r4, #4]
 801db16:	eef1 7a67 	vneg.f32	s15, s15
 801db1a:	edc4 7a01 	vstr	s15, [r4, #4]
 801db1e:	e779      	b.n	801da14 <__ieee754_rem_pio2f+0x130>
 801db20:	2303      	movs	r3, #3
 801db22:	e7e5      	b.n	801daf0 <__ieee754_rem_pio2f+0x20c>
 801db24:	3f490fd8 	.word	0x3f490fd8
 801db28:	4016cbe3 	.word	0x4016cbe3
 801db2c:	3fc90f80 	.word	0x3fc90f80
 801db30:	3fc90fd0 	.word	0x3fc90fd0
 801db34:	37354443 	.word	0x37354443
 801db38:	37354400 	.word	0x37354400
 801db3c:	2e85a308 	.word	0x2e85a308
 801db40:	43490f80 	.word	0x43490f80
 801db44:	3f22f984 	.word	0x3f22f984
 801db48:	080231b0 	.word	0x080231b0
 801db4c:	2e85a300 	.word	0x2e85a300
 801db50:	248d3132 	.word	0x248d3132
 801db54:	43800000 	.word	0x43800000
 801db58:	08023230 	.word	0x08023230

0801db5c <__kernel_cosf>:
 801db5c:	ee10 3a10 	vmov	r3, s0
 801db60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db64:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801db68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801db6c:	da05      	bge.n	801db7a <__kernel_cosf+0x1e>
 801db6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801db72:	ee17 2a90 	vmov	r2, s15
 801db76:	2a00      	cmp	r2, #0
 801db78:	d03d      	beq.n	801dbf6 <__kernel_cosf+0x9a>
 801db7a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801db7e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801dbfc <__kernel_cosf+0xa0>
 801db82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801dc00 <__kernel_cosf+0xa4>
 801db86:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801dc04 <__kernel_cosf+0xa8>
 801db8a:	4a1f      	ldr	r2, [pc, #124]	; (801dc08 <__kernel_cosf+0xac>)
 801db8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801db90:	4293      	cmp	r3, r2
 801db92:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801dc0c <__kernel_cosf+0xb0>
 801db96:	eee7 7a25 	vfma.f32	s15, s14, s11
 801db9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801dc10 <__kernel_cosf+0xb4>
 801db9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dba2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801dc14 <__kernel_cosf+0xb8>
 801dba6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801dbaa:	eeb0 7a66 	vmov.f32	s14, s13
 801dbae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dbb2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801dbb6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801dbba:	ee67 6a25 	vmul.f32	s13, s14, s11
 801dbbe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801dbc2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801dbc6:	dc04      	bgt.n	801dbd2 <__kernel_cosf+0x76>
 801dbc8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801dbcc:	ee36 0a47 	vsub.f32	s0, s12, s14
 801dbd0:	4770      	bx	lr
 801dbd2:	4a11      	ldr	r2, [pc, #68]	; (801dc18 <__kernel_cosf+0xbc>)
 801dbd4:	4293      	cmp	r3, r2
 801dbd6:	bfda      	itte	le
 801dbd8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801dbdc:	ee06 3a90 	vmovle	s13, r3
 801dbe0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801dbe4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dbe8:	ee36 0a66 	vsub.f32	s0, s12, s13
 801dbec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dbf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dbf4:	4770      	bx	lr
 801dbf6:	eeb0 0a46 	vmov.f32	s0, s12
 801dbfa:	4770      	bx	lr
 801dbfc:	ad47d74e 	.word	0xad47d74e
 801dc00:	310f74f6 	.word	0x310f74f6
 801dc04:	3d2aaaab 	.word	0x3d2aaaab
 801dc08:	3e999999 	.word	0x3e999999
 801dc0c:	b493f27c 	.word	0xb493f27c
 801dc10:	37d00d01 	.word	0x37d00d01
 801dc14:	bab60b61 	.word	0xbab60b61
 801dc18:	3f480000 	.word	0x3f480000

0801dc1c <__kernel_rem_pio2f>:
 801dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc20:	ed2d 8b04 	vpush	{d8-d9}
 801dc24:	b0d7      	sub	sp, #348	; 0x15c
 801dc26:	4616      	mov	r6, r2
 801dc28:	4698      	mov	r8, r3
 801dc2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801dc2c:	4bbb      	ldr	r3, [pc, #748]	; (801df1c <__kernel_rem_pio2f+0x300>)
 801dc2e:	9001      	str	r0, [sp, #4]
 801dc30:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801dc34:	1d33      	adds	r3, r6, #4
 801dc36:	460d      	mov	r5, r1
 801dc38:	f108 39ff 	add.w	r9, r8, #4294967295
 801dc3c:	db29      	blt.n	801dc92 <__kernel_rem_pio2f+0x76>
 801dc3e:	1ef1      	subs	r1, r6, #3
 801dc40:	bf48      	it	mi
 801dc42:	1d31      	addmi	r1, r6, #4
 801dc44:	10c9      	asrs	r1, r1, #3
 801dc46:	1c4c      	adds	r4, r1, #1
 801dc48:	00e3      	lsls	r3, r4, #3
 801dc4a:	9302      	str	r3, [sp, #8]
 801dc4c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801dc4e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801df2c <__kernel_rem_pio2f+0x310>
 801dc52:	eba1 0009 	sub.w	r0, r1, r9
 801dc56:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801dc5a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801dc5e:	eb07 0c09 	add.w	ip, r7, r9
 801dc62:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801dc66:	2300      	movs	r3, #0
 801dc68:	4563      	cmp	r3, ip
 801dc6a:	dd14      	ble.n	801dc96 <__kernel_rem_pio2f+0x7a>
 801dc6c:	ab1a      	add	r3, sp, #104	; 0x68
 801dc6e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801dc72:	46cc      	mov	ip, r9
 801dc74:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801dc78:	f1c8 0b01 	rsb	fp, r8, #1
 801dc7c:	eb0b 020c 	add.w	r2, fp, ip
 801dc80:	4297      	cmp	r7, r2
 801dc82:	db27      	blt.n	801dcd4 <__kernel_rem_pio2f+0xb8>
 801dc84:	f8dd e004 	ldr.w	lr, [sp, #4]
 801dc88:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801df2c <__kernel_rem_pio2f+0x310>
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	2200      	movs	r2, #0
 801dc90:	e016      	b.n	801dcc0 <__kernel_rem_pio2f+0xa4>
 801dc92:	2100      	movs	r1, #0
 801dc94:	e7d7      	b.n	801dc46 <__kernel_rem_pio2f+0x2a>
 801dc96:	42d8      	cmn	r0, r3
 801dc98:	bf5d      	ittte	pl
 801dc9a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801dc9e:	ee07 2a90 	vmovpl	s15, r2
 801dca2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801dca6:	eef0 7a47 	vmovmi.f32	s15, s14
 801dcaa:	ecea 7a01 	vstmia	sl!, {s15}
 801dcae:	3301      	adds	r3, #1
 801dcb0:	e7da      	b.n	801dc68 <__kernel_rem_pio2f+0x4c>
 801dcb2:	ecfe 6a01 	vldmia	lr!, {s13}
 801dcb6:	ed90 7a00 	vldr	s14, [r0]
 801dcba:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dcbe:	3201      	adds	r2, #1
 801dcc0:	454a      	cmp	r2, r9
 801dcc2:	f1a0 0004 	sub.w	r0, r0, #4
 801dcc6:	ddf4      	ble.n	801dcb2 <__kernel_rem_pio2f+0x96>
 801dcc8:	ecea 7a01 	vstmia	sl!, {s15}
 801dccc:	3304      	adds	r3, #4
 801dcce:	f10c 0c01 	add.w	ip, ip, #1
 801dcd2:	e7d3      	b.n	801dc7c <__kernel_rem_pio2f+0x60>
 801dcd4:	ab06      	add	r3, sp, #24
 801dcd6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801dcda:	9304      	str	r3, [sp, #16]
 801dcdc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801dcde:	eddf 8a92 	vldr	s17, [pc, #584]	; 801df28 <__kernel_rem_pio2f+0x30c>
 801dce2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801df24 <__kernel_rem_pio2f+0x308>
 801dce6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dcea:	9303      	str	r3, [sp, #12]
 801dcec:	46ba      	mov	sl, r7
 801dcee:	ab56      	add	r3, sp, #344	; 0x158
 801dcf0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801dcf4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801dcf8:	ab06      	add	r3, sp, #24
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	4652      	mov	r2, sl
 801dcfe:	2a00      	cmp	r2, #0
 801dd00:	dc51      	bgt.n	801dda6 <__kernel_rem_pio2f+0x18a>
 801dd02:	4620      	mov	r0, r4
 801dd04:	9305      	str	r3, [sp, #20]
 801dd06:	f000 faa5 	bl	801e254 <scalbnf>
 801dd0a:	eeb0 8a40 	vmov.f32	s16, s0
 801dd0e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801dd12:	ee28 0a00 	vmul.f32	s0, s16, s0
 801dd16:	f000 fa5b 	bl	801e1d0 <floorf>
 801dd1a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801dd1e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801dd22:	2c00      	cmp	r4, #0
 801dd24:	9b05      	ldr	r3, [sp, #20]
 801dd26:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801dd2a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801dd2e:	edcd 7a00 	vstr	s15, [sp]
 801dd32:	ee38 8a40 	vsub.f32	s16, s16, s0
 801dd36:	dd4b      	ble.n	801ddd0 <__kernel_rem_pio2f+0x1b4>
 801dd38:	f10a 3cff 	add.w	ip, sl, #4294967295
 801dd3c:	aa06      	add	r2, sp, #24
 801dd3e:	f1c4 0e08 	rsb	lr, r4, #8
 801dd42:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801dd46:	ee17 1a90 	vmov	r1, s15
 801dd4a:	fa42 f00e 	asr.w	r0, r2, lr
 801dd4e:	4401      	add	r1, r0
 801dd50:	9100      	str	r1, [sp, #0]
 801dd52:	fa00 f00e 	lsl.w	r0, r0, lr
 801dd56:	a906      	add	r1, sp, #24
 801dd58:	1a12      	subs	r2, r2, r0
 801dd5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801dd5e:	f1c4 0007 	rsb	r0, r4, #7
 801dd62:	fa42 fb00 	asr.w	fp, r2, r0
 801dd66:	f1bb 0f00 	cmp.w	fp, #0
 801dd6a:	dd43      	ble.n	801ddf4 <__kernel_rem_pio2f+0x1d8>
 801dd6c:	9a00      	ldr	r2, [sp, #0]
 801dd6e:	f04f 0e00 	mov.w	lr, #0
 801dd72:	3201      	adds	r2, #1
 801dd74:	9200      	str	r2, [sp, #0]
 801dd76:	4670      	mov	r0, lr
 801dd78:	45f2      	cmp	sl, lr
 801dd7a:	dc6c      	bgt.n	801de56 <__kernel_rem_pio2f+0x23a>
 801dd7c:	2c00      	cmp	r4, #0
 801dd7e:	dd04      	ble.n	801dd8a <__kernel_rem_pio2f+0x16e>
 801dd80:	2c01      	cmp	r4, #1
 801dd82:	d079      	beq.n	801de78 <__kernel_rem_pio2f+0x25c>
 801dd84:	2c02      	cmp	r4, #2
 801dd86:	f000 8082 	beq.w	801de8e <__kernel_rem_pio2f+0x272>
 801dd8a:	f1bb 0f02 	cmp.w	fp, #2
 801dd8e:	d131      	bne.n	801ddf4 <__kernel_rem_pio2f+0x1d8>
 801dd90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dd94:	ee30 8a48 	vsub.f32	s16, s0, s16
 801dd98:	b360      	cbz	r0, 801ddf4 <__kernel_rem_pio2f+0x1d8>
 801dd9a:	4620      	mov	r0, r4
 801dd9c:	f000 fa5a 	bl	801e254 <scalbnf>
 801dda0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801dda4:	e026      	b.n	801ddf4 <__kernel_rem_pio2f+0x1d8>
 801dda6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ddaa:	3a01      	subs	r2, #1
 801ddac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ddb0:	a942      	add	r1, sp, #264	; 0x108
 801ddb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ddb6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801ddba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801ddbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ddc2:	eca0 0a01 	vstmia	r0!, {s0}
 801ddc6:	ed9c 0a00 	vldr	s0, [ip]
 801ddca:	ee37 0a80 	vadd.f32	s0, s15, s0
 801ddce:	e796      	b.n	801dcfe <__kernel_rem_pio2f+0xe2>
 801ddd0:	d107      	bne.n	801dde2 <__kernel_rem_pio2f+0x1c6>
 801ddd2:	f10a 32ff 	add.w	r2, sl, #4294967295
 801ddd6:	a906      	add	r1, sp, #24
 801ddd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801dddc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801dde0:	e7c1      	b.n	801dd66 <__kernel_rem_pio2f+0x14a>
 801dde2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dde6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddee:	da2f      	bge.n	801de50 <__kernel_rem_pio2f+0x234>
 801ddf0:	f04f 0b00 	mov.w	fp, #0
 801ddf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddfc:	f040 8098 	bne.w	801df30 <__kernel_rem_pio2f+0x314>
 801de00:	f10a 33ff 	add.w	r3, sl, #4294967295
 801de04:	469c      	mov	ip, r3
 801de06:	2200      	movs	r2, #0
 801de08:	45bc      	cmp	ip, r7
 801de0a:	da48      	bge.n	801de9e <__kernel_rem_pio2f+0x282>
 801de0c:	2a00      	cmp	r2, #0
 801de0e:	d05f      	beq.n	801ded0 <__kernel_rem_pio2f+0x2b4>
 801de10:	aa06      	add	r2, sp, #24
 801de12:	3c08      	subs	r4, #8
 801de14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801de18:	2900      	cmp	r1, #0
 801de1a:	d07d      	beq.n	801df18 <__kernel_rem_pio2f+0x2fc>
 801de1c:	4620      	mov	r0, r4
 801de1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801de22:	9301      	str	r3, [sp, #4]
 801de24:	f000 fa16 	bl	801e254 <scalbnf>
 801de28:	9b01      	ldr	r3, [sp, #4]
 801de2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801df28 <__kernel_rem_pio2f+0x30c>
 801de2e:	4619      	mov	r1, r3
 801de30:	2900      	cmp	r1, #0
 801de32:	f280 80af 	bge.w	801df94 <__kernel_rem_pio2f+0x378>
 801de36:	4618      	mov	r0, r3
 801de38:	2400      	movs	r4, #0
 801de3a:	2800      	cmp	r0, #0
 801de3c:	f2c0 80d0 	blt.w	801dfe0 <__kernel_rem_pio2f+0x3c4>
 801de40:	a942      	add	r1, sp, #264	; 0x108
 801de42:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801de46:	4a36      	ldr	r2, [pc, #216]	; (801df20 <__kernel_rem_pio2f+0x304>)
 801de48:	eddf 7a38 	vldr	s15, [pc, #224]	; 801df2c <__kernel_rem_pio2f+0x310>
 801de4c:	2100      	movs	r1, #0
 801de4e:	e0bb      	b.n	801dfc8 <__kernel_rem_pio2f+0x3ac>
 801de50:	f04f 0b02 	mov.w	fp, #2
 801de54:	e78a      	b.n	801dd6c <__kernel_rem_pio2f+0x150>
 801de56:	681a      	ldr	r2, [r3, #0]
 801de58:	b948      	cbnz	r0, 801de6e <__kernel_rem_pio2f+0x252>
 801de5a:	b11a      	cbz	r2, 801de64 <__kernel_rem_pio2f+0x248>
 801de5c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801de60:	601a      	str	r2, [r3, #0]
 801de62:	2201      	movs	r2, #1
 801de64:	f10e 0e01 	add.w	lr, lr, #1
 801de68:	3304      	adds	r3, #4
 801de6a:	4610      	mov	r0, r2
 801de6c:	e784      	b.n	801dd78 <__kernel_rem_pio2f+0x15c>
 801de6e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801de72:	601a      	str	r2, [r3, #0]
 801de74:	4602      	mov	r2, r0
 801de76:	e7f5      	b.n	801de64 <__kernel_rem_pio2f+0x248>
 801de78:	f10a 3cff 	add.w	ip, sl, #4294967295
 801de7c:	ab06      	add	r3, sp, #24
 801de7e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801de82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de86:	aa06      	add	r2, sp, #24
 801de88:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801de8c:	e77d      	b.n	801dd8a <__kernel_rem_pio2f+0x16e>
 801de8e:	f10a 3cff 	add.w	ip, sl, #4294967295
 801de92:	ab06      	add	r3, sp, #24
 801de94:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801de98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801de9c:	e7f3      	b.n	801de86 <__kernel_rem_pio2f+0x26a>
 801de9e:	a906      	add	r1, sp, #24
 801dea0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801dea4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dea8:	4302      	orrs	r2, r0
 801deaa:	e7ad      	b.n	801de08 <__kernel_rem_pio2f+0x1ec>
 801deac:	3001      	adds	r0, #1
 801deae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801deb2:	2a00      	cmp	r2, #0
 801deb4:	d0fa      	beq.n	801deac <__kernel_rem_pio2f+0x290>
 801deb6:	a91a      	add	r1, sp, #104	; 0x68
 801deb8:	eb0a 0208 	add.w	r2, sl, r8
 801debc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801dec0:	f10a 0301 	add.w	r3, sl, #1
 801dec4:	eb0a 0100 	add.w	r1, sl, r0
 801dec8:	4299      	cmp	r1, r3
 801deca:	da04      	bge.n	801ded6 <__kernel_rem_pio2f+0x2ba>
 801decc:	468a      	mov	sl, r1
 801dece:	e70e      	b.n	801dcee <__kernel_rem_pio2f+0xd2>
 801ded0:	9b04      	ldr	r3, [sp, #16]
 801ded2:	2001      	movs	r0, #1
 801ded4:	e7eb      	b.n	801deae <__kernel_rem_pio2f+0x292>
 801ded6:	9803      	ldr	r0, [sp, #12]
 801ded8:	f8dd c004 	ldr.w	ip, [sp, #4]
 801dedc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801dee0:	9000      	str	r0, [sp, #0]
 801dee2:	ee07 0a90 	vmov	s15, r0
 801dee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801deea:	2000      	movs	r0, #0
 801deec:	ece2 7a01 	vstmia	r2!, {s15}
 801def0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801df2c <__kernel_rem_pio2f+0x310>
 801def4:	4696      	mov	lr, r2
 801def6:	4548      	cmp	r0, r9
 801def8:	dd06      	ble.n	801df08 <__kernel_rem_pio2f+0x2ec>
 801defa:	a842      	add	r0, sp, #264	; 0x108
 801defc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801df00:	edc0 7a00 	vstr	s15, [r0]
 801df04:	3301      	adds	r3, #1
 801df06:	e7df      	b.n	801dec8 <__kernel_rem_pio2f+0x2ac>
 801df08:	ecfc 6a01 	vldmia	ip!, {s13}
 801df0c:	ed3e 7a01 	vldmdb	lr!, {s14}
 801df10:	3001      	adds	r0, #1
 801df12:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df16:	e7ee      	b.n	801def6 <__kernel_rem_pio2f+0x2da>
 801df18:	3b01      	subs	r3, #1
 801df1a:	e779      	b.n	801de10 <__kernel_rem_pio2f+0x1f4>
 801df1c:	08023574 	.word	0x08023574
 801df20:	08023548 	.word	0x08023548
 801df24:	43800000 	.word	0x43800000
 801df28:	3b800000 	.word	0x3b800000
 801df2c:	00000000 	.word	0x00000000
 801df30:	9b02      	ldr	r3, [sp, #8]
 801df32:	eeb0 0a48 	vmov.f32	s0, s16
 801df36:	1b98      	subs	r0, r3, r6
 801df38:	f000 f98c 	bl	801e254 <scalbnf>
 801df3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801df24 <__kernel_rem_pio2f+0x308>
 801df40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801df44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df48:	db1b      	blt.n	801df82 <__kernel_rem_pio2f+0x366>
 801df4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801df28 <__kernel_rem_pio2f+0x30c>
 801df4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801df52:	aa06      	add	r2, sp, #24
 801df54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df58:	a906      	add	r1, sp, #24
 801df5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df5e:	3408      	adds	r4, #8
 801df60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801df64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801df6c:	ee10 3a10 	vmov	r3, s0
 801df70:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801df74:	ee17 2a90 	vmov	r2, s15
 801df78:	f10a 0301 	add.w	r3, sl, #1
 801df7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801df80:	e74c      	b.n	801de1c <__kernel_rem_pio2f+0x200>
 801df82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801df86:	aa06      	add	r2, sp, #24
 801df88:	ee10 3a10 	vmov	r3, s0
 801df8c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801df90:	4653      	mov	r3, sl
 801df92:	e743      	b.n	801de1c <__kernel_rem_pio2f+0x200>
 801df94:	aa42      	add	r2, sp, #264	; 0x108
 801df96:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801df9a:	aa06      	add	r2, sp, #24
 801df9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801dfa0:	9201      	str	r2, [sp, #4]
 801dfa2:	ee07 2a90 	vmov	s15, r2
 801dfa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfaa:	3901      	subs	r1, #1
 801dfac:	ee67 7a80 	vmul.f32	s15, s15, s0
 801dfb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801dfb4:	edc0 7a00 	vstr	s15, [r0]
 801dfb8:	e73a      	b.n	801de30 <__kernel_rem_pio2f+0x214>
 801dfba:	ecf2 6a01 	vldmia	r2!, {s13}
 801dfbe:	ecb6 7a01 	vldmia	r6!, {s14}
 801dfc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dfc6:	3101      	adds	r1, #1
 801dfc8:	42b9      	cmp	r1, r7
 801dfca:	dc01      	bgt.n	801dfd0 <__kernel_rem_pio2f+0x3b4>
 801dfcc:	428c      	cmp	r4, r1
 801dfce:	daf4      	bge.n	801dfba <__kernel_rem_pio2f+0x39e>
 801dfd0:	aa56      	add	r2, sp, #344	; 0x158
 801dfd2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801dfd6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801dfda:	3801      	subs	r0, #1
 801dfdc:	3401      	adds	r4, #1
 801dfde:	e72c      	b.n	801de3a <__kernel_rem_pio2f+0x21e>
 801dfe0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801dfe2:	2a02      	cmp	r2, #2
 801dfe4:	dc0a      	bgt.n	801dffc <__kernel_rem_pio2f+0x3e0>
 801dfe6:	2a00      	cmp	r2, #0
 801dfe8:	dc61      	bgt.n	801e0ae <__kernel_rem_pio2f+0x492>
 801dfea:	d03c      	beq.n	801e066 <__kernel_rem_pio2f+0x44a>
 801dfec:	9b00      	ldr	r3, [sp, #0]
 801dfee:	f003 0007 	and.w	r0, r3, #7
 801dff2:	b057      	add	sp, #348	; 0x15c
 801dff4:	ecbd 8b04 	vpop	{d8-d9}
 801dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dffc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801dffe:	2a03      	cmp	r2, #3
 801e000:	d1f4      	bne.n	801dfec <__kernel_rem_pio2f+0x3d0>
 801e002:	aa2e      	add	r2, sp, #184	; 0xb8
 801e004:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e008:	4608      	mov	r0, r1
 801e00a:	461c      	mov	r4, r3
 801e00c:	2c00      	cmp	r4, #0
 801e00e:	f1a0 0004 	sub.w	r0, r0, #4
 801e012:	dc59      	bgt.n	801e0c8 <__kernel_rem_pio2f+0x4ac>
 801e014:	4618      	mov	r0, r3
 801e016:	2801      	cmp	r0, #1
 801e018:	f1a1 0104 	sub.w	r1, r1, #4
 801e01c:	dc64      	bgt.n	801e0e8 <__kernel_rem_pio2f+0x4cc>
 801e01e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801df2c <__kernel_rem_pio2f+0x310>
 801e022:	2b01      	cmp	r3, #1
 801e024:	dc70      	bgt.n	801e108 <__kernel_rem_pio2f+0x4ec>
 801e026:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801e02a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801e02e:	f1bb 0f00 	cmp.w	fp, #0
 801e032:	d172      	bne.n	801e11a <__kernel_rem_pio2f+0x4fe>
 801e034:	edc5 6a00 	vstr	s13, [r5]
 801e038:	ed85 7a01 	vstr	s14, [r5, #4]
 801e03c:	edc5 7a02 	vstr	s15, [r5, #8]
 801e040:	e7d4      	b.n	801dfec <__kernel_rem_pio2f+0x3d0>
 801e042:	aa2e      	add	r2, sp, #184	; 0xb8
 801e044:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e048:	ed91 7a00 	vldr	s14, [r1]
 801e04c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e050:	3b01      	subs	r3, #1
 801e052:	2b00      	cmp	r3, #0
 801e054:	daf5      	bge.n	801e042 <__kernel_rem_pio2f+0x426>
 801e056:	f1bb 0f00 	cmp.w	fp, #0
 801e05a:	d001      	beq.n	801e060 <__kernel_rem_pio2f+0x444>
 801e05c:	eef1 7a67 	vneg.f32	s15, s15
 801e060:	edc5 7a00 	vstr	s15, [r5]
 801e064:	e7c2      	b.n	801dfec <__kernel_rem_pio2f+0x3d0>
 801e066:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801df2c <__kernel_rem_pio2f+0x310>
 801e06a:	e7f2      	b.n	801e052 <__kernel_rem_pio2f+0x436>
 801e06c:	aa2e      	add	r2, sp, #184	; 0xb8
 801e06e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801e072:	edd0 7a00 	vldr	s15, [r0]
 801e076:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e07a:	3901      	subs	r1, #1
 801e07c:	2900      	cmp	r1, #0
 801e07e:	daf5      	bge.n	801e06c <__kernel_rem_pio2f+0x450>
 801e080:	f1bb 0f00 	cmp.w	fp, #0
 801e084:	d017      	beq.n	801e0b6 <__kernel_rem_pio2f+0x49a>
 801e086:	eef1 7a47 	vneg.f32	s15, s14
 801e08a:	edc5 7a00 	vstr	s15, [r5]
 801e08e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801e092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e096:	a82f      	add	r0, sp, #188	; 0xbc
 801e098:	2101      	movs	r1, #1
 801e09a:	428b      	cmp	r3, r1
 801e09c:	da0e      	bge.n	801e0bc <__kernel_rem_pio2f+0x4a0>
 801e09e:	f1bb 0f00 	cmp.w	fp, #0
 801e0a2:	d001      	beq.n	801e0a8 <__kernel_rem_pio2f+0x48c>
 801e0a4:	eef1 7a67 	vneg.f32	s15, s15
 801e0a8:	edc5 7a01 	vstr	s15, [r5, #4]
 801e0ac:	e79e      	b.n	801dfec <__kernel_rem_pio2f+0x3d0>
 801e0ae:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801df2c <__kernel_rem_pio2f+0x310>
 801e0b2:	4619      	mov	r1, r3
 801e0b4:	e7e2      	b.n	801e07c <__kernel_rem_pio2f+0x460>
 801e0b6:	eef0 7a47 	vmov.f32	s15, s14
 801e0ba:	e7e6      	b.n	801e08a <__kernel_rem_pio2f+0x46e>
 801e0bc:	ecb0 7a01 	vldmia	r0!, {s14}
 801e0c0:	3101      	adds	r1, #1
 801e0c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0c6:	e7e8      	b.n	801e09a <__kernel_rem_pio2f+0x47e>
 801e0c8:	edd0 7a00 	vldr	s15, [r0]
 801e0cc:	edd0 6a01 	vldr	s13, [r0, #4]
 801e0d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e0d4:	3c01      	subs	r4, #1
 801e0d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e0da:	ed80 7a00 	vstr	s14, [r0]
 801e0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e0e2:	edc0 7a01 	vstr	s15, [r0, #4]
 801e0e6:	e791      	b.n	801e00c <__kernel_rem_pio2f+0x3f0>
 801e0e8:	edd1 7a00 	vldr	s15, [r1]
 801e0ec:	edd1 6a01 	vldr	s13, [r1, #4]
 801e0f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e0f4:	3801      	subs	r0, #1
 801e0f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e0fa:	ed81 7a00 	vstr	s14, [r1]
 801e0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e102:	edc1 7a01 	vstr	s15, [r1, #4]
 801e106:	e786      	b.n	801e016 <__kernel_rem_pio2f+0x3fa>
 801e108:	aa2e      	add	r2, sp, #184	; 0xb8
 801e10a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e10e:	ed91 7a00 	vldr	s14, [r1]
 801e112:	3b01      	subs	r3, #1
 801e114:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e118:	e783      	b.n	801e022 <__kernel_rem_pio2f+0x406>
 801e11a:	eef1 6a66 	vneg.f32	s13, s13
 801e11e:	eeb1 7a47 	vneg.f32	s14, s14
 801e122:	edc5 6a00 	vstr	s13, [r5]
 801e126:	ed85 7a01 	vstr	s14, [r5, #4]
 801e12a:	eef1 7a67 	vneg.f32	s15, s15
 801e12e:	e785      	b.n	801e03c <__kernel_rem_pio2f+0x420>

0801e130 <__kernel_sinf>:
 801e130:	ee10 3a10 	vmov	r3, s0
 801e134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e138:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e13c:	da04      	bge.n	801e148 <__kernel_sinf+0x18>
 801e13e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e142:	ee17 3a90 	vmov	r3, s15
 801e146:	b35b      	cbz	r3, 801e1a0 <__kernel_sinf+0x70>
 801e148:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e14c:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e1a4 <__kernel_sinf+0x74>
 801e150:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801e1a8 <__kernel_sinf+0x78>
 801e154:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e158:	eddf 7a14 	vldr	s15, [pc, #80]	; 801e1ac <__kernel_sinf+0x7c>
 801e15c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e160:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801e1b0 <__kernel_sinf+0x80>
 801e164:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e168:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e1b4 <__kernel_sinf+0x84>
 801e16c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801e170:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e174:	b930      	cbnz	r0, 801e184 <__kernel_sinf+0x54>
 801e176:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801e1b8 <__kernel_sinf+0x88>
 801e17a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e17e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e182:	4770      	bx	lr
 801e184:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801e188:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e18c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801e190:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801e194:	eddf 7a09 	vldr	s15, [pc, #36]	; 801e1bc <__kernel_sinf+0x8c>
 801e198:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801e19c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e1a0:	4770      	bx	lr
 801e1a2:	bf00      	nop
 801e1a4:	2f2ec9d3 	.word	0x2f2ec9d3
 801e1a8:	b2d72f34 	.word	0xb2d72f34
 801e1ac:	3638ef1b 	.word	0x3638ef1b
 801e1b0:	b9500d01 	.word	0xb9500d01
 801e1b4:	3c088889 	.word	0x3c088889
 801e1b8:	be2aaaab 	.word	0xbe2aaaab
 801e1bc:	3e2aaaab 	.word	0x3e2aaaab

0801e1c0 <fabsf>:
 801e1c0:	ee10 3a10 	vmov	r3, s0
 801e1c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e1c8:	ee00 3a10 	vmov	s0, r3
 801e1cc:	4770      	bx	lr
	...

0801e1d0 <floorf>:
 801e1d0:	ee10 3a10 	vmov	r3, s0
 801e1d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e1d8:	3a7f      	subs	r2, #127	; 0x7f
 801e1da:	2a16      	cmp	r2, #22
 801e1dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e1e0:	dc2a      	bgt.n	801e238 <floorf+0x68>
 801e1e2:	2a00      	cmp	r2, #0
 801e1e4:	da11      	bge.n	801e20a <floorf+0x3a>
 801e1e6:	eddf 7a18 	vldr	s15, [pc, #96]	; 801e248 <floorf+0x78>
 801e1ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e1ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1f6:	dd05      	ble.n	801e204 <floorf+0x34>
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	da23      	bge.n	801e244 <floorf+0x74>
 801e1fc:	4a13      	ldr	r2, [pc, #76]	; (801e24c <floorf+0x7c>)
 801e1fe:	2900      	cmp	r1, #0
 801e200:	bf18      	it	ne
 801e202:	4613      	movne	r3, r2
 801e204:	ee00 3a10 	vmov	s0, r3
 801e208:	4770      	bx	lr
 801e20a:	4911      	ldr	r1, [pc, #68]	; (801e250 <floorf+0x80>)
 801e20c:	4111      	asrs	r1, r2
 801e20e:	420b      	tst	r3, r1
 801e210:	d0fa      	beq.n	801e208 <floorf+0x38>
 801e212:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801e248 <floorf+0x78>
 801e216:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e21a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e222:	ddef      	ble.n	801e204 <floorf+0x34>
 801e224:	2b00      	cmp	r3, #0
 801e226:	bfbe      	ittt	lt
 801e228:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801e22c:	fa40 f202 	asrlt.w	r2, r0, r2
 801e230:	189b      	addlt	r3, r3, r2
 801e232:	ea23 0301 	bic.w	r3, r3, r1
 801e236:	e7e5      	b.n	801e204 <floorf+0x34>
 801e238:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e23c:	d3e4      	bcc.n	801e208 <floorf+0x38>
 801e23e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e242:	4770      	bx	lr
 801e244:	2300      	movs	r3, #0
 801e246:	e7dd      	b.n	801e204 <floorf+0x34>
 801e248:	7149f2ca 	.word	0x7149f2ca
 801e24c:	bf800000 	.word	0xbf800000
 801e250:	007fffff 	.word	0x007fffff

0801e254 <scalbnf>:
 801e254:	ee10 3a10 	vmov	r3, s0
 801e258:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801e25c:	d025      	beq.n	801e2aa <scalbnf+0x56>
 801e25e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e262:	d302      	bcc.n	801e26a <scalbnf+0x16>
 801e264:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e268:	4770      	bx	lr
 801e26a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e26e:	d122      	bne.n	801e2b6 <scalbnf+0x62>
 801e270:	4b2a      	ldr	r3, [pc, #168]	; (801e31c <scalbnf+0xc8>)
 801e272:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801e320 <scalbnf+0xcc>
 801e276:	4298      	cmp	r0, r3
 801e278:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e27c:	db16      	blt.n	801e2ac <scalbnf+0x58>
 801e27e:	ee10 3a10 	vmov	r3, s0
 801e282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e286:	3a19      	subs	r2, #25
 801e288:	4402      	add	r2, r0
 801e28a:	2afe      	cmp	r2, #254	; 0xfe
 801e28c:	dd15      	ble.n	801e2ba <scalbnf+0x66>
 801e28e:	ee10 3a10 	vmov	r3, s0
 801e292:	eddf 7a24 	vldr	s15, [pc, #144]	; 801e324 <scalbnf+0xd0>
 801e296:	eddf 6a24 	vldr	s13, [pc, #144]	; 801e328 <scalbnf+0xd4>
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	eeb0 7a67 	vmov.f32	s14, s15
 801e2a0:	bfb8      	it	lt
 801e2a2:	eef0 7a66 	vmovlt.f32	s15, s13
 801e2a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 801e2aa:	4770      	bx	lr
 801e2ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801e32c <scalbnf+0xd8>
 801e2b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e2b4:	4770      	bx	lr
 801e2b6:	0dd2      	lsrs	r2, r2, #23
 801e2b8:	e7e6      	b.n	801e288 <scalbnf+0x34>
 801e2ba:	2a00      	cmp	r2, #0
 801e2bc:	dd06      	ble.n	801e2cc <scalbnf+0x78>
 801e2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e2c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801e2c6:	ee00 3a10 	vmov	s0, r3
 801e2ca:	4770      	bx	lr
 801e2cc:	f112 0f16 	cmn.w	r2, #22
 801e2d0:	da1a      	bge.n	801e308 <scalbnf+0xb4>
 801e2d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e2d6:	4298      	cmp	r0, r3
 801e2d8:	ee10 3a10 	vmov	r3, s0
 801e2dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e2e0:	dd0a      	ble.n	801e2f8 <scalbnf+0xa4>
 801e2e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801e324 <scalbnf+0xd0>
 801e2e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801e328 <scalbnf+0xd4>
 801e2ea:	eef0 7a40 	vmov.f32	s15, s0
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	bf18      	it	ne
 801e2f2:	eeb0 0a47 	vmovne.f32	s0, s14
 801e2f6:	e7db      	b.n	801e2b0 <scalbnf+0x5c>
 801e2f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801e32c <scalbnf+0xd8>
 801e2fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801e330 <scalbnf+0xdc>
 801e300:	eef0 7a40 	vmov.f32	s15, s0
 801e304:	2b00      	cmp	r3, #0
 801e306:	e7f3      	b.n	801e2f0 <scalbnf+0x9c>
 801e308:	3219      	adds	r2, #25
 801e30a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e30e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801e312:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e334 <scalbnf+0xe0>
 801e316:	ee07 3a10 	vmov	s14, r3
 801e31a:	e7c4      	b.n	801e2a6 <scalbnf+0x52>
 801e31c:	ffff3cb0 	.word	0xffff3cb0
 801e320:	4c000000 	.word	0x4c000000
 801e324:	7149f2ca 	.word	0x7149f2ca
 801e328:	f149f2ca 	.word	0xf149f2ca
 801e32c:	0da24260 	.word	0x0da24260
 801e330:	8da24260 	.word	0x8da24260
 801e334:	33000000 	.word	0x33000000

0801e338 <abort>:
 801e338:	b508      	push	{r3, lr}
 801e33a:	2006      	movs	r0, #6
 801e33c:	f000 fc68 	bl	801ec10 <raise>
 801e340:	2001      	movs	r0, #1
 801e342:	f7e2 fdf3 	bl	8000f2c <_exit>
	...

0801e348 <__assert_func>:
 801e348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e34a:	4614      	mov	r4, r2
 801e34c:	461a      	mov	r2, r3
 801e34e:	4b09      	ldr	r3, [pc, #36]	; (801e374 <__assert_func+0x2c>)
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	4605      	mov	r5, r0
 801e354:	68d8      	ldr	r0, [r3, #12]
 801e356:	b14c      	cbz	r4, 801e36c <__assert_func+0x24>
 801e358:	4b07      	ldr	r3, [pc, #28]	; (801e378 <__assert_func+0x30>)
 801e35a:	9100      	str	r1, [sp, #0]
 801e35c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e360:	4906      	ldr	r1, [pc, #24]	; (801e37c <__assert_func+0x34>)
 801e362:	462b      	mov	r3, r5
 801e364:	f000 f828 	bl	801e3b8 <fiprintf>
 801e368:	f7ff ffe6 	bl	801e338 <abort>
 801e36c:	4b04      	ldr	r3, [pc, #16]	; (801e380 <__assert_func+0x38>)
 801e36e:	461c      	mov	r4, r3
 801e370:	e7f3      	b.n	801e35a <__assert_func+0x12>
 801e372:	bf00      	nop
 801e374:	20000090 	.word	0x20000090
 801e378:	08023580 	.word	0x08023580
 801e37c:	0802358d 	.word	0x0802358d
 801e380:	080235bb 	.word	0x080235bb

0801e384 <atexit>:
 801e384:	2300      	movs	r3, #0
 801e386:	4601      	mov	r1, r0
 801e388:	461a      	mov	r2, r3
 801e38a:	4618      	mov	r0, r3
 801e38c:	f000 bd1c 	b.w	801edc8 <__register_exitproc>

0801e390 <__cxa_atexit>:
 801e390:	b510      	push	{r4, lr}
 801e392:	4c05      	ldr	r4, [pc, #20]	; (801e3a8 <__cxa_atexit+0x18>)
 801e394:	4613      	mov	r3, r2
 801e396:	b12c      	cbz	r4, 801e3a4 <__cxa_atexit+0x14>
 801e398:	460a      	mov	r2, r1
 801e39a:	4601      	mov	r1, r0
 801e39c:	2002      	movs	r0, #2
 801e39e:	f000 fd13 	bl	801edc8 <__register_exitproc>
 801e3a2:	bd10      	pop	{r4, pc}
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	e7fc      	b.n	801e3a2 <__cxa_atexit+0x12>
 801e3a8:	0801edc9 	.word	0x0801edc9

0801e3ac <__errno>:
 801e3ac:	4b01      	ldr	r3, [pc, #4]	; (801e3b4 <__errno+0x8>)
 801e3ae:	6818      	ldr	r0, [r3, #0]
 801e3b0:	4770      	bx	lr
 801e3b2:	bf00      	nop
 801e3b4:	20000090 	.word	0x20000090

0801e3b8 <fiprintf>:
 801e3b8:	b40e      	push	{r1, r2, r3}
 801e3ba:	b503      	push	{r0, r1, lr}
 801e3bc:	4601      	mov	r1, r0
 801e3be:	ab03      	add	r3, sp, #12
 801e3c0:	4805      	ldr	r0, [pc, #20]	; (801e3d8 <fiprintf+0x20>)
 801e3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3c6:	6800      	ldr	r0, [r0, #0]
 801e3c8:	9301      	str	r3, [sp, #4]
 801e3ca:	f000 f925 	bl	801e618 <_vfiprintf_r>
 801e3ce:	b002      	add	sp, #8
 801e3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e3d4:	b003      	add	sp, #12
 801e3d6:	4770      	bx	lr
 801e3d8:	20000090 	.word	0x20000090

0801e3dc <__libc_init_array>:
 801e3dc:	b570      	push	{r4, r5, r6, lr}
 801e3de:	4d0d      	ldr	r5, [pc, #52]	; (801e414 <__libc_init_array+0x38>)
 801e3e0:	4c0d      	ldr	r4, [pc, #52]	; (801e418 <__libc_init_array+0x3c>)
 801e3e2:	1b64      	subs	r4, r4, r5
 801e3e4:	10a4      	asrs	r4, r4, #2
 801e3e6:	2600      	movs	r6, #0
 801e3e8:	42a6      	cmp	r6, r4
 801e3ea:	d109      	bne.n	801e400 <__libc_init_array+0x24>
 801e3ec:	4d0b      	ldr	r5, [pc, #44]	; (801e41c <__libc_init_array+0x40>)
 801e3ee:	4c0c      	ldr	r4, [pc, #48]	; (801e420 <__libc_init_array+0x44>)
 801e3f0:	f001 f824 	bl	801f43c <_init>
 801e3f4:	1b64      	subs	r4, r4, r5
 801e3f6:	10a4      	asrs	r4, r4, #2
 801e3f8:	2600      	movs	r6, #0
 801e3fa:	42a6      	cmp	r6, r4
 801e3fc:	d105      	bne.n	801e40a <__libc_init_array+0x2e>
 801e3fe:	bd70      	pop	{r4, r5, r6, pc}
 801e400:	f855 3b04 	ldr.w	r3, [r5], #4
 801e404:	4798      	blx	r3
 801e406:	3601      	adds	r6, #1
 801e408:	e7ee      	b.n	801e3e8 <__libc_init_array+0xc>
 801e40a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e40e:	4798      	blx	r3
 801e410:	3601      	adds	r6, #1
 801e412:	e7f2      	b.n	801e3fa <__libc_init_array+0x1e>
 801e414:	0802586c 	.word	0x0802586c
 801e418:	0802586c 	.word	0x0802586c
 801e41c:	0802586c 	.word	0x0802586c
 801e420:	08025880 	.word	0x08025880

0801e424 <malloc>:
 801e424:	4b02      	ldr	r3, [pc, #8]	; (801e430 <malloc+0xc>)
 801e426:	4601      	mov	r1, r0
 801e428:	6818      	ldr	r0, [r3, #0]
 801e42a:	f000 b871 	b.w	801e510 <_malloc_r>
 801e42e:	bf00      	nop
 801e430:	20000090 	.word	0x20000090

0801e434 <free>:
 801e434:	4b02      	ldr	r3, [pc, #8]	; (801e440 <free+0xc>)
 801e436:	4601      	mov	r1, r0
 801e438:	6818      	ldr	r0, [r3, #0]
 801e43a:	f000 b819 	b.w	801e470 <_free_r>
 801e43e:	bf00      	nop
 801e440:	20000090 	.word	0x20000090

0801e444 <memcpy>:
 801e444:	440a      	add	r2, r1
 801e446:	4291      	cmp	r1, r2
 801e448:	f100 33ff 	add.w	r3, r0, #4294967295
 801e44c:	d100      	bne.n	801e450 <memcpy+0xc>
 801e44e:	4770      	bx	lr
 801e450:	b510      	push	{r4, lr}
 801e452:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e456:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e45a:	4291      	cmp	r1, r2
 801e45c:	d1f9      	bne.n	801e452 <memcpy+0xe>
 801e45e:	bd10      	pop	{r4, pc}

0801e460 <memset>:
 801e460:	4402      	add	r2, r0
 801e462:	4603      	mov	r3, r0
 801e464:	4293      	cmp	r3, r2
 801e466:	d100      	bne.n	801e46a <memset+0xa>
 801e468:	4770      	bx	lr
 801e46a:	f803 1b01 	strb.w	r1, [r3], #1
 801e46e:	e7f9      	b.n	801e464 <memset+0x4>

0801e470 <_free_r>:
 801e470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e472:	2900      	cmp	r1, #0
 801e474:	d048      	beq.n	801e508 <_free_r+0x98>
 801e476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e47a:	9001      	str	r0, [sp, #4]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	f1a1 0404 	sub.w	r4, r1, #4
 801e482:	bfb8      	it	lt
 801e484:	18e4      	addlt	r4, r4, r3
 801e486:	f000 ff21 	bl	801f2cc <__malloc_lock>
 801e48a:	4a20      	ldr	r2, [pc, #128]	; (801e50c <_free_r+0x9c>)
 801e48c:	9801      	ldr	r0, [sp, #4]
 801e48e:	6813      	ldr	r3, [r2, #0]
 801e490:	4615      	mov	r5, r2
 801e492:	b933      	cbnz	r3, 801e4a2 <_free_r+0x32>
 801e494:	6063      	str	r3, [r4, #4]
 801e496:	6014      	str	r4, [r2, #0]
 801e498:	b003      	add	sp, #12
 801e49a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e49e:	f000 bf1b 	b.w	801f2d8 <__malloc_unlock>
 801e4a2:	42a3      	cmp	r3, r4
 801e4a4:	d90b      	bls.n	801e4be <_free_r+0x4e>
 801e4a6:	6821      	ldr	r1, [r4, #0]
 801e4a8:	1862      	adds	r2, r4, r1
 801e4aa:	4293      	cmp	r3, r2
 801e4ac:	bf04      	itt	eq
 801e4ae:	681a      	ldreq	r2, [r3, #0]
 801e4b0:	685b      	ldreq	r3, [r3, #4]
 801e4b2:	6063      	str	r3, [r4, #4]
 801e4b4:	bf04      	itt	eq
 801e4b6:	1852      	addeq	r2, r2, r1
 801e4b8:	6022      	streq	r2, [r4, #0]
 801e4ba:	602c      	str	r4, [r5, #0]
 801e4bc:	e7ec      	b.n	801e498 <_free_r+0x28>
 801e4be:	461a      	mov	r2, r3
 801e4c0:	685b      	ldr	r3, [r3, #4]
 801e4c2:	b10b      	cbz	r3, 801e4c8 <_free_r+0x58>
 801e4c4:	42a3      	cmp	r3, r4
 801e4c6:	d9fa      	bls.n	801e4be <_free_r+0x4e>
 801e4c8:	6811      	ldr	r1, [r2, #0]
 801e4ca:	1855      	adds	r5, r2, r1
 801e4cc:	42a5      	cmp	r5, r4
 801e4ce:	d10b      	bne.n	801e4e8 <_free_r+0x78>
 801e4d0:	6824      	ldr	r4, [r4, #0]
 801e4d2:	4421      	add	r1, r4
 801e4d4:	1854      	adds	r4, r2, r1
 801e4d6:	42a3      	cmp	r3, r4
 801e4d8:	6011      	str	r1, [r2, #0]
 801e4da:	d1dd      	bne.n	801e498 <_free_r+0x28>
 801e4dc:	681c      	ldr	r4, [r3, #0]
 801e4de:	685b      	ldr	r3, [r3, #4]
 801e4e0:	6053      	str	r3, [r2, #4]
 801e4e2:	4421      	add	r1, r4
 801e4e4:	6011      	str	r1, [r2, #0]
 801e4e6:	e7d7      	b.n	801e498 <_free_r+0x28>
 801e4e8:	d902      	bls.n	801e4f0 <_free_r+0x80>
 801e4ea:	230c      	movs	r3, #12
 801e4ec:	6003      	str	r3, [r0, #0]
 801e4ee:	e7d3      	b.n	801e498 <_free_r+0x28>
 801e4f0:	6825      	ldr	r5, [r4, #0]
 801e4f2:	1961      	adds	r1, r4, r5
 801e4f4:	428b      	cmp	r3, r1
 801e4f6:	bf04      	itt	eq
 801e4f8:	6819      	ldreq	r1, [r3, #0]
 801e4fa:	685b      	ldreq	r3, [r3, #4]
 801e4fc:	6063      	str	r3, [r4, #4]
 801e4fe:	bf04      	itt	eq
 801e500:	1949      	addeq	r1, r1, r5
 801e502:	6021      	streq	r1, [r4, #0]
 801e504:	6054      	str	r4, [r2, #4]
 801e506:	e7c7      	b.n	801e498 <_free_r+0x28>
 801e508:	b003      	add	sp, #12
 801e50a:	bd30      	pop	{r4, r5, pc}
 801e50c:	20009cf0 	.word	0x20009cf0

0801e510 <_malloc_r>:
 801e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e512:	1ccd      	adds	r5, r1, #3
 801e514:	f025 0503 	bic.w	r5, r5, #3
 801e518:	3508      	adds	r5, #8
 801e51a:	2d0c      	cmp	r5, #12
 801e51c:	bf38      	it	cc
 801e51e:	250c      	movcc	r5, #12
 801e520:	2d00      	cmp	r5, #0
 801e522:	4606      	mov	r6, r0
 801e524:	db01      	blt.n	801e52a <_malloc_r+0x1a>
 801e526:	42a9      	cmp	r1, r5
 801e528:	d903      	bls.n	801e532 <_malloc_r+0x22>
 801e52a:	230c      	movs	r3, #12
 801e52c:	6033      	str	r3, [r6, #0]
 801e52e:	2000      	movs	r0, #0
 801e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e532:	f000 fecb 	bl	801f2cc <__malloc_lock>
 801e536:	4921      	ldr	r1, [pc, #132]	; (801e5bc <_malloc_r+0xac>)
 801e538:	680a      	ldr	r2, [r1, #0]
 801e53a:	4614      	mov	r4, r2
 801e53c:	b99c      	cbnz	r4, 801e566 <_malloc_r+0x56>
 801e53e:	4f20      	ldr	r7, [pc, #128]	; (801e5c0 <_malloc_r+0xb0>)
 801e540:	683b      	ldr	r3, [r7, #0]
 801e542:	b923      	cbnz	r3, 801e54e <_malloc_r+0x3e>
 801e544:	4621      	mov	r1, r4
 801e546:	4630      	mov	r0, r6
 801e548:	f000 fb2a 	bl	801eba0 <_sbrk_r>
 801e54c:	6038      	str	r0, [r7, #0]
 801e54e:	4629      	mov	r1, r5
 801e550:	4630      	mov	r0, r6
 801e552:	f000 fb25 	bl	801eba0 <_sbrk_r>
 801e556:	1c43      	adds	r3, r0, #1
 801e558:	d123      	bne.n	801e5a2 <_malloc_r+0x92>
 801e55a:	230c      	movs	r3, #12
 801e55c:	6033      	str	r3, [r6, #0]
 801e55e:	4630      	mov	r0, r6
 801e560:	f000 feba 	bl	801f2d8 <__malloc_unlock>
 801e564:	e7e3      	b.n	801e52e <_malloc_r+0x1e>
 801e566:	6823      	ldr	r3, [r4, #0]
 801e568:	1b5b      	subs	r3, r3, r5
 801e56a:	d417      	bmi.n	801e59c <_malloc_r+0x8c>
 801e56c:	2b0b      	cmp	r3, #11
 801e56e:	d903      	bls.n	801e578 <_malloc_r+0x68>
 801e570:	6023      	str	r3, [r4, #0]
 801e572:	441c      	add	r4, r3
 801e574:	6025      	str	r5, [r4, #0]
 801e576:	e004      	b.n	801e582 <_malloc_r+0x72>
 801e578:	6863      	ldr	r3, [r4, #4]
 801e57a:	42a2      	cmp	r2, r4
 801e57c:	bf0c      	ite	eq
 801e57e:	600b      	streq	r3, [r1, #0]
 801e580:	6053      	strne	r3, [r2, #4]
 801e582:	4630      	mov	r0, r6
 801e584:	f000 fea8 	bl	801f2d8 <__malloc_unlock>
 801e588:	f104 000b 	add.w	r0, r4, #11
 801e58c:	1d23      	adds	r3, r4, #4
 801e58e:	f020 0007 	bic.w	r0, r0, #7
 801e592:	1ac2      	subs	r2, r0, r3
 801e594:	d0cc      	beq.n	801e530 <_malloc_r+0x20>
 801e596:	1a1b      	subs	r3, r3, r0
 801e598:	50a3      	str	r3, [r4, r2]
 801e59a:	e7c9      	b.n	801e530 <_malloc_r+0x20>
 801e59c:	4622      	mov	r2, r4
 801e59e:	6864      	ldr	r4, [r4, #4]
 801e5a0:	e7cc      	b.n	801e53c <_malloc_r+0x2c>
 801e5a2:	1cc4      	adds	r4, r0, #3
 801e5a4:	f024 0403 	bic.w	r4, r4, #3
 801e5a8:	42a0      	cmp	r0, r4
 801e5aa:	d0e3      	beq.n	801e574 <_malloc_r+0x64>
 801e5ac:	1a21      	subs	r1, r4, r0
 801e5ae:	4630      	mov	r0, r6
 801e5b0:	f000 faf6 	bl	801eba0 <_sbrk_r>
 801e5b4:	3001      	adds	r0, #1
 801e5b6:	d1dd      	bne.n	801e574 <_malloc_r+0x64>
 801e5b8:	e7cf      	b.n	801e55a <_malloc_r+0x4a>
 801e5ba:	bf00      	nop
 801e5bc:	20009cf0 	.word	0x20009cf0
 801e5c0:	20009cf4 	.word	0x20009cf4

0801e5c4 <__sfputc_r>:
 801e5c4:	6893      	ldr	r3, [r2, #8]
 801e5c6:	3b01      	subs	r3, #1
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	b410      	push	{r4}
 801e5cc:	6093      	str	r3, [r2, #8]
 801e5ce:	da08      	bge.n	801e5e2 <__sfputc_r+0x1e>
 801e5d0:	6994      	ldr	r4, [r2, #24]
 801e5d2:	42a3      	cmp	r3, r4
 801e5d4:	db01      	blt.n	801e5da <__sfputc_r+0x16>
 801e5d6:	290a      	cmp	r1, #10
 801e5d8:	d103      	bne.n	801e5e2 <__sfputc_r+0x1e>
 801e5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e5de:	f000 bb33 	b.w	801ec48 <__swbuf_r>
 801e5e2:	6813      	ldr	r3, [r2, #0]
 801e5e4:	1c58      	adds	r0, r3, #1
 801e5e6:	6010      	str	r0, [r2, #0]
 801e5e8:	7019      	strb	r1, [r3, #0]
 801e5ea:	4608      	mov	r0, r1
 801e5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e5f0:	4770      	bx	lr

0801e5f2 <__sfputs_r>:
 801e5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5f4:	4606      	mov	r6, r0
 801e5f6:	460f      	mov	r7, r1
 801e5f8:	4614      	mov	r4, r2
 801e5fa:	18d5      	adds	r5, r2, r3
 801e5fc:	42ac      	cmp	r4, r5
 801e5fe:	d101      	bne.n	801e604 <__sfputs_r+0x12>
 801e600:	2000      	movs	r0, #0
 801e602:	e007      	b.n	801e614 <__sfputs_r+0x22>
 801e604:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e608:	463a      	mov	r2, r7
 801e60a:	4630      	mov	r0, r6
 801e60c:	f7ff ffda 	bl	801e5c4 <__sfputc_r>
 801e610:	1c43      	adds	r3, r0, #1
 801e612:	d1f3      	bne.n	801e5fc <__sfputs_r+0xa>
 801e614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e618 <_vfiprintf_r>:
 801e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e61c:	460d      	mov	r5, r1
 801e61e:	b09d      	sub	sp, #116	; 0x74
 801e620:	4614      	mov	r4, r2
 801e622:	4698      	mov	r8, r3
 801e624:	4606      	mov	r6, r0
 801e626:	b118      	cbz	r0, 801e630 <_vfiprintf_r+0x18>
 801e628:	6983      	ldr	r3, [r0, #24]
 801e62a:	b90b      	cbnz	r3, 801e630 <_vfiprintf_r+0x18>
 801e62c:	f000 fd48 	bl	801f0c0 <__sinit>
 801e630:	4b89      	ldr	r3, [pc, #548]	; (801e858 <_vfiprintf_r+0x240>)
 801e632:	429d      	cmp	r5, r3
 801e634:	d11b      	bne.n	801e66e <_vfiprintf_r+0x56>
 801e636:	6875      	ldr	r5, [r6, #4]
 801e638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e63a:	07d9      	lsls	r1, r3, #31
 801e63c:	d405      	bmi.n	801e64a <_vfiprintf_r+0x32>
 801e63e:	89ab      	ldrh	r3, [r5, #12]
 801e640:	059a      	lsls	r2, r3, #22
 801e642:	d402      	bmi.n	801e64a <_vfiprintf_r+0x32>
 801e644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e646:	f000 fdd9 	bl	801f1fc <__retarget_lock_acquire_recursive>
 801e64a:	89ab      	ldrh	r3, [r5, #12]
 801e64c:	071b      	lsls	r3, r3, #28
 801e64e:	d501      	bpl.n	801e654 <_vfiprintf_r+0x3c>
 801e650:	692b      	ldr	r3, [r5, #16]
 801e652:	b9eb      	cbnz	r3, 801e690 <_vfiprintf_r+0x78>
 801e654:	4629      	mov	r1, r5
 801e656:	4630      	mov	r0, r6
 801e658:	f000 fb48 	bl	801ecec <__swsetup_r>
 801e65c:	b1c0      	cbz	r0, 801e690 <_vfiprintf_r+0x78>
 801e65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e660:	07dc      	lsls	r4, r3, #31
 801e662:	d50e      	bpl.n	801e682 <_vfiprintf_r+0x6a>
 801e664:	f04f 30ff 	mov.w	r0, #4294967295
 801e668:	b01d      	add	sp, #116	; 0x74
 801e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e66e:	4b7b      	ldr	r3, [pc, #492]	; (801e85c <_vfiprintf_r+0x244>)
 801e670:	429d      	cmp	r5, r3
 801e672:	d101      	bne.n	801e678 <_vfiprintf_r+0x60>
 801e674:	68b5      	ldr	r5, [r6, #8]
 801e676:	e7df      	b.n	801e638 <_vfiprintf_r+0x20>
 801e678:	4b79      	ldr	r3, [pc, #484]	; (801e860 <_vfiprintf_r+0x248>)
 801e67a:	429d      	cmp	r5, r3
 801e67c:	bf08      	it	eq
 801e67e:	68f5      	ldreq	r5, [r6, #12]
 801e680:	e7da      	b.n	801e638 <_vfiprintf_r+0x20>
 801e682:	89ab      	ldrh	r3, [r5, #12]
 801e684:	0598      	lsls	r0, r3, #22
 801e686:	d4ed      	bmi.n	801e664 <_vfiprintf_r+0x4c>
 801e688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e68a:	f000 fdb9 	bl	801f200 <__retarget_lock_release_recursive>
 801e68e:	e7e9      	b.n	801e664 <_vfiprintf_r+0x4c>
 801e690:	2300      	movs	r3, #0
 801e692:	9309      	str	r3, [sp, #36]	; 0x24
 801e694:	2320      	movs	r3, #32
 801e696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e69a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e69e:	2330      	movs	r3, #48	; 0x30
 801e6a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e864 <_vfiprintf_r+0x24c>
 801e6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6a8:	f04f 0901 	mov.w	r9, #1
 801e6ac:	4623      	mov	r3, r4
 801e6ae:	469a      	mov	sl, r3
 801e6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6b4:	b10a      	cbz	r2, 801e6ba <_vfiprintf_r+0xa2>
 801e6b6:	2a25      	cmp	r2, #37	; 0x25
 801e6b8:	d1f9      	bne.n	801e6ae <_vfiprintf_r+0x96>
 801e6ba:	ebba 0b04 	subs.w	fp, sl, r4
 801e6be:	d00b      	beq.n	801e6d8 <_vfiprintf_r+0xc0>
 801e6c0:	465b      	mov	r3, fp
 801e6c2:	4622      	mov	r2, r4
 801e6c4:	4629      	mov	r1, r5
 801e6c6:	4630      	mov	r0, r6
 801e6c8:	f7ff ff93 	bl	801e5f2 <__sfputs_r>
 801e6cc:	3001      	adds	r0, #1
 801e6ce:	f000 80aa 	beq.w	801e826 <_vfiprintf_r+0x20e>
 801e6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6d4:	445a      	add	r2, fp
 801e6d6:	9209      	str	r2, [sp, #36]	; 0x24
 801e6d8:	f89a 3000 	ldrb.w	r3, [sl]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	f000 80a2 	beq.w	801e826 <_vfiprintf_r+0x20e>
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	f04f 32ff 	mov.w	r2, #4294967295
 801e6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6ec:	f10a 0a01 	add.w	sl, sl, #1
 801e6f0:	9304      	str	r3, [sp, #16]
 801e6f2:	9307      	str	r3, [sp, #28]
 801e6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e6f8:	931a      	str	r3, [sp, #104]	; 0x68
 801e6fa:	4654      	mov	r4, sl
 801e6fc:	2205      	movs	r2, #5
 801e6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e702:	4858      	ldr	r0, [pc, #352]	; (801e864 <_vfiprintf_r+0x24c>)
 801e704:	f7e1 fd84 	bl	8000210 <memchr>
 801e708:	9a04      	ldr	r2, [sp, #16]
 801e70a:	b9d8      	cbnz	r0, 801e744 <_vfiprintf_r+0x12c>
 801e70c:	06d1      	lsls	r1, r2, #27
 801e70e:	bf44      	itt	mi
 801e710:	2320      	movmi	r3, #32
 801e712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e716:	0713      	lsls	r3, r2, #28
 801e718:	bf44      	itt	mi
 801e71a:	232b      	movmi	r3, #43	; 0x2b
 801e71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e720:	f89a 3000 	ldrb.w	r3, [sl]
 801e724:	2b2a      	cmp	r3, #42	; 0x2a
 801e726:	d015      	beq.n	801e754 <_vfiprintf_r+0x13c>
 801e728:	9a07      	ldr	r2, [sp, #28]
 801e72a:	4654      	mov	r4, sl
 801e72c:	2000      	movs	r0, #0
 801e72e:	f04f 0c0a 	mov.w	ip, #10
 801e732:	4621      	mov	r1, r4
 801e734:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e738:	3b30      	subs	r3, #48	; 0x30
 801e73a:	2b09      	cmp	r3, #9
 801e73c:	d94e      	bls.n	801e7dc <_vfiprintf_r+0x1c4>
 801e73e:	b1b0      	cbz	r0, 801e76e <_vfiprintf_r+0x156>
 801e740:	9207      	str	r2, [sp, #28]
 801e742:	e014      	b.n	801e76e <_vfiprintf_r+0x156>
 801e744:	eba0 0308 	sub.w	r3, r0, r8
 801e748:	fa09 f303 	lsl.w	r3, r9, r3
 801e74c:	4313      	orrs	r3, r2
 801e74e:	9304      	str	r3, [sp, #16]
 801e750:	46a2      	mov	sl, r4
 801e752:	e7d2      	b.n	801e6fa <_vfiprintf_r+0xe2>
 801e754:	9b03      	ldr	r3, [sp, #12]
 801e756:	1d19      	adds	r1, r3, #4
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	9103      	str	r1, [sp, #12]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	bfbb      	ittet	lt
 801e760:	425b      	neglt	r3, r3
 801e762:	f042 0202 	orrlt.w	r2, r2, #2
 801e766:	9307      	strge	r3, [sp, #28]
 801e768:	9307      	strlt	r3, [sp, #28]
 801e76a:	bfb8      	it	lt
 801e76c:	9204      	strlt	r2, [sp, #16]
 801e76e:	7823      	ldrb	r3, [r4, #0]
 801e770:	2b2e      	cmp	r3, #46	; 0x2e
 801e772:	d10c      	bne.n	801e78e <_vfiprintf_r+0x176>
 801e774:	7863      	ldrb	r3, [r4, #1]
 801e776:	2b2a      	cmp	r3, #42	; 0x2a
 801e778:	d135      	bne.n	801e7e6 <_vfiprintf_r+0x1ce>
 801e77a:	9b03      	ldr	r3, [sp, #12]
 801e77c:	1d1a      	adds	r2, r3, #4
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	9203      	str	r2, [sp, #12]
 801e782:	2b00      	cmp	r3, #0
 801e784:	bfb8      	it	lt
 801e786:	f04f 33ff 	movlt.w	r3, #4294967295
 801e78a:	3402      	adds	r4, #2
 801e78c:	9305      	str	r3, [sp, #20]
 801e78e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e874 <_vfiprintf_r+0x25c>
 801e792:	7821      	ldrb	r1, [r4, #0]
 801e794:	2203      	movs	r2, #3
 801e796:	4650      	mov	r0, sl
 801e798:	f7e1 fd3a 	bl	8000210 <memchr>
 801e79c:	b140      	cbz	r0, 801e7b0 <_vfiprintf_r+0x198>
 801e79e:	2340      	movs	r3, #64	; 0x40
 801e7a0:	eba0 000a 	sub.w	r0, r0, sl
 801e7a4:	fa03 f000 	lsl.w	r0, r3, r0
 801e7a8:	9b04      	ldr	r3, [sp, #16]
 801e7aa:	4303      	orrs	r3, r0
 801e7ac:	3401      	adds	r4, #1
 801e7ae:	9304      	str	r3, [sp, #16]
 801e7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7b4:	482c      	ldr	r0, [pc, #176]	; (801e868 <_vfiprintf_r+0x250>)
 801e7b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e7ba:	2206      	movs	r2, #6
 801e7bc:	f7e1 fd28 	bl	8000210 <memchr>
 801e7c0:	2800      	cmp	r0, #0
 801e7c2:	d03f      	beq.n	801e844 <_vfiprintf_r+0x22c>
 801e7c4:	4b29      	ldr	r3, [pc, #164]	; (801e86c <_vfiprintf_r+0x254>)
 801e7c6:	bb1b      	cbnz	r3, 801e810 <_vfiprintf_r+0x1f8>
 801e7c8:	9b03      	ldr	r3, [sp, #12]
 801e7ca:	3307      	adds	r3, #7
 801e7cc:	f023 0307 	bic.w	r3, r3, #7
 801e7d0:	3308      	adds	r3, #8
 801e7d2:	9303      	str	r3, [sp, #12]
 801e7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7d6:	443b      	add	r3, r7
 801e7d8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7da:	e767      	b.n	801e6ac <_vfiprintf_r+0x94>
 801e7dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7e0:	460c      	mov	r4, r1
 801e7e2:	2001      	movs	r0, #1
 801e7e4:	e7a5      	b.n	801e732 <_vfiprintf_r+0x11a>
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	3401      	adds	r4, #1
 801e7ea:	9305      	str	r3, [sp, #20]
 801e7ec:	4619      	mov	r1, r3
 801e7ee:	f04f 0c0a 	mov.w	ip, #10
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7f8:	3a30      	subs	r2, #48	; 0x30
 801e7fa:	2a09      	cmp	r2, #9
 801e7fc:	d903      	bls.n	801e806 <_vfiprintf_r+0x1ee>
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d0c5      	beq.n	801e78e <_vfiprintf_r+0x176>
 801e802:	9105      	str	r1, [sp, #20]
 801e804:	e7c3      	b.n	801e78e <_vfiprintf_r+0x176>
 801e806:	fb0c 2101 	mla	r1, ip, r1, r2
 801e80a:	4604      	mov	r4, r0
 801e80c:	2301      	movs	r3, #1
 801e80e:	e7f0      	b.n	801e7f2 <_vfiprintf_r+0x1da>
 801e810:	ab03      	add	r3, sp, #12
 801e812:	9300      	str	r3, [sp, #0]
 801e814:	462a      	mov	r2, r5
 801e816:	4b16      	ldr	r3, [pc, #88]	; (801e870 <_vfiprintf_r+0x258>)
 801e818:	a904      	add	r1, sp, #16
 801e81a:	4630      	mov	r0, r6
 801e81c:	f3af 8000 	nop.w
 801e820:	4607      	mov	r7, r0
 801e822:	1c78      	adds	r0, r7, #1
 801e824:	d1d6      	bne.n	801e7d4 <_vfiprintf_r+0x1bc>
 801e826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e828:	07d9      	lsls	r1, r3, #31
 801e82a:	d405      	bmi.n	801e838 <_vfiprintf_r+0x220>
 801e82c:	89ab      	ldrh	r3, [r5, #12]
 801e82e:	059a      	lsls	r2, r3, #22
 801e830:	d402      	bmi.n	801e838 <_vfiprintf_r+0x220>
 801e832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e834:	f000 fce4 	bl	801f200 <__retarget_lock_release_recursive>
 801e838:	89ab      	ldrh	r3, [r5, #12]
 801e83a:	065b      	lsls	r3, r3, #25
 801e83c:	f53f af12 	bmi.w	801e664 <_vfiprintf_r+0x4c>
 801e840:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e842:	e711      	b.n	801e668 <_vfiprintf_r+0x50>
 801e844:	ab03      	add	r3, sp, #12
 801e846:	9300      	str	r3, [sp, #0]
 801e848:	462a      	mov	r2, r5
 801e84a:	4b09      	ldr	r3, [pc, #36]	; (801e870 <_vfiprintf_r+0x258>)
 801e84c:	a904      	add	r1, sp, #16
 801e84e:	4630      	mov	r0, r6
 801e850:	f000 f880 	bl	801e954 <_printf_i>
 801e854:	e7e4      	b.n	801e820 <_vfiprintf_r+0x208>
 801e856:	bf00      	nop
 801e858:	08023618 	.word	0x08023618
 801e85c:	08023638 	.word	0x08023638
 801e860:	080235f8 	.word	0x080235f8
 801e864:	080235c0 	.word	0x080235c0
 801e868:	080235ca 	.word	0x080235ca
 801e86c:	00000000 	.word	0x00000000
 801e870:	0801e5f3 	.word	0x0801e5f3
 801e874:	080235c6 	.word	0x080235c6

0801e878 <_printf_common>:
 801e878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e87c:	4616      	mov	r6, r2
 801e87e:	4699      	mov	r9, r3
 801e880:	688a      	ldr	r2, [r1, #8]
 801e882:	690b      	ldr	r3, [r1, #16]
 801e884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e888:	4293      	cmp	r3, r2
 801e88a:	bfb8      	it	lt
 801e88c:	4613      	movlt	r3, r2
 801e88e:	6033      	str	r3, [r6, #0]
 801e890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e894:	4607      	mov	r7, r0
 801e896:	460c      	mov	r4, r1
 801e898:	b10a      	cbz	r2, 801e89e <_printf_common+0x26>
 801e89a:	3301      	adds	r3, #1
 801e89c:	6033      	str	r3, [r6, #0]
 801e89e:	6823      	ldr	r3, [r4, #0]
 801e8a0:	0699      	lsls	r1, r3, #26
 801e8a2:	bf42      	ittt	mi
 801e8a4:	6833      	ldrmi	r3, [r6, #0]
 801e8a6:	3302      	addmi	r3, #2
 801e8a8:	6033      	strmi	r3, [r6, #0]
 801e8aa:	6825      	ldr	r5, [r4, #0]
 801e8ac:	f015 0506 	ands.w	r5, r5, #6
 801e8b0:	d106      	bne.n	801e8c0 <_printf_common+0x48>
 801e8b2:	f104 0a19 	add.w	sl, r4, #25
 801e8b6:	68e3      	ldr	r3, [r4, #12]
 801e8b8:	6832      	ldr	r2, [r6, #0]
 801e8ba:	1a9b      	subs	r3, r3, r2
 801e8bc:	42ab      	cmp	r3, r5
 801e8be:	dc26      	bgt.n	801e90e <_printf_common+0x96>
 801e8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e8c4:	1e13      	subs	r3, r2, #0
 801e8c6:	6822      	ldr	r2, [r4, #0]
 801e8c8:	bf18      	it	ne
 801e8ca:	2301      	movne	r3, #1
 801e8cc:	0692      	lsls	r2, r2, #26
 801e8ce:	d42b      	bmi.n	801e928 <_printf_common+0xb0>
 801e8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e8d4:	4649      	mov	r1, r9
 801e8d6:	4638      	mov	r0, r7
 801e8d8:	47c0      	blx	r8
 801e8da:	3001      	adds	r0, #1
 801e8dc:	d01e      	beq.n	801e91c <_printf_common+0xa4>
 801e8de:	6823      	ldr	r3, [r4, #0]
 801e8e0:	68e5      	ldr	r5, [r4, #12]
 801e8e2:	6832      	ldr	r2, [r6, #0]
 801e8e4:	f003 0306 	and.w	r3, r3, #6
 801e8e8:	2b04      	cmp	r3, #4
 801e8ea:	bf08      	it	eq
 801e8ec:	1aad      	subeq	r5, r5, r2
 801e8ee:	68a3      	ldr	r3, [r4, #8]
 801e8f0:	6922      	ldr	r2, [r4, #16]
 801e8f2:	bf0c      	ite	eq
 801e8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e8f8:	2500      	movne	r5, #0
 801e8fa:	4293      	cmp	r3, r2
 801e8fc:	bfc4      	itt	gt
 801e8fe:	1a9b      	subgt	r3, r3, r2
 801e900:	18ed      	addgt	r5, r5, r3
 801e902:	2600      	movs	r6, #0
 801e904:	341a      	adds	r4, #26
 801e906:	42b5      	cmp	r5, r6
 801e908:	d11a      	bne.n	801e940 <_printf_common+0xc8>
 801e90a:	2000      	movs	r0, #0
 801e90c:	e008      	b.n	801e920 <_printf_common+0xa8>
 801e90e:	2301      	movs	r3, #1
 801e910:	4652      	mov	r2, sl
 801e912:	4649      	mov	r1, r9
 801e914:	4638      	mov	r0, r7
 801e916:	47c0      	blx	r8
 801e918:	3001      	adds	r0, #1
 801e91a:	d103      	bne.n	801e924 <_printf_common+0xac>
 801e91c:	f04f 30ff 	mov.w	r0, #4294967295
 801e920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e924:	3501      	adds	r5, #1
 801e926:	e7c6      	b.n	801e8b6 <_printf_common+0x3e>
 801e928:	18e1      	adds	r1, r4, r3
 801e92a:	1c5a      	adds	r2, r3, #1
 801e92c:	2030      	movs	r0, #48	; 0x30
 801e92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e932:	4422      	add	r2, r4
 801e934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e93c:	3302      	adds	r3, #2
 801e93e:	e7c7      	b.n	801e8d0 <_printf_common+0x58>
 801e940:	2301      	movs	r3, #1
 801e942:	4622      	mov	r2, r4
 801e944:	4649      	mov	r1, r9
 801e946:	4638      	mov	r0, r7
 801e948:	47c0      	blx	r8
 801e94a:	3001      	adds	r0, #1
 801e94c:	d0e6      	beq.n	801e91c <_printf_common+0xa4>
 801e94e:	3601      	adds	r6, #1
 801e950:	e7d9      	b.n	801e906 <_printf_common+0x8e>
	...

0801e954 <_printf_i>:
 801e954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e958:	460c      	mov	r4, r1
 801e95a:	4691      	mov	r9, r2
 801e95c:	7e27      	ldrb	r7, [r4, #24]
 801e95e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e960:	2f78      	cmp	r7, #120	; 0x78
 801e962:	4680      	mov	r8, r0
 801e964:	469a      	mov	sl, r3
 801e966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e96a:	d807      	bhi.n	801e97c <_printf_i+0x28>
 801e96c:	2f62      	cmp	r7, #98	; 0x62
 801e96e:	d80a      	bhi.n	801e986 <_printf_i+0x32>
 801e970:	2f00      	cmp	r7, #0
 801e972:	f000 80d8 	beq.w	801eb26 <_printf_i+0x1d2>
 801e976:	2f58      	cmp	r7, #88	; 0x58
 801e978:	f000 80a3 	beq.w	801eac2 <_printf_i+0x16e>
 801e97c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e984:	e03a      	b.n	801e9fc <_printf_i+0xa8>
 801e986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e98a:	2b15      	cmp	r3, #21
 801e98c:	d8f6      	bhi.n	801e97c <_printf_i+0x28>
 801e98e:	a001      	add	r0, pc, #4	; (adr r0, 801e994 <_printf_i+0x40>)
 801e990:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e994:	0801e9ed 	.word	0x0801e9ed
 801e998:	0801ea01 	.word	0x0801ea01
 801e99c:	0801e97d 	.word	0x0801e97d
 801e9a0:	0801e97d 	.word	0x0801e97d
 801e9a4:	0801e97d 	.word	0x0801e97d
 801e9a8:	0801e97d 	.word	0x0801e97d
 801e9ac:	0801ea01 	.word	0x0801ea01
 801e9b0:	0801e97d 	.word	0x0801e97d
 801e9b4:	0801e97d 	.word	0x0801e97d
 801e9b8:	0801e97d 	.word	0x0801e97d
 801e9bc:	0801e97d 	.word	0x0801e97d
 801e9c0:	0801eb0d 	.word	0x0801eb0d
 801e9c4:	0801ea31 	.word	0x0801ea31
 801e9c8:	0801eaef 	.word	0x0801eaef
 801e9cc:	0801e97d 	.word	0x0801e97d
 801e9d0:	0801e97d 	.word	0x0801e97d
 801e9d4:	0801eb2f 	.word	0x0801eb2f
 801e9d8:	0801e97d 	.word	0x0801e97d
 801e9dc:	0801ea31 	.word	0x0801ea31
 801e9e0:	0801e97d 	.word	0x0801e97d
 801e9e4:	0801e97d 	.word	0x0801e97d
 801e9e8:	0801eaf7 	.word	0x0801eaf7
 801e9ec:	680b      	ldr	r3, [r1, #0]
 801e9ee:	1d1a      	adds	r2, r3, #4
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	600a      	str	r2, [r1, #0]
 801e9f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e9fc:	2301      	movs	r3, #1
 801e9fe:	e0a3      	b.n	801eb48 <_printf_i+0x1f4>
 801ea00:	6825      	ldr	r5, [r4, #0]
 801ea02:	6808      	ldr	r0, [r1, #0]
 801ea04:	062e      	lsls	r6, r5, #24
 801ea06:	f100 0304 	add.w	r3, r0, #4
 801ea0a:	d50a      	bpl.n	801ea22 <_printf_i+0xce>
 801ea0c:	6805      	ldr	r5, [r0, #0]
 801ea0e:	600b      	str	r3, [r1, #0]
 801ea10:	2d00      	cmp	r5, #0
 801ea12:	da03      	bge.n	801ea1c <_printf_i+0xc8>
 801ea14:	232d      	movs	r3, #45	; 0x2d
 801ea16:	426d      	negs	r5, r5
 801ea18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea1c:	485e      	ldr	r0, [pc, #376]	; (801eb98 <_printf_i+0x244>)
 801ea1e:	230a      	movs	r3, #10
 801ea20:	e019      	b.n	801ea56 <_printf_i+0x102>
 801ea22:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ea26:	6805      	ldr	r5, [r0, #0]
 801ea28:	600b      	str	r3, [r1, #0]
 801ea2a:	bf18      	it	ne
 801ea2c:	b22d      	sxthne	r5, r5
 801ea2e:	e7ef      	b.n	801ea10 <_printf_i+0xbc>
 801ea30:	680b      	ldr	r3, [r1, #0]
 801ea32:	6825      	ldr	r5, [r4, #0]
 801ea34:	1d18      	adds	r0, r3, #4
 801ea36:	6008      	str	r0, [r1, #0]
 801ea38:	0628      	lsls	r0, r5, #24
 801ea3a:	d501      	bpl.n	801ea40 <_printf_i+0xec>
 801ea3c:	681d      	ldr	r5, [r3, #0]
 801ea3e:	e002      	b.n	801ea46 <_printf_i+0xf2>
 801ea40:	0669      	lsls	r1, r5, #25
 801ea42:	d5fb      	bpl.n	801ea3c <_printf_i+0xe8>
 801ea44:	881d      	ldrh	r5, [r3, #0]
 801ea46:	4854      	ldr	r0, [pc, #336]	; (801eb98 <_printf_i+0x244>)
 801ea48:	2f6f      	cmp	r7, #111	; 0x6f
 801ea4a:	bf0c      	ite	eq
 801ea4c:	2308      	moveq	r3, #8
 801ea4e:	230a      	movne	r3, #10
 801ea50:	2100      	movs	r1, #0
 801ea52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea56:	6866      	ldr	r6, [r4, #4]
 801ea58:	60a6      	str	r6, [r4, #8]
 801ea5a:	2e00      	cmp	r6, #0
 801ea5c:	bfa2      	ittt	ge
 801ea5e:	6821      	ldrge	r1, [r4, #0]
 801ea60:	f021 0104 	bicge.w	r1, r1, #4
 801ea64:	6021      	strge	r1, [r4, #0]
 801ea66:	b90d      	cbnz	r5, 801ea6c <_printf_i+0x118>
 801ea68:	2e00      	cmp	r6, #0
 801ea6a:	d04d      	beq.n	801eb08 <_printf_i+0x1b4>
 801ea6c:	4616      	mov	r6, r2
 801ea6e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ea72:	fb03 5711 	mls	r7, r3, r1, r5
 801ea76:	5dc7      	ldrb	r7, [r0, r7]
 801ea78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ea7c:	462f      	mov	r7, r5
 801ea7e:	42bb      	cmp	r3, r7
 801ea80:	460d      	mov	r5, r1
 801ea82:	d9f4      	bls.n	801ea6e <_printf_i+0x11a>
 801ea84:	2b08      	cmp	r3, #8
 801ea86:	d10b      	bne.n	801eaa0 <_printf_i+0x14c>
 801ea88:	6823      	ldr	r3, [r4, #0]
 801ea8a:	07df      	lsls	r7, r3, #31
 801ea8c:	d508      	bpl.n	801eaa0 <_printf_i+0x14c>
 801ea8e:	6923      	ldr	r3, [r4, #16]
 801ea90:	6861      	ldr	r1, [r4, #4]
 801ea92:	4299      	cmp	r1, r3
 801ea94:	bfde      	ittt	le
 801ea96:	2330      	movle	r3, #48	; 0x30
 801ea98:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ea9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801eaa0:	1b92      	subs	r2, r2, r6
 801eaa2:	6122      	str	r2, [r4, #16]
 801eaa4:	f8cd a000 	str.w	sl, [sp]
 801eaa8:	464b      	mov	r3, r9
 801eaaa:	aa03      	add	r2, sp, #12
 801eaac:	4621      	mov	r1, r4
 801eaae:	4640      	mov	r0, r8
 801eab0:	f7ff fee2 	bl	801e878 <_printf_common>
 801eab4:	3001      	adds	r0, #1
 801eab6:	d14c      	bne.n	801eb52 <_printf_i+0x1fe>
 801eab8:	f04f 30ff 	mov.w	r0, #4294967295
 801eabc:	b004      	add	sp, #16
 801eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eac2:	4835      	ldr	r0, [pc, #212]	; (801eb98 <_printf_i+0x244>)
 801eac4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801eac8:	6823      	ldr	r3, [r4, #0]
 801eaca:	680e      	ldr	r6, [r1, #0]
 801eacc:	061f      	lsls	r7, r3, #24
 801eace:	f856 5b04 	ldr.w	r5, [r6], #4
 801ead2:	600e      	str	r6, [r1, #0]
 801ead4:	d514      	bpl.n	801eb00 <_printf_i+0x1ac>
 801ead6:	07d9      	lsls	r1, r3, #31
 801ead8:	bf44      	itt	mi
 801eada:	f043 0320 	orrmi.w	r3, r3, #32
 801eade:	6023      	strmi	r3, [r4, #0]
 801eae0:	b91d      	cbnz	r5, 801eaea <_printf_i+0x196>
 801eae2:	6823      	ldr	r3, [r4, #0]
 801eae4:	f023 0320 	bic.w	r3, r3, #32
 801eae8:	6023      	str	r3, [r4, #0]
 801eaea:	2310      	movs	r3, #16
 801eaec:	e7b0      	b.n	801ea50 <_printf_i+0xfc>
 801eaee:	6823      	ldr	r3, [r4, #0]
 801eaf0:	f043 0320 	orr.w	r3, r3, #32
 801eaf4:	6023      	str	r3, [r4, #0]
 801eaf6:	2378      	movs	r3, #120	; 0x78
 801eaf8:	4828      	ldr	r0, [pc, #160]	; (801eb9c <_printf_i+0x248>)
 801eafa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eafe:	e7e3      	b.n	801eac8 <_printf_i+0x174>
 801eb00:	065e      	lsls	r6, r3, #25
 801eb02:	bf48      	it	mi
 801eb04:	b2ad      	uxthmi	r5, r5
 801eb06:	e7e6      	b.n	801ead6 <_printf_i+0x182>
 801eb08:	4616      	mov	r6, r2
 801eb0a:	e7bb      	b.n	801ea84 <_printf_i+0x130>
 801eb0c:	680b      	ldr	r3, [r1, #0]
 801eb0e:	6826      	ldr	r6, [r4, #0]
 801eb10:	6960      	ldr	r0, [r4, #20]
 801eb12:	1d1d      	adds	r5, r3, #4
 801eb14:	600d      	str	r5, [r1, #0]
 801eb16:	0635      	lsls	r5, r6, #24
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	d501      	bpl.n	801eb20 <_printf_i+0x1cc>
 801eb1c:	6018      	str	r0, [r3, #0]
 801eb1e:	e002      	b.n	801eb26 <_printf_i+0x1d2>
 801eb20:	0671      	lsls	r1, r6, #25
 801eb22:	d5fb      	bpl.n	801eb1c <_printf_i+0x1c8>
 801eb24:	8018      	strh	r0, [r3, #0]
 801eb26:	2300      	movs	r3, #0
 801eb28:	6123      	str	r3, [r4, #16]
 801eb2a:	4616      	mov	r6, r2
 801eb2c:	e7ba      	b.n	801eaa4 <_printf_i+0x150>
 801eb2e:	680b      	ldr	r3, [r1, #0]
 801eb30:	1d1a      	adds	r2, r3, #4
 801eb32:	600a      	str	r2, [r1, #0]
 801eb34:	681e      	ldr	r6, [r3, #0]
 801eb36:	6862      	ldr	r2, [r4, #4]
 801eb38:	2100      	movs	r1, #0
 801eb3a:	4630      	mov	r0, r6
 801eb3c:	f7e1 fb68 	bl	8000210 <memchr>
 801eb40:	b108      	cbz	r0, 801eb46 <_printf_i+0x1f2>
 801eb42:	1b80      	subs	r0, r0, r6
 801eb44:	6060      	str	r0, [r4, #4]
 801eb46:	6863      	ldr	r3, [r4, #4]
 801eb48:	6123      	str	r3, [r4, #16]
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb50:	e7a8      	b.n	801eaa4 <_printf_i+0x150>
 801eb52:	6923      	ldr	r3, [r4, #16]
 801eb54:	4632      	mov	r2, r6
 801eb56:	4649      	mov	r1, r9
 801eb58:	4640      	mov	r0, r8
 801eb5a:	47d0      	blx	sl
 801eb5c:	3001      	adds	r0, #1
 801eb5e:	d0ab      	beq.n	801eab8 <_printf_i+0x164>
 801eb60:	6823      	ldr	r3, [r4, #0]
 801eb62:	079b      	lsls	r3, r3, #30
 801eb64:	d413      	bmi.n	801eb8e <_printf_i+0x23a>
 801eb66:	68e0      	ldr	r0, [r4, #12]
 801eb68:	9b03      	ldr	r3, [sp, #12]
 801eb6a:	4298      	cmp	r0, r3
 801eb6c:	bfb8      	it	lt
 801eb6e:	4618      	movlt	r0, r3
 801eb70:	e7a4      	b.n	801eabc <_printf_i+0x168>
 801eb72:	2301      	movs	r3, #1
 801eb74:	4632      	mov	r2, r6
 801eb76:	4649      	mov	r1, r9
 801eb78:	4640      	mov	r0, r8
 801eb7a:	47d0      	blx	sl
 801eb7c:	3001      	adds	r0, #1
 801eb7e:	d09b      	beq.n	801eab8 <_printf_i+0x164>
 801eb80:	3501      	adds	r5, #1
 801eb82:	68e3      	ldr	r3, [r4, #12]
 801eb84:	9903      	ldr	r1, [sp, #12]
 801eb86:	1a5b      	subs	r3, r3, r1
 801eb88:	42ab      	cmp	r3, r5
 801eb8a:	dcf2      	bgt.n	801eb72 <_printf_i+0x21e>
 801eb8c:	e7eb      	b.n	801eb66 <_printf_i+0x212>
 801eb8e:	2500      	movs	r5, #0
 801eb90:	f104 0619 	add.w	r6, r4, #25
 801eb94:	e7f5      	b.n	801eb82 <_printf_i+0x22e>
 801eb96:	bf00      	nop
 801eb98:	080235d1 	.word	0x080235d1
 801eb9c:	080235e2 	.word	0x080235e2

0801eba0 <_sbrk_r>:
 801eba0:	b538      	push	{r3, r4, r5, lr}
 801eba2:	4d06      	ldr	r5, [pc, #24]	; (801ebbc <_sbrk_r+0x1c>)
 801eba4:	2300      	movs	r3, #0
 801eba6:	4604      	mov	r4, r0
 801eba8:	4608      	mov	r0, r1
 801ebaa:	602b      	str	r3, [r5, #0]
 801ebac:	f7e2 fa1a 	bl	8000fe4 <_sbrk>
 801ebb0:	1c43      	adds	r3, r0, #1
 801ebb2:	d102      	bne.n	801ebba <_sbrk_r+0x1a>
 801ebb4:	682b      	ldr	r3, [r5, #0]
 801ebb6:	b103      	cbz	r3, 801ebba <_sbrk_r+0x1a>
 801ebb8:	6023      	str	r3, [r4, #0]
 801ebba:	bd38      	pop	{r3, r4, r5, pc}
 801ebbc:	2000a098 	.word	0x2000a098

0801ebc0 <_raise_r>:
 801ebc0:	291f      	cmp	r1, #31
 801ebc2:	b538      	push	{r3, r4, r5, lr}
 801ebc4:	4604      	mov	r4, r0
 801ebc6:	460d      	mov	r5, r1
 801ebc8:	d904      	bls.n	801ebd4 <_raise_r+0x14>
 801ebca:	2316      	movs	r3, #22
 801ebcc:	6003      	str	r3, [r0, #0]
 801ebce:	f04f 30ff 	mov.w	r0, #4294967295
 801ebd2:	bd38      	pop	{r3, r4, r5, pc}
 801ebd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ebd6:	b112      	cbz	r2, 801ebde <_raise_r+0x1e>
 801ebd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ebdc:	b94b      	cbnz	r3, 801ebf2 <_raise_r+0x32>
 801ebde:	4620      	mov	r0, r4
 801ebe0:	f000 f830 	bl	801ec44 <_getpid_r>
 801ebe4:	462a      	mov	r2, r5
 801ebe6:	4601      	mov	r1, r0
 801ebe8:	4620      	mov	r0, r4
 801ebea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ebee:	f000 b817 	b.w	801ec20 <_kill_r>
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d00a      	beq.n	801ec0c <_raise_r+0x4c>
 801ebf6:	1c59      	adds	r1, r3, #1
 801ebf8:	d103      	bne.n	801ec02 <_raise_r+0x42>
 801ebfa:	2316      	movs	r3, #22
 801ebfc:	6003      	str	r3, [r0, #0]
 801ebfe:	2001      	movs	r0, #1
 801ec00:	e7e7      	b.n	801ebd2 <_raise_r+0x12>
 801ec02:	2400      	movs	r4, #0
 801ec04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ec08:	4628      	mov	r0, r5
 801ec0a:	4798      	blx	r3
 801ec0c:	2000      	movs	r0, #0
 801ec0e:	e7e0      	b.n	801ebd2 <_raise_r+0x12>

0801ec10 <raise>:
 801ec10:	4b02      	ldr	r3, [pc, #8]	; (801ec1c <raise+0xc>)
 801ec12:	4601      	mov	r1, r0
 801ec14:	6818      	ldr	r0, [r3, #0]
 801ec16:	f7ff bfd3 	b.w	801ebc0 <_raise_r>
 801ec1a:	bf00      	nop
 801ec1c:	20000090 	.word	0x20000090

0801ec20 <_kill_r>:
 801ec20:	b538      	push	{r3, r4, r5, lr}
 801ec22:	4d07      	ldr	r5, [pc, #28]	; (801ec40 <_kill_r+0x20>)
 801ec24:	2300      	movs	r3, #0
 801ec26:	4604      	mov	r4, r0
 801ec28:	4608      	mov	r0, r1
 801ec2a:	4611      	mov	r1, r2
 801ec2c:	602b      	str	r3, [r5, #0]
 801ec2e:	f7e2 f96d 	bl	8000f0c <_kill>
 801ec32:	1c43      	adds	r3, r0, #1
 801ec34:	d102      	bne.n	801ec3c <_kill_r+0x1c>
 801ec36:	682b      	ldr	r3, [r5, #0]
 801ec38:	b103      	cbz	r3, 801ec3c <_kill_r+0x1c>
 801ec3a:	6023      	str	r3, [r4, #0]
 801ec3c:	bd38      	pop	{r3, r4, r5, pc}
 801ec3e:	bf00      	nop
 801ec40:	2000a098 	.word	0x2000a098

0801ec44 <_getpid_r>:
 801ec44:	f7e2 b95a 	b.w	8000efc <_getpid>

0801ec48 <__swbuf_r>:
 801ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec4a:	460e      	mov	r6, r1
 801ec4c:	4614      	mov	r4, r2
 801ec4e:	4605      	mov	r5, r0
 801ec50:	b118      	cbz	r0, 801ec5a <__swbuf_r+0x12>
 801ec52:	6983      	ldr	r3, [r0, #24]
 801ec54:	b90b      	cbnz	r3, 801ec5a <__swbuf_r+0x12>
 801ec56:	f000 fa33 	bl	801f0c0 <__sinit>
 801ec5a:	4b21      	ldr	r3, [pc, #132]	; (801ece0 <__swbuf_r+0x98>)
 801ec5c:	429c      	cmp	r4, r3
 801ec5e:	d12b      	bne.n	801ecb8 <__swbuf_r+0x70>
 801ec60:	686c      	ldr	r4, [r5, #4]
 801ec62:	69a3      	ldr	r3, [r4, #24]
 801ec64:	60a3      	str	r3, [r4, #8]
 801ec66:	89a3      	ldrh	r3, [r4, #12]
 801ec68:	071a      	lsls	r2, r3, #28
 801ec6a:	d52f      	bpl.n	801eccc <__swbuf_r+0x84>
 801ec6c:	6923      	ldr	r3, [r4, #16]
 801ec6e:	b36b      	cbz	r3, 801eccc <__swbuf_r+0x84>
 801ec70:	6923      	ldr	r3, [r4, #16]
 801ec72:	6820      	ldr	r0, [r4, #0]
 801ec74:	1ac0      	subs	r0, r0, r3
 801ec76:	6963      	ldr	r3, [r4, #20]
 801ec78:	b2f6      	uxtb	r6, r6
 801ec7a:	4283      	cmp	r3, r0
 801ec7c:	4637      	mov	r7, r6
 801ec7e:	dc04      	bgt.n	801ec8a <__swbuf_r+0x42>
 801ec80:	4621      	mov	r1, r4
 801ec82:	4628      	mov	r0, r5
 801ec84:	f000 f988 	bl	801ef98 <_fflush_r>
 801ec88:	bb30      	cbnz	r0, 801ecd8 <__swbuf_r+0x90>
 801ec8a:	68a3      	ldr	r3, [r4, #8]
 801ec8c:	3b01      	subs	r3, #1
 801ec8e:	60a3      	str	r3, [r4, #8]
 801ec90:	6823      	ldr	r3, [r4, #0]
 801ec92:	1c5a      	adds	r2, r3, #1
 801ec94:	6022      	str	r2, [r4, #0]
 801ec96:	701e      	strb	r6, [r3, #0]
 801ec98:	6963      	ldr	r3, [r4, #20]
 801ec9a:	3001      	adds	r0, #1
 801ec9c:	4283      	cmp	r3, r0
 801ec9e:	d004      	beq.n	801ecaa <__swbuf_r+0x62>
 801eca0:	89a3      	ldrh	r3, [r4, #12]
 801eca2:	07db      	lsls	r3, r3, #31
 801eca4:	d506      	bpl.n	801ecb4 <__swbuf_r+0x6c>
 801eca6:	2e0a      	cmp	r6, #10
 801eca8:	d104      	bne.n	801ecb4 <__swbuf_r+0x6c>
 801ecaa:	4621      	mov	r1, r4
 801ecac:	4628      	mov	r0, r5
 801ecae:	f000 f973 	bl	801ef98 <_fflush_r>
 801ecb2:	b988      	cbnz	r0, 801ecd8 <__swbuf_r+0x90>
 801ecb4:	4638      	mov	r0, r7
 801ecb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecb8:	4b0a      	ldr	r3, [pc, #40]	; (801ece4 <__swbuf_r+0x9c>)
 801ecba:	429c      	cmp	r4, r3
 801ecbc:	d101      	bne.n	801ecc2 <__swbuf_r+0x7a>
 801ecbe:	68ac      	ldr	r4, [r5, #8]
 801ecc0:	e7cf      	b.n	801ec62 <__swbuf_r+0x1a>
 801ecc2:	4b09      	ldr	r3, [pc, #36]	; (801ece8 <__swbuf_r+0xa0>)
 801ecc4:	429c      	cmp	r4, r3
 801ecc6:	bf08      	it	eq
 801ecc8:	68ec      	ldreq	r4, [r5, #12]
 801ecca:	e7ca      	b.n	801ec62 <__swbuf_r+0x1a>
 801eccc:	4621      	mov	r1, r4
 801ecce:	4628      	mov	r0, r5
 801ecd0:	f000 f80c 	bl	801ecec <__swsetup_r>
 801ecd4:	2800      	cmp	r0, #0
 801ecd6:	d0cb      	beq.n	801ec70 <__swbuf_r+0x28>
 801ecd8:	f04f 37ff 	mov.w	r7, #4294967295
 801ecdc:	e7ea      	b.n	801ecb4 <__swbuf_r+0x6c>
 801ecde:	bf00      	nop
 801ece0:	08023618 	.word	0x08023618
 801ece4:	08023638 	.word	0x08023638
 801ece8:	080235f8 	.word	0x080235f8

0801ecec <__swsetup_r>:
 801ecec:	4b32      	ldr	r3, [pc, #200]	; (801edb8 <__swsetup_r+0xcc>)
 801ecee:	b570      	push	{r4, r5, r6, lr}
 801ecf0:	681d      	ldr	r5, [r3, #0]
 801ecf2:	4606      	mov	r6, r0
 801ecf4:	460c      	mov	r4, r1
 801ecf6:	b125      	cbz	r5, 801ed02 <__swsetup_r+0x16>
 801ecf8:	69ab      	ldr	r3, [r5, #24]
 801ecfa:	b913      	cbnz	r3, 801ed02 <__swsetup_r+0x16>
 801ecfc:	4628      	mov	r0, r5
 801ecfe:	f000 f9df 	bl	801f0c0 <__sinit>
 801ed02:	4b2e      	ldr	r3, [pc, #184]	; (801edbc <__swsetup_r+0xd0>)
 801ed04:	429c      	cmp	r4, r3
 801ed06:	d10f      	bne.n	801ed28 <__swsetup_r+0x3c>
 801ed08:	686c      	ldr	r4, [r5, #4]
 801ed0a:	89a3      	ldrh	r3, [r4, #12]
 801ed0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ed10:	0719      	lsls	r1, r3, #28
 801ed12:	d42c      	bmi.n	801ed6e <__swsetup_r+0x82>
 801ed14:	06dd      	lsls	r5, r3, #27
 801ed16:	d411      	bmi.n	801ed3c <__swsetup_r+0x50>
 801ed18:	2309      	movs	r3, #9
 801ed1a:	6033      	str	r3, [r6, #0]
 801ed1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ed20:	81a3      	strh	r3, [r4, #12]
 801ed22:	f04f 30ff 	mov.w	r0, #4294967295
 801ed26:	e03e      	b.n	801eda6 <__swsetup_r+0xba>
 801ed28:	4b25      	ldr	r3, [pc, #148]	; (801edc0 <__swsetup_r+0xd4>)
 801ed2a:	429c      	cmp	r4, r3
 801ed2c:	d101      	bne.n	801ed32 <__swsetup_r+0x46>
 801ed2e:	68ac      	ldr	r4, [r5, #8]
 801ed30:	e7eb      	b.n	801ed0a <__swsetup_r+0x1e>
 801ed32:	4b24      	ldr	r3, [pc, #144]	; (801edc4 <__swsetup_r+0xd8>)
 801ed34:	429c      	cmp	r4, r3
 801ed36:	bf08      	it	eq
 801ed38:	68ec      	ldreq	r4, [r5, #12]
 801ed3a:	e7e6      	b.n	801ed0a <__swsetup_r+0x1e>
 801ed3c:	0758      	lsls	r0, r3, #29
 801ed3e:	d512      	bpl.n	801ed66 <__swsetup_r+0x7a>
 801ed40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed42:	b141      	cbz	r1, 801ed56 <__swsetup_r+0x6a>
 801ed44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed48:	4299      	cmp	r1, r3
 801ed4a:	d002      	beq.n	801ed52 <__swsetup_r+0x66>
 801ed4c:	4630      	mov	r0, r6
 801ed4e:	f7ff fb8f 	bl	801e470 <_free_r>
 801ed52:	2300      	movs	r3, #0
 801ed54:	6363      	str	r3, [r4, #52]	; 0x34
 801ed56:	89a3      	ldrh	r3, [r4, #12]
 801ed58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ed5c:	81a3      	strh	r3, [r4, #12]
 801ed5e:	2300      	movs	r3, #0
 801ed60:	6063      	str	r3, [r4, #4]
 801ed62:	6923      	ldr	r3, [r4, #16]
 801ed64:	6023      	str	r3, [r4, #0]
 801ed66:	89a3      	ldrh	r3, [r4, #12]
 801ed68:	f043 0308 	orr.w	r3, r3, #8
 801ed6c:	81a3      	strh	r3, [r4, #12]
 801ed6e:	6923      	ldr	r3, [r4, #16]
 801ed70:	b94b      	cbnz	r3, 801ed86 <__swsetup_r+0x9a>
 801ed72:	89a3      	ldrh	r3, [r4, #12]
 801ed74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ed78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ed7c:	d003      	beq.n	801ed86 <__swsetup_r+0x9a>
 801ed7e:	4621      	mov	r1, r4
 801ed80:	4630      	mov	r0, r6
 801ed82:	f000 fa63 	bl	801f24c <__smakebuf_r>
 801ed86:	89a0      	ldrh	r0, [r4, #12]
 801ed88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ed8c:	f010 0301 	ands.w	r3, r0, #1
 801ed90:	d00a      	beq.n	801eda8 <__swsetup_r+0xbc>
 801ed92:	2300      	movs	r3, #0
 801ed94:	60a3      	str	r3, [r4, #8]
 801ed96:	6963      	ldr	r3, [r4, #20]
 801ed98:	425b      	negs	r3, r3
 801ed9a:	61a3      	str	r3, [r4, #24]
 801ed9c:	6923      	ldr	r3, [r4, #16]
 801ed9e:	b943      	cbnz	r3, 801edb2 <__swsetup_r+0xc6>
 801eda0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801eda4:	d1ba      	bne.n	801ed1c <__swsetup_r+0x30>
 801eda6:	bd70      	pop	{r4, r5, r6, pc}
 801eda8:	0781      	lsls	r1, r0, #30
 801edaa:	bf58      	it	pl
 801edac:	6963      	ldrpl	r3, [r4, #20]
 801edae:	60a3      	str	r3, [r4, #8]
 801edb0:	e7f4      	b.n	801ed9c <__swsetup_r+0xb0>
 801edb2:	2000      	movs	r0, #0
 801edb4:	e7f7      	b.n	801eda6 <__swsetup_r+0xba>
 801edb6:	bf00      	nop
 801edb8:	20000090 	.word	0x20000090
 801edbc:	08023618 	.word	0x08023618
 801edc0:	08023638 	.word	0x08023638
 801edc4:	080235f8 	.word	0x080235f8

0801edc8 <__register_exitproc>:
 801edc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edcc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ee88 <__register_exitproc+0xc0>
 801edd0:	4606      	mov	r6, r0
 801edd2:	f8d8 0000 	ldr.w	r0, [r8]
 801edd6:	461f      	mov	r7, r3
 801edd8:	460d      	mov	r5, r1
 801edda:	4691      	mov	r9, r2
 801eddc:	f000 fa0e 	bl	801f1fc <__retarget_lock_acquire_recursive>
 801ede0:	4b25      	ldr	r3, [pc, #148]	; (801ee78 <__register_exitproc+0xb0>)
 801ede2:	681c      	ldr	r4, [r3, #0]
 801ede4:	b934      	cbnz	r4, 801edf4 <__register_exitproc+0x2c>
 801ede6:	4c25      	ldr	r4, [pc, #148]	; (801ee7c <__register_exitproc+0xb4>)
 801ede8:	601c      	str	r4, [r3, #0]
 801edea:	4b25      	ldr	r3, [pc, #148]	; (801ee80 <__register_exitproc+0xb8>)
 801edec:	b113      	cbz	r3, 801edf4 <__register_exitproc+0x2c>
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801edf4:	6863      	ldr	r3, [r4, #4]
 801edf6:	2b1f      	cmp	r3, #31
 801edf8:	dd07      	ble.n	801ee0a <__register_exitproc+0x42>
 801edfa:	f8d8 0000 	ldr.w	r0, [r8]
 801edfe:	f000 f9ff 	bl	801f200 <__retarget_lock_release_recursive>
 801ee02:	f04f 30ff 	mov.w	r0, #4294967295
 801ee06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee0a:	b34e      	cbz	r6, 801ee60 <__register_exitproc+0x98>
 801ee0c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ee10:	b988      	cbnz	r0, 801ee36 <__register_exitproc+0x6e>
 801ee12:	4b1c      	ldr	r3, [pc, #112]	; (801ee84 <__register_exitproc+0xbc>)
 801ee14:	b923      	cbnz	r3, 801ee20 <__register_exitproc+0x58>
 801ee16:	f8d8 0000 	ldr.w	r0, [r8]
 801ee1a:	f000 f9f0 	bl	801f1fe <__retarget_lock_release>
 801ee1e:	e7f0      	b.n	801ee02 <__register_exitproc+0x3a>
 801ee20:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ee24:	f7ff fafe 	bl	801e424 <malloc>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	d0f4      	beq.n	801ee16 <__register_exitproc+0x4e>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ee32:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ee36:	6863      	ldr	r3, [r4, #4]
 801ee38:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ee3c:	2201      	movs	r2, #1
 801ee3e:	409a      	lsls	r2, r3
 801ee40:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ee44:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ee48:	4313      	orrs	r3, r2
 801ee4a:	2e02      	cmp	r6, #2
 801ee4c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ee50:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ee54:	bf02      	ittt	eq
 801ee56:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ee5a:	431a      	orreq	r2, r3
 801ee5c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801ee60:	6863      	ldr	r3, [r4, #4]
 801ee62:	f8d8 0000 	ldr.w	r0, [r8]
 801ee66:	1c5a      	adds	r2, r3, #1
 801ee68:	3302      	adds	r3, #2
 801ee6a:	6062      	str	r2, [r4, #4]
 801ee6c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ee70:	f000 f9c6 	bl	801f200 <__retarget_lock_release_recursive>
 801ee74:	2000      	movs	r0, #0
 801ee76:	e7c6      	b.n	801ee06 <__register_exitproc+0x3e>
 801ee78:	20009e8c 	.word	0x20009e8c
 801ee7c:	20009e00 	.word	0x20009e00
 801ee80:	080235f4 	.word	0x080235f4
 801ee84:	0801e425 	.word	0x0801e425
 801ee88:	200000f4 	.word	0x200000f4

0801ee8c <__sflush_r>:
 801ee8c:	898a      	ldrh	r2, [r1, #12]
 801ee8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee92:	4605      	mov	r5, r0
 801ee94:	0710      	lsls	r0, r2, #28
 801ee96:	460c      	mov	r4, r1
 801ee98:	d458      	bmi.n	801ef4c <__sflush_r+0xc0>
 801ee9a:	684b      	ldr	r3, [r1, #4]
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	dc05      	bgt.n	801eeac <__sflush_r+0x20>
 801eea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	dc02      	bgt.n	801eeac <__sflush_r+0x20>
 801eea6:	2000      	movs	r0, #0
 801eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eeac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eeae:	2e00      	cmp	r6, #0
 801eeb0:	d0f9      	beq.n	801eea6 <__sflush_r+0x1a>
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eeb8:	682f      	ldr	r7, [r5, #0]
 801eeba:	602b      	str	r3, [r5, #0]
 801eebc:	d032      	beq.n	801ef24 <__sflush_r+0x98>
 801eebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eec0:	89a3      	ldrh	r3, [r4, #12]
 801eec2:	075a      	lsls	r2, r3, #29
 801eec4:	d505      	bpl.n	801eed2 <__sflush_r+0x46>
 801eec6:	6863      	ldr	r3, [r4, #4]
 801eec8:	1ac0      	subs	r0, r0, r3
 801eeca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eecc:	b10b      	cbz	r3, 801eed2 <__sflush_r+0x46>
 801eece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eed0:	1ac0      	subs	r0, r0, r3
 801eed2:	2300      	movs	r3, #0
 801eed4:	4602      	mov	r2, r0
 801eed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eed8:	6a21      	ldr	r1, [r4, #32]
 801eeda:	4628      	mov	r0, r5
 801eedc:	47b0      	blx	r6
 801eede:	1c43      	adds	r3, r0, #1
 801eee0:	89a3      	ldrh	r3, [r4, #12]
 801eee2:	d106      	bne.n	801eef2 <__sflush_r+0x66>
 801eee4:	6829      	ldr	r1, [r5, #0]
 801eee6:	291d      	cmp	r1, #29
 801eee8:	d82c      	bhi.n	801ef44 <__sflush_r+0xb8>
 801eeea:	4a2a      	ldr	r2, [pc, #168]	; (801ef94 <__sflush_r+0x108>)
 801eeec:	40ca      	lsrs	r2, r1
 801eeee:	07d6      	lsls	r6, r2, #31
 801eef0:	d528      	bpl.n	801ef44 <__sflush_r+0xb8>
 801eef2:	2200      	movs	r2, #0
 801eef4:	6062      	str	r2, [r4, #4]
 801eef6:	04d9      	lsls	r1, r3, #19
 801eef8:	6922      	ldr	r2, [r4, #16]
 801eefa:	6022      	str	r2, [r4, #0]
 801eefc:	d504      	bpl.n	801ef08 <__sflush_r+0x7c>
 801eefe:	1c42      	adds	r2, r0, #1
 801ef00:	d101      	bne.n	801ef06 <__sflush_r+0x7a>
 801ef02:	682b      	ldr	r3, [r5, #0]
 801ef04:	b903      	cbnz	r3, 801ef08 <__sflush_r+0x7c>
 801ef06:	6560      	str	r0, [r4, #84]	; 0x54
 801ef08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef0a:	602f      	str	r7, [r5, #0]
 801ef0c:	2900      	cmp	r1, #0
 801ef0e:	d0ca      	beq.n	801eea6 <__sflush_r+0x1a>
 801ef10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef14:	4299      	cmp	r1, r3
 801ef16:	d002      	beq.n	801ef1e <__sflush_r+0x92>
 801ef18:	4628      	mov	r0, r5
 801ef1a:	f7ff faa9 	bl	801e470 <_free_r>
 801ef1e:	2000      	movs	r0, #0
 801ef20:	6360      	str	r0, [r4, #52]	; 0x34
 801ef22:	e7c1      	b.n	801eea8 <__sflush_r+0x1c>
 801ef24:	6a21      	ldr	r1, [r4, #32]
 801ef26:	2301      	movs	r3, #1
 801ef28:	4628      	mov	r0, r5
 801ef2a:	47b0      	blx	r6
 801ef2c:	1c41      	adds	r1, r0, #1
 801ef2e:	d1c7      	bne.n	801eec0 <__sflush_r+0x34>
 801ef30:	682b      	ldr	r3, [r5, #0]
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	d0c4      	beq.n	801eec0 <__sflush_r+0x34>
 801ef36:	2b1d      	cmp	r3, #29
 801ef38:	d001      	beq.n	801ef3e <__sflush_r+0xb2>
 801ef3a:	2b16      	cmp	r3, #22
 801ef3c:	d101      	bne.n	801ef42 <__sflush_r+0xb6>
 801ef3e:	602f      	str	r7, [r5, #0]
 801ef40:	e7b1      	b.n	801eea6 <__sflush_r+0x1a>
 801ef42:	89a3      	ldrh	r3, [r4, #12]
 801ef44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef48:	81a3      	strh	r3, [r4, #12]
 801ef4a:	e7ad      	b.n	801eea8 <__sflush_r+0x1c>
 801ef4c:	690f      	ldr	r7, [r1, #16]
 801ef4e:	2f00      	cmp	r7, #0
 801ef50:	d0a9      	beq.n	801eea6 <__sflush_r+0x1a>
 801ef52:	0793      	lsls	r3, r2, #30
 801ef54:	680e      	ldr	r6, [r1, #0]
 801ef56:	bf08      	it	eq
 801ef58:	694b      	ldreq	r3, [r1, #20]
 801ef5a:	600f      	str	r7, [r1, #0]
 801ef5c:	bf18      	it	ne
 801ef5e:	2300      	movne	r3, #0
 801ef60:	eba6 0807 	sub.w	r8, r6, r7
 801ef64:	608b      	str	r3, [r1, #8]
 801ef66:	f1b8 0f00 	cmp.w	r8, #0
 801ef6a:	dd9c      	ble.n	801eea6 <__sflush_r+0x1a>
 801ef6c:	6a21      	ldr	r1, [r4, #32]
 801ef6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ef70:	4643      	mov	r3, r8
 801ef72:	463a      	mov	r2, r7
 801ef74:	4628      	mov	r0, r5
 801ef76:	47b0      	blx	r6
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	dc06      	bgt.n	801ef8a <__sflush_r+0xfe>
 801ef7c:	89a3      	ldrh	r3, [r4, #12]
 801ef7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef82:	81a3      	strh	r3, [r4, #12]
 801ef84:	f04f 30ff 	mov.w	r0, #4294967295
 801ef88:	e78e      	b.n	801eea8 <__sflush_r+0x1c>
 801ef8a:	4407      	add	r7, r0
 801ef8c:	eba8 0800 	sub.w	r8, r8, r0
 801ef90:	e7e9      	b.n	801ef66 <__sflush_r+0xda>
 801ef92:	bf00      	nop
 801ef94:	20400001 	.word	0x20400001

0801ef98 <_fflush_r>:
 801ef98:	b538      	push	{r3, r4, r5, lr}
 801ef9a:	690b      	ldr	r3, [r1, #16]
 801ef9c:	4605      	mov	r5, r0
 801ef9e:	460c      	mov	r4, r1
 801efa0:	b913      	cbnz	r3, 801efa8 <_fflush_r+0x10>
 801efa2:	2500      	movs	r5, #0
 801efa4:	4628      	mov	r0, r5
 801efa6:	bd38      	pop	{r3, r4, r5, pc}
 801efa8:	b118      	cbz	r0, 801efb2 <_fflush_r+0x1a>
 801efaa:	6983      	ldr	r3, [r0, #24]
 801efac:	b90b      	cbnz	r3, 801efb2 <_fflush_r+0x1a>
 801efae:	f000 f887 	bl	801f0c0 <__sinit>
 801efb2:	4b14      	ldr	r3, [pc, #80]	; (801f004 <_fflush_r+0x6c>)
 801efb4:	429c      	cmp	r4, r3
 801efb6:	d11b      	bne.n	801eff0 <_fflush_r+0x58>
 801efb8:	686c      	ldr	r4, [r5, #4]
 801efba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d0ef      	beq.n	801efa2 <_fflush_r+0xa>
 801efc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801efc4:	07d0      	lsls	r0, r2, #31
 801efc6:	d404      	bmi.n	801efd2 <_fflush_r+0x3a>
 801efc8:	0599      	lsls	r1, r3, #22
 801efca:	d402      	bmi.n	801efd2 <_fflush_r+0x3a>
 801efcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efce:	f000 f915 	bl	801f1fc <__retarget_lock_acquire_recursive>
 801efd2:	4628      	mov	r0, r5
 801efd4:	4621      	mov	r1, r4
 801efd6:	f7ff ff59 	bl	801ee8c <__sflush_r>
 801efda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801efdc:	07da      	lsls	r2, r3, #31
 801efde:	4605      	mov	r5, r0
 801efe0:	d4e0      	bmi.n	801efa4 <_fflush_r+0xc>
 801efe2:	89a3      	ldrh	r3, [r4, #12]
 801efe4:	059b      	lsls	r3, r3, #22
 801efe6:	d4dd      	bmi.n	801efa4 <_fflush_r+0xc>
 801efe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efea:	f000 f909 	bl	801f200 <__retarget_lock_release_recursive>
 801efee:	e7d9      	b.n	801efa4 <_fflush_r+0xc>
 801eff0:	4b05      	ldr	r3, [pc, #20]	; (801f008 <_fflush_r+0x70>)
 801eff2:	429c      	cmp	r4, r3
 801eff4:	d101      	bne.n	801effa <_fflush_r+0x62>
 801eff6:	68ac      	ldr	r4, [r5, #8]
 801eff8:	e7df      	b.n	801efba <_fflush_r+0x22>
 801effa:	4b04      	ldr	r3, [pc, #16]	; (801f00c <_fflush_r+0x74>)
 801effc:	429c      	cmp	r4, r3
 801effe:	bf08      	it	eq
 801f000:	68ec      	ldreq	r4, [r5, #12]
 801f002:	e7da      	b.n	801efba <_fflush_r+0x22>
 801f004:	08023618 	.word	0x08023618
 801f008:	08023638 	.word	0x08023638
 801f00c:	080235f8 	.word	0x080235f8

0801f010 <std>:
 801f010:	2300      	movs	r3, #0
 801f012:	b510      	push	{r4, lr}
 801f014:	4604      	mov	r4, r0
 801f016:	e9c0 3300 	strd	r3, r3, [r0]
 801f01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f01e:	6083      	str	r3, [r0, #8]
 801f020:	8181      	strh	r1, [r0, #12]
 801f022:	6643      	str	r3, [r0, #100]	; 0x64
 801f024:	81c2      	strh	r2, [r0, #14]
 801f026:	6183      	str	r3, [r0, #24]
 801f028:	4619      	mov	r1, r3
 801f02a:	2208      	movs	r2, #8
 801f02c:	305c      	adds	r0, #92	; 0x5c
 801f02e:	f7ff fa17 	bl	801e460 <memset>
 801f032:	4b05      	ldr	r3, [pc, #20]	; (801f048 <std+0x38>)
 801f034:	6263      	str	r3, [r4, #36]	; 0x24
 801f036:	4b05      	ldr	r3, [pc, #20]	; (801f04c <std+0x3c>)
 801f038:	62a3      	str	r3, [r4, #40]	; 0x28
 801f03a:	4b05      	ldr	r3, [pc, #20]	; (801f050 <std+0x40>)
 801f03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f03e:	4b05      	ldr	r3, [pc, #20]	; (801f054 <std+0x44>)
 801f040:	6224      	str	r4, [r4, #32]
 801f042:	6323      	str	r3, [r4, #48]	; 0x30
 801f044:	bd10      	pop	{r4, pc}
 801f046:	bf00      	nop
 801f048:	0801f2e5 	.word	0x0801f2e5
 801f04c:	0801f307 	.word	0x0801f307
 801f050:	0801f33f 	.word	0x0801f33f
 801f054:	0801f363 	.word	0x0801f363

0801f058 <_cleanup_r>:
 801f058:	4901      	ldr	r1, [pc, #4]	; (801f060 <_cleanup_r+0x8>)
 801f05a:	f000 b8af 	b.w	801f1bc <_fwalk_reent>
 801f05e:	bf00      	nop
 801f060:	0801ef99 	.word	0x0801ef99

0801f064 <__sfmoreglue>:
 801f064:	b570      	push	{r4, r5, r6, lr}
 801f066:	1e4a      	subs	r2, r1, #1
 801f068:	2568      	movs	r5, #104	; 0x68
 801f06a:	4355      	muls	r5, r2
 801f06c:	460e      	mov	r6, r1
 801f06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f072:	f7ff fa4d 	bl	801e510 <_malloc_r>
 801f076:	4604      	mov	r4, r0
 801f078:	b140      	cbz	r0, 801f08c <__sfmoreglue+0x28>
 801f07a:	2100      	movs	r1, #0
 801f07c:	e9c0 1600 	strd	r1, r6, [r0]
 801f080:	300c      	adds	r0, #12
 801f082:	60a0      	str	r0, [r4, #8]
 801f084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f088:	f7ff f9ea 	bl	801e460 <memset>
 801f08c:	4620      	mov	r0, r4
 801f08e:	bd70      	pop	{r4, r5, r6, pc}

0801f090 <__sfp_lock_acquire>:
 801f090:	4801      	ldr	r0, [pc, #4]	; (801f098 <__sfp_lock_acquire+0x8>)
 801f092:	f000 b8b3 	b.w	801f1fc <__retarget_lock_acquire_recursive>
 801f096:	bf00      	nop
 801f098:	2000a094 	.word	0x2000a094

0801f09c <__sfp_lock_release>:
 801f09c:	4801      	ldr	r0, [pc, #4]	; (801f0a4 <__sfp_lock_release+0x8>)
 801f09e:	f000 b8af 	b.w	801f200 <__retarget_lock_release_recursive>
 801f0a2:	bf00      	nop
 801f0a4:	2000a094 	.word	0x2000a094

0801f0a8 <__sinit_lock_acquire>:
 801f0a8:	4801      	ldr	r0, [pc, #4]	; (801f0b0 <__sinit_lock_acquire+0x8>)
 801f0aa:	f000 b8a7 	b.w	801f1fc <__retarget_lock_acquire_recursive>
 801f0ae:	bf00      	nop
 801f0b0:	2000a08f 	.word	0x2000a08f

0801f0b4 <__sinit_lock_release>:
 801f0b4:	4801      	ldr	r0, [pc, #4]	; (801f0bc <__sinit_lock_release+0x8>)
 801f0b6:	f000 b8a3 	b.w	801f200 <__retarget_lock_release_recursive>
 801f0ba:	bf00      	nop
 801f0bc:	2000a08f 	.word	0x2000a08f

0801f0c0 <__sinit>:
 801f0c0:	b510      	push	{r4, lr}
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	f7ff fff0 	bl	801f0a8 <__sinit_lock_acquire>
 801f0c8:	69a3      	ldr	r3, [r4, #24]
 801f0ca:	b11b      	cbz	r3, 801f0d4 <__sinit+0x14>
 801f0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0d0:	f7ff bff0 	b.w	801f0b4 <__sinit_lock_release>
 801f0d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f0d8:	6523      	str	r3, [r4, #80]	; 0x50
 801f0da:	4b13      	ldr	r3, [pc, #76]	; (801f128 <__sinit+0x68>)
 801f0dc:	4a13      	ldr	r2, [pc, #76]	; (801f12c <__sinit+0x6c>)
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f0e2:	42a3      	cmp	r3, r4
 801f0e4:	bf04      	itt	eq
 801f0e6:	2301      	moveq	r3, #1
 801f0e8:	61a3      	streq	r3, [r4, #24]
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f000 f820 	bl	801f130 <__sfp>
 801f0f0:	6060      	str	r0, [r4, #4]
 801f0f2:	4620      	mov	r0, r4
 801f0f4:	f000 f81c 	bl	801f130 <__sfp>
 801f0f8:	60a0      	str	r0, [r4, #8]
 801f0fa:	4620      	mov	r0, r4
 801f0fc:	f000 f818 	bl	801f130 <__sfp>
 801f100:	2200      	movs	r2, #0
 801f102:	60e0      	str	r0, [r4, #12]
 801f104:	2104      	movs	r1, #4
 801f106:	6860      	ldr	r0, [r4, #4]
 801f108:	f7ff ff82 	bl	801f010 <std>
 801f10c:	68a0      	ldr	r0, [r4, #8]
 801f10e:	2201      	movs	r2, #1
 801f110:	2109      	movs	r1, #9
 801f112:	f7ff ff7d 	bl	801f010 <std>
 801f116:	68e0      	ldr	r0, [r4, #12]
 801f118:	2202      	movs	r2, #2
 801f11a:	2112      	movs	r1, #18
 801f11c:	f7ff ff78 	bl	801f010 <std>
 801f120:	2301      	movs	r3, #1
 801f122:	61a3      	str	r3, [r4, #24]
 801f124:	e7d2      	b.n	801f0cc <__sinit+0xc>
 801f126:	bf00      	nop
 801f128:	080235bc 	.word	0x080235bc
 801f12c:	0801f059 	.word	0x0801f059

0801f130 <__sfp>:
 801f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f132:	4607      	mov	r7, r0
 801f134:	f7ff ffac 	bl	801f090 <__sfp_lock_acquire>
 801f138:	4b1e      	ldr	r3, [pc, #120]	; (801f1b4 <__sfp+0x84>)
 801f13a:	681e      	ldr	r6, [r3, #0]
 801f13c:	69b3      	ldr	r3, [r6, #24]
 801f13e:	b913      	cbnz	r3, 801f146 <__sfp+0x16>
 801f140:	4630      	mov	r0, r6
 801f142:	f7ff ffbd 	bl	801f0c0 <__sinit>
 801f146:	3648      	adds	r6, #72	; 0x48
 801f148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f14c:	3b01      	subs	r3, #1
 801f14e:	d503      	bpl.n	801f158 <__sfp+0x28>
 801f150:	6833      	ldr	r3, [r6, #0]
 801f152:	b30b      	cbz	r3, 801f198 <__sfp+0x68>
 801f154:	6836      	ldr	r6, [r6, #0]
 801f156:	e7f7      	b.n	801f148 <__sfp+0x18>
 801f158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f15c:	b9d5      	cbnz	r5, 801f194 <__sfp+0x64>
 801f15e:	4b16      	ldr	r3, [pc, #88]	; (801f1b8 <__sfp+0x88>)
 801f160:	60e3      	str	r3, [r4, #12]
 801f162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f166:	6665      	str	r5, [r4, #100]	; 0x64
 801f168:	f000 f847 	bl	801f1fa <__retarget_lock_init_recursive>
 801f16c:	f7ff ff96 	bl	801f09c <__sfp_lock_release>
 801f170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f178:	6025      	str	r5, [r4, #0]
 801f17a:	61a5      	str	r5, [r4, #24]
 801f17c:	2208      	movs	r2, #8
 801f17e:	4629      	mov	r1, r5
 801f180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f184:	f7ff f96c 	bl	801e460 <memset>
 801f188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f190:	4620      	mov	r0, r4
 801f192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f194:	3468      	adds	r4, #104	; 0x68
 801f196:	e7d9      	b.n	801f14c <__sfp+0x1c>
 801f198:	2104      	movs	r1, #4
 801f19a:	4638      	mov	r0, r7
 801f19c:	f7ff ff62 	bl	801f064 <__sfmoreglue>
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	6030      	str	r0, [r6, #0]
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	d1d5      	bne.n	801f154 <__sfp+0x24>
 801f1a8:	f7ff ff78 	bl	801f09c <__sfp_lock_release>
 801f1ac:	230c      	movs	r3, #12
 801f1ae:	603b      	str	r3, [r7, #0]
 801f1b0:	e7ee      	b.n	801f190 <__sfp+0x60>
 801f1b2:	bf00      	nop
 801f1b4:	080235bc 	.word	0x080235bc
 801f1b8:	ffff0001 	.word	0xffff0001

0801f1bc <_fwalk_reent>:
 801f1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1c0:	4606      	mov	r6, r0
 801f1c2:	4688      	mov	r8, r1
 801f1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f1c8:	2700      	movs	r7, #0
 801f1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f1ce:	f1b9 0901 	subs.w	r9, r9, #1
 801f1d2:	d505      	bpl.n	801f1e0 <_fwalk_reent+0x24>
 801f1d4:	6824      	ldr	r4, [r4, #0]
 801f1d6:	2c00      	cmp	r4, #0
 801f1d8:	d1f7      	bne.n	801f1ca <_fwalk_reent+0xe>
 801f1da:	4638      	mov	r0, r7
 801f1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1e0:	89ab      	ldrh	r3, [r5, #12]
 801f1e2:	2b01      	cmp	r3, #1
 801f1e4:	d907      	bls.n	801f1f6 <_fwalk_reent+0x3a>
 801f1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f1ea:	3301      	adds	r3, #1
 801f1ec:	d003      	beq.n	801f1f6 <_fwalk_reent+0x3a>
 801f1ee:	4629      	mov	r1, r5
 801f1f0:	4630      	mov	r0, r6
 801f1f2:	47c0      	blx	r8
 801f1f4:	4307      	orrs	r7, r0
 801f1f6:	3568      	adds	r5, #104	; 0x68
 801f1f8:	e7e9      	b.n	801f1ce <_fwalk_reent+0x12>

0801f1fa <__retarget_lock_init_recursive>:
 801f1fa:	4770      	bx	lr

0801f1fc <__retarget_lock_acquire_recursive>:
 801f1fc:	4770      	bx	lr

0801f1fe <__retarget_lock_release>:
 801f1fe:	4770      	bx	lr

0801f200 <__retarget_lock_release_recursive>:
 801f200:	4770      	bx	lr

0801f202 <__swhatbuf_r>:
 801f202:	b570      	push	{r4, r5, r6, lr}
 801f204:	460e      	mov	r6, r1
 801f206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f20a:	2900      	cmp	r1, #0
 801f20c:	b096      	sub	sp, #88	; 0x58
 801f20e:	4614      	mov	r4, r2
 801f210:	461d      	mov	r5, r3
 801f212:	da07      	bge.n	801f224 <__swhatbuf_r+0x22>
 801f214:	2300      	movs	r3, #0
 801f216:	602b      	str	r3, [r5, #0]
 801f218:	89b3      	ldrh	r3, [r6, #12]
 801f21a:	061a      	lsls	r2, r3, #24
 801f21c:	d410      	bmi.n	801f240 <__swhatbuf_r+0x3e>
 801f21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f222:	e00e      	b.n	801f242 <__swhatbuf_r+0x40>
 801f224:	466a      	mov	r2, sp
 801f226:	f000 f8c3 	bl	801f3b0 <_fstat_r>
 801f22a:	2800      	cmp	r0, #0
 801f22c:	dbf2      	blt.n	801f214 <__swhatbuf_r+0x12>
 801f22e:	9a01      	ldr	r2, [sp, #4]
 801f230:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f234:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f238:	425a      	negs	r2, r3
 801f23a:	415a      	adcs	r2, r3
 801f23c:	602a      	str	r2, [r5, #0]
 801f23e:	e7ee      	b.n	801f21e <__swhatbuf_r+0x1c>
 801f240:	2340      	movs	r3, #64	; 0x40
 801f242:	2000      	movs	r0, #0
 801f244:	6023      	str	r3, [r4, #0]
 801f246:	b016      	add	sp, #88	; 0x58
 801f248:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f24c <__smakebuf_r>:
 801f24c:	898b      	ldrh	r3, [r1, #12]
 801f24e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f250:	079d      	lsls	r5, r3, #30
 801f252:	4606      	mov	r6, r0
 801f254:	460c      	mov	r4, r1
 801f256:	d507      	bpl.n	801f268 <__smakebuf_r+0x1c>
 801f258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f25c:	6023      	str	r3, [r4, #0]
 801f25e:	6123      	str	r3, [r4, #16]
 801f260:	2301      	movs	r3, #1
 801f262:	6163      	str	r3, [r4, #20]
 801f264:	b002      	add	sp, #8
 801f266:	bd70      	pop	{r4, r5, r6, pc}
 801f268:	ab01      	add	r3, sp, #4
 801f26a:	466a      	mov	r2, sp
 801f26c:	f7ff ffc9 	bl	801f202 <__swhatbuf_r>
 801f270:	9900      	ldr	r1, [sp, #0]
 801f272:	4605      	mov	r5, r0
 801f274:	4630      	mov	r0, r6
 801f276:	f7ff f94b 	bl	801e510 <_malloc_r>
 801f27a:	b948      	cbnz	r0, 801f290 <__smakebuf_r+0x44>
 801f27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f280:	059a      	lsls	r2, r3, #22
 801f282:	d4ef      	bmi.n	801f264 <__smakebuf_r+0x18>
 801f284:	f023 0303 	bic.w	r3, r3, #3
 801f288:	f043 0302 	orr.w	r3, r3, #2
 801f28c:	81a3      	strh	r3, [r4, #12]
 801f28e:	e7e3      	b.n	801f258 <__smakebuf_r+0xc>
 801f290:	4b0d      	ldr	r3, [pc, #52]	; (801f2c8 <__smakebuf_r+0x7c>)
 801f292:	62b3      	str	r3, [r6, #40]	; 0x28
 801f294:	89a3      	ldrh	r3, [r4, #12]
 801f296:	6020      	str	r0, [r4, #0]
 801f298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f29c:	81a3      	strh	r3, [r4, #12]
 801f29e:	9b00      	ldr	r3, [sp, #0]
 801f2a0:	6163      	str	r3, [r4, #20]
 801f2a2:	9b01      	ldr	r3, [sp, #4]
 801f2a4:	6120      	str	r0, [r4, #16]
 801f2a6:	b15b      	cbz	r3, 801f2c0 <__smakebuf_r+0x74>
 801f2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2ac:	4630      	mov	r0, r6
 801f2ae:	f000 f891 	bl	801f3d4 <_isatty_r>
 801f2b2:	b128      	cbz	r0, 801f2c0 <__smakebuf_r+0x74>
 801f2b4:	89a3      	ldrh	r3, [r4, #12]
 801f2b6:	f023 0303 	bic.w	r3, r3, #3
 801f2ba:	f043 0301 	orr.w	r3, r3, #1
 801f2be:	81a3      	strh	r3, [r4, #12]
 801f2c0:	89a0      	ldrh	r0, [r4, #12]
 801f2c2:	4305      	orrs	r5, r0
 801f2c4:	81a5      	strh	r5, [r4, #12]
 801f2c6:	e7cd      	b.n	801f264 <__smakebuf_r+0x18>
 801f2c8:	0801f059 	.word	0x0801f059

0801f2cc <__malloc_lock>:
 801f2cc:	4801      	ldr	r0, [pc, #4]	; (801f2d4 <__malloc_lock+0x8>)
 801f2ce:	f7ff bf95 	b.w	801f1fc <__retarget_lock_acquire_recursive>
 801f2d2:	bf00      	nop
 801f2d4:	2000a090 	.word	0x2000a090

0801f2d8 <__malloc_unlock>:
 801f2d8:	4801      	ldr	r0, [pc, #4]	; (801f2e0 <__malloc_unlock+0x8>)
 801f2da:	f7ff bf91 	b.w	801f200 <__retarget_lock_release_recursive>
 801f2de:	bf00      	nop
 801f2e0:	2000a090 	.word	0x2000a090

0801f2e4 <__sread>:
 801f2e4:	b510      	push	{r4, lr}
 801f2e6:	460c      	mov	r4, r1
 801f2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2ec:	f000 f894 	bl	801f418 <_read_r>
 801f2f0:	2800      	cmp	r0, #0
 801f2f2:	bfab      	itete	ge
 801f2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f2f6:	89a3      	ldrhlt	r3, [r4, #12]
 801f2f8:	181b      	addge	r3, r3, r0
 801f2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f2fe:	bfac      	ite	ge
 801f300:	6563      	strge	r3, [r4, #84]	; 0x54
 801f302:	81a3      	strhlt	r3, [r4, #12]
 801f304:	bd10      	pop	{r4, pc}

0801f306 <__swrite>:
 801f306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f30a:	461f      	mov	r7, r3
 801f30c:	898b      	ldrh	r3, [r1, #12]
 801f30e:	05db      	lsls	r3, r3, #23
 801f310:	4605      	mov	r5, r0
 801f312:	460c      	mov	r4, r1
 801f314:	4616      	mov	r6, r2
 801f316:	d505      	bpl.n	801f324 <__swrite+0x1e>
 801f318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f31c:	2302      	movs	r3, #2
 801f31e:	2200      	movs	r2, #0
 801f320:	f000 f868 	bl	801f3f4 <_lseek_r>
 801f324:	89a3      	ldrh	r3, [r4, #12]
 801f326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f32e:	81a3      	strh	r3, [r4, #12]
 801f330:	4632      	mov	r2, r6
 801f332:	463b      	mov	r3, r7
 801f334:	4628      	mov	r0, r5
 801f336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f33a:	f000 b817 	b.w	801f36c <_write_r>

0801f33e <__sseek>:
 801f33e:	b510      	push	{r4, lr}
 801f340:	460c      	mov	r4, r1
 801f342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f346:	f000 f855 	bl	801f3f4 <_lseek_r>
 801f34a:	1c43      	adds	r3, r0, #1
 801f34c:	89a3      	ldrh	r3, [r4, #12]
 801f34e:	bf15      	itete	ne
 801f350:	6560      	strne	r0, [r4, #84]	; 0x54
 801f352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f35a:	81a3      	strheq	r3, [r4, #12]
 801f35c:	bf18      	it	ne
 801f35e:	81a3      	strhne	r3, [r4, #12]
 801f360:	bd10      	pop	{r4, pc}

0801f362 <__sclose>:
 801f362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f366:	f000 b813 	b.w	801f390 <_close_r>
	...

0801f36c <_write_r>:
 801f36c:	b538      	push	{r3, r4, r5, lr}
 801f36e:	4d07      	ldr	r5, [pc, #28]	; (801f38c <_write_r+0x20>)
 801f370:	4604      	mov	r4, r0
 801f372:	4608      	mov	r0, r1
 801f374:	4611      	mov	r1, r2
 801f376:	2200      	movs	r2, #0
 801f378:	602a      	str	r2, [r5, #0]
 801f37a:	461a      	mov	r2, r3
 801f37c:	f7e1 fc49 	bl	8000c12 <_write>
 801f380:	1c43      	adds	r3, r0, #1
 801f382:	d102      	bne.n	801f38a <_write_r+0x1e>
 801f384:	682b      	ldr	r3, [r5, #0]
 801f386:	b103      	cbz	r3, 801f38a <_write_r+0x1e>
 801f388:	6023      	str	r3, [r4, #0]
 801f38a:	bd38      	pop	{r3, r4, r5, pc}
 801f38c:	2000a098 	.word	0x2000a098

0801f390 <_close_r>:
 801f390:	b538      	push	{r3, r4, r5, lr}
 801f392:	4d06      	ldr	r5, [pc, #24]	; (801f3ac <_close_r+0x1c>)
 801f394:	2300      	movs	r3, #0
 801f396:	4604      	mov	r4, r0
 801f398:	4608      	mov	r0, r1
 801f39a:	602b      	str	r3, [r5, #0]
 801f39c:	f7e1 fded 	bl	8000f7a <_close>
 801f3a0:	1c43      	adds	r3, r0, #1
 801f3a2:	d102      	bne.n	801f3aa <_close_r+0x1a>
 801f3a4:	682b      	ldr	r3, [r5, #0]
 801f3a6:	b103      	cbz	r3, 801f3aa <_close_r+0x1a>
 801f3a8:	6023      	str	r3, [r4, #0]
 801f3aa:	bd38      	pop	{r3, r4, r5, pc}
 801f3ac:	2000a098 	.word	0x2000a098

0801f3b0 <_fstat_r>:
 801f3b0:	b538      	push	{r3, r4, r5, lr}
 801f3b2:	4d07      	ldr	r5, [pc, #28]	; (801f3d0 <_fstat_r+0x20>)
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	4604      	mov	r4, r0
 801f3b8:	4608      	mov	r0, r1
 801f3ba:	4611      	mov	r1, r2
 801f3bc:	602b      	str	r3, [r5, #0]
 801f3be:	f7e1 fde8 	bl	8000f92 <_fstat>
 801f3c2:	1c43      	adds	r3, r0, #1
 801f3c4:	d102      	bne.n	801f3cc <_fstat_r+0x1c>
 801f3c6:	682b      	ldr	r3, [r5, #0]
 801f3c8:	b103      	cbz	r3, 801f3cc <_fstat_r+0x1c>
 801f3ca:	6023      	str	r3, [r4, #0]
 801f3cc:	bd38      	pop	{r3, r4, r5, pc}
 801f3ce:	bf00      	nop
 801f3d0:	2000a098 	.word	0x2000a098

0801f3d4 <_isatty_r>:
 801f3d4:	b538      	push	{r3, r4, r5, lr}
 801f3d6:	4d06      	ldr	r5, [pc, #24]	; (801f3f0 <_isatty_r+0x1c>)
 801f3d8:	2300      	movs	r3, #0
 801f3da:	4604      	mov	r4, r0
 801f3dc:	4608      	mov	r0, r1
 801f3de:	602b      	str	r3, [r5, #0]
 801f3e0:	f7e1 fde7 	bl	8000fb2 <_isatty>
 801f3e4:	1c43      	adds	r3, r0, #1
 801f3e6:	d102      	bne.n	801f3ee <_isatty_r+0x1a>
 801f3e8:	682b      	ldr	r3, [r5, #0]
 801f3ea:	b103      	cbz	r3, 801f3ee <_isatty_r+0x1a>
 801f3ec:	6023      	str	r3, [r4, #0]
 801f3ee:	bd38      	pop	{r3, r4, r5, pc}
 801f3f0:	2000a098 	.word	0x2000a098

0801f3f4 <_lseek_r>:
 801f3f4:	b538      	push	{r3, r4, r5, lr}
 801f3f6:	4d07      	ldr	r5, [pc, #28]	; (801f414 <_lseek_r+0x20>)
 801f3f8:	4604      	mov	r4, r0
 801f3fa:	4608      	mov	r0, r1
 801f3fc:	4611      	mov	r1, r2
 801f3fe:	2200      	movs	r2, #0
 801f400:	602a      	str	r2, [r5, #0]
 801f402:	461a      	mov	r2, r3
 801f404:	f7e1 fde0 	bl	8000fc8 <_lseek>
 801f408:	1c43      	adds	r3, r0, #1
 801f40a:	d102      	bne.n	801f412 <_lseek_r+0x1e>
 801f40c:	682b      	ldr	r3, [r5, #0]
 801f40e:	b103      	cbz	r3, 801f412 <_lseek_r+0x1e>
 801f410:	6023      	str	r3, [r4, #0]
 801f412:	bd38      	pop	{r3, r4, r5, pc}
 801f414:	2000a098 	.word	0x2000a098

0801f418 <_read_r>:
 801f418:	b538      	push	{r3, r4, r5, lr}
 801f41a:	4d07      	ldr	r5, [pc, #28]	; (801f438 <_read_r+0x20>)
 801f41c:	4604      	mov	r4, r0
 801f41e:	4608      	mov	r0, r1
 801f420:	4611      	mov	r1, r2
 801f422:	2200      	movs	r2, #0
 801f424:	602a      	str	r2, [r5, #0]
 801f426:	461a      	mov	r2, r3
 801f428:	f7e1 fd8a 	bl	8000f40 <_read>
 801f42c:	1c43      	adds	r3, r0, #1
 801f42e:	d102      	bne.n	801f436 <_read_r+0x1e>
 801f430:	682b      	ldr	r3, [r5, #0]
 801f432:	b103      	cbz	r3, 801f436 <_read_r+0x1e>
 801f434:	6023      	str	r3, [r4, #0]
 801f436:	bd38      	pop	{r3, r4, r5, pc}
 801f438:	2000a098 	.word	0x2000a098

0801f43c <_init>:
 801f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f43e:	bf00      	nop
 801f440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f442:	bc08      	pop	{r3}
 801f444:	469e      	mov	lr, r3
 801f446:	4770      	bx	lr

0801f448 <_fini>:
 801f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f44a:	bf00      	nop
 801f44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f44e:	bc08      	pop	{r3}
 801f450:	469e      	mov	lr, r3
 801f452:	4770      	bx	lr
